ccopy_reg
_reconstructor
p0
(cNADE.OrderlessMoGNADE
OrderlessMoGNADE
p1
cdill._dill
_load_type
p2
(S'ObjectType'
p3
tp4
Rp5
Ntp6
Rp7
(dp8
S'b_sigma'
p9
g0
(ctheano.tensor.sharedvar
TensorSharedVariable
p10
g5
Ntp11
Rp12
(dp13
S'auto_name'
p14
S'auto_14126'
p15
sS'index'
p16
NsS'tag'
p17
g0
(ctheano.gof.utils
scratchpad
p18
g5
Ntp19
Rp20
(dp21
S'trace'
p22
(lp23
(lp24
(S'rnade_release/orderlessNADE.py'
p25
I306
S'<module>'
p26
S'nade_train( * args[1:] )'
p27
tp28
a(S'rnade_release/orderlessNADE.py'
p29
I240
S'nade_train'
p30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p31
tp32
a(S'/home/leondong/proj/ccnet/experiment/rnade_release/buml/NADE/OrderlessMoGNADE.py'
p33
I48
S'create_from_smaller_NADE'
p34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p35
tp36
a(S'/home/leondong/proj/ccnet/experiment/rnade_release/buml/NADE/OrderlessMoGNADE.py'
p37
I32
S'__init__'
p38
S'self.add_parameter(TensorParameter("b_sigma", (n_visible, n_components), theano=True), optimise=True, regularise=False)'
p39
tp40
a(S'/home/leondong/proj/ccnet/experiment/rnade_release/buml/Model/Model.py'
p41
I29
S'add_parameter'
p42
S'parameter.add_to_model(self)'
p43
tp44
a(g41
I167
S'add_to_model'
p45
S'setattr(model, self.name, theano.shared(np.zeros(self.shape, dtype=self.theano_type), self.name))'
p46
tp47
aasbsS'container'
p48
g0
(ctheano.gof.link
Container
p49
g5
Ntp50
Rp51
(dp52
S'name'
p53
g9
sS'storage'
p54
(lp55
cnumpy.core.multiarray
_reconstruct
p56
(cnumpy
ndarray
p57
(I0
tp58
S'b'
p59
tp60
Rp61
(I1
(I12
I2
tp62
cnumpy
dtype
p63
(S'f8'
p64
I0
I1
tp65
Rp66
(I3
S'<'
p67
NNNI-1
I-1
I0
tp68
bI00
S'\x83\x96x=\xf7\n\x1b\xc0i\\\xdf\xb4\xa6\xfa\x0f\xc0\xa3 \xcb\x9f#m\xf7\xbfD#\x9dD,\xc2\xf0\xbfW\xc6I\xc1\x83\xb6\x16\xc0\x068M\xf0\x8b\x11\xd4\xbf3\xb4\xd7\x8cv\xd9\x04\xc0b\x80\xc2\xc3\xc8>\x0e\xc0\xcdp\xa9\xd7\xe3\xbe\xff\xbfxf\xa6\xa4\xbaV\xf0\xbf\xd2\xc7\x12\x03\xa6\x06\xf4\xbf\xf0\xc4\x1dW\n=\xdc?\x9e\x9c\xa1\xed3\x7f\xed\xbf\xa1\xe8\x84h\x1b\x97\xe3?\xbaJ+\xe7\x10\xb5\x1c\xc0\xc7m\xf1w\xa5\x95\xe8\xbf\xb7\xd1b\x82){\xff\xbf\xfc\xef(\xb6&-\xe8\xbf\xba\xb1\xb8EY\xb3\xe3\xbf\xaex7n\x8e\x00\x85\xbf\x06vv\xd8\xd9\x8f\x14\xc0|\xf9NU][\xfa\xbfX\n\xe1"~\xf4\x14\xc0\xe1C\xb2\x1a,\xa8\xee\xbf'
p69
tp70
basS'strict'
p71
I00
sS'readonly'
p72
I00
sS'type'
p73
g0
(ctheano.tensor.type
TensorType
p74
g5
Ntp75
Rp76
(dp77
S'broadcastable'
p78
(I00
I00
tp79
sS'dtype'
p80
S'float64'
p81
sS'numpy_dtype'
p82
g66
sS'sparse_grad'
p83
I00
sg53
NsbsS'allow_downcast'
p84
Nsbsg53
g9
sS'owner'
p85
Nsg73
g76
sbsS'n_orderings'
p86
I1
sS'n_layers'
p87
I2
sS'V_alpha'
p88
g0
(g10
g5
Ntp89
Rp90
(dp91
g14
S'auto_14127'
p92
sg16
Nsg17
g0
(g18
g5
Ntp93
Rp94
(dp95
g22
(lp96
(lp97
(g25
I306
g26
S'nade_train( * args[1:] )'
p98
tp99
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p100
tp101
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p102
tp103
a(g37
I33
g38
S'self.add_parameter(TensorParameter("V_alpha", (n_visible, n_hidden, n_components), theano=True), optimise=True, regularise=False)'
p104
tp105
a(g41
I29
g42
S'parameter.add_to_model(self)'
p106
tp107
a(g41
I167
g45
S'setattr(model, self.name, theano.shared(np.zeros(self.shape, dtype=self.theano_type), self.name))'
p108
tp109
aasbsg48
g0
(g49
g5
Ntp110
Rp111
(dp112
g53
g88
sg54
(lp113
g56
(g57
(I0
tp114
g59
tp115
Rp116
(I1
(I12
I100
I2
tp117
g66
I00
S'\xaf\xb3\xce[,G\x96\xbf\xb3\xb3\xceK\x93\xdc\x98?$6x\xf6\x02\x8f\xa5\xbf%6xf\xc3\xe6\xa6?\x04rs]R\xd1\x9b\xbf)\xe4\xe6\xdaB\x0b\x82?<\x84\x13\xca\xd6b{\xbfZ\x11N\xa8uAY?\xbfzk$\xd9\xd8\xb3?\xb9zk8\xd9F\xb6\xbf\xff\x89\xe9\xb6\xefs\x88\xbf\x86\xeb,\x92\xffqy\xbf\xd4\x06\x9dv!\x9et\xbf\xf6\xa0\xd3\xb6\xa1#\xa2?\xb6H\x87 r:\xb2\xbfg\x91\x0eE\x8f\x85\xaf?\xd4\xdeW\xfa,\r\xc8\xbf\xd5\xdeW\xddGs\xc6?j\x89\xba\x14\xdbU\x87\xbf\x95%\xear\x05oi?\x8b\xe4\xde\x8cXV\x9f?Yro\xeeC|\xa3\xbfo\xe5\x0bt\xc0u\xda\xbfp\xe5\x9f\xbdd\xd2\xd9?\xbd\x88\x84\x91\t\xb0\xc0\xbf\xbd\x88\x04\xc1\xb5\x97\xc2?2\xb6Q_}\x89\x96\xbf/\xb6Q\xd3\x88\x11\x9c?\xd6\x9d\x16\xa0\xaa\x1d\xe5?\xd4\x9d\xd6\xf7\x120\xe4\xbf\x83\xfd\xb2a\x90\x9e\xc7?\x96\xfd\xf2\x1b\x89\x99\xc9\xbf\x0e\t\xdfx\xb9\xf5\xad\xbf\x95\x84o\xd4\xf5\x94\xb3?\xd0\x80\x96Yf\x05\xbf\xbf`@K\x1c\xf5\xcd\xc0?\xd6\xbc0\xc4J\x9c\xd0?\xd6\xbcp\xcb\xe0\xa4\xd0\xbf\xbb\xdf\xc1\xef!\xdfS\xbf\xd5\x1d\xfc\x9af\xd0\x90?D\x86R\x83\x86A\xc1\xbfH\x86R\x8b\xf4\xdc\xc2?\x10:0(\x92\xf3\x94\xbf\x86/~\xde\xa3\xfcd\xbf0\x05V\x87\xfe\xed\x93\xbf\x9b\x14X\xf1uRy?Q.1\x016\xbb\x9a?9\x97\x98^\x93\x11\xa7\xbfh\xd2\x9a=\xd2\x14\xa5\xbfk\xd2\x9a\x05\x99\xb3\xa8?V\xb1\xca%\x8d\xdc\xbb?Q\xb1\xca\x8b\x97\xef\xbf\xbf\xf1\x18\xa0\xc0E\xc4\xbd?\xef\x18\xa0$\xe1\x01\xbc\xbf>\xc9\xbf\x0b\xdf\xf1\xb0?x\x92\x7f\x80^\x99\xa7\xbf\xc9\xbd\x1b\xcdCmV?D\x88\\$/\xf7\x85?%\x11\xef\xbb\x92\x0b\x90\xbf\x14\x11\xef\xa2R\xe4\x9f?\x008d\xc4\xd6s\x86?\xd6\x8f7\xf7\x94\x98y?^\xd7\xe5.\x10\xaco?%\x8aF\x14z\xe2\x82?\xe4\xca\xc6\xa2R$\xd9?\xe3\xca\xc6\xdbYc\xd8\xbf:\x96\xca{rU\xb2?\xa2,\x95\xbbH\xd0\xac\xbfn\xaeM$\x1a\x8ce\xbf\xaak\x13\x05zN\x88?\x96\x1f\xe9\xb1\xa0L\xce?\x97\x1f\xe9Q\'J\xcd\xbfD\xa6&v\x91\xf8\x81?\xbdY\xd9)]`\x8e?\xc8l\xce\xaa\x1ep\x92\xbf\x8b\xd9\x9c\r\xe2]\x89?\t-\x88\x1e~\xcb\xc6?\x0b-\x88\xabiU\xc8\xbf\x02\xf8|\xf6\xde/\xa2?\x03\xf8|&\xe6u\xa2\xbf\xea\xb8\x87\xff\xb4sj\xbf\xb2\x8f{xgo.?\xfb\x0c\xf7\xf93\xf3\xcc?\xfc\x0c\xffi\xc7f\xcc\xbf\x9dY\xea \xc5\x98\xa9\xbf*\xb3\xd4a\xfa\x97\x9e?5\x030\xaf\x7f\x8e\x81\xbfa\x06`\x9e\xf1g|?N\xd9`\xc1\xad\xb5k?a\x93O\xb7\xf8\xe4|?\xc9\x88h\x89.\x8b\xd6\xbf\xc6\x88h\x08O\xea\xd3?\xbc\xa4+\x96\xb9\x1b\xd7\xbf\xbd\xa4[\x9dnI\xd6?\xb7!p\x0f"\x7f\x8f?\xa9!p/\x010\x84\xbf\x9a7\xc0\xfaL\x9f\x9e\xbf\xd3\x1b\xe02\xae+\xa5?f\xeb\x8bcH\xff\x94?b\xeb\x8b\xc3-\xf9\x9d\xbf\xb4W\x99\x9bx\xf8\xb5\xbf\xb2W\x99\xb9\xbd\xa6\xb1?\xff\x02]\xbc\x8b0\xfc?\xfc\x02\x8d\x92i\x17\xfc\xbf\x88~\xd3\x19T\x99\xc5\xbf\x86~\xd3\xb1\xb9\x15\xc8?\xd7\xf2\xbe\x9b2Z\xb1\xbf\xd1\xe5}\x0b\xd3R\xa8?\xf8\x1f\x15\xdb7\x8a\x7f?\x08H\xc5NRn\x93\xbf(\xd2\x02\xdc"0\xe0\xbf[\xa4E\x15\x81\xd7\xdf?F\xa69\xc5\xa1\x8d\xc5\xbfH\xa69#\xd3t\xc4?\x9e\x86ci\x178\xd2\xbf\xa0\x86\xa3\xd77\xc6\xd2?\xe1\xef\x84\x88\x89S\xa4?\xe7\xdf\xc9\x14\xd6\xf3\x9d\xbf\xde\x98\xc1\xaa4\xbc\xa0\xbf\x891\x83\xfd\x85 \x9a?\x80\xbb\xd9$\x15T\xb1?y\xbb\xd9U\xaa+\xb3\xbfe>\x8d\'=\xe0\x8a?*\x83\xe5@\x11\xe5z?\xf9\x13}j\x1d\xa4\xa5?\xfa\x13}\x10\x16?\xa6\xbf\x11\xa9\xb7\x16y\x80\x89?\x11\xa9\xb7v\xe3\xff\x82\xbf\xea{\x137e\xd2\xc4?\xec{\xd3\x9e\x15`\xc6\xbff\xd0\x99\xa0/\xf0\x9f\xbff\xd0\x19\x89z\x17\x9d?\xe1\xc1Y\\p\x82\xc0\xbf\xe1\xc1Y\x83\x11\xbd\xc1?7\xc5\x15\xbdh\xac\x90\xbf\x9cu\xd4\x05\xd1\xea\x84\xbf\xdfg\x92\xb0\xc3\x19V?\x91&\t#"\x8f\x96\xbfP\xe3\x03\xc3[\xc3\xe7\xbfN\xe3\x03q\xe1\xae\xe7?\x81h\xcc<\xba@a?\x87Ccf.{9\xbfp\xe3\xa7\xa5z\x99\x85?p\xe3\xa7e)\xa2\x8a\xbfo\xa1N)n\x12\xaa\xbfn\xa1N1\xa8)\xab?\xa7L0A0\xc6\x9f?\x8e2\xc1\xa4\x92\xf3p\xbf\xfd\xces\x13O\x99\x80?\xfe0\x8c\x8c\xa8\x0f\x80?\xe1\xbf\x1d0\xff\xe2\x83?@\xfd\xdb\x01\xbb\xa8L\xbf\xf9t\x1d\xed\xdf\xc8\xd6?\xf7t\x1d\xb0u\xbf\xd7\xbf\xf1q.^\xf2\xdf\x80?\xbe\xdf\x18\x1d\x16\xd5I?n\xd2{x\x1d\x06]\xbfY\x0b\xe1\xc9\xf8\xdc}\xbf\xb7Q\xd5\x84\xd4\x10\xc9?\xb9Q\xd5\xea\xda\xb3\xc6\xbf\x12\xe3\xee\xac\x94\xb8\xc2\xbf\x0e\xe3\xee{\xd5A\xc4?\x98Q2X\xba\xd1\x9b?\xaerm\xbe\xbdVo??\xf4\x83;\x7f(\xb5\xbf?\xf4\x83\xa5-\x85\xb7?Ff\x95%\xe8\xb84\xbf>f\x95%\x9d\xcf9?w\xa2\x86\xfb\xe5\x88\xc0?m\xa2\x86\x0b\xb7p\xc0\xbf\xf9Cs\xfcWu\xa6?\xfaCsD\xa2o\xa3\xbf\xe2\xf7\xa1y\xba\xd1\x90?\xbf\xefC\xf3\xe2\x8a\x84\xbf\xc68\xec\xf8C\x1c\xb8\xbf\xc38l\xbf\xbf\xfc\xb8?\xf3\x83\xf1`_>s\xbf\na<\xe2\xcf\x03\x97?\xfd\xda\xd2\x935|\xf9\xbe|\xe9\xc9z\x0f,\x81? \xc2\xcd\xbb?\xc9\xd3\xbf$\xc2M\xc6\x9e[\xd3?\xe42\xff\xb9}\x01\xd7?\xe12\xff2\x1f+\xd7\xbf\xff\xb3J\xf5\xb6\te\xbf\x12\xb4J5I\xb6o?\x17\x87Ez\x90E\xc5\xbf\x0b\x87\x85K\x8c%\xc4?\xac\x92,Bn\x95\x91?\x95\xda\xa6\xbbV=\x8a?h},\x9a\x96\xaag?\xb2>\x16\xed\n/q\xbf,\xc9\xa2\xe8t{\x9a\xbf\x95dQ\x14nY\xaa?\x03\x86\x03\xeb[B\xcc?\xf4\x85\x03\x96\xab1\xc9\xbf\x04\xb3l\xc3\x80\x8e`\xbf\x8aY\xb6\xd14\xd4t?\x07a\x1a\xc5\x1c\xa8\xdb\xbf\x0baZ\xf1,{\xdc?X\xdb\x06R\xb8\x8d\xa8\xbfX\xdb\x06\x06H\x06\xa2?<\x95\x94\xaa{R\xc3?=\x95\x94B\xb8\xc5\xc1\xbf\x05%.p\xc5G\xa8?\t%.b\xde\xe0\xa3\xbfTq[o8J\x89\xbf\xac\x8e\xa4\x90\xdar\x84\xbf\xe8\x13F\xa5\xaa|\xb3?\xe7\x13F\xd7]^\xb3\xbfK\xf7%n\x80hi?i\x04\xed\xf8\xea\x88s?\xfb\xc1\xc9e\x17\x8f\xb8\xbf\xf9\xc1\xc9Q\xd5\xe7\xb8?i\xcd\xff\x92V\xf2\xb6\xbfc\xcd\xff\xceS\xe3\xb2?\xce\xf8\xb0\xe72\xd4\xcc\xbf\xcb\xf8\xb0 \xf5\xeb\xce?\x8e4jcX\xeb\xbd?\x8c4jR\xc8\x15\xbf\xbf\xda\xf9n\xd3{\xef\xbd\xbf\xd4\xf9n\t\x03\xa5\xbd?N\xb0*\x91^f\xbc\xbfL\xb0*+q\xbf\xbf?q\x87\xa2\xb5j\xfa\xc2\xbft\x87\xa2\x0e\x8c\xea\xc3?\xc8\xf9\xcb\x97\xc22\xb0?\x81\xf3\x17\xab4\xa0\xab\xbf\xbf\x8ea\x81\xec\xab\xd6\xbf\xbe\x8eaH%\x19\xd7?\x83\xfa\xcf3}\xb0\xca\xbf\x85\xfa\xcf\xcf2\x86\xc6?\x95u4\xf3\xd7\x88\xc4?\x94u4\xb3j\xa2\xc2\xbf\xad\\A%\x15\x9b\xc3\xbf\xa7\\As\xa2\xb5\xc5?T\x9d\x10\xeec\x93\xe3\xbfS\x9d\x800m\x94\xe3?M\xe4?-v\\\x8c?\x997\x80e|\x13|?\xfb;\x8b\x8f\xe2c\xc3\xbf\xfc;\x8b\xc1i\x82\xc3?By~\x7f\xaf\xd9\x93?\xc4\x9c\r\x03\x05\t\x0c?\x06\x8c\x15H\xd1Y\xa4\xbf\x06\x8c\x15,\xad\x12\xa9?\x9b)0\x97\x0flu\xbf\x17\xcf\xfa\x19\xb3\xc2-\xbf \x844@wz\xb5\xbf\x1a\x844X\x03a\xb0?\xf4)a\x9d\xb5\xd2v\xbfy\xb5\xa7\xb0\x8ap\x90\xbf\x18\xe1rpvC\xb7\xbf\x15\xe1r\xca\x15\xca\xb1?{n\xa8Kf\x9e\xa2\xbf\x1c\xddP\x93\xcb\xd2\x96?\x11\x9c9\xb2\xaf\xeap\xbf\xfdf\x8eP\x89y\x97?/k\x97\xb0\x06\xa9\xab\xbf,k\x17\xd0\xa5\xc5\xad?;\xbd\xef\x02,\x8f\x89\xbfAz\xdf%\x02\xc1x?}e\xb2X%\xdf}\xbf@\xcd\xa6\x93\x19\xa2\x86\xbf]\x04*\xaa\x8ey\xd6\xbfU\x04\xaa\x8a\x84\x92\xd5?\xae2S\xdd\xb5J\xb1\xbfze\xa6\x93-s\xac?#|\x94J\xf1\xcdf?\x00\x1f\xa5\xa2\x1b\xb5\x80\xbf\x81}<b\x96\x17\xc4\xbf\x81}<\'}(\xc5?\xef,\x92.n\xd3\xc3?\xef,\xf2@\x00\x97\xc3\xbf\x89W\x96\\x\x98\xca?\x88W\x96=n\x88\xca\xbf\x82\xb9\\\x8e\xb7T\xf2\xbf\x8b\xb9<\x7f\xd7\x89\xf2?K&\xe89u"\x90\xbfT&\xe8\xf9\x1e\xb8\x90?1:\xc5U\xdaA\x82?s\xe8\x14\xf7\x0c\\m\xbf<\x08"\xe6\xc7\x1a\xc9\xbf@\x08"\xf5\xbb\x86\xc6?p\x14\x1c\x14\x92:\xa0\xbfz\x14\x1c\xc2;\xa7\xa7?ax\x9e\xdf\xe1\x1f\xa8?\xc1\xf0<\x07&\x85\x9c\xbfT\xa5\xef+\x9b\xcap?_-\x08z\xde\x95\x89?/\xbem\xe7\xe27\xd7\xbf!\xbem\x90\x05,\xd6?\xec\xc1b\xfa\xce>\xd8\xbf\xed\xc1\xe2V\x15\x89\xd8?\xe0"\x98\xf8CG\xc7?\xdd"\xd8\x1bb\x16\xc7\xbf\xbc\xea\xb7\xfc\x10D\xc5\xbf\xbe\xea\xb75\x1eu\xc2?\xedj7\xc8\xa6\x9b\xd2\xbf\xefj7\xd8\x01N\xd2?\xeco\x8e*\x01\xc1\xe3?\xedo\x0eC\xae+\xe3\xbf\xdeB\x99\xe5\xaf\x8d\xdc\xbf\xdeB\x99)\x83\xa7\xdc?+\xbc1~\xb4\xd3\xb9?7\xbc1\xb8\xe7\x87\xb6\xbf\x06\xc6g\x0e7f\xe8?\x06\xc6\x87\xc0\xc1\xb6\xe7\xbf|\x9axP\x99\xb4w?(j\xe2\xa1\xa6vQ\xbfoj\x17\xd7\xc6\xb4\xca\xbfrj\x97\xbaL?\xc9?$!\xda\xbcH\t\xba\xbf#!Z\xa5^N\xbe?\xd7\xf40\x02\x08\x86\xd5\xbf\xd8\xf4\x9c\x974\xbd\xd5?Kg\xa0]\xe6v\xd7\xbfMg\xa0\xd7\xe0\x10\xd7?\xf5U\xed/1\x8b\xc0?\xf4Um\xeb\xdf$\xc0\xbf\x83\xe5:t\'\xe6\xc5\xbf\x90\xe5:\xea\x8d\xae\xc8?\x8f\x08\x8bT\x11\x7f\x8d\xbfn",\xe2\xb1Sf?\xf2\x9a\xc2a\xee!\xa0\xbf\xee\x9a\xc2\x9f\x9a\xf5\xa0?!!G\xd7\x1b8b?3\xe4\xe8r\xb2\xc3\x92\xbf\xc2ma\xb4U\xfe\xc5\xbf\xc4m\x01}\\\x8f\xc4?\xbdd\x97P\xb0t\xc0\xbf\xbbd\x97\x04\xd3\xff\xc3?8\xc8\'\xa4\xb9\xa0\xa5\xbf;\xc8\'8B\x04\xad?\x13\x92=\'Okp?\x137aL\xe2\xe5\x86?Rrq|Xi\xcf?Nrq\x91\xdf\\\xce\xbf(\xfdo\x7f~\x1a\xf1\xbf7\xfdo\xf5\x9b\xb8\xf0?\x86]O\xbd\x94C\x8c\xbfz\xa2\xb0\x02\x93!\x8d\xbf\xad\xe4e\xb8\x9a?\x82\xbf\xb6\xe4e\xb8"\xd7\x89?h\xde!\xe1\xbfj\xd4?h\xde![\xa7\xd8\xd3\xbf\x0e\t\x18x\xa7\xfbl\xbf \x120p\xe0\xd9]?$|(\x1cSQ\x95\xbf#\xe1C\x01\xba\x0eh?\xb1\x97n\xb2Co\x8a?\x8f_\xba\x89b\xa7h\xbfo\x81\xb7\x13b\xc8\xb0\xbf\x11\x03o\x1b\xca\xb2\xac?\x88;\xe8\xc8D2\xc4?\x89;\xc8\\\x1f\xeb\xc3\xbf\\d\x8d\xe8\x81\xcaT\xbf\xa4\x9br\xb7:\xb0_\xbf\xc4\xd2\x031\xd9\xc0\x92\xbf\xd9\xd2\x03\xa9\x8e\xeb\x9b?\xe3\xd2\x9e+3\xae\xca\xbf\xdf\xd2\x9e{\xd6\xe7\xcb?\xc8\x1f\xf5\x93\xcf\x12\x85\xbf#\xc0\x15\xb8\x9f\xees\xbf\xe71\xea\\\'\xa7\x82\xbf\xf4\x18uf\xa7\xf2\x96?\xde\xce\x91\xf8\r\xa0h?\xf99\x12\x97\xc4\x0e\x92\xbf\xd1\xe4\x89\x99o;\xe6\xbf\xd0\xe4\t\xf7L\xc3\xe5?\xb0`\xd8{q<\xb2\xbf\xb2`\xd8\xa7\xba\xf1\xb2?\xb4\x9e\xca\x9b\xdaPx?La5\xe4\x93Jz?B\xa9\xf7U\xb2\x8as\xbf\x02J\xbd\xafP\x8eN?\xe3\x1b\x03\x10\xb4\xed\xc4?\xeb\x1b\x03\xdc?\xd8\xc9\xbf\xcd\x13O\xb9\xaa\xf3^?{\x1d\xd6\xa8\xfe\xcf\x80?1ZW\n\xb5\x93y\xbf\x18\xad+\xf5\xa1M\x80?\x0f_O\x8d~\xc1\xd9\xbf\x11_\xcf?\xd7\xd8\xd8?\x92\xdc\x97\xa1\xa6\x11\xa7?\xd5\xb8/GpY\x9b\xbfH\x00\xd3\xfb\xe3\xa7\xf3\xbfG\x00\x93\xe8\xd6\xab\xf3?\xc0\xd1\xe9Xq\x10\xb1\xbf\xb3\xa3\xd3\xd9u-\xa9?l\xce\xce\x13$\xaad\xbf\xbf\xd9yN\x01_\x9a?\xd5B\x8d\xe9\x01\xf8\xc3\xbf\xd7B\x8d=\xe4_\xc3?\xedJ\x13\xb2$\x06\xdb\xbf\xf0Js\xeb8o\xdb? \'`\xd1\\D\x90?*N\xc0\x82\x0f\x83\x8d\xbf\xe1\xc9\xf8\x91y\'\xd2\xbf\xe2\xc9\xd8\xb8]\xe6\xd1?p}\xa8\xd1\xe1r\x9b?\xc5>\xd4\x10\x19\x9f\xa9\xbf\'\x92Ipm\xf2\xa6\xbf&\x92IH\x8dF\xa5?\x87q\x87\xa3{\x8d\xcf\xbf\x87q\x87M\xa6\x8d\xcf?\xb5\x1a\xb1\xa4\x8eQR?Y5b\xb9= @\xbf \xe5.\xde,\xbe\xc1\xbf"\xe5n\x90\x97\xd3\xc1?\x05\x9d\xee\xcf9\xb3b\xbf\x05\x9d\xee/\x14\x86f?+DdEq \xbb\xbf+Dd%Xv\xba?\x9b\xe7\xfe \x99\x9d\xc2\xbf\xaa\xe7\xfeu\xb3\xf6\xc3?\x88\x85\xd9Q\xc8\x9e\xb1?\x8a\x85\xd9;\xa5\\\xb7\xbf\x95+f\xcc\xa8E\xad\xbf\x93+f\xdbE$\xab?\xcc\xd4\xc8\xbbdr\xd1\xbf\xcc\xd4\x88\xea7d\xd1?\x87!\xc8u\xf7\x15\xb4\xbf\x8c!\xc8\x1a\x8a3\xb2?\x10&N\x12\x990\xd6\xbf\x0f&\xcec \x94\xd5?\xe6\x99\x80\x00\x1ak\x91?\xcf3\x01!\xf7R\x8f\xbf\xc3&\x9d\xee\x0e:\xc2?\xc1&=\xdbn\x87\xc2\xbf\xfe\x01\xe1j\xf3\xab\xc1\xbf\xf7\x01\xe1L8\xb9\xc3?\xa0\xfc\xc9\xcb\x94\n\xb2?\xab\xfc\xc9\x86Le\xb4\xbf>\xc2N\xc8\xb4\x07\xb0?C\xc2\xce\x17\xff\x04\xb1\xbf\xba`#3\xd2\xa4\xc7\xbf\xb4`#\x1f&\xe8\xc9?\xb3\xb5G\xed\xae\x97\x92\xbfMJ\xb823\xef\x98\xbf\x8e\xa1\xc6\x82\xbcG\xb8?\x8f\xa1\xc6\x02\xebu\xb6\xbf\xef\xcb\xc6\xb2\x8a6\x87?\xde\x97\x8deZ\xcbu\xbf\x17\xb0\x19\xa3\x9af\xa4?\x0f`3^\xd6g\x9b\xbf\xc0gq_\xa7;P?P\x98\x8e\xa0\xa5\x1aR?\x80\x16\xd5\xee\x95\x0e\xba\xbf\x82\x16\xd5\xaeU\x1a\xb7?\x08\x9f\xe0\xc0)h\xb3\xbf\t\x9f\xe0l\xde\xb7\xb3??\n\xb0\x03\xe2\xebt\xbf\x9d)\xc0\x8e#FX?\x84\xfe\x12\x16X&\xba\xbf\x85\xfe\x12\xaah\xb7\xbd?\x8a\x08\x89E\xca\x9b\x8e?\x8a\x08\x89\xc5B\xeb\x81\xbf\xee\xf3\x9d\xcb\xae\xf8\x9d\xbf\xd7\xf9\xcei\x07\x83\xa3?\x13\x07\xa8\xd6]\x00\x87?%\x0eP\x8d\xc2rx\xbf\x18Y\x93 \xc0y\x81?\\dMb)\xbee\xbf\x86\x9bI\xd3~H\xe1\xbf\x88\x9b\xc9\x99\x8f~\xe1?N[fs\x93\'\xb0\xbfQ[f\xb7,Z\xb6?X\xcf9Kq\xf9\x86\xbf\\\xcf9\xcb\xdc\x9f\x8b?\xd3\xdaBs\x9e\x15\xcf\xbf\xd2\xda\x82\x02Hp\xcc?<\x9f\xdd\x8a\xf0\xbeu\xbfC\x9f\xdd\xaayNp?\xe5nW\xb6\x19\x8e\xb6?\xeenW\r\x8f\xb0\xb7\xbf\x9d\x8bP\\{\xce\xf4\xbf\x9d\x8bXu\xa1\xca\xf4?.u\xf8\xe6GC\xbb\xbf-u\xf8\x06\x94S\xbd?\xc1\x0e\xefM\x03Ql?h\x87\xf7\xa6G\xb4t\xbfX\xd9rR\x02\xd8\xd0\xbfX\xd9S\r`\x1c\xd0?\xad\xac\x9b\x90\xa52\x9b?p\xd6M@\x8f"\xab\xbf\x10\x84{\xaf\xd8NW?\x9cp\xef\xf5\xec\xeb\x85\xbf<\x95IM\xd7@\x8a\xbfg*\x93\xda\xb0\\~?Su%lg\x96\xde\xbfVu%\x1f\x91\x1a\xde?s\xa77\xdeL\xa2\xdc\xbfs\xa7\xf9\xc6\xd9j\xdc?\x0eg1\xef\xa8\x13\xc8\xbf\x0cg1q\xd7c\xc7?]E*\x1az\xa1\xc7\xbf\\E*\xb0\x04\xb8\xc7?\xc6T\xec\xe9\xd9\xe6\xb1?\xc6TlJ\x90\xd3\xb4\xbfD\xfe\xd5\x97]\xb4\x9c\xbf2\xff\xeawZ\x06\xa4?=\t\xcb\xa4Cj\xc5\xbf>\tK\xbe\x91i\xc4?%\xac\xbc\xe4\xfe\xfd\xd3\xbf&\xac\xbc\x94\xac\x15\xd4?\xd2JA]\x1e\xbc\xd7\xbf\xcfJ~\x98\xeb\x10\xd9?\x93\xdc\xb6\xbf\x90\x08}?\x9f6\x92$\x1be5?A\x87\x1b,\xb8K\xc2\xbfA\x87\x1b\x1a\x19\xc4\xc3?A\x82\xc4-1{\xad?9A\xe2\xc2\xb6\x97\xb1\xbf!\xae\xd5\x18\xd8\xbc\xb3\xbf\x14\xae\xd5"\xb1\x05\xb7?)I\xaa@]\xad\xbd?CI\xaa\x98\xcc\x05\xba\xbf\xeaZb\x87:\xf0\xcc?\xb5Zb\xdfB\xa8\xcf\xbf\x02h\xac\x1fg\xf5\xd3\xbf\x02h\xack;\xfb\xd4?\xe6\x03_\xe0!_\x8b\xbf\x13\xf8A\x8f\xdb}}\xbfw\x03\x96\x7f(\x14\xb7?i\x03\x96\xa2\x0e\xf6\xb9\xbf\x0e\x954\xd4\x02\xf7`?\x88\xb5\xe5U\x8b\xa4u?\xe3V2]\x1a\xd8\xe3\xbf\xe2VR\xdf~\xb5\xe3?\xa2\x7f\x83\xe5@\xab\xac?\xac\x7f\xc3Kv3\xaf\xbf\xfa\x96\xd0\x07\xf7\x0c\xc5\xbf\xfa\x96\xd0\xf8]\xce\xc5?w\xa9\xebh\xa7dZ\xbf\x81\xba\x8e&\x8b\x9c\x92?/Hg\xc0\xb7V\xd8?/Hg\x04\x04L\xd6\xbfY\xec\xd6\xfc:\x1d\xeb\xbfY\xec\xd6\x9d\xf5Y\xea?\x9c\xda\x02E7\xba\x80?\x9c\xda\x02E=\xd5\x84\xbf\xc7\'i\xba\x99\xf7|\xbf\x18\xb0-\x0b\xb7\x92o\xbf\x11\xe4S\x98\xba\x92\x91\xbf<\x90O\xa1\x94\xddw?\x99[\xfa\xcdI\xf5\\?wK\xbf\xc9\xb9\xd6\x83\xbf\xf1i8\xc1 $v?\xdc4\x9c\x10]]\x8b\xbf\xbf\x9e\x08\x15D\xd1t?\xab\xb0{\xb5\xc3%\x85?\xec\xed\x1e7\xceV\xc2\xbf\xa6\xdb=\x0e\xbe\xe1\xbe?8w\xa1\xa4\xca\xa0}?\xd1\x11\xbd\xb6i\xbej?\x12\xca&\xf4{K\x83\xbf\xe4?\xd9D\x85U9?V\x131\xe1\xab&\xcb\xbf`\x131fo\x17\xcc?\xc4\xa1h(\xac\xad\xe3\xbf\xc6\xa1(5\xe5\x14\xe3?\xb3\xa6\xd7\xfbd\x02\x84\xbfwM\xaf\x97\xc1\x01v?o(\xc4\x9dH:4?\x98\xde\x11\x9b\x8e\xd1\x84?\xd0r\xa0\xf1d\x83T?\xbe\xf8\xe5\xf0\x86\x11\x95?\x06z\x7f\xf0\x14>\xd5\xbf\x06z?r\xd7}\xd5?l\xc8/]\xda\xe1\xa3?\xc0\x90_\x9a\xa8/\x91\xbf\xb9\xd6\xb5\xe2\xaf\x94\x84\xbf\x9bR\x94z\xa7\xac{\xbf\xdc\x0bj\xfa\xcaV\xc3?\xca\x0b*D\xcdk\xc5\xbfD\x83I\x84Z\x8d\xa6?p\x06\x93X"\x17\x9d\xbfd[\xf6\xd9\x0c\xb6c?\x944\xc1\xf0@e\x95?\xf0\xdf\xb3\xa3wZ\xbd?\xec\xdf\xb3E\x93\xf3\xbe\xbf\x95\xf4I^\xd9\xe2\xc8\xbf\x94\xf4IH\xed\x86\xc8?\xb7F\xd4\xe9!\x0b\x99\xbfY\x8d\xa8\xc7\xaa\xac\x86?\xdd!\x1e\xfe\xf2\xeb\xe9\xbf\xdd!V\x9eG\x00\xea?\x90Uwh\xf8x\x89\xbff\xaa\x88\xf7\xdb\x0e\x8e\xbfSC}c>\xf7{?TC}\xc3o\x0eq\xbfg\x005\x96\xa6\x8e\xb2?g\x00u\xaa\x92Q\xb5\xbf\xb7kwYU\xbd\xdf\xbf\xb9kw\x93)\xcb\xdf?\xc9\x89>\xd5\x02.e\xbf\xa4]\xb0\xdaI\xad\x87\xbfc\xd3\xeb1Z\x94\xca\xbf^\xd3\xeb\xa6K\xe7\xcb?\x8d\x06b\xc0-\x9c\xa9\xbf\x8c\x06b\x02\x80\xb6\xa2?\xa8\xec\x0e<x\xd6\xca?\xaa\xec\x8e\x88.\xbb\xc8\xbfd\xbf7JT\x07\xae?b\xbf7\xd6p\x18\xa1\xbf\x9f\xac\xbbd\x99\xff|?Z\xd6]2\x04\x19\x89\xbf\x03\xfc\xd6F)\xfc\x92?\x03\xfc\xd6S\x88\xa8\x94\xbf|\x00\xfe\x91\x1f\tH\xbf\xf2\x7f\x80\xf3\x97\x19n\xbfb\xc1\xbc\xb0\xbce\xbb\xbfc\xc1\xbc\x1d\xb6\xa1\xbc?_w\xc4\x08fi\xb0\xbfdw\xc4A\x1c\x93\xb1?G\xe5\x05%)\xbe\xcd\xbfG\xe5%\x14|\xac\xcf?/b\xd1dN.\xc2?P\xc4\xa2\x8b\xafz\xbf\xbf\xe0\x91\xa9\x1f\xf8,\xbe\xbf\xe0\x91\xa9\xfd>\xe2\xbd? \x9c\x12e\x0bY\xb7\xbf$\x9c\x121lX\xb9?\x1f\xa8\x9a\xf0\xdd?\xc4\xbf#\xa8\x9aO\x0bf\xc5?{\x03\x0f|~s\xaa?\xbb\x81\x07l\x10\x80\xb2\xbf\x91\x8dGj;\x19\xd7\xbf\x97\x8d\xf7\xc7\xbc\xe8\xd5?8\xd3\xdb\x99\x14o\xc5\xbf;\xd3\xdb]\x006\xc4?6\x0c\xa0\x8e\x18\x1b\xc8?6\x0c\xa0\x81F\x9c\xc5\xbfa\x9c*\xa5\x08\x18\xc5\xbf]\x9c\xaa=X?\xc3?\xd0\xac\xd8;\x9e\xf7\xe4\xbf\xce\xac\xb8\x1b\xfa\xc3\xe4?\xa9\xee^\xc6\x9em\x8a\xbf\x99D\x84&\x97\xf5j\xbfXC\xc5\xecC\xa6\xc3\xbfWCE\xff\x06`\xc5?E\xdc\xcev\x9c\xd5~\xbfg:\x12\xb3\xa7\x800\xbf\xf9\x1f(\xd4\xce2\xad\xbf\xf8\x1f(L5\n\xad?\xf7\x8dnRg\x84\x90?\xe2\x1b\xdd\xe4\xd8\xd3\x8d\xbfX\x19\x13\x82\x7f\x9c\xaf\xbfX\x19\x13fE\xa9\xaf?p\xaf\x8a7N\x83m\xbf\x05V\xf1\xee\xa9(\x92?\x89pz\x08\xa5[\xaf\xbfA8=\x1c\xfe^\xb1?+\xbd\x8e\x83\xeaO\x92\xbf]z\x1dG0/\x88?\xc9\x93\x04\x95\x9dE\x95?*O\x12t\n.p\xbf\xf3\xf7H+\x97y\xb8\xbf\xf2\xf7H!\\\xef\xb2?2R\xa6;\x8c\xdbq?\x18)\xd3-V\xc5\x83\xbfn@1+>7y?\xcc_g\xea2\x1e\x81?\xd2\xa5\xc6\x1bc\x86\xd5\xbf\xd4\xa5\x06\xc1\xbf5\xd6?\xa4\x81\xa3G\xee;\xb2\xbf\xa0\x81#Q)m\xb4?D\r\x07rUC\x8f?+\x9b\x86\x03\xe1\x8c\x1e\xbf\xe5j&I[0\xc5\xbf\xe3j&\xdf:{\xc2?\x93\xea\x17\xb2\xf9\xc4\xc4?\x92\xea\x172\xae\x05\xc6\xbf\xa1t\xd1\xaa\xdc\x11\xcd?\x9ftQ\xac\xe7J\xca\xbf\xb1\xba\xfb*\x188\xf3\xbf\xb6\xba\xbb\xb3\x02\xeb\xf2?\x92\x93.\x85\xb0i\x8b\xbf\x93\x93.E\xcft\x8e?\xfb\tm\xdb\x87\x82\x85\xbf+\xd8K\xd2\x0bLo\xbf=i}"y\xf1\xcb\xbfAi\xfdk\xa3Y\xc9?\x93W\x14\x93tQ\xaa\xbfB\xaf(\x86nd\x9e??\xd8\x94\x00\xc3W\xad?!lJz=\xc4\xb1\xbf\xbaw@\x04L\xfd\x8e\xbf\xbbw@dHX\x84?c\xae\nX\x15Q\xd7\xbfe\xae\xca_\xdb\x19\xd7?c\x9b\x0b\tq\xfc\xd9\xbfb\x9b\x0b\xc6\xa4\x03\xd9?\xa2U#\x0e\xbd\xce\xbd?\xaaU#\x92\xe8E\xbe\xbf\xa0y\x11}S~\xc5\xbf\x97y\x11`\x8c-\xc4?\xb2FdtX\\\xd3\xbf\xb3F$\x1d\xb0\xe4\xd2?\x85\xde54\xba\x84\xe5?\x87\xde\xf5c\x8d\xd0\xe4\xbf^\xb4\x8d\x1c\x81\r\xdc\xbfc\xb4\x8d\xc2\x99 \xdb?\xcc\xc9\x14\xa4\xe0T\xb5?\xcc\xc9\x14\xef(}\xb5\xbf\x1co\xdb\xfb6\xf5\xea?\x1bok(\xdd\x80\xeb\xbf\xd8~\n\xb9N\xf5q\xbf\x9b\xc0zSE\xfe\x8a\xbf\x90JJc\xbfj\xc8\xbf\x8dJ\xca\xff\x8a\xcc\xc8?\xce)k6\x88\xa7\xb6\xbf\xcd)\xfb\xd5\x13\x8d\xb6?\xa3uK)\xd8h\xd6\xbf\xa3uK\xa4\x8f\x8c\xd6?\xab\x18f\x1f\xfe\xa2\xd6\xbf\xab\x18f6\xa8\xcc\xd7?\xf6 \xae\xb9\xd2f\xd4?\xf6 \xae4\x8b6\xd5\xbf1\xe5>\x95\xcdh\xca\xbf#\xe5>\x15\x15\xd9\xc5?\xd6W\xbc&GIq\xbf\xd8W\xbc,t\xfdq?9\xa7\xeb\x82u\xaf\x9d\xbf\x95\xd3u+\x03I\xa3?U\xa4\xf5f\xff\x13t?\xc2H\xeb\xcd\xc0,g\xbf\x02\xbc\xe2W\xdf\xbb\xc6\xbf\x00\xbc\xe2\xa7\xd8\xa7\xc4?\x1c\xb1\xc7J3\xe6\xc0\xbf\x17\xb1\xc7\xa1\xe1r\xc0?;Ry\x07\xb3I\xb1\xbfd\xa4\xf2\x9b\x1f)\xac?\x03E\x9a\x83V\xf7|\xbf$\x8a4\x07j\xc0n?\x02?W\xa3\x9a\x12\x87?\xe1>WS\x13\xde\x87\xbf\xef\xc7\xc8j\xb85\xf1\xbf\xee\xc7\xe8\x8b\xe4\x03\xf1?\x9a\xf5\xb4\xff\x9f\xbc\x94?\xda\x14\x96\x00\x14k\x82?m\xecKv\x9e`\x85?\x90\xb1/\x19\xe7\x83a\xbflc{\x81\xf4\xc7\xd5?mc{\x80s\x8f\xd6\xbfJ\x1c\xc4!J\x86y?\xb6\xe3;^\xa7=z?\xc7L\x0c!"\x88T?,\x13Cx+\xeb~\xbf\xa3\x07\xbb\xc3\xeb\x00\x95?\xa6\x07\xbb\x03\xc5\xad\x9c\xbf\x82\xadR\xca\xcaq\xa9\xbf\xb8V)\t\xdcJ\xb3?\x7f7\xfeUZ\x81\xbc?\xc1\x1b\xff\x88\x9a\xcd\xc0\xbf(\xe7\xee\xd9U\x84s?;\xe7\xeei#\xe5v\xbf\x8f\xf0U\xd3\xee\xc2\xa3\xbf\x8c\xf0U\xe8\xfb\x19\xa6?Y\x92F\xb2\xdb5\xcd\xbfZ\x92F\x8a\xaa \xcc?P^{|?v\x82\xbfP^{|r\xfd\x8b?\xcf0\xe5\x01\xaa\xa7\xb0?\xc1a\xca\x0f\xb8\xff\xad\xbfe1K:\x01\x19`?Dg\xdaRu\xfdv?\x19\xc8\xafG}G\xe4\xbf\x15\xc8/\t{g\xe4?P\x8c\xc9\xd2\x9d\x85\xa3\xbfR\x8c\xc96+h\xa8?\xb1\xafEw%c\x93\xbf\x10A\xe9\x02Acx\xbf\xf47\x07\x7f\xe0\x16\xa3?\xed7\x07\xcf\x15\xfe\xa0\xbfb}2\xf4\xca\xdb\xc6?`}\x12V\xbe\xf7\xc8\xbf?\xa0\xa9j\x84\xcc\x91?k\x81\xa6j%\xcbw\xbf%\xa1\x06\x15\x10Z\xa9?$\xa1\x06y\xcfV\xa2\xbf6\xe5]v\x05\xf8\xd6\xbf5\xe5=y\x05s\xd6?\xb3t\x1fe\x94a\x92?\xb7J\xf7A\xab\xa8Y\xbf\xba\xb3\xee\x8aT5\xf3\xbf\xb9\xb3\xeeX\xe3d\xf3?\xda\x1e:\xed\x1e^\xab\xbfI\x0f\x9d\xe86\xde\xb4?\xcdb\xa6\x04|-\x81\xbf3\x9dY\x9b\xfe\x1c\x86\xbf\x16\xab/m*B\xc4\xbf\x16\xab\xaf~\x12u\xc6?\x7f"\xb4\xc3\xb7\xea\xe0\xbf\x87"\x94\xd9\xbfy\xe0?Il\xcc:\x08+{\xbfa\'gJI\nb\xbfK\xb6\xc1\xa8\x8b\r\xd3\xbfL\xb6A\x89\xfeJ\xd2?^\xb6cIo9\xa0?\\\xb6#\xe1LP\xaa\xbf\xfc\xea\x0e\x10\xd0\xc6\xc4\xbf\xfb\xea\x0e3{\x94\xc3?\xb0\xf0"\xe9\xc3\xcd\xb7\xbf\xb9\xf0";\xe0\x0e\xb7?fq*2`\xd7\x85?fq*\xb29\xec\x84\xbfO\xbd\xc0\xaa8\xc5\x93\xbfP\xbd\xc0Z\x02\xdf\x92?=e\x83O4\x98\x7f?gM>(\xae\n\x80?,\x16k\xec\xc2\xba\xb5?.\x16k\x0b\xc2\xae\xb2\xbf\x8a\x9e\x83\xbf\xeb\xfe\xa3?\x87\x9e\x83V1\xab\xa8\xbf\x13\x15\xa0[\xa3\x18\xca?\x12\x15\xa0ak\xf4\xc7\xbf\xa8;\x05UQ\x88\xb1\xbf\x98;\x05\x03\x1e\x0e\xb9?\x07\'\x884\xce0\xbf?\x07\'\x88\xdf\xae\x96\xbe\xbfk\xb1\xc3\xdf\xa8X\xbe?r\xb1C\xbe\xa9\xd8\xba\xbf\xf8\xde\x11&>\x13\xc3?\xfc\xde\xd1\t3\'\xc0\xbf\xab\xd1\xc7\xa7\xabE\x8d\xbfh\xf4\xf1\x15\xce\xa2\xa0?)\xee%w\xaf\xb9\xd3?)\xee%)\x9b\xf4\xd3\xbf|M\xe5\x18\x8d\xa7\xc6?\x91Meo\xe9o\xc5\xbf\xaaYI\xdf\x18\x1f\x8d?\x96f%\xfd6@c\xbf#h\xa9,\\\xf3\xc2?.h\xe9\x08>.\xc4\xbf\xed\x8aQ\xe1\xa4\x9d\xe5?\xea\x8a\x11\xf9&\x8d\xe5\xbf\\Uy\xc0\x0f\x1cu\xbf<U\xc3/n\xcb\x82\xbfG\x0e\xd5\xd7\x03\xb4\xbf?(\x87\xeas\'\xc8\xc2\xbf\xaaI9\xea\xac\xec\x90\xbf\xafl\x8d\xebt\xa2\x84\xbf\x16-\xea\xcd\xd1\xaa\x95?\x96\x16\xf5\xd6\xbb\x85\xac\xbf"%@\xc6\xfd\xe1}\xbf?\t\x90\x99B\x11\x96?i\xfa\x02H\xc8\xa9\x9c?>}\x01\xa0t\xda\xa0\xbf\xe7lr{ \xe7u\xbf3\x9b\xdc\x06\xc3|\x92?O\xbe#\x8d\xd7\xdf\xa9?\x12\xdf\x91B&R\xb3\xbf\xd3NL\x84\x13\xeb\x8d?\xa0\x13\x13\xf9\xe1|\xa1\xbf&\xe8\xd3O\xb2&\x85?s\xd0\xa7\x9fQcy\xbf\xb7\xe5\x11\xd7\x12\xaa\x9a?\xcf\xf2\x88\xcb\x9c\xc9\xa0\xbf\xea\x8b\x82X\xde\xf3z\xbf\xc8\x17\x05\x91*o`?L;(\xdb\x88K\x86?\x98/\xf15\x1d\xb4%?\xb7\x01!FP\n\xd5?\xb7\x01\x81\xd5\x96\x9c\xd4\xbf\xbbC\xf3\xdc\x94\x9e\xb3?\xb7C\xf3\xa4\x01\xc7\xb5\xbfN\xc4\x11\xf0\xdf\xa7W\xbf3\x1c\x01\xcf\xf5\x02\x98?\xf0\x18=Q/\xdb\xc3?\xf0\x18=\xeb8c\xc3\xbf~\xd0A\xdf\x04q\xb8\xbf}\xd0A\xadm^\xbe?SA\xce\x98\xa9\xa2\xc5\xbfRAN\x17\xc5\x14\xc5?\xff\x7f\x0c;\xb8\xe0\xf1?\xfe\x7f\x8cK\xd4&\xf2\xbf\x84-\xdc\x8cD\x95*?Azd.h\xb3U?\x1d\xd8w\xe5\xe0g\x87?\xb2O\x10u?\x13{?\xee\x8f8\xc2+R\xc6?\xee\x8f8\xf1\x0f\x18\xc6\xbf\x80\x00\xf3\xb2>R\x84?9\x80yY\xf4V\x98\xbf\xaf\xe7\xba[\xa8B\xa4\xbf\xac\xe7\xba\x1fB*\xae?\xcb|\x94V\x9c,q?\xcd|\x94F\xbaq}\xbf\x14\xe77\x934\x8d\xcf?\x7f\xf3[\xa6\x90\xb7\xd0\xbf@\xd6M\x1d\xcfP\xd8??\xd6\xb5\xf7L\x1d\xd8\xbf\x1a\x08\xb3\xe3\xe3\xb7\xb4\xbfK\x10f\xdc\xd8\xb3\xaf?3hH\x8dF\'\xc1?0h\xb8\x00\xc5\xff\xc3\xbf\x1d`:\xc2,\x8d\xd2?\x1b`:\xcb\xdb\xb0\xd1\xbf\xe2ICu\x10r\xda\xbf\xe3IC\x10\x10\x86\xd8?\x1b\xbc\xe5c\xcb$\xdb?\x1b\xbc%E\x9c4\xdb\xbfn\xa3r#\xf4\x16\x95?U\xa3r\xffm\x8b\x9c\xbf\xb4\xd9\xc1&\x9a\xd0\xd7\xbf\xb0\xd9A\xc0\xef\xfc\xd8?3\x15\xcb[r\xc9m\xbf\xa9\x8a\xe5]t\xf0v?\x14ps\x1d\xd2z\xcc?\x0cps\x9b\xf5\xb0\xc7\xbfK*\\\xcc\x87\x01\xbe?L*\\\x0e\x08\xf4\xbb\xbfu\x90Y\xcdv\xf1\xd1?p\x90\x19\xaf\\_\xd2\xbf\xf6}D\xba-:\xd6?\xfa}8\x80\x1f2\xd5\xbfa\xe8\xf4b\xc1\xf1\xb7\xbfc\xe84\x07\xea$\xb9?\xc6\xc5\xa30E\xc1\xc8?\xcb\xc5#D\xc0\x8c\xc9\xbfz\x00q\xba.\xear\xbf\xc5\x7f\xc7\x82w\xf0\x83\xbf\xb1c\x94\x8aLl\xab?\xcd1J1m\xc8\xb2\xbf\xa3\xb7\r\xa1\x13{\x0e?@\xc9{\x91@ya?J>\x86\xe6\xb3#\xc1?L>\x861\x95\xa0\xc2\xbfB\x0f\x83\x01,\xd6\xbf?\xa4\x87A\xec\xbd\xb2\xc0\xbf\xf5\xadH/f|\x80?\xde\xadHG}\t\x8b\xbfzu=\xebUG\x8e?\x1a*\n\x93\xb8%o?P\xfd\xb8\xb8S\xf3\xd8?P\xfd\xb8pp\xaf\xd9\xbf\x0fA\xc2\xc7tn\xf0?\x0bA-\xf3\x19c\xf0\xbf\xc2\xd0\x80\xb9\xa7d}?Yh\xc0l0\x8a\x80\xbfk6\xb0,\xb5 \x93?\r/\xf9\xa9\x91r@?.\xff\x1c\xf4\x9dr\xd3\xbf.\xff<\tD\'\xd2?\xe4c\xbf\xce\x94\xc7~?\x1bN\xa0\xb8v\xe9\x84?b\x00\xcerK\x10w\xbf\x1c\x80\xb3\xac\x88\xc4\x94?\xa2\x86\xefJ\xdf\xe6\x9d\xbf\xa6\x86\xef\xd6O\xfe\x94?\xff a\x91R\xeb\xb3?\x1c\x84\x84\xe5\xaf\x0c\x9c\xbf\xd6l\xa5r\xcb\x1d\xb6\xbf\xd0l\xa5\x12\xb8}\xbe?\xfe\xaev\xf8\x94\xa8\x88\xbf\xfbP\x89g\xa4\xe2\x8f\xbf\x0e\xa0*T;\x05p\xbf\x8b\xaf\xeae\xa7\xb3\x88\xbf\x95\xecg\x01\xdaP\xc9?\x94\xec\xe7\x99\x06\xf7\xc7\xbf\x87\xdb\x01\x07V&\x83\xbf\xcd\xed\x80S\x86\xf5\x93?\xebcR<\xd9\x1d\x98?\xdf1)r\xd02\xa3\xbf\xf8x\x13\xc6\xb4\x14~\xbf\xdc\xf1&L\xdf2d?[\x9av\x84Ep\xe5?[\x9a\x96\xa4\x87q\xe5\xbfD\x7fXn(X\xa6?\xa6?,WW\xa0\xb2\xbf\xfar\x15l\xe7\xc0\x18?\xe8*\x98\xda\xf8\x0f\x82\xbf\x1at\x98Wr`\x8e\xbf\x13t\x98\x9a\x1e\x07\x88?H\xc9\x05{#D\xb9\xbfI\xc9\xd5\xed\x87\x1f\xb9?\xd9@\xa5\xd9U\xa0;?\xab\xaf\x96\x99\x80NX?h\x82\x1b\x7f?Z\xaa?q\x82\x1b\xe1NE\xa6\xbf\xe1O\xd6\x90\xfc\x89\xc4?\xdaOV\x13\xfa\xab\xc6\xbf\xc9\x15\n\xde\xc5\xf9\x88\xbf|+\x14|@iw?\x10:u{~\x83\xf2?\x0e:\x01\xba \x92\xf2\xbf\xe7\x8c"\xffr;\xa4?\xe6\x8c"\xdb\xa0S\xa3\xbf\xef@\xa4\xa8\xb2\x94\x8d\xbf$\xfcn\xddG\x18`\xbf\x95\xaa\xd6\xe3\t\x0c\xc5?\x93\xaa\xd6\x92~\xb0\xc2\xbf\xe6&\x96\xee\x7f\xa9\xd8?\xdf&\xd6\x07_n\xd8\xbf\xae\xcdE\xbc\xdd\xe4`\xbfZ\xc9\xe8\x0e\xa4\xc6G\xbf\xd3\xdcO\xf3(\xa7\xd1?\xd1\xdc\xcf\xb4\xe7$\xd1\xbf\xdd\xd3\xf6a\xf7\xca\xa5?9O\xdb\xe7\xfdA\x8d\xbf\xedWMN\xcb\xf1\x8c\xbf\xf3\xab&\xdf\x1a\x05\x90?\xb0Bd9\x88G\xb5\xbf\xbcB\xe42\x84\xbe\xb7?\xc2\xc3\xe2\xb4\x85\xa3p?\xa7\x87\xc5i:\xbeg\xbf1N\x1d\x12\x0c\x17\x88?\x8d\xe2\xd4!]\x8dD\xbf\xed\x03\x10\x13\xd7\x8da\xbf\x15 \x80\x98\xffw??\x81\xb2\x82,t\xa8\xa1?+e\x05\xb4\xf8j\x99\xbf\x87\xe5\x00$"$\x88?\xa2j\xfc\xef\xa1Oi?\xb8cvC\xd0\xfe\xc1?\xb8cv\x98\xac\xf1\xc2\xbf\xbc`\xe8\xb4\x87\xea\x90\xbf\xc0`\xe80\x15\x94\x91?9e\x90\x9d\xd5@\xbb?<e\x90}\xabX\xb8\xbf\xe8nBD\xc8\x1b\xa9?g7!\x9cp\r\xb0\xbfKK\xa4\xdb\x81[\xb9?HK\xa4\xa3\xff\xf6\xbc\xbf\x99\xd78#yDq\xbf-\xafq\x06\x8a\x8do?\xcb\xa55|a\x8a\xc4?\xce\xa55\x84\xcc\x00\xc7\xbf\x14y\x9b\xba3K\xb7\xbf\x0cy\x9b\x92\xb2\xb7\xb5?\xf0G\xb6\xd7"\xa2\x9b\xbf\xf1G\xb6\xe4\x8c\xed\x93?j\x9d\xfa\xaf\x00\xbe\xb4?\\\x9d\xfaK\xd9;\xb3\xbfaY\xcfT\xae\r\x97\xbf\xa7\xacg\xc2}"\xa3?]\xab\x1f\xe4\xb2\xcdd?\x9b\xd5\x0f\x1a!Ar\xbf\xc3+\x08\xafK\xf0\xba?\xc4+\x08K\xc4z\xbd\xbfl\xa6\x9d\x1c-\xe1\x84?\x94Ybc\xf0\xb3\x83?K|W>\xdf{\x9e?\x1a\xbe+oj\x97\xa0\xbft\xba\x0e\xf1F\t\x8b?\xe1t\x1db\x96\xe9{\xbf\xe1\xe2\x06\xceQ\x92!?\x087p\xbeMq\x7f\xbf\xcf\xc4\\\xb2\x9c\xec\x9b\xbf!;\xa3\xd5\xc7S\x91\xbf;E\x8a\x85\xcf\x0c\xaa?:E\x8a\xfd]\x12\xa5\xbfG\xaex\x89%\x1d\x98?\x1eW\xbc\x1bH\xe8\xa0\xbf8\xc6\xf2*\x07;\x8a?\xc89\r\xd5n\xc6\x82?o\xdaj\x0c\xb7\xcc\x91\xbf4m5\xd2\xcc8\xa0?\x8f\xc2\x052\xadht\xbf\xccz\xf4\xbb\x92Vj\xbf\xd93i\x97\x82\x0f\x98\xbf\xb70[\xc2\xf6\xf6y\xbf\xff$g\xe3:\xe4\xc5?\xfc$\xa72\x15\xbd\xc6\xbf\xcc\x1e\x0e\x13\xbf\xbb\xa8?\xc1\x1e\x0e\x15\x99\xf1\xab\xbfW\x19\xd5\x03\xdf\x0cr\xbfK\x19\xd5\x13`\xfb\x7f?\xeae\x85\xf7\'[\xbe?\xe5e\x05\xd9\xdf\x98\xbd\xbf\xefq9\xa8j\xa6\x95\xbf\xecq9L\xf9\x94\x9c??\x10\xf8\xa6\x19\x19z\xbf\x99\xdf\x0f2\x16\xfag\xbf\xb4\x0bvBDj\xb9?\xad\x0b\xf6U\xe9S\xb8\xbf>\xe7\x89t\xefqp?z\xce\x13U[\x08g\xbfc\xab\xad|U\xf7T?Y*\xa9AU\x15`?\x0fE\xcf\xac\x08\xa5\xbc?\x86\xa2g\x7f"\xb5\xc1\xbf\x93\xd9b\xc6\x19\x9d\x96?\xfe\xb2\xc5\xdc`\'\x84\xbf\x84\x9d\xc7\xf4\x854B?r\xe71\xcd\x05em\xbf\xa2\xaeZ\xc6\x87\xc62\xbfs\xd52\xc6\xb7X\x81?\xb7\x93\x01bZ\xcd\xa1?\x90\x93\x01LF\n\xaf\xbf\x87\xd0`\xd1U\xae\xc9?\x7f\xd0`\xc1\xd7\x13\xc8\xbfT\xa7\xc0\x92\xbfP\xa0\xbfT\xa7\xc0n\x99P\xa0?5\xed\xf4ap\xd3\xa3?6\xed\xf4\x05\xcb\xdf\xa2\xbf\xa3\xf9\xe2\x1e\xe8\x0c\xd0?Y\xf3\xc5,UE\xce\xbf\xf1{\x02\xf8\x93S\xb9\xbf\xf2{\x02\x87\xe8\xbd\xb6?)\xebB6\x1f\xf2\xd3?,\xeb\xf2S\x85\x10\xd3\xbfry\xb3D\x8d\x89\x8d\xbfY\x86L\xfb\x19\xe8\x82\xbf\xc0\xe3\x8b\xcb\xd4\xb9\xc3\xbf\xbe\xe3\x0b\x0c\xd8\x87\xc3?\xae\xda\xce\x94Y?\x81?\x08\x95\xc4\xcc\xc4\x8ee?e\x16;\xce\xc1\xc5\xa3?\\\x16\xbb+Z\xd7\xa0\xbf\t\xaf\x83\x17^\xb1\xad?\x02\xaf\x83/\xa3Q\xa1\xbf~\xe14R\xc3`\xc7?z\xe14\\\x82\x04\xc9\xbf\xd8\x05\xf8\x82\xff\xbf\xd5?\xd7\x05\xb8jeB\xd4\xbf\xd9\x8b\xfa\xb9dv\xb3\xbf\xd7\x8b\xfa\x19\xe8\x0c\xb4?B\xc7@o\xc3e\xc3?A\xc7@S\xbd\x10\xc1\xbf\xee\xac\xa5\x04\x9d\xc7~?"k)\xc1\x17\xdb\x93\xbf\xd8\xcf\x15H\xda\'\x19\xbf4\xea\xb7\x05\xdaZ\x93\xbf\x16P\xa0\x8bgo\x87\xbf]\xa0@\x97uqp?j\xa3\x9d9EZ\xb5?k\xa3\x9d\x99\x88\xa5\xb3\xbf\xfa)\xcf\x97\x01\x94\xc1?\xf8)O\xaej\x9e\xc3\xbf\x08*\x89c\x0b\x89\x83\xbf\x0e*\x89\xb3\xf8\x9a\x89?\x87`R`\x80\xb5v?\x97>[_\xc8\x13e?~Rh\xbd\xcf\xb9\xa9\xbf\x84Rh\x05\xdf\xf6\xa3?\xd9\x1ao_\x90h\xe7?\xdc\x1a\xef\xc5\'\xd5\xe6\xbfBV\x93\xd1c$F\xbfX5\x99\x19\xe3h\x82?V\xd4{\x88 Fg?*\xea=4+\xcay\xbfY\x0e\x96\xd4=L\xa5\xbf\xc4\x1c,al\xfe\x9d?\xb7\x07\xe9\xfeC\xb0G\xbf\x04|\x8b\xf0\xb0hQ\xbfl\x9a\x80\x8a\t\xcd\x89\xbf\x93e\x7f5\x9a\x07\x85\xbf\\\xc1\x01\x0esL\x90\xbf\xb1\x82\x03|>\x9b\x87?\x80p\xc4\x17\x96\xc1\xa7?}p\xc4\xbfr=\xa3\xbf\x13\x1c\xcdxG!\x82\xbf\x07\x8ef\xac\x8f\xdb\x93?6\xbb\xeat\xfc9\x82?]v\xd5II.p\xbf5\'\xac\xa0B^\xac?6\'\xac\x90\xbek\xad\xbf\xbf\xaa\xf7\xd4Z/\xb7?\xbf\xaaw\t\xe8w\xb4\xbf\xc2\x13\x1fM\xfckZ\xbf>\xf1\xd1N\xa6w\x97?n\x14\xaapn\xf5\x96\xbfD\nU\xc4\xbc\xfe\xa0?%8\x1d\x8a\x7f5p?.\x9c\x0e\xe5\xc9\x07\x86\xbf\x80\xce\xa5%[\xa9\xcb?t\xce\xe5\xa6\xeea\xcd\xbf\xaf\xd2,\x0et\xe8\xb6?\xaf\xd2,\xe29\xe5\xb2\xbf\x17!a\xff\x8fot?M\xf7\xf6d\x02^E?\x9d\xf7\x96\xc6\xc2\xba\x86\xbf\xd7\x17BZ\xee\xae#\xbf\xe2\r\xc3\xea\xf2\xe9\x98\xbf\xdc\x86a\xc1.\x91\xa0?7$"\xfbn\xf9\x91?#\xbc\xddm\xb1?T?%\x97\x82\x91\xc0%\xa4?O.\x053\xe9L\x98\xbf\xfa\xf0|\nTW\xb7\xbf\xf0\xf0|\xa2\xc1*\xbd?7fJ\xdc\xe7\xfb\x8d\xbf\xe3\x99\xb5\x83\xb3\x8f\x88\xbf@\x808\n\xb2\xbf\xba?5\x808C\xc6\x84\xba\xbf{\xa8\xb5G\xeb\xa2\x89?}\xa8\xb5\x0b\x97\x10\x84\xbf\xc2\x12-N9.\x8b?U%Z\xfc\x85\xd5w\xbf\x93c\xb7\x18\xed\xcd\xc6?\x93c\xb7"\xb9\xaa\xc6\xbf\x1f\x8e\xea\x04\x83\x9f\xe0\xbf/\x8e\xf6\xde\x04D\xe0?\xb2\xb1>}\x97Mi\xbfd\xacO\xe7\x83z\x85?c`\xc2\x03z\x02\xc8?``\xc2C\xa0\x00\xc6\xbf6\x99Z)o\x02\xb1?o2\xb5\xf3)\xaf\xa4\xbf\x10\xe0`\x01\x03\xe2\xc3\xbf\x10\xe0`\xc5P1\xc2?\x8b\x16\x89\xd7\x8c\xbc\x92\xbfD\x8bD\x8b\xb49\xa2??s\xc9\x8f\xc8\xb5q\xbfq\x19m\x80N\x8dg\xbf\x97\x17O(\x9f~\xc1\xbf\x95\x17g\x042\xae\xc0?\x85\xc5J\xae:Sm\xbf,\x9d\xda\xc88\x80q\xbfu\xe1\xda\xf2\xf4g\xc0?w\xe1\xda\xbd\xacA\xc1\xbf\xf7/\xb5?\xb6\x87\xaa?\xf2/\xb5\x9f4Y\xae\xbf\xfd\xea\r\x1e8\x8e\xc9?\xf9\xea\rb\xcc9\xca\xbf\\#\xd7F\xeb^\xa1\xbf_#\xd7\xa2\x88o\xa9?G\xb2\xd0\x9cn\xd0\xb5?F\xb2\x90}\x9du\xb4\xbf\xb5\x84M|\x83\xca\xb0?\xbf\x84M\x88\xb6\x18\xb0\xbfk\xa4\xdb]\x1e\xa2\xc6?j\xa4\xdb]\x1f\x13\xc6\xbf_\xc7\xe0(l\xa0\x9a\xbfX\xc7\xe0\xc8\xb9\xe3\x9f?\x97\xc1\x97vrw\xd4?\x8f\xc1W\x02\xebn\xd5\xbf\x10\x88\xa8\xbc\xb8\x9dn\xbf9\xde\xd5p!#\x8d\xbf\xd0\t;\xadh\xad\xca\xbf\xd1\t;&\x950\xcd?%\x90\\\xf8X&\xab?\x1aHn\x0fD2\xb3\xbf\xbe\r\xbd\xf5\xaf\xa6\xe0?\xc6\r=\x1eVG\xe0\xbf\xb0\xfe\x81\xe6\x82|\x8e\xbf\xc1\x0b\xf0s_\xacP\xbf\xf3Uy\xc3\xa1\xb8\xc1?\xf4Uy\xde\xac-\xc0\xbf\xa3\xed@\x940\x90\x81\xbf\xa3\xed@\x14\x83E\x8f?\x03\xfb)\x8a\x87\xf5\xaf?\x05\xfb)\xe4\x95\x81\xa8\xbf\x06\xf1\xf5\x90$\xacC\xbf"\xbe\x1e*Vax?/q\x9d!\x8d\x1c\x9e?6q\x9d\xc1\xdde\x98\xbfP{\x8b\x9e\xc0\xe1\x83?\xba\x84t\xa1M(\x80?\x96\xb6\xbd\xe9u\xf7\xb3?\x95\xb6\xbdS\n\x07\xb4\xbf\x1ei\x11\x07oV\x9f? i\x11W\xb0.\x9e\xbf\xb9\x16\xd9\x08\xc7,x\xbfR\x8bl\xf4*\xe9\x87?>\x93$\xbc\xb6r\xb1?A\x93$dJL\xb1\xbf]q\xbf\xf0=\xd9j?#\xee\x17\x96,\x12\x94\xbf\xf4;@\xdc\xc8op\xbf\xdbw\x80\xd8_\x85`?\xed\x06?`a\x80\xb9?\xed\x06\xbf\xaf\x94\xc5\xb7\xbfU\xa7\x83w\xbf{\xb0?V\xa7\x83\xa9\xa8!\xb1\xbf\xdd\xa0\xdf\xf03\x00j?X\r\xfa\r\xe7\xea(\xbf V\xce\xdfl\x03\xac?,V\xceUpi\xa8\xbfg&1\xc2\x03u\xb3\xbfm&139\xa7\xb0?L\xab\xef\x026\xa2\xc3\xbfM\xab\xef\x19\x06e\xc5?\xbcB \xafj<\xe4?\xbaBPA[m\xe4\xbf"\xd2Y\x8e\x13Vx\xbf\xc3-\xa6q\x85\n~\xbf\x15\xb5\xddx\x83\x94w?\xc7\x95D\xaeQ\x06d?\xbcq*/\xf4\xee\xc7?\xbcq*\x1bU&\xc8\xbf,<\xdd\x859\xd2\xa5?(<\xdd\x01\xbbN\xae\xbfX.Za\x133\xa1\xbfW.Zmq)\xa0?\xa9\x7f\xde\x0ei\x96c?\x0f`H\xbc\xc4\xcb\x85?\x9a\x97\xf7[\x80\x8c\xd1?\xa2\x977+U\x1e\xd2\xbf\xc4\xb8+}e\xc9\xbe?\xc1\xb8+?\x0f\x7f\xba\xbf\x9f\xf5\x92$W\x85\xa8\xbf\xa5\xf5\x92\xec\xa0\xda\xa4?\xe2\xd71\xa9*!\xc6?\xdd\xd71\x11\xd9\xf7\xc4\xbf5\xf0\x94B\xcf\xdd\xc6?4\xf0t\x07\xddL\xc6\xbf\xc0\x89\xa0\x14z\xac\xd6\xbf\xc0\x89\xe0\xf5/\x8f\xd6?9\xf7 \xb6\x14\x00\xd4?7\xf7 \x86\xff\x80\xd2\xbf>-V\x95\x0e\x14\xb8\xbf?-V\xaf\xed\x11\xb8?J\xc5\xf6\x9bSW\xa8\xbfJ\xc56Q`\xd3\xa6?\x1bL\xb1\xd4&r\x86\xbf\x02a\x8a\xa5\x8fo^?L"\x13A\xb5\xcd\xc3?L"\x13%\xc2\x96\xc3\xbf\xf5\xeb%\xf4\x9cr\xb4?\xf4\xeb%\xaaIV\xb8\xbf\xe2\x00\xce\xdb\x98r\xd2?\xe0\x00\xceI\x04\x92\xd1\xbfG\xe8\x8b\x8cd\xfc\xc5??\xe8\xcb\x13d\x8b\xc7\xbf\xc3K\t\x92\x8fah?\x0f\xad}/\x87;\x88?)\x11\x80\xe2\xf3\x1bw?\x0c"\x00E\x8f\'i\xbf\x08)f\xaa5\x01y?\x08)f*\xc5\xf4|\xbfg~|\'zC\xb4\xbf]~|\x85\xfdE\xb8?L\xb3\xac\xc4\xbd\xd1u\xbf\xb5LS\x9bV\xaap\xbf\x9f\x02\xea\xdfF\x80\xbe?\x9c\x02\xea\x97\xe0\x0c\xb7\xbfeF\x8e\x07\xdf3\xaa?cF\x8e\x9f\xcb\xd1\xad\xbf\xbb\xe0r\x12z\xaf\xb5?\xb9\xe0rbx4\xb0\xbf@,i\x8b\x17\xd0u?\x15\x96\xb4\x8d\xfah\x81\xbf\xf7\xca\x12\r:d\xa3?\x82e\x89`\x9e\x9d\xb1\xbf<k\xb3?\x1f\x7f\xee?;k\xb34{\xbc\xed\xbf\x10k\xdc,C\x89q\xbfn\xca\x91\x99\xeb\xa2\x85\xbf\xed\xea\xb4\xd9f\xdc\x87\xbf\xe9\xea\xb4\xe1\x8dg\x80?m\x98\xff\xd2d\xa6\xbe\xbfo\x98/ x,\xbd?\x13d\xed\x10\x90\x16\x85\xbf\xca\xbe)\xd1X^H\xbf\xe94\x15ReV\x9a\xbf/\x96\xd5\x9bxu\x80\xbf\x17\x04\xd3\xdb\x9f\xccl?\xe9}\x16\xd2 \x86x?\x8cm)\xf6l#\xb3?\x8am)\xf2q\x9b\xb3\xbf\xaem\xc3&\x87\x8c\xbb\xbf\xaemC/\xf9^\xbc?\x01&\xc1\x80\x83\x01\x98\xbf&\x98\x04\xe3v1y?\xd8\xfa\xb6&\xdf#\xc3\xbf\xe0\xfa\xb6N\t)\xc2?\x81:\x99d$v\xbe?\x80:\x99.\xb1\x9c\xbe\xbf\xaf\x94\xaf\xa0\n\xeb\x84\xbf\xd2\xd6\xa0\x9e\x85\x96y\xbfi*\xc4X\x7f\x02\xa8?\x9bT\x88\x91]\x10\x9d\xbf\xc8T\x1fW"\xa5\x93\xbf\xe8\xac\x82\xa3L\x7fu\xbf\x87\x9c\xe7L\x80\x94\xe0?r\x9c\xe78?\x13\xe1\xbf\xe8XvR\x01\x0e\x88?\xfe\x8ce\'\xac\x83H\xbf\xe0\x0b\x9f\xd21\x8f\x80?\xe5\xa0\x07k\x0cAZ?#\xc0\xd6\x9aC\xd1\xa0\xbf]\x80\xad\xdd\x88\x99\x9f?\xa0d\x13\x18\xd5\x10\xb2\xbf\xa5d\x13R\xec\xcf\xb5?\xac7\xdc\xd5\xf5\xa1s?(\xe4\x11\xad\xc4\xfd\x87?~\x15\xcc\x01lK\xac?\x81\x15\xcc\x81\x92\x8c\xac\xbf\x86@x*i\xf5\xd2?\x80@x8\xa7s\xd1\xbf\xdf\xe2\xebt(\x7f\xb0\xbf\xe3\xe2\xeb\xdflL\xb1?\xe7\xe3L)o\x8c\xe9?\xed\xe3lP\xef7\xea\xbf\x11\x02%\xac\x92\xee\xa6?\x13\x02%\xf0[\x87\xaa\xbf[\xdeZ\x95\x8b\x15\x93?\xbc\xf2\xd6\xca\x00\xabg\xbf\x16\xee\x1c\xbeJ\xee\xaf?\x14\xee\x1c\xd3\xc1\xb2\xa9\xbfG\xa0V\x84~\xb9\xc6?G\xa0V\xf2R\xb5\xc4\xbf\n\x806F\x02\x8ax\xbf\n\x806\xc6\xc4%y?{\xe4X\xd1\xd2\x91\xcf?}\xe4\xd8\xbc\x82\xc1\xcd\xbfl\x8f\xbd\xcf~M\xa1\xbfi\x8f\xbd,Q0\xa7?\xf9\x0e\x10"ED\xa3\xbf\x0b\x1e D\xca\xe2\x97?B)\xb9\x0c\xc3AY?U\xb5\xd1\\cMy?\x05\xe3\xcd\xe6\xd2a\x80?P\xd0!\xb3\x11\xf3A?\ti\xf5\xca\x8a1\xaf?\x82\xb4z\x1d\x05}\xb0\xbf\x17i\x157\x8d\xe9\x8c?\xd8-\xd5q\x94z\x7f?N,\'\x8bN\xf7\xa6\xbf6,\'\xa1\xfem\xaf?C;TEz\x88\xb8\xbf@;T\x9b2G\xbb?\'O{eH\t\xc9\xbf\'OK\xc0a$\xc9?v\x9f\xf12A\xfaw\xbf\xbf\xcfx5\x8br\x82?\xbfj\x8bo^&\xa5?\xbfj\x8b#\x15\x1d\xa8\xbf\xe02\x85\xa2\x1b\xfe\xd9\xbf\xe02\x05\x9c\xc1\xea\xd9?\xf0\xce\xce\xd3)\xf8\xc5\xbf\xec\xce\xce\x1e\x00\x9b\xc3?\x1c(W\xf7\r\xb9\x93\xbf\x9b\xafQ!\xee\n\x82\xbf\x17\xba6\x9fl\x17\xe4?\x18\xba\xd6\xb6\xa5b\xe4\xbf1t\xc83EX\xd5?5tHi\xa7\xe2\xd3\xbfG\xb1\xbb\x14T{\xb3\xbfG\xb1\xbb,\x0e\xb3\xb0?J\'*\xba3\xe2\xc3\xbfN\'*!\x17\x0f\xc2?\xe0\xa4\xe78\xe5\xc2s?\xe3\xe99\xc6\xfa\x8f\x96\xbf\x13\x96\xa9\xbb\x16]\x8c?#,S\xff\xb09r\xbf\xfc\xd8\x84\xee\xa6O\xc2\xbf\xfc\xd8\x849\x16^\xc1?\xfa\x1ft\x80|\xea\x91?#\xc0\x17_\xa81\x8b?\xb0\xcc\x12s\nP\x93\xbf_f\x89\xa1\xff9\xa4?jgU\xef\xe4\x1b\xa9?fgU\xbf\xe4\xd3\xa7\xbf\x806(\xe9\xed]\xa2\xbf$\xda\xa0\x047\xa7\x8d?\xfc\xabj\x1cD\xe4\xb0?\x01X\xd5\xb4d\x0f\xae\xbf]a\x9c\x96\xb2>\xb2?Za\x9c\xc1Pi\xb3\xbf\x08.y\xe2\xb7\xe4\xb4?\x06.y\x8f\xe1\xf1\xb6\xbf9\xc3\x858\x9dG\x87?\x10\xe6\xd1\xbb\xd7\xbfU?}\xf2\x8f\xef\x0c\x03\xb2\xbf\x85\xf2\x0f\x00\x97\xd0\xb0?\xc8\xf0k#w\xdb9?\xea\x81\x92\xcf\xcd\xa7o?\x06\xde\xbb\xb7\xdc\x00v\xbf\nx\xef&R9Q?7g\x18@W\xba\xe0?_\xce0\xae\xf6)\xde\xbfE\x8a\x01bf\xd0\xa9?J\x8a\x01"\x91\xe1\xac\xbf\xe5\xa9\xd2\x80\xec]\x90?OX\xb5\xfc\x13\xffw?\xff\x99\x8b\x82\x8f\xda\xd0?\xff\x99K\x17rf\xd1\xbf\xd7\xf1\xe2\xcf\x131\x92\xbfC\x8f\x17\xbfr\xf7i?t\x96\xd2\xbab\x8d\x83?\xc0,\xa55\xa2wv\xbfF\xb3\r\x1d\xb3\xf7\xc5?A\xb3\r<\xc2\x17\xc3\xbfj\x89\x11\x0b\x04\x9c\x96?\xa0%FL\xa7\x80x\xbf\xaa\xab(\xd5\xee\xdc\x7f\xbf\x92\xa8\xae\xf5\x0f\xa4i\xbfz8\x05\x1d\xc4\x86\xcb?y8\x857)\x17\xca\xbf\x08\x03I[P_\xae\xbf\x07\x03\xc9\x1b\xee8\xa9?w)(\x8c\x1b\xabq\xbf5\x05\x85q\xb3;\xa6?\xa0y\x9f\xc46L\x84?`\x19\x82\xedc\xd1h?#@\x11/0\x83\xd1\xbfw\x80"\xb0\x03\xdc\xcf?\x00Ie\x952\xec\xdb\xbf\xffHebb\x05\xdb?\x7fA\xd5\x97\x8ek\x8e\xbf\x89A\xd5\x8fmC\x8a?\xcb\x1a\xe9\xc6\xaa\x06\xb7\xbf\xc3\x1aIV\x9fi\xba?hY\xb1K\xf0H\xa1?fY\xb1\xe7\x0b\xa7\xa6\xbf\xf2\x01\xb7\xa5]\xfb\xb6\xbf\xf1\x01\xb7\x04\xe3\xf8\xb8?\xf1\x9c\x03\xe1u\x1a\x03@\xf1\x9cK\x0f\xc2\xfd\x02\xc0\x8c\x9d\xe7\xb0\xd9\x17\xcb\xbf\x92\x9d\xe7\x88z\x06\xca?\r\xe5\x7f\x99\x01\x11\xa5\xbf\x11\xe5\x7f\x05R\xa8\xa2?l8FJL\x07\x85?\xefp\x8c\xf4$\x82x\xbf\\\xda}\x0e\xab\x9e\xe1\xbf\\\xda]y\xe5\x82\xe1?w\xd6\x0eP\x82\xe9\xce\xbfy\xd6\xae\xcfz\r\xce?\xea`\x7f}F\xbf\xe1\xbf\xe7`\xbfV\xb57\xe2?\x0e\xc82U\xbc\x7f\xb1?\xe9\x8f\xe5\x1ag\xcf\xaa\xbf\xf7#\x9a~S\xbd\xb1\xbf\xf5#\x9aL\x9e\xcb\xb1?T\x18\x17\x9dG\x0b\xc4?U\x18\x97\xb4J\x1c\xc5\xbf\x8c\xf9\xea[\xe0m\x8d?\x911_}(\xbc<\xbfY0+\xa5S\xfb\xb3?L0+\x05\xfea\xbb\xbf\x8f?\x06\xbd\xd3\x0e\x84?q\xc0\xf9\x02\x96\xcc\x89?\x85K\x1e\xb0y%\xc6?\x85K^\xd7\x0f,\xc6\xbf*\xdb\x9974\x1c\x9f\xbf\x8f\xed\xcc\xd1\xc7\x89\xa5?v\xf5\x00\xa9\xbd#\xc2\xbf{\xf5\x80\x82*\x1b\xc0?\xde\xbfW\x9b\xb4a\x8a\xbf)\x00\xa1\x12\x9e\xb1n\xbf`\xa2i\x19W\xab\x99?U\xa2\xe9p\xd6A\x91\xbf\x97\\\x85\xf6n~\xf0\xbf\x9c\\\x07p\x9bX\xf0?an8\xfe\xb1{\x7f?\x93\x1b\x8e/U5\x90\xbf\x8d\x10:\\\xac\xa8m\xbf3\x08\x1d.\xebv}?V\xbf\xa7\x95|\x1d\x87\xbfy\x03a\xe9[\xa5f\xbf\xecU\xb2\x81\xd4\xadq?\n\xd5&_nl\x80?Q\x90\xcf\xfa\xefcq\xbfQ\x90\xcf\xbai\x07|?\xd2\xfag\x16\xd8\xac|?\x99\x02\xcc\xd4<v\x8b?\xa5\xc2Qr\x04\r\xe6?\xa4\xc21e\xc8o\xe5\xbf[\x14K%\x1b#\x9a\xbf$\x8a\xa5\x821G\xa8?\xb1\xa12\xbf"+\x89?\xe7P\x99\x1f\xda\x86\x96\xbf\xed\xae\x13\xff$<\xc2?\xe9\xae\x13hVN\xc4\xbf#2\xd4\xdf\xf2F\xce\xbf%2\xd4y\xafr\xcf?\x0b9\r\xcf^2\x92?\xa8}\x9c\x16\xc8E)\xbfaj\xb8\xe9p\x8c\xb5\xbfZj\xb8\xbfAK\xb6?\xe1,,\xe9\x8c\xd8w?\x91\x16\x96\xe4\xd8m\x84\xbf&\xe8\xb0\x10\xc1|\xb8?8\xe80a;\x86\xba\xbf\x94\x8f\':0\xd2\x9b?\xc4\xc7\x13\xb5t\x12\xa5\xbfs\x00X\x95\xbb\xa4t\xbf\xca\xffS\xe5\xe00\x84\xbf\xcdg;\xabw\x0f\xb5\xbf\xcdg;\x87&\xf2\xb3?K\xb4\x15\xe6^\xe9\x92\xbfz\xb4\x15\xa6\xd3\x00\x9f?\xb3z\x94\x90\xaf\xa2\\\xbf\x9ap\xed\xb9O!\x88\xbf\xa6$\x84\xb3\n\xed\xd2\xbf\xa6$\x84}\x8f\xf0\xd4?\xce\x07\xdf\xb7\xd2\xe4\xc1?\xd0\x07\xdf\x7f\xe2\xc9\xc4\xbf\x97\xb4:o/\x1e\x86\xbfXZ\x9dG\xa4\xe6\x92?\xb1\x1c<k\xec:\xcc\xbf\xae\x1c\\j2\xba\xcb?\x86Jx\xdb]\x1cx\xbf\xa0\x12\xde\x168\xbc\x9f?"\xe7g=\xcd\x1fN?z\x0cLA\x0c\xe4Y?\xedG\x9c\xd2\xe6\xa3\xaa\xbf\xeeG\x9c\x08\xc9\xf1\xa8?\x87=\x0ffs\x0c\xba?\x94=\x0f*G\x11\xbb\xbf\xb3\x9aaD\x90\xd4W?P\x99\xe7\xae7{p?0\xfd\xb0\xa8J\xbf\xd8\xbf.\xfd\xb0\xafv\xb3\xd7?\xd6\x9b\xb3f\t\xc0\x91\xbf\xe5\xcdY#\xc1\xd3\xa6?\xc2q\x16\x1d\xee\xd3\xc3?\xc3q\x16\xbf\xdc\x9d\xc3\xbfp\xc7\xaf\x1d%Z\x84\xbf\xdf\xe3\xd7\x8a\x06\xf8\x93?\x06\xbb\xbf`\xf8\x99D?\x14\xfe\x05\xfc\xef\x05\x95\xbf\x95\xf6\x90.8c\xb4?1\xed!\x85U\xa9\xad\xbf\xd3\x19\xed)\xc5Q\x8e?o\xcc%\x0c\xfc\x18w?\x07`\x12+\xb3=\xbd\xbf\xf9/\x89HH#\xc2?TC\x19Kp\xe1\xab\xbfPC\x19\xcb#\xcf\xac?j\x1fX\x9d\xf8\xe6\xc7\xbfe\x1f\x98\xd4\x10=\xc7?Ga\xc2\xe4\xf1\x04\xba?Ha\xc2\x06H\xf0\xbb\xbf\xf5\r\xecY\n\xf8\xb6\xbf\xf6\r\xec\xac\x11\x84\xb5?\xdf\x8f\x8a\nD\x7f\xbd\xbf\xde\x8f\x8a\xfe\xc1\x8d\xbe?\xcd\xbe\x17)<\xa0\xc3\xbf\xcb\xbe\x17$~\x94\xc3?\xeaf\xff{\xe8\x8c\xad?z\xb3\xff\xd5\xd0 \xb0\xbfD\xad\xc4\xaa\x92$\xd4\xbfE\xadD\x87\x99\xf8\xd3?\xceN\xa3\x9e\xb9:\xc4\xbf\xceNcKU\xe5\xc3?!\x08\xd7U\xc2e\xaa?\x0e\x84\xeb*\x91\xa7\xb0\xbfi\xba\xecA\xc4c\xc0\xbfj\xbal\x9d\xdc\x10\xc0?\x83\xef\x9e\xa7.X\xe2\xbf}\xef\x9e\xd5\xb1,\xe2?\x96/w\xbb\xda-e?j\xd0\x88\xc4\xc5\x16k?\x8fI{\xbb\xa6\xa0\xb7\xbf\x8bI{\xd9\xad\x19\xbe?\xdb\x000\x19\xbe\xf4\x91\xbf\xdb\x000\xd9\xbd\xae\x90?\xc5`\xc3\xad"w\xa2\xbf\xc8`\xc3\xd9\x88M\xa0?\xaa\xa8}\xae\xc9\x0ej?JE\xeds\x02\xe45\xbf\n\xe2\x93\xfd<1\xad\xbf\n\xe2[]Ie\xac?\x1d\xcc\xbe\xe0M\xc3\x80\xbf\x04f_P-v\x94?\x85E3%Xz\xaf\xbf\x84E3\xd3u\xa9\xab?=0\xda\xab&\x1c\x8b\xbf!\x18\xed\xd3\x1be\x96?\xb4\xb0Z\x08\xf1GR\xbf\x1c\xac\x16R*D\x7f?f\x98\xa1u\x15C\xb1\xbf]\x98\xa1\x81\xad\xa1\xb9?A\x98\x97\xf1\xf1\xa9\x8a\xbf\x8a\xcf\xd0\x9c\x12ex\xbf\x15D\xf5\x9d\xa2\xc6\x8a\xbf\xe1w\x15D\x92\xf1w\xbf+:2\x8b.&\xce\xbf*:R\x01\xd8\x90\xcc?\x1d\x12\x08o\x14o\xb5\xbf\x16\x12\x08Zlt\xb8?\x13\xefzC\x87\x02\x86\xbf\x18\xefz\x83Y\xc4\x82?\xe35U\xee\xdd\xec\xc2\xbf\xe85U\xbe\xc9\xa1\xc0?\xccb\xfa\xf8\xb93\xbd?x1}\x83y\xc7\xc0\xbfMP\x0c\xd0a\xe7\xc3?MP\x0c\x91\xee\xb3\xc2\xbfe\xb64\xb7z\x03\xf1\xbfk\xb6\xb4\x1b\x93\xda\xf0?K\'\xe3\x1a\x89\x0f\x87\xbf\x93\x93q\xd9\xf9\x8c\x99?\xf1\xc0(P\x8a,r\xbfw\x9f\xebw\x90\x00\x86\xbfG\x14E\xb5,\xa7\xc3\xbfD\x14\xc5z\x95\x0c\xc5?\xa3N\xb0P/3\xa6\xbf\xef:\xc1b\xee\xcc\x8d?\x01\xc0\x83\x94\xd0\x0f\xa8?\x04\xc0\x83\xbce[\xaf\xbf0\xca\xf2\x10\x96!t\xbf\x12ey\x90\x91\xd7\x86?\xec\x8e5\xe1\x92Z\xd4\xbf\xe3\x8e\xb5\x8c,e\xd6?g\xa9\x10\x05K9\xd1\xbfc\xa9\x10=#K\xd2?PN\x88\xea\x95\xdf\xc1?NN(\xac-7\xc3\xbf\x0eT0\xe9\xd8\xc1\xc5\xbf\x0fT\xf0,m\xcb\xc4?\x9co\x80\x92\xc2\xe4\xcb\xbf\x9bo\x80\x80\xfb\x84\xcc?\xf3Y\x7f\xc0\xc6\xf4\xe0?\xf4Y\x1fQm\xaf\xe0\xbf\xd3\x07)\xc4Q\x9d\xdb\xbf\xd4\x07\xa9w\xe7!\xda?8\xb2B\\C\xa5\xad?T\xb2B\xdf\x19\x05\xa9\xbf\xce\xec\xebk\xb6i\xe6?\xcb\xec\xeb\x1eu\x95\xe6\xbf\xc6\x9e\xd7jIu|?\xc6\x9e\xd7\xea_\x90\x7f\xbf\x97\xb9\xb7\x10\x9e\x1f\xca\xbf\x96\xb9\xb7G\xb0E\xcb?\xa33\x8f\xa3\x94\x80\xba\xbf\xa93\x8f\x05W\xf3\xb6?\x93z\xb15\xf0\xbe\xd4\xbf\x8dz\xb1;Z\xfe\xd2?9\x82:\x89\x00\x9a\xd0\xbf8\x82:\x9cI\xfe\xd0?\xb6\xb1\xcf\x14\xab\xe0\xc0?6c\x9f\xad\xc6\xf5\xbc\xbf\xd8\x97;r\xcb9\xb7\xbf\xdf\x97\xbb1\xc2G\xbd?\x8b\xab\x88\xdb3\xf7\x92\xbf\xd8\xa8\xee\xe8m4\x82\xbfuo0}\xf9\xf4\x97\xbf%!\x9f%\x05\xb5\x8c\xbf\x83W\xdc\xc1\xb0\x85N\xbf\xb7\xe2\x0e\xf4\xb0\x18\x95?\x93\x17\xdc\xf0E\xc6\xc4\xbf\x95\x17H\xa3,\xbc\xc4?\x81\xf9\x10\xf7\x8b\xf1\xb9\xbf\x81\xf9\x10\x19\xf9\x81\xb6?}\xce\xca\x99R\x9e\xb5\xbf\x88\xce\xca\xc9\x84q\xb1?\xcf\xb4\x17\x97\xe6\xb4\x8e?HK\xe8\xb8\xb1\x8b\x83?\x98e\x0b\xff\x8f\xba\xc9\xbf\x94e\x0b\x8a\xd7\xd4\xc9?\xb4gb?\xd3\x00\xef\xbf\xb4gb\x8f\xb9-\xee?=\x8f\x08\xdf\xdb\x13|\xbfU\xb8{ \xa4\xf4\x81\xbf7\xbfW\x1a9\xd1\xfd>\xbdW\x1a)\xa2\\z\xbfI%\xc5I\x92H\xd1?I%E\xfe:\xff\xd1\xbf\xaa7\xeem\xb9\xd6\x8e?1o\xdc\x1b/\xa1x\xbf\x9c\xd7\x8b\x05\xf7\x86\x8a?\x9b\xd7\x8b%\xc3\xaf\x81\xbf\x14\xbdM\t\x84\x94\x92\xbf\xdc\xe8m\xca\x13\x8fc?f9MP\x83t\xb0\xbfe9M\xe4\x0e\x1b\xb1?\xde\x9dQ\xe0^{\xc2?\xd6\x9d\xd1\xf4\xc4Q\xc3\xbfEZ&\xd7\xda\x83`\xbf\x11-\x93\x8b\xfcX~?&)!c\x99\xe9\x93\xbf\xd1\xb6\xf6\xe6\xd5\xb7k\xbf\xb2\xd2\x97\x93\x8e\x0e\xc4\xbf\xb4\xd2WB\x97Y\xc3?\xee\xd5j\xaa\x80\x1fA?vJe0;\xc7l?\xd5?\x8b\xd7}\xbc\x96\xbfv\x7f\x16\xaf\x00\xd4\x8c?Nq_\xc6\x80\xe6\x8f?\xb8\x8a\xfb\xf2\xd1\xe8V\xbf\xf6\x8a\xbf\xf1C\xf8\xdf\xbf\xec\x8a?\xb9Q\x14\xdf?Or\xf6\xf6\xa9J\x9b\xbf\x9a\xe4\xec]\x06\xcd\x86?\'K\xaa\x7f\xe8T\x91?B\x96T?J\xdb\x86\xbf\x01~\xeeHvqz?\x13\x82\x11\xd7\xb0G}?\x01\x17\x9afP\x08\xc3?\x06\x17\x9a\xc9\xbaG\xc1\xbf\x16\xcb\xbd<\xf9\xc7\x9f\xbf\xdai\x84\xc6](\x89\xbf\xfc\x9e\x04D\xc5\'\xb1\xbf\xf4=\t|V\xe7\xae?\xee\x8c\x8f\x9e\x9e\x0c\xd9\xbf\xef\x8c\x8f\xd7\xcah\xd8?\xd03\xa4Bc\xd2\xa2?\xce3\xa4(X\xb3\xa7\xbf\xe08(\x969v\xf3\xbf\xdf8hl\x0e.\xf3?\xbb1\x8a\x9d\xa4\xd0\xb3\xbf\xbe1\x8au\x0eL\xb3?g5\xe3\xcd(\xb7p?U\xcdx\xa3hH\x95\xbf\xe9{m0C\xdf\xba\xbf\xe9{m\x97=\xf0\xb9?\xa4\x15!\xbf\x1a\xe6\xe0\xbf\xa3\x15\x01\xb0Z\xf9\xe0?3\xe2\xfbp\xf8yP?\\|\x1f~R\xd0\x8d\xbf\xc1\xd9\x03\xea\xf2\xbb\xcf\xbf\xc0\xd9C\x1b\xfdt\xcd?&\xdb\x97\xbb\xd2}.\xbf<\xd0\x88z\xe7&\x9f\xbf\xf5P\x0f>\xb4e\xb2\xbf\xf6P\x0f\x12\x1a^\xb7?\x88A{\xab\xd3\x8e\xbc\xbf\x84A{]\xa9\x99\xbe?o\x8a/\xc0\x1c\xe5z?o\x8a/\x00!\xb0v\xbf\xcf\xc3\xbb\xb3\xf9g\xac?\xd0\xc3\xbb\xa9E\xe9\xaa\xbfd\x1c\x88\xb8pg\x8c?f\x8e\xdf}s7n?\xe3\xb2\xcb\xb4$\xa9\x94?\x98e\x97\t\xc4*\x8f\xbf\xc1\xa5\x9b`[\xbb\xa1?\xcb\xa5\x9b\xc0 \xfb\xa3\xbf\xeb\x97\xa7Z\x9a\xf0\xbf?\xed\x97\xa7\xfeTD\xbf\xbf\xa1P\xdf\x10\x92X\x90?\x8bP\xdf\xb4[\x84\x9c\xbf\xd2\x8csn4P\xbe?\xd5\x8csES@\xbc\xbf\x04\x04\xf6&\xb8\x13\xb3?\xfc\x03\xf6f\x11\xcf\xb7\xbfS\x88\x00\x06Z\x84\xbd?S\x88\x00*\x8f\x1b\xbc\xbf_\xad\xe1\xb0\xc6\xf0y?\xa7R\x1e\x1f\xb2\xc2\x7f?\xa1\x94q/\x96(\xc9?\xa6\x94q\xca-\x13\xc8\xbf\xcc\x0em\x0c\x9f@\xc3?\xd6\x0e\xed\x8a\x8e;\xc4\xbf\x82\xa8\xffA\xfe\xc5\xae?\x85\xa8\xff\x81\xab\xd6\xac\xbf\xc3\x9f\xec\x1bO\x89\xc2?\xc1\x9f\xec\x83\xd5:\xc2\xbfwD\xaa\x81\x85\xd2\xce?{D\xaaYY\x1e\xcd\xbf\xabK\x8c\x8b{\x0fp\xbf\r]b\xdc\xb9\xdcC?\x8a6.o\xce1\xb7?\x8a6.\x87\xe6\xb7\xb6\xbf\xd5\xbc\xf2\xae\x9b\x8b\x90?\xd5\xbc\xf2\x8ec0\x9d\xbf\xf7\xdc\xfbRGO\x8a?7\xf7\xbe\xfcHY\xa0\xbf\xe0\xbaxY\x10\x1b\x9b\xbf\x91u\xf1\xbay]\x87?\xd4:\xf7\xa2Z\xed\x97\xbf\xd3u\xeee\x00\xad\x8e?/ \x0c(\xac\x1c\x91\xbfP@\x18\xd4bn\x8b?)\xc55\xf6\xf1P\x9b?\x8d\xe2\x1ak8\xae\xa9\xbf\xe4I\x03\xf4\xa1\xe8\x9b?\xef\xa4\x01\xa4\xef>\xa2\xbf^\xd1~S:D\x89?9]\x02y}.y?\x9bf\xf8\x19Rj\xa6\xbf\x94f\xf8\xa1\x994\xaa?\x9e\xa9Na\xa0\x1d\x91?\xc3\xacb\x9d\x8c\xae\x82?\xdb\x8a\xd9\xfe\xaaS\x83\xbfU\xeaL\xe2l;|\xbf\x8a\xa4\xcb6\xc6C\xd3?\x89\xa4\xcb|\xc5l\xd3\xbf\xed\x14\xdb\xbcA\x87\xa2?\xec\x14\xdb\xca\x89\x1a\xa4\xbf\xb6`)\x17fJ\x88?\x96\xd2\xa75\x81t#?97\x14\x88\x9a\x9a\xc0?87\x14\x90\xa4\xbb\xc0\xbfd3\'\x06Z\x9ex?m\x9a91>EN\xbf\xd5\x8f"?\xee\xae\xb7\xbf\xdd\x8f"\xdb\xd5\x1b\xbb?\xe1\xa6\x0f\xc5y\xef\xd8?\xdb\xa6\x0fG\x89\xa1\xd8\xbf%\x02\xc8{\xbf\x12\x82\xbf$\x02\xc8O\x92)\x8b?\xa5Bi|Zp\x8a\xbf\xa9\n\xa5\x91\xdbe`?q\x80r8$\xb1\xbe?q\x802\xe6\xc3\xb0\xbf\xbf\x18\xd6\x02\xa9[\xf3\x9b?\x13\xd6\x02qnG\x98\xbf!\xa6\xfe_Q\xb6\x90?\x87\x98\xfa\xf1\xb8pw\xbf\xe1\xd5\xc5y\xdc\xf1|\xbf\x1f\x15\x1d\x033\xb4\x89\xbf\xd7{\x1d\x81\x12\xaf\x96\xbf\xdb{\x1diL\x14\x97?{\x9f\xa3\xa0\xc1M\xd4?z\x9f\xf3\x00\xbc\xfd\xd3\xbf\x8a\xaf\x06\x9a\xceNj\xbf \xe0\xd5\xc0a\xc9\x15?M\xce\xff\xc7\xe2\x95\xb5?K\xce\xff\x853m\xb8\xbf\x07\xf0\xc9\xb4\x95H\xcc?\x08\xf0\xc9\xbf\x93\xd2\xcd\xbf\x93\xad\xe3#CA\xb8?\x96\xad\xe3\x1f\x7f{\xb2\xbf~\xcd\xb8\x81vq\xb3\xbf\xe9\x9aq+S:\xae?\xc5\xb8\x89Z\xff^\xb2?\xb9\xb8\x89X8\x96\xb6\xbf \xb2\x8f\x8d7\xc3\xc0?3d\x1f\xcf\xf7I\xbf\xbf*\x82\xc9\xe1\x9a\x1ft?\xd6}6^\x86qx?\x12\xc3\x8cI6\x04\xba?\x0e\xc3LT\x9d\x90\xb9\xbf=\xe8K\x99p9\xb1?7\xe8\x8b\x969\xfb\xb2\xbf\x83\xb5\xd0\x17\x17t\xcb?\x86\xb5\xd0\xee\xbbj\xc9\xbfpZ\x02\xcd\x82i\xd3?pZB_\x80D\xd2\xbf\xf2\x1d\xd3\\\x1b\x91\xb1\xbf\xf2\x1d\xd3D!\xe0\xb6?;\xc93\xbf;b\xcc?;\xc9c\x97a0\xcc\xbfu\x81\x83\x11\xe9\x06g?\xb8\x1f\x9f\x0cN\x84\x8d?^\xa9\x16\x9d)\xcd\xb1?d\xa9\x16a\x14\xd4\xb8\xbfS\xbew\xa1\xcaCo?g\x83\x10\xfdn\xc5P?\xeab4\x11[\\\xbc?i1\x9a\xc9\xa7\xd6\xc0\xbf1\xf5\xb9\xb3C\xfe\xc0?\x82\xeaso\xe0\xf4\xbb\xbf\x11\\c\x02\xe5Q\xad\xbf\x1e\\c\x92\x1b\'\xa4?\xaef\x1d\xf6!dY\xbf\xadY\x87\xddp\x85u?\xaaQT\xa1\xb5\xce\xca\xbf\xabQTqF\xf2\xca?\x02\xb1\x10M\xb5\x9f\xd0?\x01\xb1\x103\x12\xdf\xd0\xbfN\x86\x956\xa6\xc2k?\xdd<\xb5\x84\xef\xf3|?\xc7\x01\x0b\xc0.\xeb\x7f?\'\xfc\xe9/\x9c\x17m?\xb2\xac"\xe3\xe1\x06\x99?\xb9\xac"cm\xc1\x9b\xbf\x03Q\x98\xc0\xc9p\x84\xbf\x14\xa20A[\xfbv?\x91\x9a3\\\xe4\x1bO\xbfU\xc6<\xf87\x95\x87\xbf\x16\x95&F\x8f\x91\x84?\x81\xb5\xec\xec\x08\x8a\x9a?Q\xec\xdd\xffl\x8c\xa3?\x98\xd8\xbb\xbf\xf7\xba\x99\xbf%\xdd\x9f\x99\x007\xa2?%\xdd\x9f\xa3\x1dQ\xa2\xbfdA\x9c+\xf3\x1d\x93\xbf>\x0b\xe2|h\xd7f?\\\xf3hW\xdd\x02\xa3?g\xe6\xd1\xa3c\xc3\x98\xbf\xb8\x83Ekt\x03\xc2?\xbb\x83EGEt\xc3\xbf\xba7\xc7]>6s?\xba7\xc7\xfd__r\xbfq\xa8\xbfm^\x99\x8f?\xcf\xa8\xbfK\xc9\x0c\x82\xbfM\x9c$J\xbfEp\xbf\xb3c\xdb5n\xb9y\xbf\x99\xaf\x04,~\xado\xbf\x18K\xc0\n\x83\xce\xa0??Lu\xbc\x15\x03\xb2?\x86\x98\xea\t#r\xaf\xbf\xbe\x0f\x8d\x94\x1c\xe3}\xbf\xbe\x0f\x8dT\xd4\r\x7f?aQ\xf1\x83z\xbbs\xbf\x86\xa8\xf8A\x08\xe1\x80?)\xb8\xed\x88\xc10\x91?\'\xb8\xed\x18\x9d\x00\x92\xbf7\x8eO.\x86\x96\x84\xbf1\xc7\'g\x19k\x92?\xf3J\x94M\x11\x98\xae?n%\xca\x86\xf4f\xb0\xbf\xb9\xbf{\xae;4\xb5\xbf\xb9\xbf{\x9e>\x91\xb3?\xa7\xf3\x05\xden\xbf\x97?\xe0\xf9\x02\x8b\x01m\xa3\xbf&\x9a\xd6xOA\xed\xbf)\x9a\xf6P\xa7$\xed?\x1esbE]\x8d\x9d?_\xe6\xc4f\xadC\x80\xbfw/"\x88\xac a\xbf\xe2\x8b\x08z\x8e\xa3\x83?\xd0\x08:\x9c\xccg\xc3?\xd1\x08:`y\xde\xc1\xbf\xae\x97\xa6)(\xfc\xd4\xbf\xb6\x97&\x1f\'w\xd4?F\x0eAX\x80\x85_?\x92C\x10\xce\x1a\xdfw\xbf\xccy\xb2\xd8\x16a\xc8?\xcfy\xb2\xf4!?\xcb\xbf\x13\xa5\xbf\xee\x00\x14\xae\xbf,J\x7f\x1dU\xe8\x9f?+\xddb\x9f]\x02\xca?+\xddb\xb7\xe1\x97\xc5\xbf\xb0\xb9Y07zK?\xa7\x9b\x05\x13\xfa\xdf\x86\xbf\x1f\xc89\xd8\xe6\'s?\x1f\xc89\xb8\xe2(}\xbf\xb0j\xb7\x9e\xf9\xd3\xc1?\xb0jw \xb27\xc2\xbf\xa0\x8e\xb3\x86"\xae\x92?{t\x9cU\x05\xb9`\xbfy9V\xc5I\xce\xbd\xbfy9\xd6/\x99Q\xbd?\xe9\xad\x8d_\x89\x0c\xb4\xbf\xf6\xad\r/x\xb3\xb0?\x12\xc0J(\xed\x94\xd0\xbf\x19\x80\x95\x9f\x99\x0b\xce?\x0e\xfb\xd2\x13M\xf4\xc0?\r\xfb\x92\x1f4\x88\xc1\xbf$\xd7\x0b\x1d2\xdf\xbd\xbf$\xd7\x0bYN\x1f\xbd?\xa1A\x8b\xd9H\xde\xb8\xbf\x99A\xa1\xe0j\xc7\xbb?}\xe8\x86y\xfdt\xc4\xbfw\xe8\x86\xba\xfa\xca\xc5?\x98\xc2\x19\xe9\x19\xb5\xb5?\x98\xc2\x19\xff\x832\xb4\xbf>\xa7\x7f\xc0\xb9,\xd7\xbf9\xa7\x7f\x1f\xab\x80\xd8?\x9d\xbdt\x9b~v\xc9\xbf\x99\xbdtR\xea\x97\xc8?\xa7]\xedQY\xd2\xc4?\xab]\xedY\xe0]\xc6\xbf\xa8\xcfr\x92\x0f{\xc7\xbf\xa8\xcfr\x86\xa8\'\xc6?\x02\xdfp\xff\xbb\xf5\xe2\xbf\t\xdf\xd0xhF\xe3?`\xf2\x9a[2\xe1c?LC\x19\xc9K\x9f\x87?\xbdt*\xb3PI\xc3\xbf\xc0t*V\xffQ\xc6?\x17%z1\xf2\xb2\x92?!J\xf4B\xdb\xf7\x8d\xbfS\x89QY\xed\xf2\xa4\xbfV\x89QMH\x0f\xad?\xf2`\n\xe0\xdaL{\xbfn\xcf\xfa\xaf\xf5!\x86\xbf\x06\xeb>\x12\x99\x1d\xaa\xbfsu\x1f\xeb\x90\xb4\xb1?O\x9eFwJ1\x95\xbf\x8b<\x8d\xc2\xd1"\x8c?Uty\x96\x8e\xb2\xb1\xbfRty\xfe\xd2\x0b\xb7?=\x06\xe6o\xba\x08\x89\xbf\x14\x03\xf3\x0b\xf4\x1f\x95?1.i\xe7\xa9\xbbt?\xdehK,a\xd7\x89?\xfb`&\x07\x97\x9d\xbc\xbf\xef`&\xb7\xd5D\xbf?\xc6)\xb3\xbb\xf0\xfe\x81\xbf\xc8\xa7\xcc.\x7f\\`?\xb8\xa7!\xf2\x0c\x1aB?\xb7\xa7!\xb2Y&K\xbf \xdbwK\xb1a\xd8\xbf\x1e\xdbw\x94\xde]\xd8?_\x82\xa6\xe8@;\xa5\xbf]\x82\xa6\xf02H\xaf?\xddJ\x11\xf7\\\xa7|\xbf\xf8J\x11\xb7\xe0\xe6r?>\xc3\x9f4\xb6\xbc\xc3\xbfA\xc3\x9f\x9a\x9b\xc5\xc6?\xed\x90\xa1\xd6\xd3\x18\xc5?\xed\x90\xd11\xe8\xeb\xc5\xbfF\xf2A\xb0Q\x08\xc3?C\xf2A0\xaa[\xc4\xbfo\xd1\x1a\xeeY\xe7\xf2\xbfm\xd1\xda\x7fG\xec\xf2?\xa8\x80\x9b\'\x14\x99\x8a\xbf\x0f\xe0\xe6\xcd\x1e\xbb\xa2?\x8a\xed\xfa\xc6\x9d@\x83\xbf+\xdb\xf5-\xf0?{?\xc1\xd5\xb5\x87\xdc\x83\xcc\xbf\xc0\xd5\xb5\xf7\x8eQ\xcc?\xa8J\xe7\xcf\xb5\x07\xad\xbf\xaaJ\xe79\xec\xa7\xa6?\xb5\x05{\x1e8\xfd\xb1?Z\x0b\xf6\xe4\x8e\xe4\xa4\xbf\x97\x80XQ~\xca\x83?\xc3\xfeN]\x95|u?\xe7\x89\x9fB1)\xd7\xbf\xe1\x89\x9f/vS\xd6?$\r\xdc\xbb\xd72\xd9\xbf$\r\xdc\xeb\x92\xd2\xd8?\xfcVp<P\xde\xc4?\xf7V`E\xa7\xcb\xc5\xbf%\xd0!C`\xa9\xc4\xbf$\xd0\xe1o)\xa4\xc5?\xe8X\x10\x03 \x03\xd4\xbf\xe5X\xe0\xf7[T\xd3?9\xd1\xbb\x86\xd7\xf3\xe4?9\xd1\xbbs\xdb\'\xe5\xbf\xd1t]\x0b\xf4z\xdc\xbf\xcat]\x07~\x1b\xdd?\xccw\xf6\xa6\xc7e\xb3?\xcfw\xf6\xf4Q\x10\xb8\xbf\xc0\xaa\n\x18\xd8\xf5\xeb?\xbe\xaa\xca#]\xe8\xeb\xbf\xbc\xec\x1d\x92T\n}\xbfX\xb4\xec\xdd\xd26\xfd>%6\xdb\xed\x9bC\xcb\xbf(6\xdb\xcd\x9cT\xc8?\xc3Q\xe0\xe0\xcb\xae\xbb\xbf\xc4Q\xe0\x9cA[\xbf?\xd0h\xd1*\xea8\xd8\xbf\xd4h\x89T\xac#\xd7?\xecR\t\xa4\n\x95\xd8\xbf\xecR\tm\xf8v\xd8?M\x9e\xe1\x89\xe11\xd2?O\x9e\xa1G\xf4E\xd1\xbfM\x1a\xc6\x7f\xdb\x96\xc2\xbf\x954\x8cK}\x87\xbd?c\xe0\xf6)\\mY\xbf\xf9m\x9f\xa6\xc2\xfa\x91?\xcd\xb9i\xfc\x9b0\x83\xbf\n\x9e\x9b\xc6\xfc\xe3F?J\x08\x93=\xcf\xb8\x83\xbfN\x08\x93\xdd\xa6R\x88?\xabW\x06\xf3\x06\xbe\xc5\xbf\xaaW\xc6\x03\x0f\x11\xc4?\x04a\x85\xbf\xf0\n\xc3\xbf\x04a\x85\xf3\x8c\x0e\xc1?\xf7\xe3\xf1\x8a\xad\x86\xb5\xbf\xf8\xe3\xf1.\x8c\xc9\xba?\xc8N\xe7\x04\xef\xa4{?P,\xc6\xdeb/\x91?\x01w\x87\xc3\xac\xbf\xcb?\xffv\x87\xcb\xbb\xe4\xcb\xbf\x95\'r\xe2\x94\xfe\xf0\xbf\x96\'\xb2\xa7\xbdF\xf1?\xf7\x07\xfe\xcc\xae\x1aP?\x06\xf0\x03\xe6\xdc\tK?"\xf1y,\xa4\xd0P\xbf2>\x8f\xed\xafx\x8c?#\x17\xdaP!\x12\xd4?"\x17\xdap!*\xd4\xbf\x9ep\x10tLs\x81\xbf>\xe1 (][y?\x82\x18mp8ex?U\x8c6xD-\x88\xbfHQV\xc11\xef\x96?y\xa2\xac\xb2\x02r\x84\xbf\x81\n\x8f&\x0b\x18\xb6\xbf\x84\n\x8f)&\xbe\xb8?\x80\xb2\x1e\x0b\xdeb\xc8?\x81\xb2\x1e\x8dsz\xc8\xbf\x17\x0f\x90\xcc\x99\x1c[\xbf\xd6\x01\x92q\xd0_\x85?@\xb1\xf9@\x9d\t\xa1\xbfG\xb1\xf9H+\xda\xa3?\r\xbe&P}\xe1\xcc\xbf\t\xbe&\x1c+\x8f\xca?+\x93\x0ebk\xba\x93?\x95\xd9\xe2{?D\x80?\x19\x8a\x0e\tu}\xab\xbf\x05\x8a\x0e\x03\xa0:\xae?\xf0\xe7\x07\xf3i\xbe\x8b\xbf\xda_\xe0sYL`\xbfG\xe7i]\x07\x99\xe5\xbfD\xe79\xd6\xc2I\xe5?~Kie\xf2p\x95\xbf\xfa\x96\xd2(\xddC\x8c?\xeb\xb2\xb5\xbcQ\xf8[?;\x93\xd2\xd84\xff\x7f?i\xf95.n\x1c\x91?f\xf95\x0e&"\x98\xbfY\xcbU\xb5\xb6\x12\xc9?Y\xcbU\x1b\xa9\xfc\xc6\xbf\x9diOV\tS\x82\xbf\xa3iO\xd6\xb0\xbe\x88?{\x07\xd5E5>\xb0\xbf\x85\x07\xd5Q\x1d\x7f\xb5?M\xdb\xf9I\xc54\xda\xbfP\xdby\xc2\xc1s\xd8?\x9a\xdb>\xd2\x8f0\xb7?\x9a\xdb>\xc0\ne\xb2\xbfp\xfaHXXJ\xf4\xbfe\xfa\xb8\x9f\xd9\xe1\xf3?(\xb3X\xdf\xc6}\xb0\xbf&\xb3Xeq\x1f\xb4?\xdf\xdb[}H\x9b\x8d\xbf\t\x12R\xa1\x87.\x92\xbf\xbc\x03s\xfb\x13B\xc4\xbf\xbc\x03s\x8b;\r\xc7?\x12\x91\x1f\xd7\xf2t\xdc\xbf\x05\x91\xdf\x87\xed\x7f\xdb?!\x0b\xfb\xe2\xac?c?na_X\x8a\xe1\x9c\xbfkBL\xee\x1b\x18\xd3\xbfcB\xcc\x8a \x17\xd2?\x0e@\xa4\xd5!\x03\x9a\xbf\x18 \xd2r\xdb\x18\xae?7-K\x10\x08\xed\xc9?6-K3\xff\xba\xc8\xbf3\x07\n\x1c_r\x98?.\x07\n,\xf8\x0f\x99\xbfP\x90\x9akf\xb8\x97\xbfd\xdf\xcaHD!\x82\xbf\xfd+\x86\xc3\xd47\xab?\xfe\x15\xc3Q\xdf\xbc\xb0\xbf\xfe\xd7\x00B)NW\xbf\x8b\xf2\xdf\xef\xa3.\x91\xbf4\xb6zD\xa0,\xbe\xbf;\xb6z-c\xd4\xbf?e\xa6\xc4\x00\xf5V\xb0\xbf\xdfL\x89\xcd\xee\x98\xaf?]R\xce\x18\xc1\x14\xcc\xbfcR\xce\xf0A\x1a\xcf?\xd9\x85\xd1\x88]\x0c\xbc?\xdb\x85\xd1^\x9c\xd0\xb4\xbfk\xcf\xd2\x1b\x1f+\xc0\xbf\xd1\x9e\xa5\x02\x81\x16\xbe?\xfdqZ\xcd\xc9\xd1\xa0\xbf\xfdqZ\xe5\x01\xfc\xa4?g\xbd\xc1\xc5\x0c+\xc6\xbff\xbd\xd1\x9d\xcd\xee\xc6?l\xd8|6*\xf0\x9d?m\xd8|\xa6\xb8r\x9d\xbfI\x01\xac\r\x10#\xd8\xbfJ\x01,\x81*\xdd\xd7?\xa7\xd9\xd1\xf3\xc4\xe9\xc7\xbf\xb3\xd9\xd1\xe0\x04\xda\xc5?\xf1\x98\xc2\xf2y\xa5\xd2?\xf1\x98B\xfb\xed\xcd\xd3\xbfwH\x8c$O\xb4\xc4\xbfoH\xcc\x87\x1b\x90\xc3?h-\x11\x80\x95\x9f\xe4\xbfh-\x91\xb7B\x91\xe4?\xa2\xb3@\xaf\xf0\x1bG\xbfP\x16\xe8E\xa8\x03\x7f?\xc0A:\x0c\x80\x0b\xc3\xbf\xbfA\x1epZL\xc3?@\x97vz\x93T\x96\xbf\xc6\xa2%\xe6\t\xaaq\xbf&\xa9\x03\x8eM\x81\xab\xbf(\xa9\x03\xc6\xb3\x90\xa5?\xbc\xc6\x7f\x962|a?\xc4\xf1\x9f%\xb0\xa9\x82\xbfub\xd0}\xedR\xb0\xbfob\xd0\nw\x89\xb1?\xdc\x98\x1a2_\x01\x81\xbf{L\r\xb1\xaf<\x96?\x13<p^8\x84\xb3\xbf\x12<p\x01\x9fo\xb1?\x86l,H\x7f\x01\xa0\xbfi\xb2\xb1p\xf1I\x84?\x86\xdbw\x07j\r{\xbf=\x12Dl\xa8\xde\x8e\xbfY\xc1\x90\xb1k\x9d\xb6\xbfF\xc1\x90U\x0f\xd9\xbe?yO\xc6\x9a\x15\x1df?\xe2\x9e\x8c\xf5\xf7\xea]\xbf\xa5}\xfc\x85\xd5\xb7\x95\xbf\xa6}\xfc\xc50\t\x91?M\xa8/\xa4\x8c\xb1\xd7\xbfT\xa8/\xcd`\n\xd9?\xc7\xd8R\xbas\x8e\xb9\xbf\xc9\xd8R\x99&\xc4\xbd?\xf7\xb7\xe3\xa7\xfa\xb5\x88?\xfd\xdb1\x1a\x1b\xe6\x95\xbf\x87\xb1i.U\x98\xc3\xbf\x83\xb1\xe9\xdfb\xb3\xc5?J\x14\x18y=\x05\xc2?K\x14\x18\xe6\x13\xd9\xc3\xbf\x05U\xaf\xbf\x18$\xc4?\x03U\xaf\xcbaG\xc5\xbf\x1cU\xb1\xc1m8\xf3\xbf\x1dU18o6\xf3?\xe2\xc5\xf0\xc2\x03\x92\x91\xbf\xe0\xc5\xf0b}\x17\x93?n5\xc2\x90vz{?\x95\xd5\x08\xfb\xc6qR\xbf\xef\xa06\x12d/\xcd\xbf\xed\xa06!\x8f\x16\xca?\xb0/\xf9\x9b\x93\xe9\xa5\xbf\xb0/y\xebOW\xaa?\xb3\xb7\xbfz\xa9=\xac?\xb8\xb7\xbf\xf0\xaeX\xa6\xbfd5\xde\xd0\xa4\xa8e?\xc4j\xbc\xe1gFZ\xbf\x96,P V\xfb\xd6\xbf\x9a,P\xc5\x9d`\xd6?\xa28\x93X\xc5\x11\xd8\xbf\xa28\x93Q\x88\x1d\xd6?\x0c\xdf\x93\xb6\x16y\xa5?\x05\xdf\x932\xbc"\xa6\xbf\x99\xc1\xad\xef\r\x8e\xc5\xbf\x9b\xc1\xad\x07\xe1\x0c\xc7?mD\xcfc.\r\xd3\xbflDO{\x87Z\xd4?s\xe8\x8c,S\x84\xe4?q\xe8\x8c\xd0\x08z\xe4\xbf+\xcb\xb0\x89`\xac\xdc\xbf(\xcb\xf0\xbfi\xba\xdd?\xc9\xb9`2\xc56\xc2?\xce\xb9`\xdd\xdd\xec\xc2\xbf\xa7\xaf\xfd\xdb\x08\xa7\xeb?\xa8\xafM5\xe4\xb5\xeb\xbf\xaa\x06}\xba\x8c\xf6s\xbfF\x83>}\xf5\x97\x87?\xde,U\xe4Z\n\xc9\xbf\xdc,\xd5\x9e\x08\xcc\xc7?\x1a\x9fz\xba\x90#\xb4\xbf"\x9fz\x08\x1a\xde\xb5?\x96\xf5\xca\x97\x00\x0f\xd7\xbf\x90\xf5JuIn\xd6?\xe9\x98\x085(I\xd8\xbf\xe9\x98\xa8\x7fqc\xd8?\x8f\xf0\x18\x8d\xc9\x08\xc8?\x8f\xf0\xd8\x00\xf8\x9d\xc6\xbf\xc7<\x88\xeaQj\xbf\xbf`\x1e\xc4\xb4\xbe\xba\xc0?\xcf\xf1T\xe9\x06"b\xbf\xeax\xaa\xa4\xfb\xb4{?r\x11\xe3\xe9\x89Y\xb0?\xe5"\xc6O\xfc\xa8\xa8\xbf$\x0c\xa0\xbem\xa0x?\xd3\xf9\xaf\x80PT\x8a?xN\xaf1A\xdf\xc2\xbfyN\xaf\xc9\x96y\xc4?\x93\x9aT\xd3\xf1_\xc1\xbf\x94\x9a\xd4\x83]]\xc0?<`\xc1\xc9h\xf5\xb2\xbf;`\xc1\xf5\x1d\xd6\xba?0Ys\xf1\\\xbb~?\xaf\xac\xb9\x18\xeai\x88\xbfM\xb3\x02l\xa9\xa4\xdf\xbfM\xb3\x02\xe2\xae\xbc\xdf?\x8e\x12 \xc7{\x0b\xf1\xbf\x92\x12\xd8\x1c\xf9\\\xf1?\x86\xa8\x89I\x9b\x85??\x1351\xb9\x8c\xe6l\xbf7.\xe7g\x91\xa1l\xbf!\x97\xf3\xe3\x17\xc1r?\xe3\xfe\xc8`k\xf3\xc7?\xe3\xfe\xc8\x87>\xf5\xc9\xbf\x0f\t\xd8\xa9J7M\xbf\x1dH\xc0N\xd6\xd5\x14?\xd2\xd7%\x81\xe4\xf9q?P\xe3\xeb\x12\xc8\xc5\x03\xbf\xac\xd8Zt\x86\x89\xa1?U\xb1\xb5x\x8a\x10\x9b\xbf\xa4Q;\x8a\nL\xb3\xbf\xa6Q;\xd1-B\xb3?\xf6\xec\xcb\xfa\x02\xcc\xc5?\xf2\xec\xcb\xabC\xf9\xc7\xbf\xfa\x8a\x08\x9b,3\x81?\x06u\xf7D\xb7\x81\x8a?]\x0c\x87\xdc\x01\xe6\x91\xbf\xdf\x18\x0e\xc1\x18\x0b\x81?\xd7\x82V\x8bR\x8f\xcb\xbf\xd4\x82\xd6\xb9\xcb\xf9\xc9?(\xa1\xa3\x9d\xcb{\x86\xbf(\xa1\xa3\x1d),\x85?\x87E&\xdc\xe8\xcf\x98\xbf\x87E&\xdcm<\x95?\x9f\xc8<\xb9\x03\x9c\x95?\xc2\x87\xcc\xd3\xce\x84W\xbf\x1e\xafX<+\xee\xe4\xbf\x1e/\xae\x01\xef\xaf\xe4?\xb6&\xb8\x17\xb7\t\xa2\xbfZMp\xaf_\xb0\x9f?\xf6\xb3W\xb5\r\xac\x7f\xbf\xf1\xd9\xab\xca\x8a7\x86?\x03e\xf0\x15\x1d@\x84?@\xb1\xf9\xa0\xe6\xadC?\xeb\xe6DM\xe1>\xc5?\xea\xe6\xc4\xefq\xc7\xc6\xbf\xf5\x04\x15\xe14\x19e?\xb0\t*\xc2\xcd\x92\\\xbf\xf0\x8f\x08`\xc6\xa8~?\xab\xc0\xdd\xff\x1a\x07]?\x0f\xca\x07\xb6>\xaa\xd8\xbf\x08\xca\xd7\xe0\x0c\x18\xd8?u\xf9\xdbh8#\xb1?s\xf9\xdb\x06\x88\xaa\xb8\xbf>\xec\xdd\xfd\xe5\xf8\xf3\xbf=\xec\xdd\x03\xcf(\xf4?U)\x88\xe3\xaf:\xb2\xbf\xadR\x10\xf7\xa1\xae\xa4?\x9b\xe8$\nWP\x87\xbf\xdc.\xb6\x0b^\x95t\xbf/\xd7\x07k\x95\x1a\xc1\xbf/\xd7\x07t\x936\xc2?rO\x8ba7-\xdc\xbfuO\x8b\xfe\xd5\xee\xdb?\xf9\x92\xad\x95\xa5\xceO?-\x9b\x94\xb2\xcf\x94f?00R\xc6\xdf:\xd2\xbf*0R\xb4\xcf\xba\xd3?'
p118
tp119
basg71
I00
sg72
I00
sg73
g0
(g74
g5
Ntp120
Rp121
(dp122
g78
(I00
I00
I00
tp123
sg80
S'float64'
p124
sg82
g66
sg83
I00
sg53
Nsbsg84
Nsbsg53
g88
sg85
Nsg73
g121
sbsS'b1'
p125
g0
(g10
g5
Ntp126
Rp127
(dp128
g14
S'auto_14120'
p129
sg16
Nsg17
g0
(g18
g5
Ntp130
Rp131
(dp132
g22
(lp133
(lp134
(g25
I306
g26
S'nade_train( * args[1:] )'
p135
tp136
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p137
tp138
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p139
tp140
a(g37
I25
g38
S'self.add_parameter(TensorParameter("b1", (n_hidden), theano=True), optimise=True, regularise=False)'
p141
tp142
a(g41
I29
g42
S'parameter.add_to_model(self)'
p143
tp144
a(g41
I167
g45
S'setattr(model, self.name, theano.shared(np.zeros(self.shape, dtype=self.theano_type), self.name))'
p145
tp146
aasbsg48
g0
(g49
g5
Ntp147
Rp148
(dp149
g53
g125
sg54
(lp150
g56
(g57
(I0
tp151
g59
tp152
Rp153
(I1
(I100
tp154
g66
I00
S'\xc6@\x82O\xcb\x90\xf5\xbfq\xf3\xf6+O\x94\xe4\xbf\xe8*\xa8#\xb1\x1d\xc3\xbf\x04\xc67\x93\xb5\xfc\xa2\xbf\xd1\xa6\xea$\x03\xbd\xfa\xbf`\xc0X\xe2\x82\x84w\xbf%6\xd1\x97\xbc\xe3\x91?Z\x83\xc1x\x83.\x94\xbfvb"R\xc0\x92\xc7\xbf\x1cxr\x1f\xdc\xdd\xef\xbfk2\xbdE\xe7\x83\xf6\xbf^,\xae\x16\xc4\x92\xb4\xbf\xf2\xc5\xb9\xe1\xb6\xc1w\xbf\\cX\xf9\x98r\xe6?_\x8b\xbe\x9a\x06\xba\xe5\xbf\x04\xe4\xcdc\x1b0\xc0?\x0e6\xf2\xf0(#\xca\xbf\x1e\xa7\xab<\xa6\x89\xde\xbfML{o\x16\xb0\xf4\xbf\xa1R\x17>\xd8\x93\xb0\xbf\xd8\xd7+\xe8:\xec\xd6?`\x17l\x10\x9b+\n\xc0\xbc\x00\xf3\x16\xbb\x12\xc7\xbf\xfb\x11F\xf8-\x1c\xe2?\xe2\x8d4%"\x16\xdd\xbf\xa9W\xde\xa9\xfb\xac\xd8\xbfGFpd\xb1\xd3a\xbf\xf9?\xa9\xcbEy\xd9\xbf{\x8dt^X\xf3\xc1\xbfMF\x98\xf2\xe1D\xd2\xbfo\xebH\x7f3\xd9\xfa\xbfS$\xf721\x9c\xf8\xbf\x9e\xd6\x9c\x9c\xfex\xb6\xbf\x8b\xe8\xbeX>\x92\xad?\x91kIl&\x17\xe8\xbfX\x82\n\x02\xc3\xdd\xdb\xbfl#\xba\x7f36\x8d\xbf1\xd0]\x8a\xe2e\xd8?\x01\xd3\xa9i\xf6f\xc2\xbf>-\xc0\xa3\xba\x9f\xed\xbf\x11\xb3\x86\x8d\xc5C\xf1\xbf\x97(\xf0{\xeb\xd1\xeb\xbf4#\xa7\x80TZ\xb3\xbf\xadZ[_\xf1\xb2\xb0\xbf\xc1_3\x12=e\xb5\xbf4\xdc\xb4\x11/7\xe9\xbf\x14\x03\xddcF\x19\xfc\xbf\x0e\xec\xc6B>O\xa2?\xf1\xb7\xc48\x01\xc1\xbd?\x19\xb1H\xa7k\x9f\xf2\xbfo\x1c\xcd\xa7w;\xa5\xbf\xc6\xfa\xa6\xba\t\x03\xb6\xbfe\x182\xcd\xe6n\xb4?8\xb4\xf7\xe8W\xb4\xe0\xbfD\xe4\x8a\xde{\xf9\xc6\xbfm\xfa\xaf\xf7V\x8c\xee\xbfl\x1c\x15\xf8\xf0\x02\xf4\xbf\xf49]\xac\t\xc3\xa4\xbf\xa2\xf4,\xbf\xcf\xfc\xaa\xbf\r\x81\xbe\x1a:c\xe3\xbf\xb5\x88\xb0shu\xb7\xbf7tw%!\xb1\xce?\xe6\x9d\x9d\xbccZ\xd2\xbfO\xab\xae~\x12\x01\xd8?\xce\xaf\x8e\x88Od\xdc?&\x00b\xbc\xe4@\xd9\xbf\xe5Z\xb6\xa9\xe4\x85\xda?\x1b\x13u\xe1\x8d\xfe\xad\xbf\x90\x12\xea0\x10\x00\xe6?\xdd!!Q\x9c\x08\xe4\xbf\xc6\x92\x1f\xc8!\\\xc8\xbf\xaa?\x0e\xc9~\xe6\x90\xbf\xa1\xef\xe5k4\xce\xf5\xbf\x8c\xf7\xa8\x04\x0b-\xdc\xbf\'\xe4#\x01\xff\xdb\xdd\xbf\xbdxg\xfa{`\xff\xbf\xf2\x84\xb9\xa7\x1aI\xe9\xbf_u: $\xf2\xd2\xbf,.\x8e\x08fk\xc3?\rR\x15\xa4\xa35\xc7\xbf\x14r\xd1\xe0\xe2\xea\xd3?\xb5\xb3BZxT\xdc\xbf\xd0U\x92XO\xe6\xb3\xbf&l\xce\xd6r0\xb1\xbf\x80\x95\xe4\xb4\xda\xd6\xa7\xbf\x9d$8\xe4\x01\x05\xcb?\xf4\xe3\x9b\x92\x93m\xcd?\xe1\nh\x7f\x04N\xe8\xbf?\xad!=\xd9\xc0\xbd\xbfm\x13o\xb4\x11$\x91\xbf\xd5v\x13\x15\x16\x96\xbb\xbf4:2\xbe\x98\xd9\xb2\xbfn\xfa\xd5\x86\xe3\x9a\xcd?\xb4\xa9\xc5-k\xbb\xf1\xbf.\xc5\xd5\x0b\xc5&\xc0\xbf\x8b\xd3_\x99\x98\x9e\xcb\xbf=\xf5]9of\xec\xbf\x83\xea\x9b\x8eK\xeb\xbf\xbf\x8e\x14\xd5\xf7d\x1a\xe2?~\xce\xc9\xfb\xfd\x1c\xaa\xbf'
p155
tp156
basg71
I00
sg72
I00
sg73
g0
(g74
g5
Ntp157
Rp158
(dp159
g78
(I00
tp160
sg80
S'float64'
p161
sg82
g66
sg83
I00
sg53
Nsbsg84
Nsbsg53
g125
sg85
Nsg73
g158
sbsS'V_sigma'
p162
g0
(g10
g5
Ntp163
Rp164
(dp165
g14
S'auto_14125'
p166
sg16
Nsg17
g0
(g18
g5
Ntp167
Rp168
(dp169
g22
(lp170
(lp171
(g25
I306
g26
S'nade_train( * args[1:] )'
p172
tp173
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p174
tp175
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p176
tp177
a(g37
I31
g38
S'self.add_parameter(TensorParameter("V_sigma", (n_visible, n_hidden, n_components), theano=True), optimise=True, regularise=False)'
p178
tp179
a(g41
I29
g42
S'parameter.add_to_model(self)'
p180
tp181
a(g41
I167
g45
S'setattr(model, self.name, theano.shared(np.zeros(self.shape, dtype=self.theano_type), self.name))'
p182
tp183
aasbsg48
g0
(g49
g5
Ntp184
Rp185
(dp186
g53
g162
sg54
(lp187
g56
(g57
(I0
tp188
g59
tp189
Rp190
(I1
(I12
I100
I2
tp191
g66
I00
S'\x17\x94\xa6\x8d*\x0e\xc1\xbf\xc0\xa8\xae\xbf7\x1c\xbb\xbf\xe3\x95\x1b\xc9\x07\xc4\x85\xbf\xe5K-w5\xc7\xc3?:Z\x84\x08\x83{\xe5\xbfD\xb1\xb5\xaa\xafq\xe3?\xe1\xa2\xd0t\xd11t?;NL.pT\x90\xbf\xbd\xb7\xc3P\xae\xb1\x13@\xc4\x87\x01\xbd"\x0b\x97?\xf6\xb7$^\xeb\n\x8b?\xc3>r\xec\xa3(n?\xb3\n\x17i\x10\xfe\x02@\xe9\xe68a\x8fv\xbc?\x14\xf9\xc9\xb3\xec\xb0\xde?6xo\x06\xf8\xb0\x8b?\xc2\xc8\x19\x1e\xa3@\xe2\xbf}\xc2\xf1\xb7ka\xd0\xbf\x918\x8fQ*\xa2\xc1?p\x069\'\x0f"\xb2?;+>\x8a\xc9>\xc1\xbf\xd6\xb0\xd2\xbd\xd1\xd3\xc8\xbf8\xd1\xbb\xad\xd9\xf0\xf0?L\xec;\xd1\x0e\xbf\xb3\xbf\xe8\x13M\x92r\xf9\xc9\xbf\xd0\xd0\x97\xa3I%\xc7\xbf\x81bp\x83\xd3\x93\xe7?\xea\x82\xd5\x03\x94K\x9b?\xb7{\xcc\x8d`\xfb\xf4\xbf{0\xba\xfcs\xd8\xca\xbf\t=!C\xc7\xad\xbe\xbf\xc9\xe4\xda\xf8\xbcq\xcf\xbf\x9d?\xf1\xbcs\x0c\x0c@"\x9fH\xc6qg\xb8?\x18\xd6\xd7\x87\xffE\xdb\xbfLS\x14=/"\xbe\xbfA\xa6:4\x97\xf1\xd6\xbf\'\xf8\xdf\x81\xd4\xc1\xe7\xbf\xea\xe9\x82\x83X&t?\xa7\x1aEH9\xa5[?S\\#\x19\xe7`\xd5\xbf\xef\x99No\xc2\xbc\xcf\xbfd\x81\x89\x84\xd2\xc0\x95?)/\x1f88\xc7\x8b?&W\xbd\x18\xae\x86\xc1\xbf\xb2_P\x9f\xca\xa2\xbd\xbf\x11_v\x8c\xbc\xd3\xc0\xbfn\xd8\x13Bm\x88\xb6?\xe3Z\x8fQ\x85\xf4\xc6?\x15\x87h\x06\xc4\xf9\xaf?\xb2br\x14h\x9b\xe0?\xaa\x04O\xac?S\xb5?\x9aBq\x16\xc9*\xc5?h&\xfb\xb9\xf2D\xb0\xbf\x88\xffJ[>y\xda?X\xd3p\x16\xde\xa7\xac\xbf\xad\xd7\x1b\x1e\xfc9\x97\xbf``\xa0\xc3\xf0\xbb\x8d?a\\\x84+ \xe5\xe0\xbf\xaf>\t\xae\x06\x14\xd2?L_\xc8\xf1\xa3\x07\x86?\'\x8b\xf6l\x9b\x02\x87?\xbc\xe9r\xd2\x92\xc4\x83?\x90?\xd1Z\xf8x{?\xc1\x04\xa2\x1b\x1e-\xed\xbf\xdf\xa4cG\xe6\xe2\xd7\xbf\x98\x9e\xd3\xb6\xb0<\xc4?\xf2\x87y\xa0\xe0\x91\xb1\xbf\xe8\x16\xf1a\xdf9p\xbf.\xcb\xba\xb5\x89\x0b\x81\xbf~\x8b">\x99\x05\xd7\xbf\x08\x10\xf0Y$2\xd0\xbf*\x11\xd45\xa6\xe3\x9a?A\x17\x9f8\x06\xec\xb6?\x06\xfb\th\xa9V\xe0?$j\x8f\xc2~\xb9\xd0?8\x95v_\xd6\xeb\xeb\xbf\xdcR\xf1k\x85\x12\xed\xbfQ\x8f0\xeb%}\xe3?\xec\xe4\x18\xf3e4\xb1?\x82\xb5a\x90\xf4\xcfz?O\xf7\x10#\xf2\xc5\x90?\xe5\xc5\xd1\xf3\x0e\xd4\xe9?A\xf9K*\x06\x10\xce\xbfAt\xd9\x89{\x1f\xc2\xbf)FF\x16f\x00\xb9\xbfS\x0fBC\xa9\x95$@\xa6\x9a\xc9\xa5\xe3}\xb6?].N\xc8\x1c\x9c\x92\xbf\xeb\xc1\xbf\xea\x989c\xbf\xca\xe6U5x#\x85?\xd4\x0e\x03\xbf\xc6\x1a\xc9\xbf\xb3\xf87^a\xcc\xe6\xbf\t\xb9\xf7\xfb\xaa\x19\xda\xbf\x11\x18v\x17*\x8b\xdb?\x0c\x0e\xc3\xb8\xcb\x8b\xed?\x9c\xbc2e\x98F\xfe?\xe0\x82\x8f\xdb\xb7D\xa6?N\xce64\x8e\x1c\xe7\xbf\xf3|\x9a\x1f\x89\x1d\xde\xbf\xab\xec\xf7"i\x9c\xc9\xbf\x10\x1b\xb6m\xd7\xa0\xd5?\x8dU\x81\x9dG\xe7\xc8\xbfI\xf9\xea\x9e\x80\xfd\\?\xfeF\x8a\\g\xce\x04@\x8c;]\xb6\xa4\x84k?\xdc\xc9E\xb5X \xc4\xbf\xf2\x91\x9f?\x80u\xd4?<b\x80\xdb\xe9\xf2w?\x89\xa5p|f1\x81?\xa6\xe2\xae {\x84\xd6\xbf\x14\x92<=\x7f\xdc\x94\xbfQd;\x07TP\xc5\xbfX\xa6\xca`,\x8d\xb2\xbf\x81H\x0e\xa7\xb4\x0c\xe8\xbf93k\xb1^S\xd5\xbf\xd2}\x1f\x87\x01f\xf1\xbfp\xabQE\x96B\xdd\xbf\x7f\x97\xe6]\xac/\xf0?\xbd\\\xb7JB\xf2\xb8?H\x11\xe1[M\x1a\xc5\xbf[\xf0\xa0A\xaf\xa5\xcc\xbf\x8ba*\x84\xfa9q\xbfd\x96\x8d\x7f]\xe7\x8c?\xca\xbfz\xbb\x11+\xe0?`\x92\xf79\xaa\xe8\xb1\xbf\x90\xdb\x06\xede\xe0}?\x98\x1b\x02\xb2\xe4,\x83\xbfC\xf0\x80i&\xc2\xca\xbfn\xe8\xf0\x04\x03\xce\xc2\xbf~3\x96\xde\xa7a\xdb\xbf\xde\xd7+\x96\x93\x89\xd7\xbf\xfe+\xc9h\xae\xa9\xdd?W\xaf\xbep\xde\xea\xcc?\xf3i\x00\xb3\x1d\xce\x82?<\xde\xc4\x14\x8e\'y\xbf\x89\x1cz\x11\xf69\xd0?\xa3fvg\xe2\x89\xa0\xbf$\xf74\xc9\xc4\xe4\xe1\xbf\x121\xf1\x8a]\x19\xd2\xbf\x93ep\xb1\x9b2\x84\xbf\x80\x95\xd1R\xae\x90|\xbf/\x18\x0b\x04\xeb\x9ei\xbftB^\xad\xcc\xe7V?-m\xba\xa7M=\xa9?\x05k1K\xdb2\xb4\xbf%~\x9fZ\xd9\x9c\x97\xbf\x1e\x05\x8e\xd77\x1cw?\xb4\xd2\x1cf\xe7\xd7\x80?\xde}\xcbW\xb4\x87^?\xa2B\xb9\xd5\x93|\x83\xbf\xf4N\r\x81\x9bz\xca?\xa4\xb2\xf7qC/\xc0\xbf0\xfd\xdb\xa7\x16_\x88?;\x82\xb5,\xf1\xf0\xda?\xe2\x0c5]q\x05\xa6?_\xe3\xf8n\xbbE~?\xb7\xe3\xbf\x96\x95bW?\xa6@(L\xca\x93\xf2?Y\xf8\xba\xe9go\xbe?\xef{\x88\x9c\x00\xbc\xe0?\xad\xdc\x80\xa9> \xc1\xbf\x1e\xea\xd6\xf8\xe4\xbc}\xbf>\xa5&\xbe\x0b\x1b\x95?\xa0\xc8\x82\xeb\xb14\xca\xbf\xbe\xd2y\x88=/\xb1\xbf\xf5\x04m\x83\xefx\x7f?.\xf8\xefa\x8aO\x97\xbf\xd7\xa5)\xa4\xe8^\xb8?\xaeQ\xe6\xea8k\xcb\xbf\x1d\xf3\xd5\xf4\xda\x83\xd0\xbf>\xf6@\x1a=G\xc2\xbf,X\xd8\x1f\x95\x82\x96?(\xdf\x0b\x9c\xe2b)\xbf~\x98}\x03\xcd5\xd9?{y\xba\xcd#\xf7\xac?\xb9\x83\x1baP\xcc\xad\xbft`\x17\xb8Om\xbb?;s\x05G\x1f#\x8e\xbf\x8c\xa9\x10/aJc?\x80\x921\xb2\xad\x1b\xc3\xbf\xba\x80\xd0\xac\x17 \xb7?\xde\x83\x89\xc78\xc0\xd9\xbf\xf8\x15\x12\x85\x13H\xd5\xbf\xdai\xcd\xd1I\xf4\xaa\xbf-\xe9+}zc\xc3?\xa2\xb5\xb5\xd6\xc9\x03\xcc\xbf\x19\xdc\x85A<\x13\x91\xbfK\xe31Z\xeck\xb5\xbf\x15\tk\x1f\x8a-\xb0?\xeci\xfa.\xc4e\x8f?b\xca\x8d\r\xe8\xb3i?N\x97\xc32Nb\xde\xbf\xa8\xad\xba\xbb\xea\x89\xd5\xbf\xe9f?`\xf9\xd3\xe5\xbf\xc7\xfc\xd7g\xbdY\xc8?\x82d3\xe8\xdf|K?_&\x07Ww\xd9l?&Hy$tB\xe3\xbf\xb2\x91\xe4_\xfd<\xd0\xbf\xdeZ\xb5lM\x9a\xa7\xbfs\xec\xad~5\xbb\xb2\xbf6G!\xc1\x17\xfc\xbe\xbf\xc0\x14\x9a\xde\x0c\x14\xa2\xbfuD\xfa>2\x9d\xae?\xa5\xd3Y;\xad\xc1\xd2?\x96\xc1\xfd\xfb\x18&\x90?<\xa6\xca\x93X\x90\x80?\xae\xb3\x84k[\x91\xb5\xbf\xd0\x11\x83\xb2\x8a\xe5\xa4?8\xaf\xdf\t\xc0#\x91\xbf\x1c\x1210^\x1bO?\xc3\xa2\x84+B\xd6\x81?\xff\xff\xaa:\x83\xe8\xb1?\x8f\xcb\x99R~\xd2V?\xf6\x94?\x02oe\xa7?c\x1cW#\xff\xaf\xb9\xbf\x9e\x01\x10\x18\x8f\\\xc9\xbf=\x03\xb7\xe4\xe3:\xad\xbf\xd5\x08*6\xac$\xb4?\x16\xd0\x08/t\x18\xa8\xbf\xce\xc3|O\x9a\xfd\xc0\xbf\x1d7\x02\x89\xd4[p\xbf?\xc4O\xe7\x98\x84\xbd\xbf\xacn\xe6\x1fx\xc8\xa8\xbf\xa2o\x17\x87P\xd4\xb2\xbf\xf0\x86\x94hW3\x91\xbfq\xc4\x0e\x8b|\x94\xa4?\xdf\xef\x81\xa2\xd4\xe0\xb2\xbfP\xb8<;I\xa6\xb3\xbf<\xf9\xbafu%~?_\x02LV\xd2;\xd3\xbfit\xa0\x1c\xc6\xf1\x81?\xa13\xc5\x87g\x9b\xaf\xbfW\x8f\xa1\xb6<^\xb3\xbf".w\x1en@\xbd\xbf\xa9\x08I\x1bC\xfb\xb8?\xd0\xdc\x1fa\xde\x05\xd0\xbf\x9a1\xf3k\x13\x1e}\xbf\xdb\xf9\xdc\xf2g\xe8\x88\xbf\xbf\xed\r\x7f\xa7\x10\xb3\xbf8(e\xf8f,\xcc\xbf\x12\xa1\xda\x95\x9d\xfbh?\x8d\xdd\xf5\x039\xc7t\xbf5\xc2g\x9fn\x84\x9b\xbf\xd8J\x91\xec\xfa\xd1\xb4\xbf\xe4\xe7\x13\xa9Z\xbd\x89?.D\x1e\xbc|\x05\xb7?\xe6\x0c\\\xdc<\x0f\x92?E\xbc\xf1%\x00T\xaf?\x03C\xaa\x99A\xcc\xa1?Ls\x93\x99\x84h\xaf?\x01\xf7\x04\xff\x91x\x9e\xbf\x87\x1a\xf9\x06\xbfn)?\x1b\xd9L\x156G\x85\xbf\xe2O\xe0[\xa7J\x92\xbf\x12g\xf3\x96\x14\x8eh\xbf6\x86}\xaf\x07\xd7w\xbf\xc7\xf5\xa12;N\x90?\xee\x99\x0b\x87s\xea\xc8?\x1d\xc9\xe1\xe4\xcc/x?\xffn\xa3KG\x9c\x92\xbf\n\x90\xf2\xfb\xae\xa6]?\xc51\xb9z%&Y\xbf\xff\xcc\xc2/\xcew\xb8\xbf\xe0\x8b\xd47\xcc\xf3\xdc\xbf\xd3"\x150"\x84\x83?x\xd3\t\x95\xfb\xf1}\xbfR\xea\xa43\x94\x7fi\xbf\x8f\x841\xa1\x86\x91\x83?\x9f]\x1bbr\x94\xa5\xbf\xc8\xa9\xd8\xe8kx\xcc\xbf@\x18\xb7lZ\xa5\xba?\x96%5W\xa5\x0e\x99?)\xccsE\x18\x01\xbc\xbfQ\xb6\xdd\xb9\xb4ot\xbf\xa7\x94EG\xefs\xda?\xefu\xa3Z\xd4\x08\xdb\xbf>N\x1f)\x80\x0f\xa3?\xacH+;@!\xb1?0IR:\xf73{?\xd9\xdc\x19[%\x95\x96?\x01*\xc3S\x84(\xaa\xbf2\xce\x03T\x88E\xc2\xbfJ6\xf0Z\xcfy\x8e\xbf\xca>?\x88\xb7^\xa1\xbf97#\x9e\xcd\xe7\xb4\xbf\x84;o)P\xf4\x88\xbf\xd3\xc0\x9c,Yzp\xbfW\xe6\xf62)\xe4\x81\xbf\x1ez\xd40\x08|\xb0?/;0<K\xbe\x88\xbf\xa9\x03\xe2\x0f\xdc\xc8\xc2\xbf\x84\xc6\xb5x\xfe\xa4\xd7\xbf\xd9^\xbez\xb4\xf5\xb4?\'e?\x19ax\x87?\xb7\x86\n\xfeq\x8cK\xbf\xd6\x8b\xcd\xc6*\xc0\x82?&\x84\xa9\xc5\x14\xcb\xc0\xbf4\xe4k\xec\xd6]\xd6\xbf\x8d\x87\xbfV\xfcF\xd4\xbf\x8c\x85D\x10:\xda\xd2?f\x16\x02m\x9bM\xc4? \x02\xf3)x\xb6\xc9\xbf\xf2P\xed\n\xc4\xaa\xb4?3O\xe1|Je\xa9\xbfZ\xf9<\x0e\xff\xb8\xbc\xbf\x8eW\x824"\x17\xd0?\xcc\x9e-\xb4\xd7\x1bs\xbfMW=\x06\xe2\xc1\x85?E\xe7~\xb6]J\x9d?\x81\x04\x96\xa0\xa7\x11\xc3\xbf\x05\xc7\x0c\x00iV\xab\xbf\xff\x1c\xda\xc7\xef\x1d\xc9\xbf\xd8\xba\xd7\xc6\xb0\xea\xb9\xbf\xde(Q>\x99B\xb7\xbf\xa7\x18\x08Sz\x9a\xc1\xbf9\xe2\x80|\xea\x1b\xda\xbfA\xd1\xd5n\xd4\xf1\x92?.Bw\xa6#\xc7\xcc?U\xa1"\x91\x95i\xb1\xbf\xc3:C\x80\xceO\xda\xbf\x07\xa5v\x96K\x1a\x92\xbfP\x89Sz\xfek\x96\xbf\x8bg\xab\x7fj7\xa8\xbf\xdf\xc7\x8a\x1d\xffL\xcd\xbf^\xa3\x88G\xd6TC\xbfQ@\xef\x1a\xce\xa1\x89\xbf5\xed\x94\x8d\xab\xf0\x97\xbf\'\xb6\x0c\xb2\x93T\xc8\xbf\x96\x02A\xf5\x88\xb6\xbb\xbf\xd4K\xa5s\xbc\xca\xc8\xbfw\x9d\x8c*y}\xa6?\x8f~\xc7\'S-\xd1?\x8e\x00\x05\xb8\x1c\x1bH?\x8c\xa9\x08:#N\x8d?\xae\xe4\xa0\x01\x81\x97`?\xd8\xa3\x96\xfc\xde\xb7\x96\xbf\xaaE\xa6\x16\xab\xa0\xc4?\xf3\x9e\xdcK\x81\x1d\xca\xbf\x01\xab\xed\x8b\x9e\x06f\xbf\xec\xcc\xf0*\x7fh\x89\xbf\x0fE\xb2\xa0\x9b.{\xbf\xcb\xfb\x86;!\x04\x96?=\xbd%G\n\x80\xba\xbf&\xec7.\xd4\xe1\x96?\x98u\xef\r\xc8)\x7f?\xb9\x9c\x13\xa5IN\x81?>JA\x10\x94\xc2\x87?5\xc7s\xce8\x80\x8b\xbf\xc1\xa5N\x1c~\x86\x80?\\,\xfcW\x87oq\xbfB\xf5\x92q\xd2=\x95\xbf\xc6\xe9\xfa1\x7fLz\xbf=\xecm\xfd\x13$\xb5\xbf\xdc\x9a+0\xbb\xe8\x95?\xcf4\xf1\x1e\xde[f?U#q\xa8\xd3^t\xbf\xca\x1c_\xdf\xa0.C\xbf\x84\xe3\x8a\xbb\xf8\xe9\xce?\x1d\x13\x87Rlm\x9a\xbf\xd7*>\x86\xb9;\xd1\xbf^\xdd\xf3\xfe\xe0\x8f~?!\x83\xb4\xa7@\x8f\x96\xbf\xdbU\xe0L\nv\x82\xbf\t\x8ds\xc5Y[\x95\xbf\x9cm\\\xc6\xa3\r\x88?\xbc\xd3L\xdc\xf5}e\xbf\xc2\xfd\x8e\xdd \x12\xc4?E\x07_\xa9\xf3\xdb\xd1?\xc0P\xd2\x9ff\xc1\xae\xbf\xdf#$<\xd3\xfe\xb5\xbf\x1b\x9c\xf0\xe5.\x06~\xbf\x9b\x9d\x0f\xc3\xb0Cg\xbf\xfb\xdd\xe9A\xce\x11y?\x87w\x13\xd1\xdf\x8d\xa4\xbfC\x99B"\x13\xe8\xc8?\x98\x87\xed6"w\xb4?\x01\xe1\x14\x93\xad\xb6,?\xa6\x01J\x97`\x96E\xbf\x92gu\xbe\xfdY\xad?*\x0eJ\x0e\x9c\x90\xbc\xbf~\xfb\xdb\x91\xa0\xc9\xb9?\xffBO}\x86{\x9e\xbf\xcf\xb3X\x97\xb4\xf3z\xbfO\x1e* \xaa_\xa8\xbf\xaa1\xe3s\xea\xb7\xe5?\x8a9\x04\xf5\xc8\x99\x9d?\xca\xd9\x8czC\xd0H?}\xc5\xe1Y\xbb\x89\xb5?p\xdd\x85\xf3|?\x8b\xbfZ\xd6\xce\xda\xe4\xdc\x87?\xcb\x9b\n&\x12\x9d\xb4\xbf\xcd$\x9a\x15\x11\xbb\xce\xbf\xdeP\xfc\xa7\x13\xeb\xe3?\xdb\xa3\x1f\xc5tp\xdc?\x11\xb2\xb7t\x0b\xfb\x8a\xbf\r\x7f\x13\x80\xde\xa3a?\x7fy.>\xd8\xcc\xbb\xbf)\xb1)\n\x1d\xaa\xcf\xbf\x82\x93N$\xbe[\xd0\xbf\x05\xe6\xccH2\x0b\xaa\xbf\xfc\x07\xa8Tf\x1a\x88\xbf\x17Sc\x89d\x1c\xd0?`\x86\x82\xcd\x03O\xc8\xbfb\xa2\xa3v\x0e\x1d\x0b@\xb6\x89F\xf4\x91\x96x?\x7f\x02\xe6y\x1d|\x95\xbfP\xdd\xedw0\x10\xa6\xbf\xe67\xc1N\x06\x18\xc3?\x92\xba\xc0\x125\xa7\x84\xbf\xb8\x97\xaf\xcd\xfb\x0e|?\x910.\x9d\x80\xf3\xc3\xbfVI\x91bDR\xc9?$\xa1\x97W\xba\xf9\xc1\xbf*Z\t\'\xfee\xc8\xbf\x89mU\x92jr\xed\xbf*\x8f\x9a-\xcd\xfd\xd0\xbffj\xa1\xac\xdc\xd4\xa6\xbf\xfd\xad\x1dJ\xbc@\xaa\xbf\xea2\xf3/\xfe\xfc\xdb\xbf\xd1\xad\xa3\x9aL\x01\xcf\xbfr\x0f\xe8Q\x8f%\xc1?\xbe\x95v\xe6u7\xce?\x0b\xb5\x8d\x0cs\xf7\xe4\xbfZiXB\xc7$\xcd\xbf\xd7\xc3\x9b]\xb9\x10\x93?S5>.\xd2\xde\x81\xbf\xf1_\x82\x92\xc5+\xd7\xbf_\'\x88\x11\xf9Y\xa4\xbf\xb6ObG\xdd\xe3\xa1\xbf/\xads\xacZ\xf2\xe0?1\x19O\x90\xe63\xc8?_\x8a\x02\xfa\xde\xf1\xae?Wi\xd8B\x84\xa3\xc9\xbf\xcc_*2\x80m\xce\xbfW\xabg\t\xa2\\\xbb\xbfj\xaaBC[H\xf1\xbfr\xc8D\t\xa0\xd6u?8\xe5\xd7\x94q.v?K\x8b\xd6\xe8\xf6\xc1\xe2\xbf<@\x83\xd0(\x0e\xc5\xbf\xd4\x86\x9d\x06\xb7dP?\xc6\\\xb4\xa0\t|\x85?\xaeJ!\xbd\x00j\xd1\xbfR\'t\x96\xf9\xea\xa7\xbf\xedk2b\xd2;\xbb\xbfS\x89\x1ec\xcfp\x95\xbf\xad\x98\x16I\x12]\xd2\xbf\xe7\xd66\xa5I\x14\x9a\xbfz\xe8\xcab\xb2\x99\xcc\xbf\x00\xca\xa3\r>\x81\xe0?\xb0\x9br\x01\xb9\x17\xca\xbf=VtP\xf1\xe7\xa9\xbfC\xd0\\U4\x8f\xc2\xbf\xf8M\xa4\xe8\xc2X\xb4\xbfur\t\x0c\x02S\x90\xbf\xf2q6\xaf\xd8)z\xbf\x0e\x05\xa9y\x17F\xc7\xbfL\r0\xe8\xfa\xdb\xcf?>\xcd\x1231D\x88?@\xb1\x8a0Q\x0fC?m\x84;X1O~\xbf\x18\x94\x0c\xda\x95\x88h\xbf\x88R\xe8\xa6\xdb\xaf\xdc\xbfN\x88]w6\xb4\xe7\xbf\x8d\x87\x01\xaeoR\xb0?\x9a\xd99\xec\xf1\x02\xc6\xbf\x00\x8f\xdf\xbb\xfd/u\xbf0\xee\xe1a\x0cKd\xbf\xa9\xf6"\xc5\xf7nv\xbf*\x95\x10\xba3=\xfb?s:\xc4y\x06\xe0\xc1?5h\x077Y\'\x7f\xbf\xf2!Y\xa1q@\xee?A\xca|l`h\x06@\xd9\x1c\xa7\xa0\xc4k\xdb\xbfD\xbe(\xac\x89\xd9\xdc\xbf\xcb\x84\x9f`\x9c\x94\xcf\xbf\xbaV\x90K\xdf\x16\xb0\xbfv\xfbt\xc6\xb4u\x83\xbfj\xfc\x10\xbc\xcb\xa8\x95\xbf\xf0\xb8\x17\x16\xc3\xf9\xe6\xbf\xb6\xe5\x8a?\x9a\xcc\xd1\xbf\xb5\x93\x01(\xach\xd0\xbf\x928\xbb\xa0\xdd\xf6\xac\xbf18\x01\xc4\x96\xe6u?+`\xfa\xb9\xdd\xaa\xed?\x9b\x9d\x16\x14\xf1\xf6v\xbf\xda\x7f\xc7e\xfd\xc5v?\xfc\xf0\x14\x98\xee#\xc5\xbf\xc4H\xbbp9\xea\xdb?\xf3\xde\xe91\xd6>\xd8\xbf\x1a\r{9\x80H\xe4\xbfJ\xd4&[,\xaf\xbd?)R\xd1\xd8\xc0\x8d\xe6?\x9f2c9\x8c\x9e\xd3\xbf\xdf\xae\xc9\xb4t\x93\xa2?\xde%\xa0-\x94\x03\xf1\xbf\xb3~AX\xc8\x03\xd4\xbf\xdf\x08\xed\x88\xde\xed\xca\xbfM91\x1eS\xaa\xc5\xbf\x83\x9b\xdc\xaa\x92v\xa9\xbf\xca5|\x07,t\xf4\xbf\xca\x89\xfd\x88\x0c\xd1\x7f\xbf~\x83\xf0\x87~\xe2\xa1?\xf0\x11\xb1t\xe8\xd9\xaa\xbf\xf4\xe8Nc\x1e\xde\xc3\xbf5I\xee\xa8\xd5G\x83?r\x16M\x88<,\x8e\xbf\xe5\x92\xd6\x0fW3\xc4\xbfT\xe9u\xce\xd4\xb8\xf5?#JT\xf1p\x82\xcb\xbf\x9b\x83\xaf{\xf5\xf4\xe1?\xbe\x16\xa2\xd6\xff|\xce\xbf\xc5\x11+\x177\t\xc6\xbf\xe9I\nb\xe0\x04\xe0\xbf\xc1\xaf\xc1\x1e\xb7\x80\xcc\xbf-\xf9s\xa5>i\xe8?t|\xe8\xa0\xbe\xd2\xcb?9a>\xcbja\xcb\xbf}]9\x1fYo\xd3\xbf1\xbd\x02$\xf7\xa7p?\xaa\x1c \x84\x84~\x86\xbf\n\x87\x0c,r\x94\xc4?\xabq\x96HM\x0b\xb6\xbf2{\x88\x87q7\x98\xbf\x0c\x0b\xd9\x07\xf5G3?\xdc\x08]i\xe7b\xbc?\x9f\xef\xeas\xd6u\xe5\xbf5p\xe1I\xf7S\xe3\xbfI\x03l<\x18\xb4\xc5\xbf\xda\x9a\xf0\xb7\xe9\xed\xeb\xbf&\x9a\x84\x9c\xb0\xa9\xc0\xbfz=oZ\x03\xf6Y\xbf\x16\xee\x88\'\x99\xb8\x87\xbf\x9e\xe3o1 \x9f\xdb?\xb4\xe1@\xc7;\xeb\xf3?nn;\xa9\xa0P\xc8\xbf\xc2D\x1ei7\xe4\x07\xc0c\xae\xcb<p\x92\x90\xbf\xb8\xa7\xce\x98\xff\xe5\x95?\xb5!\xb8H\x11rv\xbf\x8b\xa2]\xc3.e\x97\xbf#\xf0\xaeg|L\xa9\xbfuk\x86\x9e*\xdf\x10@\xc4\xa8*K\x1e-Y?\x0e\x0e\xc2\x9bv\xf2M\xbf\x99\x85\xa0\x15\x97.\x80?\x1b\x97u\x0b\x82\xcek\xbf\xc1#\xa5\xa7\xfd\x98d?\xe5\xe8%y\xf8ms\xbf\xed\x01gh\xc8\xfad\xbf[r\xa7\xfaH\x82\xcf\xbf\xa2\xb3n\xac\xea\xf9\xc2?\x8c5\xbb5KW\xc3?H\xa4\xde\x8e\x91n\x82?}8%\x95Y\xaf\x8d?+%m\xc1+R\xe3\xbf3G\xb9\xa7md\xe1?\xe6D\x97[\x9a\xf2\xb5\xbfa\x89t\x83\xcd\xb0\xa0?\xda>\xa3uaB~?%\x84V3\xcc\xc5\x8e\xbf\x92\xdegy"C\x82\xbfc\xd5[\x07\x19\xdb\xe2\xbf\x16\xcf\r=\xb3\xf0y\xbf\\\x04\xa6$\xd52\x89?\xff\xc1\xdfhC\x18\xa3?\xa5o\xd3\xe8\xfa\\\x01@ \x04u\xed\x99\xcd\xd3\xbf\xd6\x81\x017\xc6\x1b\xb5\xbf\xe0q\x99\xa8\x1a\xa3\x96?\x19[;Z?`y?\x0fR\xde\xc2\xe2_\xcd?\x96\xc5\x02\xe8N\x8b\xe2\xbf\xb8P\xf9\xcb\x92\xf6\xb1\xbf\xdcZ\xfc\x1b\xbf\\\xb4\xbf\x9e\xb0s\xbf\xb6wW?\xb5\x96\x11(\xdd\xcc\x87\xbf\x8e:\xda\xd4WL\xc6\xbf\xa7\xe6\xfaE\xaa\x17\x0c@L\xe6\x1b\x93\xd6\xf5\xbb?G\xb3\xef\xd2\xbaA\xe1\xbf\xca\xd6\xd0\x84\x19\x88\x91?SN\xda\x85\x1a\xd4\xb3?\x05]D\xeeV.\xd2?\xfa\xa3\x06\xbf\x1f\xfe\xb1?g\xc3\x1fx)\'\xc6\xbf\'<\x87\xebXN\x84\xbf\xd1\xeb\'<\xb1\xd5\x86?\xb4\xda6\x91?\xe6j\xbfZg\xaa!\x92\xf9\xe8\xbf\x80\x05q\xfdG\xfc\xc6\xbf\x0c\xdf|\xa5h\xc8\xc8\xbf\xf8\x15t\x87\xa1?\xd2?:|\x85B\x08<\x8a\xbf|c\xb4\xa2\x0c\x06`?\x93v\xa0\x8a\x80+\xdf\xbf3\xee\xb8\xb6dF\xd9\xbf\xe3\xb0s\x96\xd7\x1b\xa3\xbfy\xbf\xa3w\xcf2\xb7\xbf\x9e\x9c"\xef\x02\xa6\x10@n\x18\x85\x90`\xb9\xc2\xbf\xf4\x0c\x9bS0\x94\xa8\xbf\xc6bRf=0\xe0?\x8f\x9a\xf1/\'\x1e^\xbf7\xe8\x0cec\x893?Z\xe3\xa0H\xf0\x90\xbe\xbf\x82\x11\x98\x94\xa9\xd4\xa9?h\xdb\xda\xc5\x8a\xeeo?\xf5\xa1\xc3&\xf6\xa1\x82\xbf\xa7^\x81\xa9\x00t\x90\xbf{($\xab\xb7$\xc4?\x1e\xe1\xeb-\x89\xd2r?6\x19B\x13\x88\xb5\xc3\xbf\x1f\xb1\xf6i\x05\xb5\xa2\xbf\x80L\xdf\x88\x04!\xd6\xbfG\xe5\x07H=9\xa1\xbf\xad\xe2\x9f}>\xfe\xb9?\xf0\x86#+\x98\xb9\x9e\xbf1\xe9\xed\x9a\x8c\xc1\xc5\xbf\x986\xe1\xdd\xd54\xac\xbf\xfa\xe6\x87\x97\x02z\xc0\xbfb\xd3\x89\xb0\xf5\xd0W\xbf\xcbhz\xe76\x07\xa3\xbf.\x8e<<\xd0M\xb2\xbfB\'/\n\xcbD\xb0?L+\x81D\x14"\x91?\xa2\x88T\xae\xb8G\xd3\xbf2\xb5\x99QB1\x92?\x98,\rh1\x90\xe0\xbfY\xa0\xd5\xf8\xcf\x97\xb3\xbf\xaa\xc2\xa1\x01\xe7\\\xc2\xbf\x8bm=\x89\x1fc\xb1?\x18ab\x18Y\xdd\xe0\xbf\xc9\xd5A\x90\x10e\xa8?4\xbe\x9b\xb0\x12\x91\xe5\xbfN|\xe9\xf4\xa6T`\xbfIc\x14\xcd*\x046\xbf\x8c\x7f\xfc\xba"Y\xab\xbf\xe9\x1aFM\x13/\xd6\xbf*X\xb6\x82^Tf?\x07\xb5<\xf8f\x01\x8a\xbf\x91\x05G\xf3\x8cZ\x95\xbf\x90\xc3\xe4S\xcb\xee\xba\xbf\x13\x01)L\x9f\xa4\x90\xbf\xd4\xbd\xefb\x80\x8d\xc3?\xb15\xf58X<e?\x8d\xf1h\xac\xe6\x10\xca?)\x13\xf9T\xe6\x18\x8b\xbf\xf7\x98\xcf>\x9a\xac\xc5?6?\x8f"\xc4\x18D\xbfE\xc1fcmZ\xaa?\t\x9b\x16\xad\x0cp\x81\xbf\xc6\x83\x9f\xc7\x1c\x10\x8d\xbfv<4\xf1#$\x9a\xbf)%\xb5\xddv%\x84\xbf\x08\x1cE>O\x12\xb0\xbf<2\xdb,\x9f\xe3\xe3?\xb5\x9d\xcf\xc8\xa2`b\xbf\x92\xf4\x007\x10\xeal\xbf\x99\xc8\r&\x06\x97\x99\xbf}\xa5*Gs\xe0s?8\xddi\x00\xf8x\x9e?)\xc2\x07\xa8\xaf|\xcf\xbf\xe3qx>\xd18\x91\xbf\xd6\xb9\xa0\x04\xaaf\x92?\xb6\xe6\x82\xd3\xa0l\x89?\x1fC\xc8"\xacvh\xbfSC;\xaa\x89.i\xbfK\xc2\xb8\x12\xda\xc6\xcb\xbf\x1a\x16=\xccQ`\x8c\xbfiJ\\\xbf\x8b\xb4\x92\xbf\xa2\x10\xe8\xdb\x1d\x9a\xe4?\xefO\xf4\x87\xc4/H?Ye\xa7\xe7\xd5\xe5\xcd?Y\x83\xd3\xfd\x08\xe3\xd3\xbfc\xb1\x1f\x1f\xac%e\xbfix\x83\xf1\xc6!\xce?>\x13\x9e\xfa\xa7ya\xbf\x08\x8f\x1dCp`\x83?\xecei\xa8\x17^y\xbf\xcb\xd0\xf0c(\x9a\xb0\xbfl\x0b{\xd8\x05\xca\xa3\xbfg@W.\x0e\x1e\xb6\xbf\xe34\xf9\xab\xfd(\xb8\xbfq%:\'\x93\x0cv\xbf\xe5\x93\xfd\x14\xdagj?\xc2\rE\xb7\xf6p\x9f\xbf\x1c\xbe`\xa3\x16\xac\x9b?!\xb6\x9d\xd0\xdaM\xdf\xbf\xbb\x93\xc7!V\xee\xa1\xbf\xcc@\x17\xe5\x85\xd1\x06@\xae\xd7v5\xe9\xa7\xb8\xbf\x9c0\x7fb\xbaS\x11@E\xd1\xf7\xc8\xf9Mf?\x8c\x1c\x90\x08\xdaK\xa3?\x9f\xb4\n1\xd9A\xab\xbf\xeb\xf3\x94hL\xc1\xe0\xbfjDy\xc7\xd1 \xd9\xbfY\xf4\xe05P\xf1\xd2?\xea\xfaI\xf3E\xf4\xd1?+-\xb1{\xda\xcd\x85?-\x00\x18\xde\x82\x81\x8f\xbfs\xe4.}4/\xd1\xbf\'f\xb3W\x97\x8f\xf4?(@\x9fe\x12\xdd\xa7??\xf7uV\x8fQo?\xf5\xc41W*\x07\x8a\xbf\xa2\x18\x0c\x8e\x99v\xa4?9\x1d\x9d\xd5\xac_\xaa\xbf\xc42\xbb\x84\x06n\xb6?]9\xa0\xd9\xc4W\xc5\xbf!jr\xbf\xb2\x12\x7f\xbf\xcdI\xc4\x99\xefH\xdd\xbfs\x89-\x97\x0e1\x92\xbf\xbcF\xf9<\xf0\x95\xe7\xbf/\xa3\x1c\xdc\xa5$\x9c\xbf\x89\x04\x94\xee\xb6\xe7\x0e@\x14T`\x93\xf0\x82\x97\xbf\x08E\xd2\x04\xd9j\xe8\xbf\xe3\x01\x15\xd5 L\x93\xbf~$\xca\x03\xc5:y?\x89\x9d\xcc\xca\xdf\xb1\x9c\xbf\x87\xd0\xe8\xdd\x8c\xf6\x08@\xd3V`\x99\xbd\xe1}?\r\xc7\xa0\xf1\xd2\x07\x94\xbf\xe5\xc2\xe7\x1b\x1d]\x9a?}R\x02\x8a9\xd5\xcd?\xee\xffO\x01\x90\xb9\xad\xbfy]\x03\xcf\xd6\x19\xd6\xbf\x1a\xadI%\xc2\xc1\xa3\xbf\xa2\x07\xfa\x95p\xf4\xe0?\x9b~\xc1M\xa9XX?\xb5i\x96V\xc4g\x85?nm\xdfJ\x9f\xae\xcc\xbfN\\2\xd9Q\xdd<@\xcf\x9a\x16+&\xd5\xc4?\x8f\x92\xc5\x14Ae\xe4\xbf*\xee+9_zi\xbf\xa2\xae\xa3\xe2\xc5\xc3\x87?\xe0\xca#f\x07\xa9\x81\xbffK\x8a\xe0W+\x80\xbf\x9d\x1awE\xe0\x87\xce\xbf\xdb\xba\xe2\xc9Ym\xa0?\x10\x8e\xd2\xc8\x81HY\xbf)\x0b\x9ev\x9eTL\xbf\xe9e\x87S\xe6\x9b\x8f?\x8c1u\xb9\xe9m\x82?WZbDz\t\x82\xbf\xf0\xbd$\xe1g\x86O?\x82\xfbx\x8b\xca\xa0\x8f?t\xa2M\x80\x0fI\xc4?\r\x13XA\xe9#s?Q\x90\x908\x10\xee\xa4\xbf($\x99\x83\xf3_\x8c\xbf\xa8[mEJ\x01}\xbfB\xfa\xcd\xc7\xe4\n\xac\xbf\xe0.\x9bH\xbd\xab\xcf?\x9dg\x13&\x1dB\x9e?\x0cD\x16\xaf&\n\xdf\xbf\x84\x93kGE\x0c\x84\xbf\xf8e\xe5D-@\x9b\xbf\xa0\x81\x99\x8a\xc1\x98\xca?\xb4-2c\x96\xa2\xac?\x9b\x91\xe2*\xb3z\x89\xbf\xc0?b9n\xff\x87\xbf\xa0A!5d\x7f\xc1?\x85\\\xe3V\xd0a\xcc\xbf`\xeb\x05,v\x0b\xb4\xbf\x85\x02\xe9\x01\xce\x05\xc7\xbf\x1dT\xe4\xa7p\x85y?4\x16iv\x14@\x87?\xd4\xa9l\xae\x14\xf3\x97\xbfP\x03\x12\x13-e\xc8\xbf\xbc\x9c0\x03\xe2\x19\xc3?\xba9\xec{w\xbd\xb8?\xaa\xbb\xfd\x19!\xebd\xbf\xf9\x96\x84i8\xd7\x98?\xa7~\x8c\xf6\xe0\x84\x92?\x8a&\xff=\xb6\xc1\xb7\xbf\xb4\x95\xa5\x80\x9e\x8a\xa6?\x80@\xc5\x86\x92\xd4\xf0\xbf \n\xd0^\x84\x9e\x96\xbf\x0eLy\xd7a\xb7\x8c\xbf\xee\x0b\xbeK-\x16\xe0?\xc4\x91\n&`g\xd6?b\xb8\xb4\xfc\x10\x14n?/\xe7\xf7\xd5y\xf6\xc9?\x84D\xdf1#ap\xbf\xeb\x19\x0b\xbfm\xa3~?\x0b\x81\xabF\xbe\x10\xb2\xbfW\x81\x19\x0b&\xf7\xd7\xbfS{\x0eo#\xf5\xca?\x9a\x9f\xd4\x1c\xfa\xcb\xf5?\xba&x\x0fE\xca\x84?\xbf}2_0\xd3r\xbf\x88\xfc\r~hP\xa2\xbf\x89^c\xb6\xd5\r\xd8\xbf\xddk\x87\xbd\xb35\xb3\xbf{y\x00\x8a\xd8e\x9b\xbf\xe7\xcd\x9a\x88\xf7\xb0\xa6?R\x0b\xb7^\xc8\xc6\xc0\xbfd\x89;A\xafO\xe1?\'\x10k\x1d\xff\xa8\xb3?0\x03\x99]\xe2FT\xbf\x0c<\xdb\xc1\xd48l\xbf\xbe\xb9e\xa3\xc4\x94\xc4?\xb5\xbe\xd7u\x1e\xb7\xa4\xbf\xc5\xfe\xe0\xd1\xf0\xadq\xbf\x95L{D\xfb\xe6\x8d?S\x87u,\x91\xe3\x9a?Q\xfb-3KYt\xbf{\xd3Ts"\xc6\xa9?\n\xea\xac\x89\xf22\x97\xbfES\tW\xe9\x8a\xd0\xbf\xf28 q\xb1\xb7\xc2\xbf\xb1\xa7\xa3\t\x19\xf1\xb7?\xa87\xd7\xca+\xa5\xaf\xbf\t\xf8\xf3\n\xfef\xc2\xbf\x1d\xda!\x92\x9b\xe2\xb0\xbf^^\x89Fx\xf1\xbc\xbf\x08\xbe\x8aE\xa7\xbe\x90\xbf<!\x8c\xcc\x039\xb9\xbfC\x0e]A\xa6\xa9\xbc\xbf\xf6l\xde3\x0f\xaf\xad?\x8a\x1c\xcc:\x9b\x99U?\x97\xcf\x03by\xb7\xd8\xbf\xeb\xe3\xda\xcd\x1b\xd2\xce\xbf9g\xccl\x07\x8b\xbb??\x13\xc9\x17\xe8\xe2\xa9\xbf\x85\xa4\x04^\xf2\xcf\xa5?\x813\x0e\xd7\x15v\x8c?I\x1d\xc7P+\x9e\xcb\xbf\xce{\xb9\x82S\xfa\xb1\xbfn9R\xee\x1b\x89\xe5\xbfu\x91\xceS\xc1\x15\xa3\xbf\xa1\x10\x02\xe3\x8fV\x87?D\x14h\xf5P\xd1\x84?v\x0b|o\xee\x9f\xd1\xbf"\xae\x15G(E\xbe\xbf\x12\xd7Oa \x86\x87?\xb1\xb6\x04B\x03\xd6\x90\xbf\xcd\x9b\x07j\x17\xf4\xb1\xbf\xd7N8\xc5i\x19\xa9\xbf1m"\xe7\x95n\xbf?Y\x1cX\x01\xf2\xe9\x84?\x02\x81^\xe5\xd0\t\xb9?d\xdd/\x8d\xab[\x89\xbf\x10.2\x02\x88\xad\xc1?\n\x11\xa4/\xefq\x91?}]\xc8\xf2:\xf8\xa2\xbf%\x07\x04\x0c\x0eE\xa9\xbf\xdf\x1dZn\xd2\x91a?`\x82\x08F\xa6\x84L\xbf\xff\x87\xa7\x1f"K^\xbf\xaa{\x12\x02\xf7c\x80\xbf@V\xfd\xfd\x7fm\xd3?3\xa2\xe9\xac9\xca\x92?\xb8\xa5\xb9\x11L\xa8Y\xbfP\xce\xbb\x05\x91\xe7y?<\x18\x9a+\n\xe7\x8b?\x90\x00\x1b\x1bB\x9dh\xbfg-}\xd4\xf8\xfd\xc0\xbf\x03\x8c!\xd5\xf4\xf2\xca\xbf\xce\xd9\xad\x95\xb9\x9d\x92?\xd5\xa0\xe2M\x0bo\x97\xbfR\xc3\xa1[\xbc*\x89?M\xb9Y:\x0cs\x9d\xbf]E\x8e\xc8\xfe/\xc4\xbfG$\x07\x8a&i\xbb\xbf\xf7SS\xb4Q\xf9\xb1?\xd9ev\xc9\xd5\xbb\xad\xbfX\xd3c\x03p\xb4\xa0?\x99D\xcb\xc1\xbb\xdf\xc3\xbf\x137\xf4}#\xc7\xcc\xbf\x00\x82+\x9d\x92\xdd\xc1?\t\x99\x82\x93_\x10\xc2?\xb0\x1dr?\xf1\xd9z?\x8c\xe8\x99\xcf,\xce\x88?2\xdd\xec\xd2\x85\x89e\xbfS\x89\xa8\xc74\xeb\xbf\xbfeeD\x9a-G\xc1\xbf)\x94B\x12-\xfb\xa0\xbf\xdd\x9f\x90"_N\xa7\xbfC\x93/3\xca?\x94\xbfB\xd4\xc34\xb5\xb9\xbb\xbf\x0eh\xcc-\x7f!u?,#\xda#\x91\xa5_\xbfw\xab\x84\xac\xd7\xc7\xe6\xbfW\x93\xa2Wj\x94\x86?E,e\xe1\x9cz\xd7\xbf\xad\xc7\x08\xcb\xc5\\\xcd\xbf\x8f\x0c3O\xa9<\xb0?Am\xac\xb1\x83\xd9\xb6\xbf\xd1\xb2\xf4\x0e0\\\xb9\xbfIu_z\xad\x00\xb5\xbf\xe7\x06\xef\x93\x92\x08\xda\xbfn\x1c\x1e\x13\xafc\xc8\xbf\x1e9\x1dE\x84h\xd5?b*\x9cRo\xb2\xd5\xbf\n\xed*R\xd4\x15\xd0\xbf\xe3s\xa9\xcf\xe6\x89\xb9?\xec\x85\xa7X\x1d\xb9\xa1?D&\xaa\x04\xe7l\x90\xbfg&\xc7\x80p\xfa\xcb?e\\\xe9\x87|\xa7\xd1\xbf{\xa53q\x1dC\x91\xbf\xed[\x82\xd2\xc0P\x94\xbf\xb3}\xbe\n\n\xfc\xcb\xbf\xdc\x1e2\x91\x06\x81\xb1\xbf+Np\x9e\xccW\xc2\xbf\x85@)\xfa\xdb\xa4\xa1\xbfN\x13\xe5\x12\xbcA\xdf\xbf\xdf$\xbfl\xc4P\xcb\xbf\x1b~R\x8d\x16\xa5\xe2\xbf@\xfa\xca\r.W\xcb\xbf\xf0Jp\n\xa5z\xc6?\x9a\x1a\x0e\xe3\\\xbe\xca\xbfa\xbcN\xe1\xb8\x96\xd6\xbfFS\xed\xd2"\xf9\xb5\xbf\r\x9aDvA\xf0\x98\xbf\xdc|\xbc\n[\x93\x88?\xf0\x81\xb7\xc2\x82\x87\xd1\xbf\x8d\xb5\x02B\x9d9\x9a\xbfUa\xd9F\xb4\xd9\x8c\xbf\xd3\xf5\xa2!|$%?\x93\xaf_tj9\xd1\xbfj\xc0\x1f\xb8\xcfR\xb5\xbf\xf1C\x00W\xcb\xb8\xcc\xbf\xb8{\xc3\xd0\xec\x8a\xbd\xbf\x7f@\x94\x90\x9f\xa5\xd4?\x90[\x90\x048\xe3\xa5?q\t\x9c\xb8Iq\x90\xbf\x95a\xcaj\x94\xa4\x97?\x19\xc5\xe6\xd9tb\x90\xbf\xad!>\\$\xad\xc1\xbfPvB\xa4\x97l\xdd\xbf\xc9]*U\xf4\xdc\xbd\xbfG\xde\x17\xc0\xef\xb5\x83?\x9d,\xd5\xaab\xd9u?+\xa8\x1c\xddEi\x86?\xd1\xdc$6=Rw?\x99\x04\xdf\xbf\x92\xd7\xb0?\x08\xd6\x8d\xf1X\x9a\xbb\xbf\xbcw\x10\xc5[\xea\x80\xbf&\x16lc\xf5\xeb\x85\xbf\xef\xb8|4\xf2\xc1S\xbf\xc1\x87\xadh\xb5\xe9S?\xc0\t\x93\x95\xb2\xd0\x87?\xd5\x9f\x03\x064\xd5A?\xa2\xcc\x8d\x8aI\xb0\xa9?\xa6\xfe\xaa\x96@\r\x9d\xbf)\xe8\x19\x1e\xd8\xdf\x8f\xbfD\x80B\xe2\x84\x90\xba\xbfJ\xcc\x14 \xd4H\x92\xbf\xc3\x8aO\xf5$\x18_?\x1d\x8e\xd2\xbe,\xa7\xd6? \x06\xf3<\xb1\x81\xa2\xbf\x08/?,\xe3\x89\xd8\xbf\x0e\x86\x0e\xb3\xc4B\xbc\xbf\xa2\x99\xdd\x11\x88\x8c\x8e?\xc9W{5X\x9a|?<\xc15\x19\xca\xbc\x94?#\x9c\xcd\x1c\xa7.}\xbf\x87\xe3\xe3\x8b#3\x97?\x06\x0b\xfe/4RB\xbf[\x8d\xe2\x85?\xe4\xce\xbf\xd2p\xa3w|7\xab\xbf\xc7MSpq\xe8\xb8\xbfD\xbd-\x0e%\xb1\xad\xbf\x1d\x18\x0f\x05dI\x93\xbf\xe0N\xa7\x14E\xc1x?\x89aIv\x19\x02\xb7?\xdf\x86\xadY\x8a\r\xaa?v\xccRO\xd05\xc3?_\xa9\x18\x15\xb2I\xbb\xbf\x847\x8c\x97v\xb9\x85?\x1f\xab\x92r\xdf/\x8e\xbf\xaa\xacU\x19\x94\xb6\xab\xbfG\x90\xce\x8ej\xee\x89?\'\x02\xe6\x9d O\xef\xbfx\xf6\xa6\xd1u\xa6z?Y\xc6\xa4H\xca\x05\xad\xbf\xc5\xeb\xeaJ\xe8\x86I?\x00#\xb9\xe3\x9eS\x9f\xbfk\xd1tP\xc9\x0b\xe6?\xd3\x85a\xd1\xfa@\xb1?\x11\x02\xb3!\x872\x8a\xbff\xe2E\xf0\x14q\x91\xbf>\xf6\xb1\x88S\xc3I?\x05D\xac\x81N\x1c\xd0\xbf\xf6g|d\x94\x89\xc0\xbf\x80rk\xb1p)\xf4?\x9a\xc5\x11\xc5\x1a\xea\xe1?\xcb\xa5\xfa\xbchnR?\xdf\xc5&\x84g\x0e\x7f?\xa1\x80\xb7\xb4/\xd1\xd3\xbf\xa9p\xa8c\xb7\x1e\xc9\xbf\xc3\xcd\xa7\xddK\xc8\xa8\xbf\x86\x9fs\xf6|\x14\xad\xbfub\xa4\x7f\xe2q\xa5?[a\x15\x16\x85\xa7\xa0\xbf\x16\x04\xc9\xfa\xbb)\xc9?\xdf\x87{\x1c\xff\x94\x95\xbf#H\xfc\x82\xc6?v?\xc6\x8b\x0e\xf2\xbb[\x82?\xc9\xf4wks8\x97?\x1d\xe5\xcb\xebk\xe8\x87\xbf\xa1\x19\xcf\x86\x99\x98p?\xefx\x13\x03\xa8\x0ci\xbf\xd3\xe4o\x19\x91U\xd3?\xc4\xda\x8e\x0b\\\xe2\xb4\xbf\x94\x14\xb7\x807\x9e\xd1?\xc5\xa4<\'1\xe6\xa2\xbf\xe4<?h\xe4\xcb\xc0\xbf\x12<\xce\x13\x89c\xbe\xbf\x05j\x08\xf7^[s\xbf\x17\x96m\x87\xe4\xe1\x9a\xbf\xed\xdd\x8e7\x92\xa5\xd3\xbf\xa2d\xf1\t6_9\xbfT[\x066Z0\xe2\xbf\x8d#\xa4\\\xa4\x00\xb7\xbf\x02b\x8c2\x82\xb3\xa3\xbf\xf4\xc7\xc6d\xc6c\xb7\xbfh\x93s\x04\xfd\xcc\x90\xbf\'\xf2k\x98\x19\xe8|\xbf\x83Y\x0b\xd0\xcf\xc9\xe2?\x97\xf9~H\xc31\xb5\xbf\xfe\xf2\xe0\xb0\x823\xcd\xbf\xf5y\x13CA\xae\xd6\xbf;wM\xa7\x02:\xc3?\x9b\xebL\xecot}\xbf\nON\xbe\x14"\xa2?f\\\xadV\xac\xcb\xa0\xbf\xd1\xaa\x90\xbb\xb9\xe4\xde\xbf\x7f\x15\x1f\x97j\x93\xe0\xbf\x8f3\xd0}\x9c\xb6\x83?\xbf\xc7{rF\xcd\x99?Q\xa6\xd0N9\xc9\xca\xbfc\xfc\xc5\xb7\xe4!\xc1\xbf\xea\xd0\x91<\xfc\xf9f?\xf8\xa9*\x86;\x03)\xbf\xb1\xd4\xc4z\x98\x82\x9b\xbfu\xef\xfe\xb7\xb0\xe6\xb3\xbf\x89\xc2\x95\x8e\x1c\x8d\xad?8W\xa2\xdc\x01.\x8b\xbf\xc0A\xcfGz\xc6\xb7?\xc4\x04\x90\xa0\xd1\x1e\xa1\xbf\xady\xf0\xa7\x86\x03\xa4?b4\xf0\xf5\xe4\xdd\x95\xbf\x9e\xd3\xf7\x91\xc3.\xbc\xbf\xf9\xdfMF9\x8d\x9a\xbf\x1a\xee\xdcZ:\xa4\x82?"U\n\xfb\xef\xf4\x8b?\xe0\xf0\x02\x85\xb3be?\x9d)\x88\x99k^\x92\xbf\x07\xe3\x08<r\xce\xd3?cJ.\x14\xe8\xf1\x92\xbfm\x90\x825\xae\xf9e\xbf\xdeu4\xbe!M\x83\xbf\x1d-\xfbB\xa3\xb2m\xbfZ\xfd\xd1t\xc77\x88\xbf\xdc2\xda\xb5\x9b`\xc3\xbfU\xe3NSd\xf2\xa1\xbf\xcbB\x15\x05Z\x00\xd9\xbf\xe5\xb1[\xbd\xc0\xd7\x9d\xbfN,\xbb\xd2a\'s?\x19\xd7\x0c\xf7\xb2\x07R\xbf\x9c\xa5\x1e\xe1\x9a\xba\xc5\xbfQ&\xb5=gJ\xa4\xbf\x87\r\xa3\x88z)d\xbf\x00l%\x80\xb3\xbd\x94\xbf[LH\x9f\xeb\x08\xb1?;\xc9 \x02_O\x82?\xe41\xbfX\xc1\x99\xe2\xbf\x02\x89\xdc\xe8k\x89\xeb\xbf\xc1]\xb0U\x91\xd1\xbd?\xf9A\x84h\x8b-;\xbf\x00\xb7Z\x183\xaf\x81?\xb6Z3\\\xfa\xd5[\xbfo\xb1\x18\x8c\x01\xae\x94\xbf\x87\x00J#\xee9\xab\xbf\x17|k\xa2\x91\xb3\xac\xbf_\x19\xfb^\xac\x13\xaf\xbf\xc8\xef\xbd[\x1f#\x99\xbf5\xf7\x08w\x07c\x8d?\x11\xf1\x91\'\xabBx?@\x99\xe5\xfa\xff\xcfy\xbfo\x91(\xc2Y\x95\xea?\xd3\n\xfa\xa1\xe2\xa4\xc2?\x89\x83\xbd\xe7^?\xe2\xbf\xaf\xd6\x89\xa4\x053\xc0\xbf\xc5G<\x015i\x9a?d\x87\xd5\xdbS\xc0\xa0?\xa8J\xd7\x02\xa9\xc5\xd8?\xe5.\xb7\x16\x1c\xdd\xb3\xbfc\xba`\x1f\x14\x9b\xd6\xbfX\xd8\\d\xe1}\xb5\xbf\xa5\x04v\xc6-j\xa8?\x92\x80^\xe6\xf3D\xb3\xbf\xd2\xab\xbc\t\xb2/\xe0\xbf\\nA5B9\xd1\xbf\xb5bE\x84\xc5\x9b\xad?\x03\x96\xca;e\xce\x90?\xae\xe5{V\xb1\xa7\x80?\x86\x97Py\x18\xf4\x94\xbf\n\xe6\xab\xb5\xb4\x9bQ?\x8aw\x8d\x12\xe1\xf1\x90?8\x009\xa7uT\xd2?\xe7\xaeq^\x96\xb4\xb0\xbf\xe9\xc7>\x06S\x1ct\xbf\xbfF\x0c/X\x9d\xac\xbfQ\xd9hYXR\xe2\xbf\x8es\xc6_^$\xc5\xbf[\x832;k\xb2\xe4\xbf=\x14\xf9\xc7\xbc\x8f\xaf\xbfE\x16;@6\x81\xa6?\xd5\x19\xba\xfa|\xda\xa1\xbf\x8d\xb8P\xa7C\x05\xd2\xbf \xd8o\xa0\x97\xe0\x8e?\xbb\x14\xc0\x97@\x08\x94\xbf\x95\'\xdd\xcf\xfd\xe8\x90?\xbf\xc8\xbc\x1c\x9e0\xc4\xbf\x01)\xe6\xd5~1\x90\xbf\x96?\xc9\x8d=RV\xbf\xbeY\x00\x85\xd6c\x82\xbf8\x04\x8f\xa5\x06\x1c\xb9\xbf\xbc\x8b\x19\x9f\xb8O\x9e\xbf\xc2\x08\x8d\x91\x1f\r\xd0\xbf\xed\xb3W1\xf1\xce\xb4\xbf\xbe\xfb\x94\x8c\x9e\xc2\xc6?\x10 %-\xc5\xd8\xc2\xbf\xa5\xfc\xa0\xac\x91`6?<D\x19\x01\xb9"\x81\xbfF2\xbf\x02\xa8\x85\xba\xbf\xe9\x8b+#\xed\xaax?\xe1\x13\xe6d\xec\xfb\xda\xbf\xfbi;\x07\x05\xb4\xd1\xbf\x8f\xfa=\xe9\xa1a\x93\xbf$\xd6\x1d\xb5\xa9jg\xbfK\xfd\x9f\x14\xc0\x19J?5\x06\xdc>\x9c\xddi\xbf\x9b\xd6Ddk`\xac?UC\x81\xd5\xc1\x1aD\xbf\x17F4r\xd6\xd7\x82\xbf\x1d\xcc\xdf\xcd\x18\xd5d\xbf*\xb5\x8e\xdd\x96\xe0c?\'\x06\x18\x0eR\xb6\x8f\xbf\xdfy\xb4\x12"\x9b\x8d?\xe7G\xd4\xcab\xac^\xbf^\xea\x95p$\x92\xd6?\x7f\xba+8\xba\x9cH\xbf\xe9\xbc\xb6e \xd3r\xbf\xf6-v\x00\xacvp?2Mw\xacz\x8d_\xbfr\x00b\xc3=\x87c?\xb7^d\xe8|\xe8\xaf?"{D_\xe7\x98\xb1\xbf\x14b\x90\xc6\x14\x1c\xde\xbf\xc9Dx[\xba\xed\xb8\xbf\xc8\x93J\xdfr\xbct\xbf@\xf5]xE\x15t\xbf\xab\xbeb{\xe6\xd7\xc2?\xf8\xd8\x9e&\xac\xcd\x9e\xbf\x10\xe7/\xb3\xb5\xaa\x81\xbf\xa5\xc4Iq::\x95?d\x9bsl5\x9c\xd7\xbf\x82\x8e<\x0e\xa4h\xc6?\xfeO\xeee\xb0U\xae\xbf:v\x94B\x1a\xd9\x98\xbfZ\xbb\xf5z\x11\x15m?\x9e\xd7\xe3Pp\x1f\x8a?\xf8\xb9\xea\xa6\x1b\x1b\x95?\xab\xdf\xf9\xe65\xe9e\xbf\x88cv\xe0\xb1\xc8g?\xe8\xa8(>B:\xaa\xbf\x7f\x8b\x013w\rT?\xa5@=\xd4\x0c\x95\x89\xbf\xff\xcf\x90\xd4\x90\x12\xc8\xbff\xd4\x8e\x07\x87h\xb0\xbf\xe2\x0b\x02&%\xf2\xac\xbf\xc4H\xd2m\xff\x81\xd3\xbf\x05G\xce\t\x10hz\xbf\x0e\xbd\xa4\x995W5\xbf\x14\t\xed!\xef3\xe4?\x8aB\x9e\xb9G\xd6\xc9?J\xf2XL\xfet\xc5?\xb8\xa3\xca\xb4&\r\xa6\xbf\x1c\x12\x8a\xce_\xc3t\xbf4\xa1\xd0\x17\xa6\x17\x82?\xe7\xf85e\xe4\xe2\xc3\xbf\t\xfeh\xe6\xd9M\xb1\xbfj\xc0\x0e?8\x88\xbf\xbfk\x8a\x00\xfa0\xb0\xa8\xbff\x06j:\x9byt?`w\x90\xe2\xe6n\x83\xbf\xfe\x08\x84\xd9F\x8f\xe2\xbf\xfa\xa0d\xf8\xe2\xaa\xc3\xbfF\xa6\xde\x9e*Z\xb9\xbfO~\xf2\xba\x7fI\x9e\xbf\xd0V\xa8^\xe7\xd4\xb0?\x95\x05\xe6{\xf9\x16\xb3\xbf&\x9e\x18h\xec\x0b\xb8?\x07g\xf7\xe7\x19J:?\xfe\xb6a!\xa4\xc0~\xbf\xd8)[\x05\x12\xea\x8c\xbf\\\xa6X\x11\xb3\x92\xce?\x96\xec"\xd2dR\xac\xbf\xd7\x8f\xe7\x88\xe0&\x8b\xbf\xd6\xa3\xda=#n^?:\xf3;\x0bU\xa5\xb5\xbf\xfbRc\xb6\x97P\xa2\xbf\x95\x00P\xe4kJ\xb5\xbf*J\x92\x15*.\xab\xbf\\\x89\xcc\x1b\xac\xef\xd8\xbfk\xec\xe9\xa6\xb4)\xc7\xbf\x9b\xfa\xc4\x973b\xab?aU6\xe5\x0e\xa4\xa6\xbfQ\x0e\xb8\x9e\x1eR\xb0\xbf\xd7\x18>\xc7\xa6$\xb5\xbf\xe2\xac\x82\xf0\x02f\x85\xbf\xee\x87\xd1;\xe7\xa8\xb3\xbfn\xe8\xc0m\xf8u\xcf\xbf\x01\x8f^!J\xa7\xc1\xbf\xdcO\xc9/yD\xa6?\xc4\xb0\xe4"\xf3\x91\x8d\xbf6\xde\xd2<\xd0D\xd0\xbf\x9b\xeb4\xe5\xdb:\xd5\xbf\x0e\x03\xfa|\x01v\xd3?.X\x90\x86\xd7\xe3\xbb\xbf\x84/\x83\xdbN\xe6\xa6\xbf\xd1\x87\xf3V\x82\xad\x9f\xbf\xcc\n\xf2\xd6N,\xc7\xbf\xab\xae\xf6\xfd\xd8\xa0\xbb\xbf tI\xb0\x19\xf1\xd3\xbf\xbd\xdc\xd1\x8e\xc9\xbc\xe8\xbf\xe6\x0c\xdd\xb6h\x1c\x81\xbf\x067\xea\n\x82\x90\x8f?\\-\xb3\x97|\xa1\xd4\xbf\x95\n\xf1\xe4\xc6\x92\xbf\xbfA\xcc\xf3\xd5|u\x90?\xfd\xd6\xa8\xdf\x18\x81\x83\xbf\x16\x8ax\xab\x83/\xb6\xbfg\xd3ZRb-\xaa\xbf\x8d\xab!Q\xc5}\xa5?\xb39\xce\xf2\xd4\xac\x88?\xd6\xa2X\xfb\xfa\x19\xb1\xbf\x97\x19\x99\xa3\x16?p\xbf\x19\x15\x95\r,\xbfg\xbf\x80\xd2VYK\xcc\x84\xbf\n\xac\xe0\x88\x9d!\xb8\xbf\x8aF\xc3d\xbam\xb1\xbf\xef\xb9\x83\xddW\n\x95\xbf\xad94\x10\x85\xfe\x84\xbf\xa3\x91\'\xb1\n\xf7\x94?\x97\t\xb7T\x08\xb4p\xbf\xec\n\'\xab\xbaC\xb8\xbf_\xd9b&\x92>\xb4\xbf)O\xd1.\xc0\x8e{\xbfh4\xe7\xdb\xa5@\x88\xbf>bV\x14_\x08a?\xcc\x97\x04\xc3\xcc^\x85\xbf`\\\xcbQ\x18i\xc1?4\x1dF\x06\x14\xc0\xc8\xbf\xd7To\x8d{-\xa4?\x10\xc4\xd2_N\xaf\xad\xbf\x8f?\x92`\xa4\xea\x7f?\x7f\xe6\xa0\xc0T\xf1\x97\xbfH\x9b\x90\xc5\xf4h\x9a\xbf"\x9b\x86z\x9c\xbd\xc9\xbfd\xd5\xe8P./\xb5?\xf6\x88X,\x03K\x8f\xbf\'\x0e\x7f\xc2\xf3\x91\xb3?c\x14\xa0m\xe1\xb0\xc4\xbf\x94\xa4\x1do\xcc\xd7\xb1?\xa8\x18\x95\xf1\xda\xa4\xc1\xbf\x1fq\x02\xd9@\x03\xa8\xbf\xa6\xcd\x93\xa7cA\x80?\x8fl]\xf66m\x80\xbf\xbc\xf1,\xdf\xa6\x1d\x94\xbf\x16\xa4\xafg\xc8K\xd3\xbf\xac\xc3\x9cBTu\xc4\xbfE\x01\xd8p\xd8\xcc\xbe\xbf}Z\xd2\xc2\x1fi\xaf\xbfM:\xdb\x14\x96\xb7w\xbf\xceA\xc9\x98H\xd2\x9f\xbf\xc3M\xeddf\x88\x90\xbf9\x1d\x12\x8a\xb6\x1f\x89?\xc1\n\x89\x99\xd1\xbe\xb0\xbf\xf3c\x7f\xa7\x08\x0b\xc6\xbf\xf3M;\xed\x05\x8e\xaf?\x1b\xd6c\xe2\x9a\xcf\xc9\xbf\xa0U3?\x1e[\x96?>\xe2\r\xc0\xfeU\x88\xbf\x03M\xaaF[\t\xc2\xbf&e\x15m\xbe5\xb4\xbf)\xc7\xc3\xd2\x12\xac\xd0\xbf\xbf6\x19\xe8\xdb]\xd0\xbf\xbbC\xe3\x88\xf7^\xd3?z\x18\x02\x08\x91\xf0\xd3\xbf\xeb\xf7eA\xce\xc6\xb3\xbfT\xdbU\x84\xafM\xd9\xbf\x18\xd7\x1d\xa5>\x04\x88?\x0f\x8a\x93\x84\x0e%\xbb\xbf\x1aH\xec\xda{\xc7\xc2?1}b\t\xab\x90\xd1\xbfc=\xcb\xf9\x19{\x89\xbfDC\xe0\xfff"\x88\xbf\xedL$\xd9_\x1f\xd1\xbfS>E0_\x92\xc7\xbf\x06t\x0f\xc5\x17\xdd\xd3\xbf\x02\xbdb$2c\xa7\xbf\x80r\x9c^^\xc5\xbf\xbf\xa1g\x9c\x9c\x14\xd8\xd4\xbf\xc7OS\x06\x81u\xb5\xbf\xcb=\x97I\xc7\xc1\xd3\xbf\x10q4LW\x1f\xb8?\xdc\xe9\xbc\x9ei\xf6\xaf\xbf\xf5\xb0h\xd8?\x91\xd0?N\xda\xd0\xb5\x06\xd5\xb0\xbf<\xc6p\xf7*\xae\x9e\xbfEV\x10\x11\xfbA~\xbf\xf8\x82\xee9\x1b\x92\xcd?\x9a\xffL\n\x9c\t\xa9?\x94h\xdex\x85/y?\x87\xe1\xd4z\x99\xaeu\xbfV\x99P\xa41\xcc\xba\xbf\xfe\x95GDc\x8f\xc3\xbf\xf8\xbe\xb1\x12\x0e\x99\xb5\xbfo\xf8aK\x9ea\xc3\xbf\xed\x16K\xd2\xc5f\xc1\xbfb\x8c\xe1b\xf2\xd2\x95\xbf\xc0e/\x9e\tx\x86\xbf".t)w\xae\x9d?\xed\xe84\xdd\xae0\x95\xbf\xca\x0f\xd49\xe2\x87\xb8\xbf\tM6u\x96v\xe1\xbfA\xf5\x847\xbf\xf7\xd1\xbf\\K\xfc\xa1\x95\x8ce?N\xb0Q\x90#f\x90?k\xdb`m\tB\x92?q\x0e|x\xc7\x92h\xbfA\x85OQ\xe1,\xb7?\xfa\x8e\xf1\x9eF\xfc\xc6\xbf$\x8f\xbd3\x9e]k\xbfcw\xf2\x9d\x80J\x86\xbf\xbdL\x9a\xfd_z\x89?O\xb9\xdd?\xdc\x19\x82?\x8d\xb1-\xe8\xca\\\xa0?r\xa7o\xeb\xc8\xb0\x90?\xc0\xccJ\xf5!t\x90\xbf\x9c\xf2\xc8\xc1V\t\xb6\xbf\xfa]\x0e\xa9$\xf2\xb3?\xbb\x85h\t\xda\x1b\xb3\xbf4G\xaa\x1f\xe4\xccz\xbf\x9c\xf7\x07\xd5{\xfbg\xbf\\\x1e4\xb6VR\xde?\xd5\xde\xef\xe3\xdd\x9b\xa6\xbf({a\xf0\xd2\xad\xb6\xbfj\x8aV\xd7\x99\xa2\xca\xbf;5WQx\xb3\x82\xbfnp\xce\xfb\x15\xc5i?x\r_\xf0\xcen\xb6\xbf\x13\xa0<\xf3\x1f\xcd\xa9\xbf\xdd\x1cX\xa0\xd3\x8f\x82\xbf\xae\xabB\xe3=o\x81\xbf\xcb\x17\xc3\xd9\t1\xb0?\xef\xd6M \x9a&\xdc\xbf\x13\xb7\xe1\xfdd[\xa7?\xd87\xb0\x02\x8d\xcd\xb4\xbf\xba\x84\xc9\x9d\xb2\x11t\xbf\x83\xe9\xc9\x01-\x83l?\xf5F<\x9fo\xd6{?\x07Q\x95\xbfd\x14\xb8?\xdf\x9b\xd9U+\xad\xbd?:i\x06d\x00.\xb0\xbf\xd3-\xdb\xa3\xfd7|\xbfg\x02\x97\x7f\xf1\x9a\x82?<\xe3\x1a,k\x81\xd0\xbf|\xe6\xb2\xb4\xde\x05\x97\xbf^\x88\x89\x936\xc0\xc2\xbf\x046>\x17g\x17\xcf\xbfd9\xb7\xf7\xe3\xe2\xbb?\x85B\xae\x01\xf2\x92\x81?\x87\xfb\xfe\xf5\xde\xed\xc9\xbf\xdc\x9b,\xfb\xa3\x98\xcf\xbfz\xa0\x00\x108\xa1\xab\xbf\x93q\xaaW\xb6+\x98\xbfEGN\x94\xc5\xe1W?L\xdb\xad%\xbe\xebr\xbf\xeeM\xb4\xdd\x0fQ\xa8\xbfS\xeb\x80\x9cUm\xc6\xbf\xe7P$\xe9\xb3\x94\xce?\xd2\x17\x8f\x82\x84\x08\xa0?\xf2\xbcd\x1e\x9d"[?\x04\xcb\xc0\xbc4D\x84?\x103\xd2\xadN\x7f\xd8\xbf}\xf2\x05\xaaf\xa5\xcd\xbfQe\xe1\xf6\\-\x9d\xbf\x1a\r\xeb\x98\t\t\x9b\xbf\x08\x03\x97U\xd1E`?j\xad&\x97\xc2\x8c\xc1?\'\x97T\xa5\x1f\xc4\xdf\xbf\xdf\x0c~\xf3\xd0\xd0\xc9?UZj\xe3\x15\xb0\x7f?\xba\xb79\xdb(\xbfv?\xa6\xfcZ\xba`\xef\xd5\xbft\x80?0\xd7\x03[?3?\xd9*\xa6\x14h\xbfp\x00V\xdc\xbb\xeer?\x9c\xe4\xde\xe1.\xa6\xa5\xbf\x88"_F\x05i\x98?$\xa7\x9a\xe1\x1c\xbf\xb8\xbf\xdaZ\x0c\xac\xea\x16\xc2?\xdfs\x19,p\x0f\xdd\xbf;\xac9\xafkU\xb0\xbfw\xe7\x9d<\x8f\xef\xa0\xbf\xd0\x08\x85\x03\x12\xa7\x9a?8\xecq\xd7M\x04\xd1\xbf\x9a\xfe7\x1bZ2\xcf\xbf7%\xde\x9d3:\xb6\xbf\x82Z\xcd(\xdf\x8e\xac\xbf_&\x11Cwo\xd2\xbfm\xbc\x93\xbc\x02\x7f\x95\xbfn\x1eF\xac\xde5\x82\xbf\xef\xc0\x89V\t\x8b\x95?\xdb\xf0\x8b\x8cSH\xe8\xbf\x00\xab\x84\xe8m\xa3\xbf?\x9c\xe4H\xf3\xf5\x8e\xc5\xbfs\xb2\xb3\xfbp\xcf\xd4\xbfs\xa8\xff\x83\xfe%\xb5\xbf3\xd52\xc6\xd7C\xaa?\xbc\x03\x8b\n\xcfO\xd8\xbf\x92\x8e3\x9f\x91\x1c\xac\xbfQ\xf9\xff\xcd\xfe\xe2\xd3\xbf\xe7\xa6\x0e\xa1\x98\xe8\xdf\xbfF\xc4\xe6\xf5\xb6\xda\x80?x-}\xec\xca\x90\x91\xbf\xac`_\x11@\xd0\xcb\xbf\x84Y\xff\xbe\xd6p\xb1\xbf9Q:\x06\xcb\x0cL?\xe49z\xb9\xea\']\xbf\x1d8\xad\xca\x83\xfe\xae\xbfK(\xee\xa6\xbe\x98\xab\xbf\xbb\x9b\x0bo)C\xbb\xbfK\xb6\xfb\xb2\x11\x96\xae?\x19B|\x07\xfb\x0f\xc2\xbf@\x9d\xf5V\x12j\xab?\xc3\xf1|\xac\xba1\xbb\xbf\x98\xa4\x19#\xbc\xc7\x98?\xe1-\xbe\x0c\xfbm\xc1\xbf\xa1zJ\xde\xae\x92\xb8\xbf\xd8\xec\xde\xc2\xa2\x00\xba\xbf>r\xde>\xa1\x08L?\x04\xb2\xaa\x86h\xa2\x93\xbfM\x0b$~\xbd8\x82?\xd1\x88\xb8G\xb6\xe7\xdc\xbf\xae\xff\xb6\x1c\x82\xd1\x97?\xf5\xaa\x8do\xdf9p?\'i\xc1\xa9\xc2lz?\x17k\xfa\xaf\x81\x80e?\xbf^\xf15e\x1bk?6\xaaF\xc5\x07\xb7\xe0\xbf\'\xc7Un\x039\xd2\xbf\x92-<\xa7\xa2A\xb4\xbf\x92u-\xfd,W\xbf\xbf6@Q\x81\xe1\x9cf\xbf\x1c\xd8\x1e\xdft\xa2\x84\xbf\x1f\xe2\xb3\xbc\x1b\x1a\xd4\xbf\xd8\xb1\xd5\xad\xbf\xb9\xd0\xbf0\xaa\xe2\xe9O_\x81\xbf9\xa5\xc5\xcen\xc4Q\xbf\xd3\x19o\x7f\xe7?\xb7?\x11\xa2\x1d\xce\xdd\xf2N\xbf\xc0<\x80\xc7\xee\x9b\xed\xbf`\x13\x05\xd3\xba\xfb\xe4\xbf\x01\x7f\xe1\xea9"\xba\xbfy\x8c\x98p\x03\xe2\xa5?\xd6\xcf\xe84\xfeCn\xbf\x8e^\xc2\x8b\xd9\x80a\xbf\xad3\x01\xe6\xe2\x9a\xdc\xbf\x13C\x13,\xee\x0b\xbb\xbf?\xab$\xa5\x87\xa3\xa3\xbf!\xe3\xf3(Nv\xaf\xbf_Z\xd0\x9d\x92O}?\xe4K\xb5e\xb2\x98\x94\xbf\x99 .\xf5\x94\xb0o\xbf\x83w\x8a\xef\x18sH?)\x86\xb5\x85\x92=\xd5\xbf.\xad~"Y\x92\xd4?\x9cAX\'+\xf8\xe4\xbf\xec\xcd\x95W\xaa\x96\xc5\xbf\xecW\xafT\x0b\xc4\xb0??\xea\x1f_=\xc9\xb2?\xf4\xd7|\xa0\xb9N\xc2\xbf\xf1\xa9\xa18\x16\xe7\xbb?\xb3\x94jF\x8e\xd1\xe6\xbf\x877\x18\xa5\\\xc2\xd3\xbf\xc6g\x1c\xb4\xd3\x13\xa3\xbf\xeb\x1b\xf1\\\xd1\x1c\xc0?JpP\xe0?\xa5\x93?\xa2}\xd7N\xdc\x80\xf1?@\x86\xc3&\x8f\x02\xce\xbf\x16+yN`\xf8\xb2?&\x82X\xf6{,\x99\xbf\xf8\x08\x8b\x9b"H\xbf?\xdf\x1e\xb7Bo\xeb{\xbf\x8f\xb0:\xdf\xa9\xe5F?7\xc6i2\xd8,\xd8\xbf#es\xd9\x92-\xd5?\xf8\xd0\xec\xfb=t\xc5\xbfb\r\x17\x89F\xa0\xbb?j\np\xb7\xcb\xe5\xb4\xbf\xe4Fs\xa9)[\xd4\xbf\x95\x8d\xdf\xc8\xae\x03\xec\xbf\x99xP\x10\xb5\xee\xdc\xbf\x17D*s\xca\x01\xf6?\xca8\x1e\xb8\xfb\xf4\xce?+\x8e\x1f=?\x03\xdf\xbf\xa3\x98\xfb\x08\xba\xb2\xd3\xbf;\xafGZ\x0cy\\?&n7\x81\x18\x86X\xbf\xca87\xf1\xef\x92\xac\xbf1\x90YK\x1dt\xb8\xbf&T\xde\xb8y\xec\x88\xbf\x06Qr&5\xe6o?h~\xb00\xcbS\xd8\xbfKL\x01c\xec-\xc1\xbf\xcc\xc5\xde\xe5\x99\xb2\xd5\xbf\xd7\xe1h\xab\x9e\xc1\xc4\xbf\xc3H\xabZ\xd7b\xd4\xbf\x96m\xdc$\x0e\xcc\xc6?T\xd7%o\x12\nU?\xd5\x1a8tVr\x88?\xf9\x9b\nRHb\xcc?\x81h\xce_\xdb\xc8\xc6?\xbe\x19\x8d\xeb+\xb8\xd5\xbfKri\xa0\xe2\xa6a?\x04\xe0\x9a\x10j^\x81\xbfK\xe8\x88\x87\x05\xbc/\xbf\xc8\xd8\x1e%\xe6\xdc\x90\xbf\xb1\xfa\x88-\x01\xee\xa0?H\xa1\xa7\xf6:\x05\xd2?\x89\x84*(L\xb1\xc0?\xb4lM\xf0\xc5\xa0d?\x91\xd1\xb7V\x03\xf6@\xbf\xe3\xe3\xe4JO\xd0y\xbf\x89/\xbc\xe5\xf3$~\xbfm\xf1\x0c\xdb\x85`\x97\xbfWF<\xc7p\xd4\x89\xbfLe\x96\x02\xc3\x9f\xc8\xbf(\x16\x80 /\x8d\xad?&\xa6]\xe6i\xd7\x83?\x8dG\rI\x88\xcd\xa7?\xa4\xa4\xfb\x18~Ut\xbf\x97\xf5\x81\x1b\x1e\xf9t\xbf\x84\xb1vY\xbd\xa5\xed\xbf\xea\x8b\xa5\xadz\x9b\xb3?\xa5j\x0fS\xf2y\xd8\xbfd\x91IqI\xb4\xc9\xbf*\xd6\ty\x89\xf1\x84\xbf\xbe\xed\xe1DADp?5\x99\x03F\x8d\xb5\xe1?\xa5\x0f\xa3>\x99t\xae?c\xb5\xc3\xf5\xb5\xf2\x99\xbf1Cd\xec\xcag\x80?\xbd]\x8b\xc4V\x86\xb3?H\xacCx\xf2\x12\xdf?\x07\xac\xb8Q\xbct\xca\xbf\x9a\x84\x9d\xd0\xeer\xaa\xbf\xe9\xff\x8cI\x9bN`\xbf\xfdF\x0cuf\x97\x86?\xc2\x16\xcf\xe1\x8a\xc5\x9c?\xf5\x01\x90S\x83C\xba\xbf\xdd|\xc65\x1aM\xa9\xbf\xecu\x86(\xae\x05c?\x0f\\\x86}\x9fM\x94\xbf\xdfG1H_P\x96?P<\x0b\xc9\xf4\r\xc0\xbf[\xcb\x0b7\x8d\x14\xb1?\xfa$y\r\x93\x0b\xce\xbf\x0eH\xe8#]\xaf\xc6\xbf\xa1:\x0e7\xbeL[\xbf\xc5\x9d8\xdb,vB?\xa0\x9fn\xfc\x8e<\xe3\xbf\xbdLN\xee\xb9\x9f\xb8\xbf W\xabKc\x92\xbc\xbf|G|B}R\xaf?\x99N\x85\x11\xc0\x1c\x87?\x172\xe3\x99}\xf9\x8a\xbf\x0b*\xff\x85\xf5\xcd\xd8\xbf\xff7\x93\x94\x93\xa6\xc2\xbf\xa8(\xbdR\xba&\xe5\xbf\x12p\xbe\x86\x01m\xaf?\xd2l5\xddW-`\xbf\xba\xa9Cb\xad\xb9\x87?\x02\n\xd8\xfb\x085\xe0\xbf\xd2x\xc9a\x94\xec\xc7\xbf$tO2\xef\xac\x99\xbfgG\xc3\xd0\x1bN\xa1\xbfh;)\xfb(\xb6\xc0\xbf\xeb\x90#\xe3\xb2~\xa4?}\xfe\x890\xae\xa5\xce?\x9d\xc9$\x85\xf2o\xcf?\x96\xa7S\x04\x06\xc4\x90?\x0f\xe0\x98l\x1b\xa1w\xbfs\x05\xb6\xadv#\xb1\xbf\xa5\x08?\xdc\xaf\xee\xb4?\xd8\xdb\xc0\xdeg\xca\x87\xbf\xb1\xc9\xf2\x99\xc1\x11\x83\xbf1\x18\x89Uv\x82\xb1?\x8cL\x86G\x07\x9a\xb9?R\x94\xa1\xc6m\x03e\xbf\x80\xae\x91\xb3~M\x90?D)\xfd\xc1q\x85\xc3\xbfY\x0eg2\xbc\x1e\xbb\xbf\xa8\xfe\xfa9\xdb_\xa8\xbf\x1c\xcd\x91\x9c\xf3\x84\xaa?hY\xb9\x96\xf6?\xbf\xbf\x0fj\x05\x96\xddG\xc7\xbf\x7f\x92\xeb\xbb\xaa\xb4\x84\xbfyD\xf1\x0e\'#\xc8\xbf;\'\xb7\x9f\x17\x9b\xb3\xbf0^\xa5\x11a\xf9\xc2\xbf\x84H{\x95}>\xa2\xbf\xf5\xecN\xc2.X\x90?\t\xe4\x85(\xcen\xce\xbf`9\x80\xc0; \xc0\xbf\xc5oz\xc2\xfc9^\xbfr\xcf\xeb\x8b\x14e\xc8?C\x9d\x97A\xfd\x1b\xb4\xbf\x94\x8bM3\x99v\xb2?\xe2\xd4\x9e\xe1\xcb\xe0\xc8\xbf>b\xfce\n@\xd2\xbf\x7f4u=\x01\xf6\x9a?G]\xe4\xd5eA\xda\xbf\x9fV\xf2\xd8\x8f8\x84?eN}\xd3\x90\x01\x8d?6\xe1_X\x88\xe3\xbc\xbf\x84K\x95\xc2k\x91\xae\xbf\xff\x18\xfd\xde5\xf5\x81?\t\xba J\xcf\xd9H?\\\x8f\x11\xf1\xaf\xab\x99\xbf>mC\x84\xf9\xa2\xa2\xbf\x81_6\x1c\xe7;\x96?^L\xc1\x9eZ\xb2\x83\xbf\xd4D\xea)\x9e\xb9\x9d?#\x96\x97\xcb+\xec\xa7?\xfe\xb8J\xadqh\xa3?\x93\x8c\x12\xbb\x06)\x81?\x03\xd7\x1e\\\x14\xa0\x9c\xbf\x1f+\xb9sb\xea\xc0\xbf\xde+`\xd2\xbb$\x91\xbf\x80\xe8&\x8bLB\xa1\xbf\xebV%\xd1\xe7\x86{\xbf\x8e\x88t\xc9\x04\x80m?\xd6,\xd6}\x13\xcc\xbc?\x11\xa5Z\xfa\xe4\xfc\xc1?\x12Y\x93\xff\x9dM\x83\xbfn\xec{\x0b%I\x92\xbf\x86\x91\xf1t\x9bHF?H\xb7\xf9\xab<\x9e\x8a\xbf\xe4>\xc4\xed\x87\x81\xd2\xbf\xb2\xca\x04\x12\xc3J\xb4?\xe2h\xeff<S\x98?\x1f\xa7\x95\xf0\xc6@\xcd\xbf\x89v\xafT\xb4C\x93?\x9e\xca{\xd8\xab\xa7\x84\xbfs\x93\xb2r\x89\x1f\xba\xbf\xf6\xd1\xa9\xac,d\xba\xbf\xfag\xd6I8 \x9f\xbf\xc7\x0f\xffx\xc5\x12\xb0?5o\xaa\x04e\xdd\xad\xbf\x0e<0j0\xado\xbf"\x02$\xeb{\x10\xbb?\x87\xdcc\x80|\xde\xb6\xbfi\xba\x9a^\x94\xcb\xa0?\xaej\x08\x8c\xcaB\xa4?\x97\x12\xed\x9cw\xb1u?\x8dB\xb6m\x97\xd0\x86\xbf\xb2Ix\xec:\n\xc0\xbfu#\xc9\x07\xf2\xaf\xcb\xbf\xd9\x1a\xf9\x13RV\x9c\xbf\xe3Cah\xc8>\xa1\xbf5\xf4\x11F\xf9"\xbf\xbf\xbd\xb6Z\x1c\xf5I\x92?\x1e\xb5\x94{\xf0\x15\x84?\x04\x9f4\x1f\xa6\x04\x95\xbf\x17\xb0\xcc9\xa3&\xae?\xd7x\tm\xb9+\xb9?\x9dK\xe6Z~=\xdc\xbfIp\xf3\xbal\x80\xa4?D\xea\xf6\xf3\x16\xc7\x9c?\x80\xc9\xda5\x90\x1e\xad?S\xe0\x1fs\xaf\xf2\x89\xbfo=,\x1a\xaa\x00\xa2\xbf\xe5U;o\x1b\xe8\xcf\xbf\xea\x0bg+7|\xcc\xbf\x9f\xe2\x8e\x90\xbe\x86\xd2\xbf\x1d5\xed\xcd\x92=\xce?^\x93\x1f\xcc\xac1z?W\xe6KKP:\xb2?\xfb\x1a\xf3A$\xd9\xbf\xbf|\x88Sk\x89"\xb9?\xaeS\xd7\x93\x84d\xd1\xbf\xee\xdcr\xb7\x92,\xc5?\x894C\x7f\xb2|\x83\xbf\xfa\x91&\xd18\x84>?^`\xa9\x16\xc5\x01\xbb\xbf\xcc&\xfd\xb1\xe37\xc2\xbfB\xdf$\xbb@\xac\xba\xbf\x9d\xdaQ\xcd\x85\xf6\xc7\xbf\x80\xf2l9!\x16\xd0\xbf\xc0O\x06\x98\x0f\xbb\xd6\xbf\xbfKS\xa45T\xd5\xbf\xfcq;\x06*\xff\xcc\xbf]\xf0\xf8*\xd7`\xaa\xbf\x84moD7w\xc7?\x82\xa2\xd3\xb8Dh\xca\xbfA\x82\xc8\xf9\xf3\xf8\xb1\xbf\xabUJ\xa3E\xa9{?(/\x13\x8e\xee\x95\x90\xbf\t\xb2M\xf4^;\xab\xbf\x87:\xec\xbe\xd4\xc0\x94\xbf\xb1\xdb\x85<\x8c\xe9\x7f\xbfj\xe4\xbc\xb8\x98\xfa\x82\xbf\x8a\'@\xf3\x13\xbe\xb1\xbf!\x87\x1c\xd3\xed\xa9\xd6\xbfj:\x1f\xcb\xe7\xd5\xc5\xbf\xb3\xfe\x9d\r\xe9\xa3\xbb\xbf\x07\xa1\x89\xe0\x07]\xbe?\x88\xf9\x14\xe3\xef\x9e\xbc?+\x94\xb3\xab\xd8\x9d\x83\xbf\x05\xdb\x8a\xb5p\xef\x83\xbfCY\xef\x8fX\xc6\xc3?;R#\xa7\x03\xbd\xb0?b\x8c\xdfhK\xa3\xb8\xbf_gT(\xddc\xe5\xbf\xf8\xaaX\xa0\x14\xf0w?\xf1\x9f\xdb\xaa\xfa+\x87?>\xf2\x075\x9e\x19n?\x891\xa1\xc0.\xd9V\xbf\xdaO:\xebjl\xc8\xbf* 8\x84r\x8d\x91?-U\x8cS\x8a\xd8n?v\x92\x93q}qv?-10\xecW\x8fv?\x86\xf4\x9b\xb0\xc0a\x9e?6VP=\xe5\x02\x84?l2\xcc\xa6\xf2\x85\x80\xbf\x00\xaf\x1e\xde7\x0c\x9e\xbf\xe8\\\xc90\xe19\xb2\xbf\xac"0\xef\xf5\x86\xbb\xbf:\xa0I(\x10\x8d\xb1?t\x8f$\x9a\xc5\xe5d\xbf7L\x06#\xe7\xad\x98\xbf\x1dr\xae\x87;\x90\xab?\xe5\xec\x16JD\x9d\xa6?\xcd\xd0\xcf\xa0N\xe9\xc1\xbf\xb8\xe8u\xb4\x1b\xd4\xb7\xbf\x8f\x9e\xffd\xd0\xc1G?\x02?\xe8e9\xaa\x96?\xc2\xdd\x92\x93C\xd7\xb6\xbf\x13\xa2qW%\xc9\xa0\xbf\xaa\xad\xc0\x14\xf3\x12\x85\xbf^\x02\xbd`\xc8\xd9R\xbf\x99B\xcb\x90\xe1\xee\xb6?$G\x93\x95\x11\x9e\xd1\xbf\x08\\\xe1\xb4\x93\xe3\xb4\xbf\xa7sUQ\x98x\xab\xbf\xd5\xbc\x9dw\xf1\xbak?f\x15\xe7\xcd\xcd\x9a\x81\xbfY\x8cm\xd4y\x16\xa4?\xbb\x12y\x85\x99>\xc3\xbf\xf8\x90*\x8b\xf5\xf0\x92?)rl?46\xb1?\x96\xfe\x06-\xa2\xa4e\xbf[\xa1~\xdf\xf3s\x89\xbfG\x12\x88\xd6\xa4K\xad\xbf\x1eq\xcbO\xbe\xb7\xc6\xbfI"\xd4\xf7\xa0B\xbe?E\x01\xdd\xb6\xbbO\xd3\xbfcO\xe46\xe1&\x99\xbf\x19\xb0\x9bKK4\xac?\xa3\xf0I;\x10\xe6\xe3?\xf5[\xc8\x1e_\x00\xc0?\xf6\xd3\x1a\xd7\xaewo?\xbf\xb1\xc0\xb3\xf6)g\xbf~\x8f\xfc\x90\xab~\x81?\x19\x1boLv\xb5\x83?w>\xebG\x07 \xc6\xbf\x13#R\xca\xab\x9f\xb4\xbfVU\x1e\x819J\xe2?$\t\xf35O\x12\xd1?\xb0 %\xc6\x90\t\x85?\x8a\xe5\x8bG\xcc6\x81?6f\xb0"\x0b\x83\xd0\xbfy3m\xcfU\x95\xc6\xbf\xf8x\xd10\x9f\xc5\x88\xbf\xb9y6\xea\xb0H\xa5\xbf4sX\xee\x8d\xe4\xaa?\x9e\x9b\x8fj\x03\x93\xb1\xbf\x16\xf8\xe8\x84\x91\xd6\xda?IP\x0e\xd6V?\xc4?z\xbf1\x7f\xfe\xee\x8e\xbf\xcd\xcb\xf5\x92\x00\x0b1\xbf\xfe\xbe]\xf3\xc0\xbe}\xbfvm\xbc\xdf\xe8Q\x85\xbfj\x95\xce6\x9d\xa9\x81?\xb7S\xb7<\x0e\xe4\x86?m\xdf\xf5\x08\xd1!\xa4?w\xf8\x82C\x8c\xa0\xa5?8TG\xbaYs\xb4?=MT\x01\xb0\xf5\x9c\xbf\xc7bc\x9c\xab?\xc8\xbf\x1f\xfd\xfb\xe1a\xaf\xc5\xbf)PJ\xcd\x12\x93|?\x9c5\xae\xacl\x8c\xa0?\x8f\xb6\x03\xd7d*\xc2\xbf\x05P\xbc\x1c\xb2\t\xba\xbf\xf0v\x91G\xb0[\xbb?\x10\x81G\x8c-\x0c\xa1\xbf\x80r\xc5t\xfd\xb8\xc1\xbfAm\xb5\x10\x14#\xc2\xbfy\xe7\x01\xaf\xd3\xe5\x9e?\x00k\xa1\xb6\x82@\xa1?C\x06Ac\xa0\xc5\xcf\xbf\'\xc7\x1f9\x1f\x98\xd5\xbf\xd6\xf9m\xc2$\x1a\xca\xbf\xfd\x86\xcf\xc2\xb2\xfa\xc5\xbf\xc4\xf9sAY\xa0\xb7?\x8c\x198\xc3D\xf8\x99?\x0fG\xa4\x8d\xe7d\xb0\xbfq,V\x98f\x99\xbf\xbf\xf5A\xaf\xc0\n\xcb\xe0\xbf\x16\x7f\x94\xab\x90\xaf\xd3\xbfz-6\xf0\xe7"j?xF\x0b\xa0\xb55\x88?bGEz\x04\xf5\xc5\xbf\xa4\x91<a\xf9\xad\xc1\xbf\xb8\x0ek\xe2\xb7\xb1\x8c?f\xa3\xee\xe5\xf2\xc9\x84?.ug\x03GP\x9b\xbfW\xc0j\r|J\xa6\xbf(\x9eF\xe5\xbe3\xb3?\xdf\x12\xd5\x85\x9a\xf0\x9a?\x1c-\xefc\xf3c\xa3?\xcaot\x8c\xfc\x12\x83?\x8d\xac8\x8dp\xad\xb8?\x03e\xb10\x16\xaf\x95?\x9a\xca\x81\x99\xcc+\x8d\xbf\xdd\xbd\x89\x9d\xc3\x7f\xb3\xbfg`\x85\x0f]>\x96\xbf#\xc1_\x9d\xe9\x1f\x89\xbf\xa7\x91y\xb8\xe8>^\xbf\x06\xf7\xd5\x14\xe5\x88\xf9\xbe\x7f2*\xfb\xda\xa4\xb1?\x85\xec\xa8\x98\xafG\xb6?\xc8k~\x85\xfc[p\xbfJ.\xfa\xee\x957w?\xf5\x04\xa3\xbd\xc0?j?\xb83\xe2!\xafKQ?\xbeU\xf7\x96#^\xda\xbf}\x00\xd5\\\xe9J\xd1\xbf\x1d\xbeQj\xd0\xa5\x9b\xbf\xc92\xea\xfd\xcd\xed\xb2\xbf`\xecW\xfb\xc7\x7f\x88?\x8e\x9f\x9d\x9f\xa14\x83\xbf\x03\'X\xdfe\xbc\xd2\xbfB\xc5\xcb\xce\xd3\x81\xc3\xbf\x8b\xd1H\x1a\x00?\x97?\x04-\xd4-\x8a\xd9\xae?\x9a\xb4\x8a\x81%+\xc9?\xf5\x91\xe5\xf6\xb5S\xa1\xbf\xb0\xb3;\xb0\xf4%\xdc\xbf\xfa\xc19!\xf7Z\xe0\xbfy~\xa6\x01\xe5W\xb8?\xbe\xb4\x1f\xc6\xe0,\x87?\xd2i\xe0\xd7y\x18\x87?\xaa+1?!\x9b\x93?56\x17\xf71O\xc7\xbftZ\xe1#;\x9b\xc8\xbf\xec\x99\xba\xd9\xb5z\xa0\xbf4FM\xbf\xe1\xed\xa5\xbf\xd6O\xe9\x1a4i\xb3\xbf\x1c\xd6\xab3W\xf6\x87?G\x91Q\xea\xc7\r\x83\xbf\\p\xab"+\xd7A\xbf\xd6\xa3"\xf4\xdc4\xc0\xbfppJ\xcb\xeba\xbb\xbf\x11\xe4\xa8K\xc4\xb6\xda\xbf\xe1\x97\xdc\xb1\x85\x1c\xd3\xbfV\x13\x03\x14>\xaf\xb6?\x15\x80\xd14No\xb4?\xf9\\\xafv\xdeR\xb7\xbfu=\xfd\x8aBy\xb8\xbfL\xe9\xc6Uf\xb4\xd9\xbf\x90\xe39\xc5\xe0\xe6\xcb\xbfp6\xcb\x83\xcc\xb5\xb6?\xae\xdda\x0f\xc2\x11\xc6?\xd0\x16\xe1p\x80\x90\xcf\xbf/?Z\xfb\x8b>\xd2\xbf=\xe6\xa4\xcc\xbdl\xb0\xbf\xc9\x13\xe9\x1bl\xb1\x98\xbf\'\x9e\xe5\xca9N\xb5?\xcbs1\x1ai@\xc2?\xffv:=\xb5G\x82\xbfO\xb4\xe7#hn\x8c\xbf\xc5\xc8f\xc1{\xdd\xb3\xbfB\x82{\xda;\x8f\xba\xbf\xe0\x01\xe3<@\x1a\x8e\xbf\x16\n\x83}>P\xb5\xbf^}\xb7\x8ag\xca\xd2\xbf\xbcS\xd3Y\x12\xda\xd5\xbf\xe49W\x1a\x97\x19\xe0\xbf{\xb2\xf4Rks\xd2\xbfZt8\xfd\x0f\xb2\x14@r\xaa\xcd\x03\rW\xd0?\xe8\xed\xe4\xa4\x0b\xce\xd4\xbf\x0fZ\xdeq\x0f_\xc2\xbf7]@AR\xec>?\x18}R\x9d\xfaQ|\xbf\xa0\x18\xfc\xaf\x8e9\xc8\xbf\x9c\x8di\xd7W\x17\x99\xbfh\x91e\xb9uI\x8a?Ch\x92\x0fk\xe6\x90\xbf5\xec\xef&\xdby\xcd\xbfi1>\xe7\xdd\xa3\xc1\xbf\xees\xbc+?\x89\xc4\xbf=\xf1pM\x1f\xa8\xba\xbf=\xb7fI\xa3Y\xd7?\x99\xb6\xfb\xba\xe3\x81\xb8?\x97!\xb5\xdco\x82a?\x01]\x16\x0fZ\xd1\xa2\xbf1\xc7Kq\xa3Y\xa2?R\xe7}<]\xa9\xa2\xbf\xec\\\x8d%\xd6+\xb8\xbf\xb6\x07\x0fn\xd3\xd6\xdd\xbf\x02\xef\xa1\xff\x1d\xdey?)\x18\xa5\x9a\xbd\x06\x82?F\xea\xf0\xdfi\xb1\x9e?\xc4\x0c\xd7\xa5\x89\x91\x96?<6\x82\x14a\xc9\x90?\x8c9^\x1d\x13(\xa2?H\xdb\xb6D\x87\x1e|?\x0f2\x9f\xed\xaf\xcf]\xbf@w>\x8b\x02\x8az\xbf\xb8a\x8f\xb8?\x91s\xbf\xf2\xf3\xde\xa7x:\xaf?:\xfe1\xb2\x15\xde\x82?w=*Q6\xf9\xaf\xbf\x91)Fka\xb6\xa8\xbf\xf6^?\xcb\xb1\xb5\x8a\xbf\x12L\x9b\xae\x17\xad\x91?\xdd\xb3\x80\x9c1;\x8b?8\xcc\x8a\xaa7\xdds?\xd1\x1d\x81$\x9a\xd5\xd1?;W\x19\x02(a\x8b?\xa6\xcb\xd5t\xed1\xd1\xbf#2\xca\xaf|\xec\xcb\xbf\x7f\xa3>\xea\x9a\x1bc?V\x7f0\x944lZ?%\xfesm\x86\xb9\xac\xbf\xb2\xf4f\xe6\xbb\x17\xb5?|\r\xaeTN\xf2=?\x16I\x89\x13\x1b\x9f\x83?\x1c3v~\xf6\x7f\xc8?\x82\x08<I\xbd\xd7\xcc\xbf\xb1}W\xc8\xb1:\xb8\xbf\xd5\xa1d\xc0(2\xa3\xbf\xec\x12\xd2\xf9\xa7\x15\x86?M\xf8\xc7\x92@w\x96\xbfw\xc79\xe6\xabA\x8a\xbf0-\xef\x91\x1c\xb4\xb9?\xd94h\x07\xc52\xa7?q\xbe\xcfih^\xa4?\x833\xb3e\xb9V\x89?\ttrS\xa1\xb4I?i\x03\x8cr\x17R\xc6?C\xd5\rp\x95\xfc\x8d\xbf\xc8\x7f\x87,\x08\xea\xb4\xbf\xeb\xf3\x17G\xc7?\xd0\xbf\xab(?)\xb7\x0e\x95\xbf7i\xc8P>\xf9}?S\x1f\x94On\xde\xc7\xbfL\xa3\xc0e\xf9\xab\xc8\xbf\xb4Yv\xc9\x19\x03\xac?\n\x9a\xcft\xa2\xc1\x7f?\xcd,\xcc\xb1\xf7\xfc\x88?\xff\x94\x0cCK\xbdo\xbfj<tD=V\xc7\xbf\xde\x034\x82#U\xc0\xbf)\xf7c\xd2\x95+\xc6?\xf1x\xbe,\xd2\xef\xd2?m\x8fg%\x9b\xef~\xbf\xb1\xd9\xd8\xe1\n\xd9k\xbfE\x81\x89\xfd\xb4\x8b\xcb\xbf\x8dG\x90\xf9\x11\xc0\xd0\xbfx\xd1A\x8b\xdb\xd3\x9f\xbf\x1a\xbe\xbb\xfc\x05\xad\xa4\xbfL\r\x86\xb3;^\xb1?\xfe\xdc]\xa8\xd9\xe2\xa0\xbf\xd6\xc0\xc3|\xc2\x18\xc7\xbf\xc6F\x89\xbf\xb0}\xb1\xbfk\xcd\xa46\xd0k\x82\xbf K\xc1\xc4\x9a\x83x\xbf\xc0\xc3\xec}\xe4I\x9a?Is\x81X\x93\xe2\xb4?\xc50\x8b`\x95\xc7\x83?\xec\x9dV\xbe\xa5\xcfu?s\x80\x03_\xcbx\xa2\xbff\x0bA\xac\x9aZ\xb3\xbf\xc7\xe9{\xf1\xb1*p?\x7f\\C\xa3IR\x9c\xbf\x1c/O\xd1|\xcb\xaa\xbf\xb2\x97\xeb\xf5"\xef\xbc\xbf`9N\x1f\xbf\x16\xaf?z2\xe8\xb7\x98k\xa3?i)^\xae\xc1uJ\xbf\xeb"},$\xca\xba\xbf8\xd14\xfe\xc5\xc0\xaa\xbf%\xe2\xd6(\xb7B\xd8\xbf\x00\x0ba\xe0\xf1\xdd\xa2\xbf>J\x1c\xd0\x1c\xfbo?\x92\x85\xdcy\xc3\x06\xad\xbf\xc1\xf0o\x893\xf2\x82\xbf\xca\x07\xd0R\xafv\x7f?\x02\x11\xd9\t\xc3B\xbf\xbf\xe6\xfc\xad\xc4\xde\xe2\xab\xbf\x86m\xe0\xad\x89\xbe\xb3?\xb9G\x1bH\x06\x8b\xc0?\x7frC\x83lI\x92\xbfJ\x02\xef\x95\x05\x92\x8a\xbf\xcf\x81Wx\x17\xbc\xc7\xbf\x87\xc9\xc6\x8c\xd9z\xb3\xbfF\x85\xd7\xd6\x7f\x87\xc9?\r\x83\xc7\xc6\x18Zf\xbf@\x18\xd1~\xdb\xd9\x83\xbf\x9di\x9a\x98p\xe3\xa7\xbf9\x8b\xa3\x1fv\x9d\xc6\xbf\x14\xe3S?U\xb2,\xbf\xdc$$2\x7f\x11b?\x1c\xe9\xef_\x97+\x84\xbf%\x93\xbcn\xacq\xa9\xbf\xc5g\xb6\xbcJM\xa7\xbf\x96~\x80\xc1\x1d\xf2l?\xbb>"G#`\x9a\xbf\x92Y\xa4\x96\xc7\xa7\xa3?z\xbek\xa8\x03\xd1\x98\xbfb\xc8\xf4Z\x801\x9b\xbfh\xea\xbe\nj\t\x8d\xbf\xca\xcb\x9aN1Z\xb5\xbff{n?\xdf\x07\x90\xbfxc\xaa\x18K\xd0\x9f?\xfe\x1e\x15Y$~\x83?!K1F\xed\x1e\x85\xbf5\xee[\xd6\xabd\xc6\xbfu\xd1)\xccP\x89\xb7?w|\xa1\x96\x83\xc0)?/\x9c\x14EB\x99f?h5\x9a\xb1\xb4\xe3e\xbf\x0e\xf1\x0b\xd0\x12\xced?\xc6\x8e\x1b\xc5\x85\xf6\xb5\xbf\xee{Sy(\xe7\xcf?l\xa4\xf1j\xbek\xa0\xbf\x9bz\xfd\xfe\xde\xd3\xa5\xbf\xc8\x90\xaf\xa8\xfa\xe8w\xbf\x9f\xc80\x11\xc6\xdbj?\xcasR\xe1Y?\x91?5_\x1e\x93\xb5\xbd\xba\xbf\xfe\x01T\x87\xb8\x9b\xdb?N\xe8\xa6\xca\x0fs\x8a?\x80\x12\xa0t%$\xbf\xbf\x93\x9f\xfd\x9a}\xef\x90\xbf\x8b\xc8\xaaY\x8e\xdd\xbb\xbf\xbc0wJ*\x12\xb9\xbf\x88Q\xb4a\xb5\xc6|?\xe8\xbe\x90#\x84\x08u?\xfa\x81]l\x9e^a?\xe5\xd0\xa0*\x00]l\xbf\x93\xfa\x93\xc0y!\x9f\xbf\xb2\x89\xb4;\xfd\x9f\x9e\xbf\x07Dl-;\xd5\x98\xbfd\xaeQA}\x06\xa4\xbfX\x96E\xe9\x89E\xba\xbf\xce\xe9 \xca\x9b*|\xbf\'\x96\xcb\xe4(\x88\x81\xbf0\x01\xdc\xebJ\x16l?\xe4p\xad\xef m\xa9\xbf\x1a\xa8kc8\x19\xae\xbf]\xc1\x9elR\xb0\x94\xbf\xe1"\xe1\xc91k\xb5\xbf9uXX\xc3c\xc9\xbf\xf3\xc5\xa9\xf8_{\xc5?E\xd5\xc7y{\xfe\x88?+\x80\xa4\xa8\x03\xb9\xbb\xbf:\xa4\x06\x1b%\xe3\xa7\xbf\xe6\xed\xda\xcf{L\xb1\xbf[\xa4\xc98\xf9I\xd2\xbf\xa9z\xfd\\\xe7b\xab?\x9c]\xb4\xd7\x88\'O\xbf\xbd\xb8~\x17\xdaF\xb4?\xdd\xdc\x19\x8b]]\x86\xbf_\xe9\xac8\x82\xf3\xb6?\t\x08\xd3\xa6\xb2r\xcf?Ja\xeaCa|\x80\xbf\x01Y\xb0\x17\xfc\xce`?\xac\xc0\x9axG\xea\x87?.\x19\xee_\x05\x98\x7f?\x9bk\xc4\x16^\xba\xc6\xbf\xfa\xf6\x817\x9d@{\xbf\xb7\xab\x1f=E<\xd3\xbf\x0c\x8b\x9a\xb0N\xb1h?\x14\xce\x0c\xb3F\x11\xc9\xbfNH7^\xa5\x8e\xa5\xbf5L\x16\xc2\x15\x0e\xb4?\xa0\xf8\xae\xc2A\xdf\xd1?\xbf\xc7\xe6\xc3\xcbg\xfd?{]\x11>\r\xb6\x9b\xbf7\xf8sk\xba\xce\xba\xbf@\xdew4\xdc\x1cT?\xa7\'\xd7\x03\xda\xe5n\xbf>Zo\xe4T\xc9\xba?\xba\x85|\xe4\xa0#\xaa\xbf\xc6\xcd\xe5-H\rn??{\x03\x8aR\x8dm\xbf\x04\x14\xd4\xaa\xed\x12\x88?cl\xf7a\xa6\xac\xd9\xbf\xe9C\xdf6\xe9\x1d\xac\xbf\xfeq\xcf\xcb\xec\xef\xbc\xbf\x84w\xcalG\xd5\xac\xbf\xc1\xed7\xc7\xec\x03\xb6\xbf\x8a\xfa\xd4W\xd3\xd7S?\xf6\x84\xbe\x1a\'\x9da\xbfdq\x1f\x98=\x16\xc7?\x97\xd5\x10=\x14\xe7\x9d?GQ\xf35`\x9b\xa9\xbf^\xc9\xbf\xb4_K\xdf\xbf=\x9a`\x04\xd3\x95|\xbf\xcc\xa3\xf4I\x19j\x87\xbfp\x18\x90\n\xf2\xa3\x8d\xbf\xab\x86\xa1\xe3\x02[y\xbfz\xf4\n\xf4\xfe\x15\xd2\xbf \x0b\xee\xe7\xb6?\x87\xbf}\xa9p\xb4\xd4jW\xbfA\'\xde\x98\xcd#i?\xf8\x1b\xfb\xee\xe2\x9a\x85\xbf\x92\x13\x14\xf8R\xbam?\xcb\xcd\x85\xdcK/\x8c\xbf{S\xa0\r&\xf9{?:\xad\xa9\xf7\xf9\x06|?\x92{\xc93\x07\x03\x81?\xc3xI\'@\xe7\xd6?\xd9\xec\xbc\x0f\xd34o\xbf~\xb2bh\xf6]\x85?#\xf6\xce5\'\xeap\xbf[\xe4\xffj\xcf\x8b\xcc\xbf.B\xb2~\x96\xf3\x80?\xc5\xda\xd8\xa9\x97\x83t?\xad\x13\xd4\x19\xd5U\xa6\xbf\xf9\xbd\x07\xbea^\x8c?\xe5h\xad\x154Y\x89\xbf\xb8\xeb\xec\xfe\x86\xbbq\xbf\xa6\x99\'\xfa\x17\xa3\xe4?\x01\x90\x00`=\xad\x91\xbfV\xfe\xe7\x1b\xd7\x0fa?\xe73\x8aS\x05\xca\x99\xbf\xe7Z\xdee\xd0\xfa\xc3\xbf\x15\x9a9\x93\xa8\xc2\xb6\xbf\xc3*\t\xfc=:\xaa\xbf!\x90\x7f\x91w(\x85?*0(\xde\xa9\xbd\x93\xbf\x8dM$\x8a]\x91\x93\xbf\x91\xea\x98g\xf2\x9c\xc8\xbf\xe4a\xba\xe6 \xa2\xc0?\xb0\xedw\xa3N\x83\x9c?Ay-\xae\xf2\xf0=\xbf\xf9@\xaf\xdd\x9bT\x96\xbfw\xcdI\x1a\xa8R\x97\xbfE\xcaU.\x19\xc4\xbf\xbf%\'\xcf\xb8\xc8\xefK\xbf\xect7\xcb(\xfe\xd1\xbf\x16\r\t\x8d\xca\x8d\xa0\xbf&\xa3\xbe\x91\xa2\xf4\x9d\xbf\xe6f\xa8_\xc7\x9c\xc1\xbf\x9b+\xd9h\x83\xe2\x9f\xbfZ\xf7m\xd7\xfa\xce{\xbfB\xff\x18\xffY&r\xbf\xfc\xd1\x1b\xcf\x03\xbel?u\xe7\x81\xca\xb2\xed\x80?\xe2pr\x13\x01\x0b\xb2\xbfB\xaa\xe4\xb6-)\xc5\xbf\xd5":\xf7\x96\x94\xe5\xbfWC\x10\xaf[\xed\xb0?\xc5p\xaf;\xbfh\x83\xbf\x87\xe15Y#\xfec\xbf\xf7\x06\xa0\x84w\xf8\xa4\xbf\x16\xc5\x17q\x01\xe2\xc4\xbf\xca\xc0\xe8\xf8\xc58\xa0\xbfI\xb12!\x82M\xa5\xbfIm\xd7\xf3\x1a\x1b\xaf\xbf\xd8\x05>:\xffV\x93?\x16\xb4\x93G6\xb9\xbc\xbfl\x05\x8c\xef\x96\x00\xdf??\x8egj\x16dm\xbf\x17\xa0\xfb\xceR\xbb\x0c?\x9e\xf29\t\x8b\x96\xbf\xbf\x8fr\x8aI\x11\'\x8e\xbf\x8e$\x9f\xb2\xc3Pk?1k\xb3\xfe\xc8\x17\x86\xbf\xe9\xff+\xe0E&\xa1\xbf\xa8\xcd\x8f\xf1\xb2\xc9\xc2\xbfp\xca\xbe`\r\xf0x\xbf:\xfep\xc36\x8d\x81?\xa2\x04S\x88\xdbg\xab\xbf\x8f\x88f^\xbea\xa2\xbf:]\x11s2\x1e\xad\xbf\\\x16\xba (\xa3\xc0?\x08\xf2\x9a<\xe6\xf1\x93\xbf\x9f\xb5\xa4((\r\xa2\xbf}\xc9\x9b-\xf1\xae\x86?\xe8~\x07\xd9\xd3\xf5\xa1\xbf\xc0\x97\xeb6?\x0b\x98\xbf.E7\x08\xa1\xe8|\xbf+\xc7\xd3;,\xe6\xaf?@\x87fYhq\x94\xbfK\x96kzQ!\x82\xbf\x0f\x86Sg\xea\x04\x9f\xbfJP/\xdc?\x8d\x83\xbfX\xb1\xa7\x12y\xcc\x92\xbf-\xf0W\x00\xbd\xba\xd2\xbf\xe7k\x7f5\xb1*\x8d\xbf,\xf7\xd0k}\xa2\x93\xbf\x9a\xd0<\r\xa69\xa4\xbfB\xa6\xaa\xbd\xea\x8cI\xbfkE\xed\x83\x9b\x8d\xdb\xbf)X\xfa\xfc\xe0\xd3\x86\xbf\x1f\x07\xfc"ms}?>\xc1\xe0H\xf7\xae\xa8\xbfR2\x96\xafKk\xb8\xbf\xb4A]\xe3\xb9-\x97\xbfbx\xd1\xb0\x99\xffw?`\xc8\xc5\x92\xfd\'\xa2\xbf\n\xdd\x03\xea8\x93\xae\xbf\xaf\x9dx\t\xfeB\x99\xbf\x07\xcef\r\x9acz\xbf$B\x0e\xb1\xa9\xb3\x83\xbf\\\xbeW8\x1b\xe8i\xbf\x94\x82\xbd\xcc\x00\x89\x9a\xbf\xb4\xb8\xdb\xbf\xa7>\x8a\xbfZ\x98\xc5sf\xd6\x85\xbf\t\x045\xd1D\x88\xaf\xbf\x80~\xc7\xe9\x83\xe1\x83\xbfP\xdb\xa4\xf3\x18\x1fN?\xe2\xb8s\xc4\xf6\x80L\xbfQ\'\x98\xdf\xba\x8b\x92?\xb9;Mk\x1eY\xbb\xbfE\x08\xe1d\x86q\x85?g\x99 \xb3\xeb\x84d\xbf!\x1b\xcd\x1c\x9a\nu\xbf\xb6\xbe\xe9\xf6\xb0\xec\x81?\xf8\x12\xacq\xb2\x8f\x8a?$,\xa5f\xd1\x99\xa5\xbf\xd4W\xd8_\x07\xc9\xb3\xbf\xf8\xbfb\x17\x14\x96Q\xbf{P>*\x8a\xef\xf6?\xf9G\xcdSi\xac\x98\xbf\x1d\xca\xfdX3\xf44\xbf\xd1\xf5`\xffJ\xfei\xbfN\xd9p\xec\x18\'\x81?1#.s\xfeM\xc4\xbf\xf9\xc6\xc53\xcbCu?\x02$9|-\xed\xd7?$B\xca<\xb7x\xa8\xbf\xffC\xc2\x90\x8ew\xba\xbf~q\x14P\xd1\x1e\xbe\xbf\xc7\x9c1\xe9>\xf2\x90\xbf\x15\\\x1f\xa0\xab\xc5\x82\xbf\x90/\x9d\x1fk\xc8Q\xbfw\xcb\xfa\xf0(\x12\x80?\xddB\xbf\xa1\xca\x88\xa2\xbfJ\x88\xf5\xa9\xc5\xfb\xa9\xbf\xc3\xb2\xcd\x8e4\xab\x9d\xbf^;y\xe7\xdd\xd9\xab\xbf\t\x13\x95\xd1+\x11\xa6?\x8d\xe2\xa8%\xc3\xa4\x8f\xbf"\x85\x1a\x84]\x9bd\xbfl\xbe\xf2\x06\xe0\xf3\x9b?\xce\xf8\xdc!^\x1a\xa2\xbfS+Tr\x97b\xcf?\x9f.\xc7\x0e\x9f\xf2\x8c\xbf\x93q\xe60\xc6f\x9d?{3\xa6\xec\x831\x9d\xbf,\x814or;\xd2?\xca.#\xc9H\xb7{\xbfy\x84E\xe4\xf3\xdd\xb0\xbf\xf0:H1\x94G\xa4\xbfi6\xcb\xcb\x80\xf9\xb6\xbf.\r-\xfd\xfc)\xd0\xbf1\x94\xe8\xa5B\xa6\xd8?\x99b\xf0%\xe8\xe9"?\xb8X\xddj\n\xd2\xa3\xbf\xc8\x1e\x84\x81\x9e-\xc3\xbf\x1d\xd7sM0@\xb5?\x9d\x98\x1c\x1f\xd0J\xc7\xbfp\x1c\xcf\x15S\x13\xd1?\xaa\x0e\xae\x04+\xc9\x8e\xbf\xa5IR$\x8a\x83\x90?4\xf7\xcex\xe0\xb6\xa0?Q}a\x1c1\xe7\xb8?^J\x1d\xf7\xf5m\xa0?\n90k\xafS\x98\xbf\x0bS\xf9\xc6\x8e\xdf\x8a\xbf4b\xc4\xf7\xa1IP\xbf_d=f\xc3)\x96\xbf\xf0n4\x8fu\xa1\xb7\xbf\'\x8f7\xda\xf8\xcf\x85\xbf\xb2b>\x85\xdbw\xea?\xb0\x94>0\xa6\x7f\xb0\xbf\x95u\x18\xbb\tJ\xc4\xbf6R\x0b"\xa6\xacj\xbf\xef\xc9\xe2*\x10\x82{\xbf\xa3\x13\xfcOB\xb8\xb9\xbf\xd4"{\xb1+\xbd\xbc\xbf#\x87Y\xc9\xb2\xa6.\xbf#{q\xe2\xfe{:\xbf\xb0a/\xbc\x12\x13\x92\xbf3\x1c\x8c\xf2gb\xb7\xbf+7L\x93\x8a\xa4\xb0\xbf]\xdf\x98\x18\xe3@\xbe\xbfX\xe23\xc2_\xa5\x99\xbf\x10\xdb\xfa\'\xe0\xae\xa6\xbfs[\xd9\x15\xadap\xbf\xf3G\xa2Q\x86\tQ?\xee\x08-\xe1\xb6e\xcb\xbf\x0b4\xfd\xa4,\x98\x05@*>Do\xb7E\x9c\xbf&\xff\xca\x07\xaa\xc2\x95?\x9d\x1a6Y\xf3\xf0\x90?J\x19\x90\xb3\xabPn?+\x83\xab\xe45?x\xbf\x13\x12\xa4\x16\xb1\xad\x8e?\xfe\xe0p]\xfd\x14\xcc\xbf<$\x128B\xb1\xc7?\xe2m\xe8\xd3\t\x98\x87?g\xf7N\x94\xad3z\xbf\xc6Q\xfb_\xfbo}\xbf\x84\x1aVc\x94\xd4\x85\xbf\xc7\xac\xee\xd9\x17S\x97\xbfz\xa3\xcd\x00O\x12b\xbf\xfc\'\xeef\xfa\xd5\x82\xbf7X\xbb\xdagY\xa8\xbf\xcc#\xda\x91\xf8\x14\xe7?\xffFm\xc2\x1b\x1d\x89?\x90\x85\xec\x0f1Fc\xbf\x9a\'\xda\xfd\x854x?\xb6~:\xa4\xcd\t\xd1\xbf\x8eL=]\xca\r\xad\xbf\xcaF\x07\x90\xec\x8a}?\x04\x1e\x94V\x9d\xfc\xb5\xbf\xa0\xdd\xbe\xb9\x1d\xc6\x90?2\x8d;\xc8\xfe{t?\x19a\xbdQ\xddg\x97?j\x86:\x8ca^\x8c\xbf\xfb\'\xd5\xa5\xf3D}\xbf~3\xa1\x91\xc8\x8e\x90??\xff\x11C\x1bs\xa0\xbf\xce\x94\xa9\xa8\xebG\xb6?\xcaB\x1dA\x96N\xba\xbf\x9d\\\xa9\xe2b\x8b\xb0\xbf\x0fB\xb8\xee\xee\xeda?\x96\xd4#\x9eF\xa9\x84\xbfHM\xa5\x90\xc1\x16\x97?\x8d\x98[JO\x02t\xbf2H:\xe7\xd4\xee\xb7\xbf\x04s\r+j\x0e\xb6?pV\x94a\x8d?y?^\x97{K\xc7\x94d?\xebxaO\x1cK\x9b\xbf\xba\x8f\xbdE\x02\x18\xc2?y\x91\xc9\xc8=\x1d\x9b\xbfwL]s\x18B\xba\xbfoG\xcf\x0f\x00\xab\xb6\xbf\x1f\x90\xfd\xcd\x11\x13\x99\xbf\xe0\x05\x17\x852\xdb\xc2\xbf\x938\xb3q}N\xac\xbft\x9d\x87\xe8pu\x94\xbf3 \xae\x14\x95\xeb\xae\xbfrx\xa7I\xb1\xa8\x8b\xbf\x95\xf0\xd3e\xd9\'{?\xfa=?\x9e\xa7u\xb6\xbf\x8c\xa9O\xb2s\x1c\xc1\xbf]\xd0=\xa8\xdf\xdd\xe1\xbfAF\xe3\xcf\x04Y\x91\xbfE\xe2\x08L\xcd\xce\x84\xbf\xf0\xe0\x9e\x8d\xe2rE?\xd3\x81\xc7g\xa5\x88\xa1\xbfDv\xfe\\~T\x99\xbf'
p192
tp193
basg71
I00
sg72
I00
sg73
g0
(g74
g5
Ntp194
Rp195
(dp196
g78
(I00
I00
I00
tp197
sg80
S'float64'
p198
sg82
g66
sg83
I00
sg53
Nsbsg84
Nsbsg53
g162
sg85
Nsg73
g195
sbsS'orderings'
p199
(lp200
(lp201
I6
aI9
aI1
aI2
aI5
aI10
aI0
aI11
aI7
aI8
aI3
aI4
aasS'n_hidden'
p202
I100
sS'b_mu'
p203
g0
(g10
g5
Ntp204
Rp205
(dp206
g14
S'auto_14124'
p207
sg16
Nsg17
g0
(g18
g5
Ntp208
Rp209
(dp210
g22
(lp211
(lp212
(g25
I306
g26
S'nade_train( * args[1:] )'
p213
tp214
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p215
tp216
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p217
tp218
a(g37
I30
g38
S'self.add_parameter(TensorParameter("b_mu", (n_visible, n_components), theano=True), optimise=True, regularise=False)'
p219
tp220
a(g41
I29
g42
S'parameter.add_to_model(self)'
p221
tp222
a(g41
I167
g45
S'setattr(model, self.name, theano.shared(np.zeros(self.shape, dtype=self.theano_type), self.name))'
p223
tp224
aasbsg48
g0
(g49
g5
Ntp225
Rp226
(dp227
g53
g203
sg54
(lp228
g56
(g57
(I0
tp229
g59
tp230
Rp231
(I1
(I12
I2
tp232
g66
I00
S'W\xdb\xe4\xdeo\x11\x01\xc0H\x01\x0b\x10\xdd\n\xde?\x147\xa22\x10v\x0e\xc0\x9d>b\xda+\x9e\xdb\xbfd\xb6\x7f\xd9\xf6[\xd8\xbf\xfe\xc8\xb0\xae\x84\xf5\xb0\xbf\xe3\xf1\x85h\xa0\x99\x13\xc04\xc4=i*B\xb0\xbf\xe7o\xf8r\xbcD\xe3\xbfG\xbb\x1fqV\xed\x08\xc0\x93t\xd7N\xdcS\xc4\xbf8\xf3\x06\x88w_\xe2?rW\x99\x86\x87\xfb\xd8?\xa8\xb8\xb6wN,\xf9\xbf\xa74\xb3:\x7fP\x00\xc0\x08\xa7\xe0\xef\xa0\xcd\xe3?S\xa4\xf4%rN\x0b\xc0k\xc3\xfb\xb1!\xf4\xf0\xbf\x82\x98\xd1\xc5\xb3j\x02\xc0\xf6\xd6\rRF\x0f\xe0\xbf2M\xd9I~{\x13\xc0\x014\x07\x87\xf8\xb6\xc3?i\x0b\xed\xa7\xfa\xc1\x12\xc0\xd7*\x92r\xeb\xb4\xa8\xbf'
p233
tp234
basg71
I00
sg72
I00
sg73
g0
(g74
g5
Ntp235
Rp236
(dp237
g78
(I00
I00
tp238
sg80
S'float64'
p239
sg82
g66
sg83
I00
sg53
Nsbsg84
Nsbsg53
g203
sg85
Nsg73
g236
sbsS'parameters'
p240
(dp241
g203
g0
(cModel.Model
TensorParameter
p242
g5
Ntp243
Rp244
(dp245
S'theano'
p246
I01
sS'shape'
p247
(I12
I2
tp248
sS'model'
p249
g7
sg53
g203
sS'theano_type'
p250
S'float64'
p251
sbsg9
g0
(g242
g5
Ntp252
Rp253
(dp254
g246
I01
sg247
(I12
I2
tp255
sg249
g7
sg53
g9
sg250
g251
sbsS'nonlinearity'
p256
g0
(cModel.Model
NonLinearityParameter
p257
g5
Ntp258
Rp259
(dp260
g249
g7
sg53
g256
sS'value'
p261
S'RLU'
p262
sS'options'
p263
(dp264
g262
(lp265
cdill._dill
_create_function
p266
(cdill._dill
_create_code
p267
(I1
I1
I3
I83
S'|\x00\x00|\x00\x00d\x01\x00k\x04\x00\x14S'
p268
(NI0
tp269
(t(S'x'
p270
tp271
g41
S'<lambda>'
p272
I231
S''
p273
(t(ttp274
Rp275
(dp276
S'__builtins__'
p277
c__builtin__
__dict__
sS'__file__'
p278
S'/home/leondong/proj/ccnet/experiment/rnade_release/buml/Model/Model.pyc'
p279
sS'TensorParameter'
p280
g242
sS'CompositeModel'
p281
cModel.Model
CompositeModel
p282
sS'__package__'
p283
S'Model'
p284
sS'SizeParameter'
p285
cModel.Model
SizeParameter
p286
sS'floatX'
p287
g251
sS'T'
p288
cdill._dill
_import_module
p289
(S'theano.tensor'
p290
tp291
Rp292
sS'NonLinearityParameter'
p293
g257
sg246
g289
(S'theano'
p294
tp295
Rp296
sS'np'
p297
g289
(S'numpy'
p298
tp299
Rp300
sS'__name__'
p301
S'Model.Model'
p302
sS'Model'
p303
cModel.Model
Model
p304
sS'Parameter'
p305
cModel.Model
Parameter
p306
sS'__doc__'
p307
NsS'ScalarParameter'
p308
cModel.Model
ScalarParameter
p309
sg272
NN(dp310
tp311
Rp312
ag266
(g275
g276
g272
NN(dp313
tp314
Rp315
asS'sigmoid'
p316
(lp317
g0
(ctheano.tensor.elemwise
Elemwise
p318
g5
Ntp319
Rp320
(dp321
g53
g316
sS'scalar_op'
p322
g0
(ctheano.tensor.nnet.sigm
ScalarSigmoid
p323
g5
Ntp324
Rp325
(dp326
S'output_types_preference'
p327
ctheano.scalar.basic
upgrade_to_float
p328
sg53
S'scalar_sigmoid'
p329
sbsS'destroy_map'
p330
(dp331
sS'nfunc_spec'
p332
NsS'inplace_pattern'
p333
g0
(ctheano.misc.frozendict
frozendict
p334
g5
Ntp335
Rp336
(dp337
S'_hash'
p338
I0
sS'_dict'
p339
(dp340
sbsS'openmp'
p341
I00
sbag266
(g267
(I1
I1
I4
I83
S'd\x01\x00d\x01\x00t\x00\x00j\x01\x00|\x00\x00\x0b\x83\x01\x00\x17\x15S'
p342
(NF1.0
tp343
(g297
S'exp'
p344
tp345
(g270
tp346
g41
g272
I230
g273
(t(ttp347
Rp348
g276
g272
NN(dp349
tp350
Rp351
asS'softsign'
p352
(lp353
g266
(g267
(I1
I1
I4
I83
S'|\x00\x00d\x01\x00t\x00\x00j\x01\x00|\x00\x00\x83\x01\x00\x17\x15S'
p354
(NI1
tp355
(g288
S'abs_'
p356
tp357
(g270
tp358
g41
g272
I232
g273
(t(ttp359
Rp360
g276
g272
NN(dp361
tp362
Rp363
ag266
(g267
(I1
I1
I4
I83
S'|\x00\x00d\x01\x00t\x00\x00j\x01\x00|\x00\x00\x83\x01\x00\x17\x15S'
p364
(NI1
tp365
(g297
S'abs'
p366
tp367
(g270
tp368
g41
g272
I232
g273
(t(ttp369
Rp370
g276
g272
NN(dp371
tp372
Rp373
asS'exponential'
p374
(lp375
g0
(g318
g5
Ntp376
Rp377
(dp378
S'__module__'
p379
S'tensor'
p380
sg322
g0
(ctheano.scalar.basic
Exp
p381
g5
Ntp382
Rp383
(dp384
g327
g328
sg53
g344
sbsg53
S'Elemwise{exp,no_inplace}'
p385
sg330
(dp386
sg332
(g344
I1
I1
tp387
sg333
g0
(g334
g5
Ntp388
Rp389
(dp390
g338
I0
sg339
(dp391
sbsg341
I00
sg307
S"e^`a`\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p392
sbacnumpy.core
_ufunc_reconstruct
p393
(S'numpy.core.umath'
p394
S'exp'
p395
tp396
Rp397
asS'tanh'
p398
(lp399
g0
(g318
g5
Ntp400
Rp401
(dp402
g379
g380
sg322
g0
(ctheano.scalar.basic
Tanh
p403
g5
Ntp404
Rp405
(dp406
g327
g328
sg53
g398
sbsg53
S'Elemwise{tanh,no_inplace}'
p407
sg330
(dp408
sg332
(g398
I1
I1
tp409
sg333
g0
(g334
g5
Ntp410
Rp411
(dp412
g338
I0
sg339
(dp413
sbsg341
I00
sg307
S"hyperbolic tangent of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p414
sbag393
(g394
S'tanh'
p415
tp416
Rp417
assbsS'b_alpha'
p418
g0
(g242
g5
Ntp419
Rp420
(dp421
g246
I01
sg247
(I12
I2
tp422
sg249
g7
sg53
g418
sg250
g251
sbsg88
g0
(g242
g5
Ntp423
Rp424
(dp425
g246
I01
sg247
(I12
I100
I2
tp426
sg249
g7
sg53
g88
sg250
g251
sbsg87
g0
(g286
g5
Ntp427
Rp428
(dp429
g249
g7
sg53
g87
sbsS'Wflags'
p430
g0
(g242
g5
Ntp431
Rp432
(dp433
g246
I01
sg247
(I12
I100
tp434
sg249
g7
sg53
g430
sg250
g251
sbsS'Ws'
p435
g0
(g242
g5
Ntp436
Rp437
(dp438
g246
I01
sg247
(I2
I100
I100
tp439
sg249
g7
sg53
g435
sg250
g251
sbsS'n_components'
p440
g0
(g286
g5
Ntp441
Rp442
(dp443
g249
g7
sg53
g440
sbsS'W1'
p444
g0
(g242
g5
Ntp445
Rp446
(dp447
g246
I01
sg247
(I12
I100
tp448
sg249
g7
sg53
g444
sg250
g251
sbsS'bs'
p449
g0
(g242
g5
Ntp450
Rp451
(dp452
g246
I01
sg247
(I2
I100
tp453
sg249
g7
sg53
g449
sg250
g251
sbsS'n_visible'
p454
g0
(g286
g5
Ntp455
Rp456
(dp457
g249
g7
sg53
g454
sbsg162
g0
(g242
g5
Ntp458
Rp459
(dp460
g246
I01
sg247
(I12
I100
I2
tp461
sg249
g7
sg53
g162
sg250
g251
sbsS'V_mu'
p462
g0
(g242
g5
Ntp463
Rp464
(dp465
g246
I01
sg247
(I12
I100
I2
tp466
sg249
g7
sg53
g462
sg250
g251
sbsg202
g0
(g286
g5
Ntp467
Rp468
(dp469
g249
g7
sg53
g202
sbsg125
g0
(g242
g5
Ntp470
Rp471
(dp472
g246
I01
sg247
I100
sg249
g7
sg53
g125
sg250
g251
sbssg430
g0
(g10
g5
Ntp473
Rp474
(dp475
g14
S'auto_14118'
p476
sg16
Nsg17
g0
(g18
g5
Ntp477
Rp478
(dp479
g22
(lp480
(lp481
(g25
I306
g26
S'nade_train( * args[1:] )'
p482
tp483
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p484
tp485
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p486
tp487
a(g37
I23
g38
S'self.add_parameter(TensorParameter("Wflags", (n_visible, n_hidden), theano=True), optimise=True, regularise=True)'
p488
tp489
a(g41
I29
g42
S'parameter.add_to_model(self)'
p490
tp491
a(g41
I167
g45
S'setattr(model, self.name, theano.shared(np.zeros(self.shape, dtype=self.theano_type), self.name))'
p492
tp493
aasbsg48
g0
(g49
g5
Ntp494
Rp495
(dp496
g53
g430
sg54
(lp497
g56
(g57
(I0
tp498
g59
tp499
Rp500
(I1
(I12
I100
tp501
g66
I00
S'\x96}\x03\x01\x8b\xda\xc3\xbf\xcf\xad}c\xb7Q\xc4\xbf\x05iD"N\xf1\xbc\xbf\x87\xc4/\xfbT\x9c\x9f\xbf\x7fnI\xc9\x0e\xe9\xcc\xbfR\xa2\x11\rQ\xcd\xa5\xbf\xf5\xbfV\x9a\x81*\x83?\xc4\xee\xf0:\xf0\xc8\xb1\xbf\xfc\xc1\x9d\x0ebc\xbf\xbft\xd1\x94e\x04\r\xe0\xbf\xb9\xc9\xc2\xf1\xfb\x90\xc4\xbf\x01\x9bXc\xa3+w\xbf\x07V\xbd\r_\x1e\xb1\xbf?K\xe9I\x9a\xe1\x81\xbf\xa2\x9e@\x9a\xedK\xe1\xbf\xbd\x7f\xbc!\xd1`\x98?\x9c\xd2\xa3\xf6\xa5)\xb2\xbfY\\_3\xb8l\xa8\xbf\xb06nL\x86\x8e\xdf\xbf\xb6J\xb8\xa8\x8al\x96\xbf\x18o%\x0b\xda:\x83?\xc0]\xcd,;\x1b\xf4\xbf\xe2m\xa2!\xff\xda\xa2\xbf\x86\x80\xcd\x15?\xc7\xcc\xbf\x8e\x037\xf5\xe0\x1a\xc0\xbf\x92\xd3\xf1\xe9\x9c\xcb\xbf\xbf\xbb\xa6\xa9\x16U\x1a\xc4\xbfU\xe0\xa8\x93t\x10\x83?\x80\xb2\x9e\xd1\xf4\x8c\xae\xbf\r\xc6\xf6\x98"\x81\xb7?\x1d\x91\x86]Tr\xe0\xbf\x7f\x97D\x03\x1c\x02\xe8\xbf\xdfR\xe6\xaeJ\x89\xae\xbf\xe9\xe8\xe7\xae\xbc\xd6\x8a\xbfy\xa5%s\xaf.\xd0\xbf\x96\x92\x14mI\x0bm\xbf\t\x93\x19\x19\x7f\x99\xa2\xbf\xc1#\x88\x113E\x89\xbf!\xb2\x1aR\x8f\xad\xa7\xbf\xb2\x13\xc7(\x90T\xd2\xbfh\x92\x14R|\x08\xd3\xbfV\x97*[4s\xd4\xbf\x84\xa0\x98\x95\x8ff\xbc\xbf\x11q\xc7\xcdJ\x83\xb6\xbf\xbd\xc1\xa0\xb4\xccQ\x8f\xbfE\x89\xba\xa1\xe6t\xc6\xbf.\'\xae\x81\xbe\xb3\xd9\xbf\xb0B\xaae\x073\xd3\xbf\x9c"\xe5\xec5\xfd\xca\xbf}\xe2\x8f\xf1\xdb\xf4\xda\xbf\xcalg\x11:\xc3y?\xf5\xa9\xa9l07\xbd\xbf\xe2\xf3\x7f|\xda;\xa1\xbf\xbbw\xeeG\x95\x1c\xd6\xbf5VlT#\xbbn\xbf\x0e\x14\x17\x9e\x07t\xc4\xbf\x1e\x86\x18\xca\n{\xa3\xbf\xda!~\x94@\x0f\xa5\xbfP\xf0\x80\xden\xf5\xbb\xbf\xd6\xdfz\xa6\xd8\xec\xc4\xbf\xff\x9cR\x7f\xdd:\xc2\xbf\x81Ej\x86\\\xf9\x95?W\x93\x9e\xa18\xd0\xb0\xbf\xf2\xea\xf7\x8fH\xf0w\xbf\xd1v\xdf&a%\x8a?Mv\xb3\nG~\xa5?;Du\x1e\x19\xe1\xb0\xbfM\x9d\xff\xac\x11\xbf\xb9\xbf\tI\x92\xfcS\xb3\x95?Q\x91\xb0&\xdb,\x80\xbf\xdd\xea\x04\xcd\xea\xec\xc0\xbf\x06\x82\xde\x83\x00\x08\xa3\xbf\x84m\x9e>5\x17\xe4\xbfg\x83\x9d\xaa\xd5@\x8e\xbfg\xd3<\x19\x8ce\xab?\x99O\x08*\x01\x17\xea\xbfD\xce\xbf#X\xc7\xbe\xbf\xf2\x8b[\x02U\xedx\xbf\x15%;1u\x1b}\xbfZ\xf7\xc0\x91\x88{x\xbfk<r3[\xb6\xb6\xbfLBS~\xd9\xae\x81?\xc97\x8f\xa1e\x16\xcc\xbf\x82\xdc\xda\xb2\xa6\xd9\xc1\xbf\x12c\xee&\xdf\x97\xb4\xbf^q[\xcay\rP\xbf\xa9\xb0\x17p\xe6e\xd7\xbf\x89\xcc\x92\xe1\xf7c\xda\xbf\x15\x17\xc3\x97\xae\xae\xb0\xbf\xe7\xca\x98\xa3\xc6\x98\xa9\xbf\xb1E\xd6\xd3\xf5\x04\xc2\xbf\xc0\xc8\xdf\xafK1\xd1\xbf\xafo\xf2\xc6!>\x87?I\\\xf9\x1c\x94\xba\xda\xbfwJ\xb3\x12\x15\xfc\xc0\xbfO\xf4h\xe2\x9b\xc6\xb8?;\x12\'\xd2\x07A\xc3\xbfA\x85\x13\xd2\xf0\x99k\xbf\x98\x0e[\xc6\xfe|\x90\xbf\x13\xe2y\xc0\x8c\xe2\x9a\xbf\x83h#3\xf54\xeb\xbf\xeb\x134\xdf\xf1L\xc4\xbfb\xb0\x99\x1b\xd3\x9f\xcf\xbf\xce\x06\xed\xee\x8fA\xb5?\x1bv\x14u\xa8\xb1\xda\xbf\t\xaf\x8b\xf0\xe9=\xa1\xbf\x7f9\xf0\xed&\xc3\xbd?\xf5\x8a\x95\x90\x16\xa1\xb1\xbff\xbe\xd3Kx|\xeb\xbfg2\xf3h=\x88\xdb\xbfk\xe5\xdf\xab\xe8D\xae\xbf\xfdvi\x9akR\xab\xbfO\xc4]\xb5%v\xc2\xbf\xb8\x99\xd1\xf1\x8f\x92\xb4?\xd0\x93\x1fRq6\xda\xbfsiK#\xe19\xe5\xbf9\x8f\xe4\x05\x90\'\xd6\xbf\x01\xe0$\xece\xf4\xd0\xbf\xcf\x00E\x93CE\xe4\xbf\xa4\xd4\x16\xec\xf8\xf8\xad\xbf\xb1v\x855K(\x85?5\xab\xf30\xafr\xf3\xbf\x89\xc9}h\xd6\x00\xd3\xbf\x14\xefY\x01\xbe\xc8\xf4\xbfIG/d\xd7F\xdd\xbf\xaan\x82\xdc6\x8d\xdc\xbfp4-\xefA\xdd\x9a?~\xb5\xf5\xa84\x89\xa8\xbf\x14\x82e\xf1E\xae\xb2\xbf\x0c_\xd8\xc5q\x8e\xd0?\x07S\x8c\xd5\xcb\x90\xe5\xbf\x95z\xcd\xb6\x97\x12\xea\xbf\xc7\x8b\xe8\xf7FE\xbe\xbf\xb8\x81\xf6\xda\x8c\xce\xba\xbf\xe4\x94\x83}\r\x0b\xca\xbf\x7fg\n\x85\x90q\xd2\xbf\x11\x0c\xa0#\xa3\xb4\xa7\xbf\xa9\xe31\x1cX%\xa0\xbf\xc1\x1fGpH:\xaa\xbf\x82<\x87\x8b\xe6`\xde\xbf\'/\xd5y\xe0\xd0\xd6\xbf\xf9\xdd@\xbeC#\xe6\xbf\xb0tA\xc39\xab\xbd\xbf\xf9v\xb9\xa0\x99\xf5\xb6\xbf&\x03\xe2\x1a\xe1\xcf\xa6\xbf%9\x9b\xe1\xf6Z\xda\xbf5\x7f\xdb\xf2\x16\x95\xe2\xbf\xc7\x8aZMG\xc6\xd5\xbf\xbfl\xe8\xc9i\xb2\x93\xbf\xd8\xa9\x004\x14\x7f\xe9\xbf\x8482\x84\xfc\xf7\xa4\xbf\xb2\x86\xe1\'=\xe2\xac\xbf3\x08)xMXU\xbf\xfa\xdd\xacP\xdb!\xf7\xbf{\xbc\xb2\x97\x88\xd0\xc5\xbf\xfa\xb0\xb8\'\xaf\xc3\xc1?\xf0\xef\xa4\x85Q\xb8\xbf?\xe7=\xdc^\xdd\xc8\xa5\xbf.\xb1\x17\xcc\xc3\xe1\xc3\xbf\xee\xb9\xf6b\x83\x17\xe2\xbf3R\x88o\xc3oz?a/\xc6\xf7\x12)\xd5\xbf\x80K\xdf\xac\x17\xddv\xbfy\xfb\x0c\xc0\x17\xe7\xa9\xbft\xac7\xe0VP\x84\xbf9\x91\x8a\x06\x84\xcd\xaf?\x83\xf1\xea\xec\xd1P\xb6\xbf\xa2f<\r\xda|\xd1\xbfLu\t\xc0\x01\xd6\xdb\xbf\xcf9\xe5N\xc4\x98h\xbf1\xeftS\xe4b\xc6\xbf\xd68\xf5}\xb5\xf8\xa2\xbf\xdf\xda\xca\xe2\x9d\xb4\xe2\xbf/\x89W\xe8D\xf0\xd6\xbfM\x95\xab\xbb\xa1&\xd4\xbfM\xbfrJ\xa5\xb6\xe8\xbf+Mu\xc1}\xe1\xa4?\x9cT\x85\xa9\xcfC{\xbf=QG\x7fg\xc3\xbb?\xc6\xa2\xdbg\xed\xa2\xb2\xbf\x07\x07$xd\xa3\xd3\xbf\x17\x14o\xb7GY\xd9\xbfp\'f\rt\xc5\xc9\xbfx\xb0[<\xcb!\xac\xbfMT\x7f?\xd2\xe1\xb4\xbfeu\x06\xd9h\xbc\xc3\xbf3\xa3S\'\x1b\xc4\xf1\xbfVkK\xd6\xe2\x95\xf6\xbf\xf9Oc$<[\xd9\xbf\x1a\xac\xe8\xb8\xfc\xee\xab\xbfj\x91<\xa8\xae7\xbb\xbfQ\xfb\xffuj\x08\xc1\xbfMbW0\xb2S\xa2\xbf[\x7f\xeb;\x97\xfd\xe2\xbfu\xde\xaa\x00B\r\xc1\xbf`I\xb8\xe4\' \xbb\xbfF\x9d\xb5\x10\xfc\t\xbb\xbfGh\x9a\xe9}0\xbd\xbf\xa96*\x8d4\xf8\xa9\xbf\x8f\xa1C\nN\x16\xb2\xbf\xb5\x02\xc4}@\x96\xad?5\xe7\xb8:\xeaI\xb8\xbf*\x05\xf3\x16\xf6\xa3\xbd\xbf\x1f\xbc\xd9i\xcc&\xb8\xbf\xc3\xc0\n\xcb_\xf4\xde\xbf\xfc\xc8*+\xbb\x84\xae\xbf\x97\r\x99\x81\xc8\xe5\x82\xbf\x80\xac\xeb@b\x8f\xae\xbf\xf0\xbc\xf9\x01\xea\xca\xdb\xbf3\x1a\x9a\xe1\xe9\x1b\xca\xbf\x98j\x02\xf2\x9fs\xec\xbf]-\x12$1w\x9a\xbfg\xb8\xf2U\x8fX\xa7\xbf6\xbd\xad\x85\xa7y\x85\xbf\x97\xe2Y\x0b\x8f<\xec\xbf\xee\x1d\xdc\xe6u\xea\xa9\xbf\xddHW@E\xb2\xb2?\x08\xdf\xf9j\x1f\xda\xb9\xbf)\x9e\xe3\x07\xf3\xf3\xf3\xbf&=\xdc\xb9(\xb6\xb0\xbf\\\xe6[\x1a0{\xa1\xbf&UQs>\x14\xe5\xbf\xc0\x0c"\x89\xda\xf5\x97?\xeb$g,\x885\xb2\xbf{\xba\r\'#\xda\xd8\xbfL\xa8D\x9a\x17o\xd2\xbf\xd0\xf5\x1c\x1c\x9f\x81\xa7\xbf\xd6\xc6\x04kPz\xaa\xbf\xf4u\x84\xbf\xfb7\xc2\xbfBNYh\xdb8\xb8\xbf\xa6\xc27%\x8f\xd6\xf4\xbfg\xbd\\\xfc\xb1\r\xe4\xbf`\x1c\x10\x8a\xb1\x1d\x90\xbf.|\x9ea\x13x\x91\xbfG\x82:\xff^\x97\xae?\xf7\xe9R;\xb3\xc9\xbf\xbf\xb4\xb3\xb9=*n\x9e\xbf\xf95\xf4\x87\xec6\x87?{\x1eHY9\xa4\xb7\xbf\xc0\x8a\x98R\xc3s\xd0\xbf\xd1\x05\'\xa0\xfa\x13\xc5\xbf\xa3\xc04\xcd\xd7\x9c\xe5\xbf\x11k\xbe\xe12C\x83?\xd8Z\\\x11\xc8;\xa1\xbf\x93\x9eR\t\r_\x9e?\x8a\xdf.\x8d_Z\xbb\xbf\n%F\xce-\x02\xd4\xbf\x96\xc5\x96\xcdK\xa1\xb2?\xe8\x911|]w\xab?\x1a\xe4\xc3\x00Yp\xd6\xbfB\xfa\xb6\x10\x1ct\x87?\x00\xfa\x1b+\x87g\x8c\xbf\x96\xf0u\x11K\xc2`\xbf\x8cj\xd1\xebJ\xe7\xe4\xbf\x173R^\x18\xd6\x94?c\x97\xd0\xe1\xda)b?-Y\xcc\x1e\xa0\xcb\x92\xbf\xd9\xb2c\xc7g\xdf\x9e\xbf\xd4\xfa1B\x05c\xa6\xbf\xfe$\xb8\x87\xad\x85\xdd\xbfa\x92\x1e\'\xc6c\x99\xbf\xccA\x08sJV\x9b\xbf\xc2\xc2\x9d&\x83G\x99?\x18\xfeW\xe2\\w\x9a\xbf<\x03\x8cn\x80M\x84?\xa5IB\xea\xe2F\xcb\xbf\xd2:\xa5\t\xbb\xcd\xe0\xbf\x1a\xe2\xad\xb0\xbaA\xc6\xbfG\xcb\x92\x83\xb2\xbdy?Wx\xdcgn\xf3L?\x81\xe4\xc5<C9\xc8\xbf7+O\xda\xc1\xed\xa0\xbf[\x81\xc8U\x8d:\xe0\xbf\xddx~\x91\x8d\x9d\x91\xbf\xf1\x08e\x0e\xb9P\xbe\xbf\x93T\xcb\xf9c\xbe\xe6\xbfXC\xa5\xc9\xde\xdf\xc5\xbf\xc5Z\r`\xa3\xc0\xc3\xbf\xfb\xc5\xa1\r\x8f\xf3\x8d\xbf\x008\xf73fs\xc0\xbfQ\x8e\x03\x01\x94\xea\x8b\xbf\xa3\xbaQo\xd5\x15\xbc\xbf\xb6`\xf8CR\xe9\xc9\xbf~\xbf\xbd\xce\xc2<\xbb\xbf{\xfexz[N\xab\xbf\x02\x8d\xa9\xcd\xbc,b\xbf_\xb4\x1e\x857\xcd\xd2\xbfp\xd2e\xf2\x89M\xea\xbf\xef"<\xaa\xfa\xd6y\xbfY`zM\xc5b\xad\xbf/\xb87m\xb2\x80\xca\xbf\xb2\x10\'\x14\xca\x0b\xa8?\xf5u\x920g\xc9\xba\xbf=}\x8d\x1c\x93\x96\xbf\xbf\xd4O\xde\xd4\x06W\x9a?\xe4V\xd3\x14\x84\xf4\xc3\xbf\xc5_\xbf\x8b\x81\x83\xc8\xbf\xe3\xf7\xe7\xef\x81$\x96?|\xd2\xd6\x93\x97\x11\x7f?1\xb6\x1b\x7f\xab:\xa2\xbfF\xda\x0b\xa2\x99C\xec\xbfA\x8a,\xde\xb6\xef\xbd\xbf\x98\'\x88k\xf0\xdb\xc7\xbflki,o\x1c\x9b\xbf\xdd\xbdDO1\xa2\xe0\xbf\x9e\xab\x02\xe9\x7fX\xad\xbf\x7f\xea\r/\x9c9\x81\xbf\x88\xc4}\x0e\xd6\x8d\xb4\xbf}[\xce\t\x0b\xb1\xe4\xbfFJ\x85\xb2\xe2\x1c\xc6\xbf"\x81\xb6dK\xa7\xd8\xbf\n<W>\xcd\x93\xbe\xbf\x15\xd8\xb5v\xa2\xb1\xaa\xbf\xfa\x84\xce\xaf\xced\xfb\xbf\xe3\xab\x98\xa4\x18\x02\xe1\xbf3Eq4\xa9\xef\xef\xbf\x96\x91\x045\t\xe0\xc6\xbf\x8a[*\xc6W\xc1\x92?)e\xd6\xf1s.\xf5\xbfar?\xd4\xcc~\xaf\xbfd\x1cG\x06\xdc\xee\xae?\xd7i\xad\x12x\x15\xe2\xbfp\xfb\x11*:\x8c\xc3?\xbe\x0e\xcaU\xffL\xfa\xbf\xa7y\x94\x027Q\xdf\xbf\x15)\xaa"\r4\xdc\xbf\xca\x1a\x8f(\x13 \xc5\xbf\x9c\x9a\xc7}\xf3\xa1\x8d\xbfy\xaf\xaeu\xe1\xed\xb1?\xfc\xe3\xe8\x9c\xc9\xf4\x8d?B=G\x11o\xab\xf1\xbf\x07\xd7;\xb8\r\xa4\xe7\xbf\x14\x07\xddiQs\xc5\xbf&oI!p\xf5\xc0?Odw\x91{+\xc6\xbf\xc11\xf0\x89\x9e\xe8\xe1\xbf\xed\xce\x06@\xd9)\x89\xbf\xa8\xfb/r,{\xa1\xbf\xc5\x90%\xa4\t*\xc2\xbf\xf26\xae\xe6\xd8\xe1\xea\xbf\xc1\xf0\x08C\xb5\xb5\xb2\xbf\xf0\xfb\x89rb\xb7\xe6\xbf\xccS%\xd1,\x84\xb0\xbf`\xfc\x80=E\xff\xba\xbf\xa62\x1c;2\xa0\xa1?\xc4J\x1d\x1az\xa0\xd4\xbf\x03\x07~\x02?\x83\xc7\xbf\xdbGh\x80C\xee\xcd\xbf\x87^0\xae\x1e\xa6\xe4\xbf\xad\x9fS\t\x9e\xab\xd8\xbf\xd4\xaf\x95`y+Q?\xecB\x0f\xa5\x1a&\xbc\xbf\t\xbc\xb7\xee\xd3I\xc2?sBv\xa8\xa0l\xeb\xbf\x87\xf6\x11\xaa\x8c|\xcd?zPo]X\xd4\xcd\xbf\xd8\xfb\xc0h\xb8\x16\xa3\xbf\xb5\xb4(\xe1t\xc1\xb5\xbf\x1c\x02\xa7Z\xfb\x14\xba\xbf\xbe#\x96\xfb\xdd\xfb\xde\xbf\xa2\xc6\xa9\xb9\xc70\xd1\xbf\x92\xbb\xff-N\x9d\xc5\xbf\xa1\x9f\x91\xb9\x9a\x00\xd3\xbf\x16\x9d\xc93\xb7\x8b\xcb?\xa5\xb2\xd4LQg\xc9?\x12V\xbb\r\xfaE\xb0?E\xf1\xe1\x06\xcb\xb5\xa1\xbf\xda"\x82\xb5L\xfc\xd9\xbf~\x02*\xf0\x06\x81\xdc\xbf\xe8 \xc2\x80B\xa7\xba?\x89\xd4\xe3\x99\xdb\xca\xcb\xbfg\xe0IwS\xa5\xae\xbf~\xcc\x04\xf7\x1f\xde\xe2\xbf\xfe\xfe\x86\x05\x17\x81\xd0\xbf\xe9\xcbZS\xe3$\xd0\xbf\xe4\xa1\xb6\xdf\x99z\xe7\xbf=\xf5.\xady\xca\xcb\xbf\xf3\xce\xe5\x89\x8dm\xb6\xbfbR\xea4U\xec\xf2\xbf\x15t\xaf\x9a\x06\xa2\xc4\xbf\xc6-\xe3\xb7s\x9a\xd3\xbf]<\x8b\x92u4\xde\xbf\x90\x0c\x12\x0b\xa4R\xa6\xbf\xb1\xecQ\xe1j_\xad\xbf\x97Xih\xae\xf6\xb7\xbf\x1c\xe9\xbc\xff(}\xf4\xbf\'\'\x1cin\xbe\xd4\xbfqw#\xfb\xcd\x9d\xd6\xbf\x02\xffs\xcc{\xfb\xd0\xbf0\x14bNf\xb3\xc5\xbf6~\x00T\x91&\xbd\xbf\x0e\xc7\x00J\xe7S\xe3\xbfYNl\x18|\xcc\xb6?l\xb2\xaa\xac\x0c\x1f\xa0\xbf\x02\x88\x13"ZP\xa4\xbf\xe4\xe8|\xd6hw\xb7\xbfw\x8b\xb3\x04\x03\x94\xca\xbf,f\x08-\xc11\xa1?\xd5\xc5\x9e\x11^\xc7\xe0\xbf\xbc7g<\n\x7f\x89?"O\xc8\xa4\xf0\xc5\xea\xbf\\\xf4\x8e7A$\xd2\xbfF\xda\xa2.\x8c\xba\xd1\xbf?wB0"\x9c\xc4\xbf-Nd\xca\xa2\x81\xd1\xbf\xeb\x98\xa7\xdbg\x04\xa6\xbf}\x0e\xdeZ\xe8\xf4\xfa\xbfW,F\x8a\xb7\x8a\xa3\xbf>\xb2\xbe\x13\xbb\xba\xe5\xbf\x9d\x07\xf1Skz\xe3\xbf\x86\xcb\x8e7\x92\x1d\xbe\xbf\x8cuC:\x94\xdb\xb9\xbfM\xb9`\xa1\xa8\xd2\xc3\xbfY\xd7\xd6Y\xf62\xf9\xbf\xbdn\xb1U2\xfc\xd5\xbf\xac\xa5A}\x8e\xde\xee\xbf!\x0fQ\xbf\xd4\t\xdb\xbfiD,}\x02J\xd3\xbfy9\xb6\x10\x1f\xaa\xe1\xbf\xfcx\xff\x1b\xd8g\xae\xbf$\xcc|\xb0\'\x91\x87?-\x13\xdc\x9a\xb5\x9a\xf5\xbf\x89W\xd6\x85s\xd0\xc8\xbf\x83J@\x11\x85\x1e\xf9\xbf\xd7\x1d?j\xf8\x08\xeb\xbf\x91\x17\x0f=\xfc\xa7\xe1\xbf\x8c\xfb\x92\xe3{\x11\xbb\xbf\x84\xc3\xde\x99=z\xc2\xbf\xb9\xf2\xcdY\x80\xc4\xaf\xbf\xefsm\xc3\xba\xf6u\xbfSRf\x9a9:\xe8\xbf[l^\x07o\x0f\xf1\xbf\x93b\xbc\xcd\x1fF\xbf\xbf}\xbc\xd0V\x01\xbb\xa0?\xfe\x05\xc7\x1a|\x88\xb7\xbf\x1eWQ\xff`\'\xb4\xbfN\xef\xfa{8\x9a\x90\xbfoX\x92Xh\x1c\xb6?\xd8\xf3e\x01\xfaa\xcb\xbf\xf5\x81\xfb\x97\xa8\x99\xe4\xbf\xbcNAs\x18\xd1\xb3\xbf\xaa\x13\xf3\xa6>C\xe9\xbf\xa1\xe3FC&\xef\x9d\xbf\xe6iq\xd7\xa0\x05\xbd\xbf\x1b-\x86\xe93W\xb8\xbfn\x1c\x0f\x86\xb4\x9f\xdb\xbfc%\xaaS\xe8\xb0\xdb\xbfW\x0fc\x07c\x89\xd1\xbfq\x88\x1c\xa6U\x91\xe0\xbfET\x85\xf3\x02|\xe1\xbf$\xfee\xa4n\x89\xc1\xbf\xe5H\xbc\xf6u\xe3\xb3\xbf?\x01\xa0\xb8-J\xb1?\xe7\x9a:\xadkF\xf8\xbfxba/\xdf\x02\xe6\xbf\xa4\x1e\x9c\xcd\xbf\xc0\xb0\xbfK@\xa1\x8c\x0e\xd3\xc0?\xb24\x1dPL\xf2\x9c\xbf\xaas\x0e\x90\xb1\x0f\xc6\xbf$\x83\xdc\xed\x8a\x0f\xe4\xbf77\x82\x1f%~\xa3?\x8d\x18i\x97\xff&\xe0\xbfgs\x0f\x1e\x86^\xcc\xbf\xda\xae\xb6\xd5`H\xdd\xbfA\x03\x1b4\x02S\xed\xbf\xa6\xf3\x99\x19\xf0\xfe\xb4?\x04\xc7\xb4\xb2\xac3\xc4?[|A\x9eD\xa2\xe1\xbf6\xb8a\x9bN\xa5\xf1\xbf\x15~\r8\t\xa9\xf2?\x91\xc3\xa0\xb1\xdb\x84\xc0?AZ\xa6y\xb4\xd0\xa1\xbf(\xdf\xf5\xad\xdb3\xe3\xbf\x03\x04;\xc2\xf03\xec\xbf\xeb\x0b\x12\xba\xc0b\xae\xbf\xf1\x99\x84j\x1b\xcb\xef\xbfJahq\x88\xee\xb1\xbf4\x16\x8f\xf5\xe9\xe7\xb1\xbf\x84#jb\x81\xff\xed\xbf\x96\xfb"\xcd\x1a\xca\x9f\xbf\xcc1\xb7\xd8\xce\x92\xcf\xbf\x17>y\xb3\xe5\xa7\xd9\xbf\xf4\x0e\xf6\xc5=%\xb3\xbf\x1d\x8b4\x1a\xcd/\xb5\xbf\xccB\xab\xdb\xcet\xae\xbf:q\x1f\xec\xe7A\xf4\xbfq\x8ec\x8c\x18\xce\xfd\xbf\x13\x80sb\xee\xd3\xf0\xbfg\xd7\x87\xbd\x0e^\xe4\xbf\xca\xaa\x04\xc7\xed\x80\xc3\xbf\x9d\n\xf5\x04\xdc\xc7\xb2\xbfg\xba\xbdU\x0fr\xda\xbfc,\x1b\xed\xe2\xa8\xb1?\xc5\xc2g{W$\xe7\xbf\xa1\x8f\xfdF\x0cR\xad\xbf\xa1\xdd\xcf\x00\xc6\xc1\xc0\xbf2\xf5\xb9L\x86/\xbe\xbfG\xc9@\rZq\xd6\xbf\x91>\xa3\xb3\x12\xba\xf3\xbf\x13\x10\xdbF\xab6\x8a\xbf\xb1Q\ta\x92\x96\xfa\xbfx\x18\x13\xa7\xf0\x97\xdc\xbf\x17\xc7\xc7\xd4\xc1-\xc5\xbf\x8f\x1d\xb2\x88a\xf5\x82?\x01\xde\x88\x84\x84\xe4\xe2\xbf\xca1\xb3zA\xc7\xaa\xbf u=GR\xd7\xa8\xbf\x06i\xb0\xc20\xab\xae\xbf\xbeK\t\x88\x1cG\xd5?\xa1/\x91\xf0\xbd\xa2\xde\xbfcI\xccO:\xdf\xcb\xbf5:\xc6G\x14|\x80\xbf\x9b\t\xbdS\xdd\xde\xe0\xbf\xf2H\xb0\xcc\xb1.\x80?\x9bj\np#n\xe5\xbfy\xf2\xfd\x1aK>\x81?\x08V\x1a7\xdd+\xb6?V\xfa6\\\x82\xb5\xba\xbfi\xc4\xab\xfa\xef\xfb\xd8\xbf\xa3\x1b0!\x92g\xa4\xbf\xe3\xce0o\x97\xe6\xcf\xbf\x067\xac\xc5\xc2\xf3\xf1\xbf\xfa5Lc\xd1\x80\x8c\xbf\xb4:\xe0,\x1d8\xcb\xbfR\x0c@\xef\xe3\r\xdd\xbfA\x19+^W\xb4\xd6\xbfj\xf4\xa5rj4\xc6\xbf\xc4\xe7\xe9\x05\xd6\xd7\xb5\xbf\x8c\xc8E\xda\xcb>\xbe\xbfXd\x8aC\xb6X\xa5?\xdc\xaf\x05\x87q\xc7\xcc\xbf\x9c\xe8C\x83\x0c\x91\xe8\xbfU\x1a\xe6\xaat\x0b\x9f\xbfzV4\x98\x02a\xac\xbf\x12\x89\x1d\xed\xcb\x86\xdc\xbf\xda\x81\xffHlX\xc4\xbf\x1d\xd0y\xbfxc\x92\xbf`\xb5\xa1\r\xcen\x93\xbf\xdd@\x84\xd1r\xbf\xb9\xbfI]\xd3\x89\xce\x94\xde\xbf~\x05\xfc\x07Q\x95\xe1\xbf\xa0\xc9o\xf3\xe33\xdb\xbf\xfb6<\rd\xc7\xc5\xbf\xf7\x9c\x04\x88]J\xc3\xbf\xbd\x05[\xc1h\x99\xb2\xbf\x82yW>\xbf\x07\xcf\xbf \x12\xc6\xc4\\\xea\xe9\xbf0\xc0\xf9n\x8d \xf0\xbf\xbdhl\x85\xd8\x17\xed\xbf"\x06\xf9\xb3 B\xe3\xbfF\xbe+\x8e^^\x97\xbf\x80\x12\xde\x882\n\xb1\xbf\xc6\x97\\\xea\xe4M\xa8?\x8dS\xf5%)\x86\xd7\xbf~J\x18\xfc-x\xab?\x87\x80VQ[\xb0\xee\xbf\xca\x90\x95h\x83\xb1\xc9\xbf\xf9\x97\xbd\xbd\xa6\x16\xa4\xbf\x84\xd6\n\xb1U\x99\xad\xbf\x92\xe5\xa0F,\xa9\xe7\xbf\xb8v\x82\x95\xfcz\xb3\xbf\x139\x9b$\x03g\xd8\xbf\xd2\xf2#\x05\xf2\x90\xc0\xbf)\x9bT\xee\xf7\xac\xc7\xbfT\xff>\xddL_\xa2\xbf\xd5\x1b#\x13\xe5}\xb4?\x1fq[\xfd\xaa\xec\xb8\xbf\xb2\x08\xef\xd9\xa5\xf2\xcd\xbf\xef\xf5\xc3+\x9d\xdf\xc2\xbf\x0bk\xe7\xd1\xe6\xe6\x84?\tIj\xea\xc0n\xb1\xbf\xd5\x8e\xe5\r\xd3\x19\xa6\xbf\x88\x8f\xadZ\xfd]\xe5\xbf\xa2\x99\x00\xe3\xc0\xb5\x9d\xbfhx\x83Y\x00\xd9\xb3?C]\xd4\xd7\x0c\xe3\xed\xbf\xccu\xf3R\xf3\xa3\xe1\xbf\x1cS[\xf1\xe0,\xf0\xbfO\xe3\xadu\xb6!\xb5\xbf\xcb\x02\x85\x13\xf5O\xd2\xbfF\x12\xa9\x95f\xc9\xda\xbf\xb6z\x10?}~\xe5\xbf\x8d9\xb3\x08\xdas\xb9\xbf\x9b\xf3\x1f\xaa\x82\xd6\xc6\xbfw\x1a\xbe\x19\xfe_\xb7\xbf\x1e\x84\xd1bj\xb2\x97\xbf?`\xe92\xd7\xd0\xd9\xbf\xda2\x95\x89\xbc(\xe4\xbfMD}S\x81&\xc7\xbf\xf3\x0c\x85\xa9\xf1\xb1\x84\xbf}\'{F\x86)\xb5\xbf\x86_\x17j\x02\xc5\xc8\xbf\x93\xce$w\rn\xd6\xbf\xeb\xf9)\xd4W\xd1\xcb\xbf\xdaI\xa0\xfc\xf2o\xc0\xbf\xaaF\x8d\xe7P\xfb\xd0\xbfl[dK\xc3\x89\xd8\xbfL\x1e\x86W5\x8f\xab?\x19\x93\xbe0\xe2\x01~?\xaa\x86f\xcd\xd7\xe2\x97\xbf\xd1z\xc2I\xb2\xf8\xec\xbf7\x86\x10q\xde\r\xdc\xbf\xf3\xf3\x19\x10rH\xc7\xbf?\xefs+\xe2\xc5\xb7?\xaf\xaa\r3\xa6!\xf5\xbf\xc1%,\xc3\'6\xa6\xbf\x97\x86\x99 ]\xb4\xc0\xbfg\xdd-\xfb\xf0\xa8\xb3\xbfy\xfa<\x826F\xdd?\xec\xb1\xd7\xb3}\x90\xec\xbf\xb5\x87\xc2\x1f\xcb\xc5\xe4\xbf\x1drg\x9b\xcf\x07\xa5\xbf\xaf\x16,G\x86\xdc\xc4\xbf\xef\xfb\xa75r\xa4\xae?\xef:\xd95\xe8\x91\xe5\xbf\xa9x8\xe59@\xb3\xbf\x82\xee;\xb4\x82\xdd\xc6\xbf\x1c\xb3\xd0}J3\xc3\xbf\xe3+\x93\x1a\xd5\x98\xf1\xbf\xf3\xa7\xb3\x0b"\x12\x9e\xbf\xd8q\xbd\xce\xdaF\xcd\xbf\xe0\xe5`\xc6\x04\x80\x05\xc0\x93\xea\x7f\xf7j\x03\xc0\xbf\x83\xc4k\x9f\x0c\x05\xd3\xbf*qQ\xf1\x19V\xe1\xbf\x02\xb2\xcd\xae\xad\xb6\xd3\xbf\xab\xf5\x951#\xc9\xb4\xbf\x07k\x8dP\x81\x1f\xc5\xbf\xaf\xae,\x85\x93/\x9c\xbf\xb9\x96\x19_\xa20\xb0\xbf\xd9\xf2\x03D\xf0\xa5\xf0\xbf)~\xb3\xf8\xd0\x1c\xda\xbf\xe3\xdc\x10\x02\xa5\xaa\xb1\xbfX\xd4\xb3\x99\xeb;\xb4\xbf\x03\x16[UL\xaf\xc5\xbf\xaf}.L*L\xc9\xbf\x89C\xa4\xe0\xa0\x10\x93\xbf\xd6~.\xc8\\q\x9c?(i\x1f\x96\xe4\xa2\xba\xbf\xf7\xf6\xb7AJ9\xc4\xbf\xeb\x0cv+\xd7\r\xf0\xbf\xd5d\xa06\xc6\x12\xe7\xbf\xc5\x8f\x88]\\\xeb\x89?\xd1\x7fE\xf3\xf2\x99\xae\xbfp\x98\xe1\xdfF\x18\x8b\xbf\xbb\x86\xae\x0fF\x9a\xd2\xbfM\xc2\xeb\xda\x9a\xd0\xf3\xbf\xbd\xba$|{p\xdb\xbf{\xf5\x95\xc2;\xfd\xe5\xbf\xeb\xac\x1e\xed\x83Q\xd1\xbf\xc1\x8eG\xea\xa9\xda\x94\xbf+\x13\x99C|A\xb2\xbfd\xdef\xa3\xe8\r\xc1?\x1c%$\xec\xd4\xcf\xe8\xbft\xe8\xf4\x03\xe8\xfe\xc5?p\xe3\x04\x14E1\xbf?E\'p\xb6\xc7\x03\x90?fJ\xd6\x8c>\xda\xad\xbfPy\xd9\xa4\xd6S\xba\xbf\x82K\x11\x00\x0f\'\xdd\xbf\xe6r\xb2\xa0:b\xc3\xbf\x9at\x8a\x8ae2\xc3\xbf \xb8uC\x06\x7f\xa1\xbf\xe8c\\|,\x1e\xf1\xbf\xe1H\xbf{g\x00o\xbf\xa37\xe3BR\xc5\x9c\xbf\x80P\x97\xf1\x0b\xc2\xc0\xbf\xc2\x13\xefV\xa3\xac\xcf\xbf\xf1\xf8F5_F\xe0\xbf2\xff\x99\x1f\xef\x92s?\xban\x87g\xb9\xa5\x84\xbfm\x8a?\xef\xc3\xb5\xae\xbf\x83\x95B<\xccg\xd3\xbfF\xf0\xa6;\x98E\xb6\xbf\r\x97\xfc\xc8\xeeE\xd1?\xd4\xfa\xa4\x82\xd8\xff\xd7\xbf\xf7\x99?\xd2F\xeb\xb0\xbf\'`H\x06\xf5\xee\x99\xbf\xfb\xf9+<\x86`\xb6\xbf\xfco\xb6\x88W\xdb\xab?3\xfaAw\xce\xbf\xd0\xbfY[\xe1\xb1\xa0\xe3\xdb\xbf\xd6F!\xbbq`\xc6\xbf\xa0\xb1T\xa9\x04-\xa4\xbfLU\xbe\x1b\xe4\xc6\xb5\xbf\xbefGuTZ\xbd\xbf%\xbb\xdb\x8b\x91\xd0\xed\xbf\xeaw.\x86\xc8e\xe3\xbf&>N\xb7\x1f\xab\xe0\xbf\xb4P^#u\x95\xcb\xbf`;\x8b\x87\x88\x00\x97?\xf0_%)\xaa\xa5\xb7\xbf\xb4;H\x12\xf0\xc1\xd0\xbf\x9bF\xcb\x93|\x02\xfa\xbf\xd9\xbbIv\xban\xb6\xbf\xd2o\x9b&v\x1c\xcd\xbf\xbeZ\xc62\xbe\x8f\xe1\xbf:m\xb6\x1a\x97)\xb1\xbf"d\x01\x8d\xa5?\xac\xbf\x1eEpP\x16\xec\xae\xbf\xef\x04[\xecq\xdf\xf1\xbfrP\xf6\xa8\x9d4\xcc\xbf\xa39\xd2y\x0c\xf0\xc8\xbfWG8\xa7Ag\xb0?+4\x0fuB\xe7\xd7\xbfn\xce\xc1o\x15\x8e\xa2\xbfww\xf6\xbc\x90\xf8\x80\xbf_\xfc\xc5\xe8\xff\xeb\xa8\xbf\xf2P,z\xe6Lp\xbfG\xd6p\x1e\x04\x0f\xdb\xbfy\xd4\x18\xb9LQ\xc2\xbf\xf3[\xb4\xa7\xec\x98T?mG\xa6H>\xee\xb6\xbf\xe3\xe3$\xac7\xef\x96\xbf/\xc2\xc2\x84u\xf0\xe6\xbf\x81\x8b\xb0G\xb1\x88\xc0\xbft\xb5m\xb0\x00\xe3\xb8\xbf\xfe\x81\x87\xe9J2\xa6?\xe0z\xbe( {\xd2\xbf\xc7\xad\xda=\x0c\xb7\xaa\xbf\x02]ty\xbf>\xce\xbfC\x15\xf8\xcf\x13\x10\xf5\xbf\x13\xb0\xf9\x17#0\xa6\xbf\xa2\x0c\xb8\x08{\xda\xd8\xbf\xedlA\xd6\xde\xca\xe1\xbf\xcb."\xf6.H\xd1\xbfYqS*\xe5T\xb1\xbf/\x04)o\x8d\r\x8a\xbf\x97\xf3j\xc4\x82n\xc3\xbf\x9dk\x80\xec\xe5\x91\xaa?\xf1X=;\x85\xa5\xe4\xbfL\xde\x18\x12\xdeL\xdf\xbfy\x05\xcc>9}\xba\xbf\xea@\xc7\'\x98\xde\xb9\xbf\x8c\xf3ZA\x95\xee\xc0\xbf]\xeb0D\x05:\xbc\xbf\x1dC\x16`X(\xa4\xbfSZG\x03[\x83\x80?\xf8\\\x9cDQ\x1a\xb7\xbf1Q\xe4.{D\xd7\xbf\x15\xbf\xd1C\xa9P\xdc\xbf.\xfa\xd4\xba\xf7\x03\xd9\xbf|\x8a\xa8[15\xc6\xbf\x18*m=\xa9\xef\xab\xbfR\xa2]\x85\xd5\xed\xa8\xbf\xb1a\xa2\r\xee&\xc8\xbf\x83\xb4\x87\xa190\xd3\xbf\x80\x8c\xbe\xac\xff\xc3\xe5\xbf\xd9\x89\xb9;9\x96\xed\xbf\x01\xf4O$3g\xe5\xbf\xa4\xba\x1cdPd\xaf\xbfy\xfciY\x95\xaa\xc0\xbf\xaeRF\xb1Q\xcb\xd8\xbfS\x82\x13\x80\xcb\xea\xec\xbf\xa6\xe9kM\xcc\xfdx\xbf{?\xe7\xc3\x95\xe7\xe3\xbf\x02\xfa\x19x\x03\xd2\xc6\xbf\xe7x9z\xd9x\xa2\xbf\xf8`J\x97\xc4\xae\xb7\xbf\x03*\x1d3\xdbK\xe7\xbf\xa8\xa2Q\xfcn\xbd\xb4\xbf\xbc\xe2&9\x94T\xcd\xbf\xab?HF/\xaf\xd4\xbf\x97\x84@\xbd\x1cT\x92?\x155\x9a\x83\xc0\x93\x92\xbf\xe3\xda\x85h\x86\xd7\x85?\xd3\x00\xfd<jP\xb1\xbf\xe3\x89\x99\x04\x84\x99\xcb\xbf\xe4\xfc\xf8K\xddQ\xb1\xbf\x9a8\xf6\x0f\x8bC`\xbfIQ=\x8d\x9c\xa2m?\x14\x1a-}\x86\xbf\xa5\xbf\x90\x9e\\\x14?\xae\xe3\xbfw\xd5\xd7$$\xfb\xd5\xbf\xa3\x99\x97M\x9d\x17\xce\xbf\xdd\xabo:\x89\x0f\xe5\xbf\xd7\xb2\xa3\xdcmB\xd7\xbfh\x0c\xaaf_\x87\xf3\xbf\n\xf7\xce\x9f\x15\xc4\xb2\xbf\xba\xed\xdbgs\xed\xc3\xbf\xdd\xb5\xf1\xc8\x01\xa7\xd9\xbf\x8a\xe7\xa9\xb9\xc3\xf4\xc7\xbf"\xa58\xd2\xe0^\xc0\xbf\x82\x8c\x0f\x15\xb3Q\xa9\xbf\xc2\'\xe0\x96\xc8;\xbb\xbf\xe2\x0f\xc4\x95\xb5b\xb6\xbf\xbe\xb63/3w\xe2\xbf!Pp\xe0\xf7j\xec\xbf\xe8ze\x02,=\xba\xbf\xc8+k\xbf\xc1#\xa4?(\x9f\xf6Z\xb1\x83p?e#\x91\xeb\x05\xfe\xd6\xbf+\xf7\xbf0\xff\xe3\xec\xbfj\xf0\x82-\xa7\x9f\xc4\xbf\xf4^\x0e\xe2\xdf\xcd\xc1\xbf`\x1b]\xd5<Y\xc5\xbf\xc7\x1a%\xde+\xa7\xea\xbfi\x07K\xd58t\x86?\x11IH\x10\x0c$\x8b\xbf\x8d\xf4]\xfc\x12\xbb\x8c\xbf\xec\xb7\xb3\x00\xc7\xa6\xef\xbf\x13C\xb4\xe4BS\xd5\xbf\xd3\x82\xca\x98gw\xbf\xbf\x1f<R\x81\x8e\xb2\xb9\xbf\xb8o2w\xaa\x1a\xfa\xbf\xbe\'\xb6\xfc\x82)\xa0\xbf\x8e\xaaG\x87;\xc7y\xbf\xa1\r\x00\x83\xac^\xae\xbf&\x97no\x84\x93\xe8\xbfs\xab=\xcf\xd8/\xe4\xbf\x00c\xb8[\x82|\xd9\xbf\x9d}\xcd9U\xeb\xc4\xbf\xbf\xae\xf2\x87M\xf2\xbb\xbf\x04\x11)\x98\x94\x98u?\xa9x\xb2<w\xc5\xe9\xbf\xec\xc7\x11\xf0 J\xd3\xbfZ\xd4\xc0\xa4 \xd5\xe1\xbf\x88(f\xf7;\xd0\xc8\xbf\x18\xa4x\xa9\x92\xc2\xf2\xbf\xef6\x9e\x9a\xa4\xbd\xa7\xbf0\n.\xd1\xda\xab\xb1?\x86B\xc9\x00\x1b\x19\t\xc0M\x91\x84\xc7\xd4\x0f\xa8?kW9k3\x96\xc7\xbf\xf8Y\x1e\xec\\\x8e\xde\xbfj?\x8f\n\xe6b\xe8\xbf\xc3\xfb\xe9\x82\x83\xc7\xb8\xbf\xe4\xda\x11i\x00\xe0\xe1?\xbd\xeea\xb8\xc36\xbb\xbf\x16\xc4\x9bE%\r\xa3?\xd3\x81q\x03\x0e\x99\xf0\xbf6\xf4\x12\xe1\xf4K\xec\xbf?\x05\x1d\x9eL\x0c\xc0\xbf\x88$\xc1&\x9bx\xab?\x8c?~\x92\xff2\xc3\xbf\xa4\xc9\xf1\xeb\x17\xbf\xc7\xbf\xbf{8\xc4\x1dH\x8d\xbf9\x8b\xc8WUsT\xbf\xaf`\xd2\x95\x97\xa9\xc0\xbf\xfc[4aS\xa7\xcb\xbf\xd3\xcb\xed\xfc\xbdR\xea\xbf\xf4b\x84\x83\xa3}\xe8\xbf\x1c:\xc0\xcf\x13\x96\xc6\xbf\xc4,\xdc\xebq\xa5\xac\xbf\xdc\xa0\xc4\x86\xcblR\xbf(U4\x8f\xbe9\xd7\xbf\xef\xfe5\xfe\xc4\xde\xf9\xbf\xa6Aisx\x99\xc4\xbf\xc5\xf1=\x87\xce\xe9\xcc?\x8frA\x7f\xbb\x9b\xd2\xbf<\x16\xe1\x96\xf8\x87\xaa\xbf\x1eB&U<\xca\xb9\xbf\x85\x9d\xcbeoK\xc9\xbf\xd3\xac^\xf5\x88\xf6\xeb\xbf=\x95Q\xb05\x9dw?\x06\x97Q1\x98\x17\xc9?oR\x03\xc0GR\xc1\xbf\xa4\x8d\xa6\'\x01$\xb5\xbf\xce\xd9z\xa6S\xc7\xab\xbf\r\xe7s\xcb\xbfk\xe2\xbf<Y\xaf\x0c\xa6\x98\xc4\xbf\xb8ns\xecE(h?\n\x90\x9ae?\xc6\x95?\x16\xbc9E\x19\xda\xc0?4\x85\xd6\xdd\x83\xfes?`l\xa4\xb1\xffd\xb7\xbf\x1d>Y7s\xa2\xc0\xbf\xce\xb3\xd9\xa2\x06\xd4\xd6\xbfs\xb8R\x18\xff\x01\xbf\xbf\xe8\xda\xfa\xb8\xf2)n\xbf\xc1\xecYg\xea~\x8c\xbf\x84\xa7\x8fw>\xbb\xa8\xbf\xf0qc\xb2\xf2%\xe2\xbf\xd0D\x85\x81\xfa@\xc3\xbfMb\xa3\xf3\x08C\xe5\xbf\xd8s\xcf\x9d\xe2:\xe9\xbf\xfco%\xf5\x00nc\xbf\xa6\xcb 7+\xbc\xb1\xbf[>k\x9e\x9b\xf5\xd3\xbf\xc4{\x0e\xb7\xabp\xb2?\x1c\xb7\xb6\xde=1\xd4\xbf\xeb\xae\xc6\x0c9:\xde\xbf\xe8)\x91\xc8\x90\xfd\xc4\xbf\xf7\n\xbdI\xe9T\xb6\xbfh\xcb{\xc0\xfcr\xb7\xbf\xd7*\xe0b8\xc5\xaf\xbf:\xe8x\x8d\xa9p\xe7\xbf\xccP,\xa0\xf4F\xd2\xbfa\x1a\xa5R\xb8\x14\xcb\xbfX{\x08\x1b\xf5\xf2\xa8?a\x124[\xe1\x95\xb7\xbf;&\xe4\xa0<V\xb9?L\xfca2\xc5s\xc4?\xb3U{\x0b?E\xd3\xbf\x07\xbf(@Hu\xb3\xbf\xec\xab\xd0\x1b\xdc9\xd6\xbfX\x0e\x00\xedHd\xe8\xbf\x85\xce\x8c\x90\'i\xcc\xbf\x9c\xed\xbf\x16\x96d\xc4\xbf8\xaf\xe1\x04\xf7\xab\xa2\xbf\x9f\x14W\xb41\xab\xe9\xbf\xb4K\x94\xd2P\xfc\xc8\xbf\xcb\xa5\xcf^\x18V\xbe\xbf\x97\x12E\xc1\xaa\xe4\x9d\xbf\x1b@\x06\xc4\xfb\x9f\xeb\xbf}\x84\x07y\xec\xaf\xab\xbf_\xea\xdbTjK\x81\xbf5\x90\xe1\x10x\x9e\xa9\xbf\x11\xa6U\x913\x13\xbf\xbf\x84Ka\xe9S\xdf\xd5\xbf\xfcT\x88\xcc<\x14\xbb\xbf\xc5\xfdy\x19\xb2C\xb5\xbf\x03\x1fj\x8c\x06\x06\xc2\xbf\xcbM6\xba\xb8k\xb2?\x1aK\xe6\x8f\x02\x06\xd7\xbf\xc3\xf6\xfa\xfdp>\x93\xbf\x16\xc4\xc8\xc7UV\xd0\xbf\xb8w8M\xb0\xdf\xca\xbf\x15\xc5\xf8\xbc\\|\xdd\xbfP\xb0\xe1\xde2\xc5\xab\xbfJ\xbc\x138[,\xab\xbf\x89\xf3\xdf\x97\xea>\xf2\xbfq\x98\xb7OL\xbb\xcb\xbf\xc9\nY8\x1d\xbf\xf5\xbf\xe0\x97\x1f\xa8\xed\xec\xde\xbf\xad\x85\x05\xd5\x0ba\xd3\xbf\xdcz\xc5=2\xc9\xbc?\xca FSc2\xbb?\xe3\x12.H\xbf\xaa\xb4\xbf\xc3\x08\xdc\xcd\xa1\xfc\xb4?k4\xadO\x86\xf4\xe4\xbf\xa0\xdcg\xd8\xb3\xea\xe8\xbf\x18\xd9\xd7!\xc6V\xc6\xbf\xbf\xea\xa6\xfcp\xd6\xdb\xbf\x9d\x92cQ\x87L\xbd\xbf8$\xc7=^\x82\xd0\xbfn\xcd\xdd`H\xad\x8d\xbf\x02\xcbq\xc9R\r\xb9\xbft\xf5\xd5\xb5\xa1J\xc0\xbfI\xc0\xf6\xdd\x0c\xd3\xe2\xbf\xc5T\x8fi;)\xd8\xbf\xd0\xc0\xef\x12\xe9\xba\xe4\xbf\x00\xd9,\x01\xd6(\x81\xbf\xc9-\xa5\x94tZ\xbb\xbf\xbd\xc1\xac?\xfb\xa6\xb1\xbf\x15\xb7\xf6\xbd9x\xd6\xbf\xbf\xb3\x89\x8av-\xdc\xbf\x9d\xd8T\xe0|V\xd6\xbf\xb2\xf5\xd4~\x91n\xe0\xbfQ\x10\xe0\t\xc5\xde\xe9\xbf%\x0e+\r\xc8d\x92?*\xd6\xfda\x82\xd8\xb1\xbf!\xe3\x04\xef\x87$\xa9?\x7ft\xc3\xceq{\xf5\xbf4W\xca\xd2\xd9\xf0\xa2?;\xe7\xfck\x94\x82\xd3\xbf\x92Z\xf2\xed\\\x91\xa7\xbf\xe0\xea?\x19([\x9a\xbfbO\x1e\xee~\xb3\xbd\xbf\x8aZ\xc6\x9d\x82\xdd\xe3\xbf\x11g\xba\xe8G[4\xbf\xb8Nm\x16w\x82\xd3\xbf\x7f\xe70\x14\xe4\x1d\xe1\xbf\xb6|\xfbYi\xc7\xcd\xbf;\x06Wdx\xa9b\xbf\xd1\t\xa9\xe8\xe1\xb8y?\x9d_\xaa<\x9f\xb5\xa9?\xd1x@\xc0,\xd6\xd3\xbf\xf7\xfcFD\xea\xec\xe4\xbf\x1d\x05\xe9\x11<~\x89?V\xa3\xf2\x8e\xf4\x18\x9e?u\x1d\x11\xd3!\xc6\xa7\xbf\xdb\xbf%\x91\xb7\x8d\xdb\xbf\x16\xd3\x1fn\x14\xac\xe3\xbf\x8c[2v\x13\xec\xe1\xbfOa\x9b\x9a\xe2\t\xea\xbfc\xc5C\xfeE\x08\xb4\xbf\xe6\xa3\xbe \xf3;\x9d\xbfl\xcf\x067\xda[\xd1\xbf}d\x08\x8f\xe4;\xc7\xbf]\x7f\xca\x97\xb0 \xd6\xbf\xcf\xce\xe8\xd2\xb4\xba\xdb\xbf\xde\x9a\xaa\xb6J\xa5\xbe\xbfBm\x86t\xe0\xc9\xc1\xbf\x9b\xfd\x1e\x941,\xae\xbf\x87\xaf[uh"\xa9?\x08\x91\xb4&/U\xf3\xbf>x\x05\xb4\xdc\x12\xf5\xbf\xc2~\x1b`\xb2\xe2\xe1\xbf\x00\xa7\xcdL\x92L\xc8\xbf\r\xad\x90^\x80\x04\xc3\xbf\xaa\xd5\xdb\xcd\x0c\x8a\xc8\xbf\xacPf\xa6\xc2\x11\xb3\xbf\xd3\xc1M \xccj\xe6\xbf\xc7\x05\xfb{,K\xb1\xbf\xc2\xb5\xd1"k\xc6\xc1\xbf0\xaa\xef\'\xe0I\xb2\xbf\x80%\xdc\xd2\x88\xbf\x99?\xf4iH\x18\xa9\xab\xbb\xbf\xd1\x81\n\xdc3\xe5\x91\xbf\x04@\xd1\xd6\xd2\xd3\x8e\xbf\xbb%}r\xa3:\xdb\xbf1\xf2z\xbf\x18\'\xcc\xbf\xad\xb5^\x12\x1a{\xc3\xbf\xae\xad\xd3SdC\xf4\xbf\xee\x8f\xd5\x97&\x90\xac\xbf\xd2\xe0t\xbf\xc9\x9f\x8d?4\xfb\x88l\x16\x93\xae\xbf\x84SG\x86D\xe5\x82\xbfSU~@o\x8a\xe0\xbf\x89\x8c\x15\xb38\xec\xda\xbf\xe5E\xc7 \x9a\xb4\xb4\xbf\xbf\xee3\xdf\x8a_\xbb\xbf\xc8\x93\xdc\x87\xb6Kr\xbf\xe8\xebFV\rg\xed\xbfc\xb0\x03\xe4z\xd6\xb2\xbfHc?\n\x88\x83\xae?\x85/\xb2\xde\x1f\x8c\xbb\xbf\x9c\x1cd\x02|\x19\xf7\xbf\xce\xf7G\x97R\xf4\xaa\xbf\x0fn\xbd\x95 ?\xab?\xc6:\xbc\xd6\xa5\'\x00\xc0E),Ts\t\xb4\xbf\xf5\xce,S\x9f\xc8\x81?0\xfd\xf6\n\xd7\n\xdd\xbf\x86X\xa1bh\xdb\xc0\xbf\x0fs\x1d\xc6\xf9\xba\xb8\xbf\x14xm\xba\xe6\xd0\xbd\xbf\r\xc0\x15@bP\xb8\xbf\xc5\x1f\x92\xb5\xda\x86\xbf\xbf(\xa8U\xeaD\x89\xf3\xbf4\x90;l\xf4\xd0\xc6\xbfP\xb4\xe41\xe0\xe0\xbe\xbf\x9e} \x10\x9f&\xc1?i`J\x96W\x14\xcf\xbfW\xe7\xa9\xeb\xa2R\xc8\xbfPN\x14F\x83\xf7\xa4\xbf*\x05ts=\xe7\xd5\xbfr\xf8\x02\xe5[$\xbe\xbf\x96"B\\\x85M\xa4\xbf\x8e\xad1x\x04\xa5\xee\xbf\x018\x13\x10\x08S\xe6\xbf\xa6-\x05\xf7y\x1f\xa5?J\xbf\xcbu\xed)\xc6\xbf\xf96\xc9\xc2\x15~\xb5\xbfB+s\xae\x13\xc3\xb5\xbf\n[\xe9\xad\xed)\xf0\xbf\xec5\xa0\xb7\xf4\xa1\xae\xbfI\x96\xac\xb4\\u\x94\xbf\xeb\x8b"C\x04\x1a\x9d?\x17#\xcb\x01Rt\xa1\xbfK0\x126j4\xad\xbf\x962\xaeT"\x8b\xd3?\x072P\xf7s&\xe3\xbf\xd1\x13\xeb6a\xcd\xa5?Lj\x86\xf5N\xb3\xb7?\xee\xea\xc0*\xef\x00\xd9?$\xdbx\xcb\xb4\xbd\xa0\xbf\x05\xc4=\xd3F3\xb2\xbf\xebZ\x9e\xd4\xe9\xab\xdd\xbf\x9dtE\x9bf\x85\xb1\xbf\xebg\xc8%\xee.\xb9?\x02\xb8\xcf\xa2\xea\xdd=?\x84T\xae\x9f\xf0\x8d\xce?,\x1e\x81\xb9\xe1Kr\xbf\xd9\xe2\x89\xdbj\xf3\xc2\xbf\x91n\xbd!`\xe3\xd9?\x02-s+\x94e\xd3\xbf\xf6\xe1\xafQc\x9cv?\xfc\x9e\xc2\xd5 +9\xbfM\xb8\xa1\x0bI\x9c\xbc\xbf;\x9b/\x86w[\xab\xbf\xf7k\x9ft\x05<\xbd\xbf\xa7"\xc8\xe6$^\x9e?\xa9J\xec\xa5\x89Q\x91?8y\x85\xe8#\xc4\xc1\xbf8\xa3\xd5\\ca\x92?\x9f\x83\x04\x9b\xbe\x81[?\xcc\x99\xbe\xaa9\xb5\xb4\xbf\x1e\xe6\xb4\xb6\x9bC\xb8\xbf#E\xe0f\x9a\xdc\xcc\xbf\xd1\xf5\x1dP\x04\t\xa4?\xe3\xc3\xa8\x83&W\xc7\xbf6\x1e\xab\xa7\xf5\xe5\xb2\xbfH\x02\xbd\xc9\x16\x8c\xb7\xbf\x0c\xf2\xf3\x01d\xb5\xb3\xbff\x13\xd9\xa7\tI\xdf\xbf\xa4\x0e\xd9Z\x10\x8f\xb3\xbf\xf9\x04\xd6/,K\xcd\xbf\xd8\xdb^\xf6hA\x99\xbf}\x1e\xb1\xcd\xcf\x0e\xc5\xbf\xac\x8e\r\xcasf\xa7\xbf\x08/\xa4\x19LD\x84\xbf\x01\xd5\xa5\xcb\xda\x9d\xca\xbf+)\xbb\xe2\x1c\xfa\xa1?\x11\x08\xf7C\x9f\x91\xce\xbf[wd\xa2\x06\x8e\xe8\xbfjw^\x1c\x9eF\x90\xbf\x1e\x03\xd9\x815r\xbd?V\x7f_9E\xae\xa5\xbf\xa8\xf0\x1c\xc8\xf0X\xec\xbf;\x88|P\x9cX\xc4\xbf\xe4\xb1\x02o@\xb4\xcf\xbf|\x00r0\x1a\x1e\xad\xbfz"\x8d\x88\xaf\xd2\xbc\xbfs\x8e\xcc]\x14\xbd\xa9\xbf\xff\xecA\xfb\x19\xe4|?4\xf2g2\x9fk\xb2\xbf.\xeb\x8a\xa0\xd9=\xa8\xbf/y\xc6\xffy\xc1\xe0\xbfQ}\x9as\xc2R\xd3\xbft\xcc\xe5En\x8e\xb7\xbf\xd3A\x11\x17\xe5>\x9c\xbf\xed4L8\x97S\xb7?\x1c\xb7\xa7\x1a\xf4\xd7\xd5\xbf\xc5.\xac}j<~\xbf\x8bF\ngL/\xae\xbf\x98n\x92\xab\xc46\x8e\xbf\xa9\x95Nq\xbb\xa9\xd5\xbfFv\xf8Z\xb5*\xa9\xbf\xab.\xb7\xa1\x8e\x84\xb3\xbf\xbc=\xe8C\x8fA\xef\xbf\x15E\xcaXOM\xbe\xbf_\r\xb4\xe1r^\xa4?\xfdG+r\x9eT\xdb\xbf\x80\x11\xa4l`\xb3\xcc\xbf\xdf\x0c5\xe9\xde\xb4\xb1\xbf\xbaG\xb0\x0c\x9c\xc1{?\x8e\x93\xa8\n\x1f{\x90\xbfwc\xb8\nl\xd2\xa3?\xe9#\x1c\xb6\xaf5\xdc\xbf\xd8q\x8d=\xea\xec\xe8\xbfw\x0c\x90\xe92~\xbe\xbf\xc0?\xdb\xf1\x87\xfa\xa9\xbfU\xfd\t\x86\xbe\xaf\xc2\xbf\xb0\xc6\xdf\xd9\xa7p\xc9\xbf\xc5\xc5\xf6\xe4QO\x85\xbf\xd6)_\xcf(\xa2\xad?- \x8a\xf5\x1b2\xbd\xbf\xe1\xcfZ\xa20<\xd9\xbfw\xb2\xee\x1ad;\xd8\xbf\xa4\x8fO\x93"\xbe\xd7\xbf\n!\x7fK\xae\xc9\xb8\xbf\xa7\xdf\xc8J\xe1\xae\xbe\xbfm,J0\xe3\x0c\xbc\xbf\'1\xb0\x96\xbf\x8c\xc5\xbf\t\x89\xbc\x7f~\x8b\xdd\xbf\x80\x07\xa30\xd1^\xd5\xbf\xc4\\\x9e5\x03\x0b\xcc\xbf#\n\xa6Y\xcf\xeb\xdc\xbfc\x91\x15\x81}\\\xa2\xbf2\xaa\x1a\xc1\xbb\x8c\xca\xbf\xe2\x92\xcf\x16\x13\xce\x9a?z\xd9\xc2\xd0\x17\x9e\xd5\xbfr\xe7\xce4\xca\x94\x89\xbf.\xd0\xb1\xb6 \xa9\xae\xbfn\\\x84\xda\xc8\xc2\xc1\xbf\xd7\xb2[\xe6\xc3B\xaa\xbfB\x92\xca\xdc\xcb\xf6\xbe\xbfy\x1d\xf4\n\x19\x15\xd7\xbf+\xad}b\x06J\xaf\xbfh\xd2\x00I\xcc\x9d\x94?\xb0\xaefo\xf4\xf5\xd3\xbf\xdd\xc5f\t\x1cc\xb5?\x9b\xf3\xfd\xcd\xbc\x87p?\x12[y\x8d\xa2\xd0\xa8\xbf\xf4\xb2\x1a\xf6\x19Tm?R.\x91\xa0\x1c\xdb\xd0\xbf\x94\x84\xb7\\\xe0\xc9\x9a?\xber\x85\xfc)\x95\x87\xbfg\x87\xcc\xb8\xd2\xe1\xb1\xbf\xcd\xe2\xc2\x8c5e\xa9\xbf\xb9\x85)q\x80\xb9\xe7\xbfG @\xf7\xf4\xd7\xdd\xbf\xec\x96g\xe2*\xab\xbf\xbf\x08\xd6(>\xc2\xeb\xe8\xbfk\x14\x8aC\n\x10\xc4\xbfc\xbe \xe5Z\xe1\xb1\xbf\xb5f\xb88P\x1fd\xbfqa\xe2L\xdf\xb4\xb3?\xae\x1d\xc7S\n\xf0\xc9\xbf\xa8(\xd0l\xee6\xd9\xbf\xd7\xbb7v\x81\xca\xbc\xbf\xae\xd3\xc3AN\xb4U?\xa9\x89\xf5j\xa3\xad\xb6\xbf\xe1\xca\xe0\x7f\xa66\xba\xbf\xeb\xcf\xf9\x98\x7f#\xe6\xbf\x0e\xdc \x13&\xbc\xd7\xbf\x16\x89y"\xf4\x0c\xc1\xbf5\x11\xb9,\xe9\xd9\xa6\xbf\xb3\x01\x04\xc0\x9fF\x99\xbf{\x06\xfb/\x82\x8b\xba\xbfw\x1e\xa3\xd1\x8b~\xa9\xbf\xd8\xeb\xc4\xb5\xeb\x18\xe4\xbf\xd4o\x842\xf4]\xc3\xbf\xdf\xb0I9\xa2q\xa4\xbf\xd3x%\x9c\xca\xd2\x9e\xbf-\xffrB\'\x81\x83?Y\x15\xa6z*\xb1\xc4\xbf\x87\x05\xb7\xb7t\x02\x8c\xbf'
p502
tp503
basg71
I00
sg72
I00
sg73
g0
(g74
g5
Ntp504
Rp505
(dp506
g78
(I00
I00
tp507
sg80
S'float64'
p508
sg82
g66
sg83
I00
sg53
Nsbsg84
Nsbsg53
g430
sg85
Nsg73
g505
sbsg435
g0
(g10
g5
Ntp509
Rp510
(dp511
g14
S'auto_14121'
p512
sg16
Nsg17
g0
(g18
g5
Ntp513
Rp514
(dp515
g22
(lp516
(lp517
(g25
I306
g26
S'nade_train( * args[1:] )'
p518
tp519
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p520
tp521
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p522
tp523
a(g37
I27
g38
S'self.add_parameter(TensorParameter("Ws", (n_layers, n_hidden, n_hidden), theano=True), optimise=True, regularise=True)'
p524
tp525
a(g41
I29
g42
S'parameter.add_to_model(self)'
p526
tp527
a(g41
I167
g45
S'setattr(model, self.name, theano.shared(np.zeros(self.shape, dtype=self.theano_type), self.name))'
p528
tp529
aasbsg48
g0
(g49
g5
Ntp530
Rp531
(dp532
g53
g435
sg54
(lp533
g56
(g57
(I0
tp534
g59
tp535
Rp536
(I1
(I2
I100
I100
tp537
g66
I00
S'\x16:&Z\x8e\xd3\x94\xbf\xa6@B\x02\xf8N\xa2\xbf\xa0\xe3\xd4\x86\xa1m\xb6?6]\xd8\xdc\x8a6f?\x8at\xb5\xce\x1aR\xb4\xbf!\\\xd87{r\x86\xbf\xdc\x19\x9f\xd3N\xb0\xcb\xbf\xe83c43\xed\xbf\xbf\xa0\xda\x97\x03O\x9f\xa8\xbf\xa0\x812R?=\xb8\xbf>\x03\x1a\xe7\x95\xc6\xb1\xbf*lu\x0b\x18)\xde\xbf\xb5\xcd\xd7\xa6\xbb\xad\xb0\xbf\xbe\xe1O\x93\x9a\x04\xa7\xbfTg\x9a\x1d9f\x9b\xbf5m\x1d\x00Q3\xbb\xbf\x1d\x82\xd5\xc3&\xc4\x98\xbf,\xf2\xd2[^\xa2\xd9\xbfb)F\xa1{\x8d\xdb\xbf=D\xb8\x03\x0f\x8b~\xbf\xa6eW\xb0\x19\xe0\xb0\xbf}\x9f\xf5\x1e\xe2\xd0~?\xec\xa9!+\x1f]\x81\xbf\xeb\xfa]\xec\xb6\xb9\x8d\xbfPy\xe8\xfe\x0f\xef\xbb\xbfh\xcc\xca\xbdQ\x95\x86\xbf\xa62/\x1ck\x1d\xb2?\x9a\xf3\x18\r\x0b`\x80?\x1eB\x803\x1dam\xbf\x83\xb6\xa4jg\xaf\xbf?,\x9a\xd03\x15\xa0r?~\xc5B\x88z\xf2\x7f\xbf\xefe_S\xb9\x82\xe8\xbf\x06\xb4\xaf\x82\xf9\x82\xb6\xbf<&|0\xec\xc8\x8b\xbf\xbdLj\xb4\xdc\xc6\xdc\xbfR\x921\xda\xe5\xba\x9c\xbf\x9e\xbb\xc1\x06\xe4\x0c\xa2\xbf\xb3\x8cr235\xd9\xbfv\x12\xbd\x0e\xc9\x8c|\xbf\x7f:\x849\x1d\xbec?~\xaahzv\n\xb8?\xb03f\t\xc2\xa7\x98\xbf\xec\xd0Y\x85\xfa\'\x81\xbfh\xc1\xc1\xef\xa4sn?\xfc\xb1\xd9K\x16\x14\xb9\xbf\x15\x94\x1a\x8d~\x9a\xd5\xbf\xd3\xc4E\xfb6\x8a\xae?\x92\xe7\x06\x1d\xa9G\x85\xbf\xcb\xden\xdb\x9d\xe6\xa1\xbf\x19*\xf1\xd1|u\xc2\xbf\x93\xbb\xbd\xe7\xb6\x18\xd9\xbf\xca\xf8$\xda|X\xc5\xbf,T\x10"v\x8c\x8c\xbfn\xe6\xa0\xcb\x9b\xe9\x94\xbf\x01v\xd0Kgw\xf5\xbf\xc8JV/n\x1b\xe8\xbf\xc7TH\xf0|\x17\xe8\xbf\x01\xeaJ\x9cn\xe1\xd3\xbf\x10\xe6\xf3\xe3\xc3\xa5\xd3\xbf#\xb2\xa7+\xc4G\xa6?\x1d\xf6\xd2U<.\x96\xbf\xf1\xb7a\x89\x0f\x93\x9d?i<\xa6\xdf\x9f.P\xbf\xe7\xa2\x11#\xdc\xb7\xb2?>5\xcbB\xed\x19\xaa\xbf\x843W\xd3\x8f\x9f\xb3\xbfS\xf3\xb9\xde\xcd\xd0\x87\xbf\x938^P\xd6\xa8\xde?)8\xfd;\xc5_\xb6\xbf\xa1\n\x9d]\x172Q\xbf8\x1f\x81\xee\xd8\x08\x93\xbf\x08k\xfc_\x05\x9a\xcf\xbf\x87\xbbs\xbeE\x10\x83?T\x15\xa1\xe5\x00\x96p\xbfsf\xdb\xc2\xce&\x95\xbf\x18\xdfb\x1e\xd3\x14\xe0\xbf\xa50\xc5]\xcd\xac\xb6\xbf\x9d]=\xf0\xd2\xaf\x94\xbf4\x1d\xf6\x8a\xd5\xe3\xc3\xbfy\xa3\t\x9c=\x7f\xe2\xbf\x02\xa4\xa7\xaed h\xbfD/\x86\xf6vn\xc3\xbf\n \xb8gG|\x97\xbfD\t\xd2%\x84y\xed?[}\xe7\x7fh\xd5\x8a?a:\xc7a_\xf7q\xbf\x81\xe0\x80~ \xcc\xb4\xbfA\xf70sN\'\x83?r\x11cqR\xbcq?H\\\xa7\xd2_\x1a\xf8\xbfzd\xbd\xbf;\xc4\xd7\xbf\x9d\x9f\\L\x11\x02\xb1\xbfrh\xa0Y\xd5n\xd3\xbf\xc1H\x8aM\xc0f\x88?!\x03\xedW\x91=\x8f\xbf\x19\x07\x15j\xeb\x86\xa4\xbf\x10+Z\xd4\x0c\x92\xad?\xd4\xfd\xf2M\xa4S\x82\xbf\x16\xae\x19\xd8\xe6s\xd9\xbff\xa2\x18/\xed\xff\x8b\xbfN\x91+\x8f\x11\x17S\xbf\xc4\xb4C}|\xeb\xb4\xbf\x01\xc4\xbd\xdc\xd7\x84\x85\xbf\xe8>\x83kV\xb7`?:C\x0e\xf0\x1e\xf0\x83?Os\xae\xb7\x16\xbf\xc0?^\xcd\x97\xca\x04,\xc7\xbf9u\xe2\x86\xc3y\xaa\xbf\x18$\xb9\xc5\xcf\xaa\xac\xbf0\xdf\xbc\x97^w\xe1\xbf\xfc\xe0Q\t\xa5\xd9\x9a\xbf7n<Z\xae\'\xe9\xbf3y\xec?\xe4\xf9c\xbf\xa2H]\xa6\xc36\xc5\xbf$\x13\xdfl\xd2]\x80\xbf\xcb\xe9Lb\xb8\xd9\xa0?\xe2\x88\x85\x9d\x89 \x00\xc0\xe0\x87\x84\xc17\x16\xc0\xbf\x98\xf0\x1d~Q\xbdt\xbfB @\xbe\xb5\x9c\xa7\xbf\xedX\xf9\t\x18Z\x88\xbf\xeb\x16\'\xca\xbc\xbd\x7f\xbf\xbfS\x1f\x84:\xe9T\xbfmx\xb0heI\xc7\xbfi\xd3\x1b\x92\xbbd\xd5\xbf\xd7\xfd\x92S\x8c\xf6\xe4\xbf\xc3\xec\xf9\x14w\xac\xd1\xbf\xcc\xa4\xa6\x17\xb8w\x84\xbf\xa8\\uY\xaa\xae\xc5?\xcbS\xd1V\x03\x13{?\x1b\xbekj\x8a~t\xbf\x9f\xd1J\xb6\xbf\xdc\xba\xbf~\x04-\x8e\xd3\xc6\xc6\xbf\xfc\x1c)\x0f\x00\x91\xaa\xbfh\xb8[m\x07w\xc5\xbf\xf8\xc1\xa28\xaa*\xbd?\xa7<\x87\xc6<\xf1\x94\xbf\x85~\x06!N\xfe\xc4\xbf\xa0c\xb8\xef+_\xdb\xbfK3&\xd0\x81\x1ew?\xd6;\xe7M#\x96\xf2\xbf\xc3>\x1e*;\xa2\xaa\xbfK\x03\xebLQe\x90\xbf\x8f\x00\xc1\x8f\x80a\x84\xbf1\xd1\xe4\x8cqH\xc6?\xb1N\xe8\x9f\xdb\xec\xaf\xbfe{\x03\x90\xb2e\xe5?\xf9\xdb\x95\xc5#\'\xc6\xbfb\xdc8A\xe7\xdf\xc0\xbf\xc7o\x01\x1a\xb1\xc0\xb9?a\x8fa\xd0)\xc9\xd6\xbf\x9cc\nc\xaaY\x96\xbf\xea\x86\xb4\xf82\xea\xdb\xbf\xc1\xbf+\xc83\x8c\x89\xbf\x05\xb9D\x17\xfb\x8e\x12\xc0)D\xf9\x84x\xeb\x04\xc0\x92o\xaf\x831\xa1\xcf\xbfrQ\xf3\'\xdf\x81\xc3\xbf\x87\xb9\xe9\xcbT;\xe9?\xc0\xd1%1\x990\xbe\xbf\x07:_9C\x98G\xbf\xce\x80l^\xa1^X\xbfV\xab\xcd"\xb4!j?\x08\xd5\x9dqv\xcb\xcb\xbf\xad\x17\x94\xb0\x00\x9c\xa6\xbf[\xe4\xc9/\xbb\x9b\xeb\xbfE\x84\xf9>f*\xa9\xbf\x89R3C\x7f\xbb\x0e@\xd3\xc8^\x18\x0fr\xa4?v\xa3k29\xd1\x82?yM\x94\xf2k\x14z?i\x1f\x08"\xeeF\xd7\xbf\xa35\xa4zzP\x99?\xddy\x00N&\xae7?wO\xe0F\xc8\x1dh?D\xdb\xd4g\x14\x90\n\xc0_\xed\x8f\xd2\x19\xed\xa8?\xef\xd3!9\xdbH\x92\xbf\xfa\xa1\xf1\xb3\x07\xaa\x99?\xbc\xbb\xd1?\x0e\x00\xb0\xbfXT\x1f\xb9\x8csg?\xb6\x1f\xa1\xb1u\x11\xbd\xbf\x90f\x9f\xf0\x94\xc0u\xbfQ\x88\x87)P\x0e\xae?;\xd7\xcb\xd5\x95p\x91\xbf_Z\x1b\xd5\xa5\xc2\x8a\xbf5\xc0q\xb7\xc7\xda\x9f??m\xe4\xb9I\xce\xb7?\xe3v\xe5\rJ\x83e?\xefv\xe1\xe7\xd2\xc2\x12\xc0ukY\xee`\x9e\x93?!\x12|\xe9\xf2\x9bu\xbf<\xddFE\xe1\x97\xa8?{L\x10f6W\x94?\xeb\x16|&V`r?#\r\xf9\xe0\n#\x9e\xbf\xbd\xd9\x19\x90\xdbD\x88\xbf\x8a\xaa\xd1/\xcb3S?\x06\x00\xc0\x089\xe0\xbf\xbf\x00\x00\x00\x00#p\x93\xbf\x00\x00\x00`\xbeti\xbf\x00\x00\x00`\xc2\xb6e?\x00\x00\x00\x00\x826\x98\xbf\x00\x00\x00\xc0VLi?\x00\x00\x00@^\xb4`?\x00\x00\x00 \xe4\x1cz?\x00\x00\x00\xa0=\xc3~?\x00\x00\x00`I\xb2p\xbf\x00\x00\x00 \xed\xd5\x86?\x00\x00\x00\x00P\xc9w?\x00\x00\x00@bLy?\x00\x00\x00`Q[s\xbf\x00\x00\x00\xa0\x10bb?\x00\x00\x00\x00\xa9\x07\x81?\x00\x00\x00\xe0\xdeBp?\x00\x00\x00\xe0GI0?\x00\x00\x00\x80X\xb0r\xbf\x00\x00\x00\x00\'\xe3h?\x00\x00\x00\x80\x9f\xca2\xbf\x00\x00\x00 \xedvg?\x00\x00\x00\x006+\x82?\x00\x00\x00\xc0\xa59\x81\xbf\x00\x00\x00\xc0\xc7%\x86?\x00\x00\x00\xa0/>\x82?\x00\x00\x00\xc0\x99:e\xbf\x00\x00\x00\x00\xbd\xbdw?\x00\x00\x00`;Z\x8f\xbf\x00\x00\x00\xa0\xb8\x01\x97\xbf\x00\x00\x00 #\xac\x94?\x00\x00\x00\xe0\xea~\x93\xbf\x00\x00\x00\x80\xc2\xe2\x90\xbf\x00\x00\x00\x00\x937K?\x00\x00\x00\xe0g\xaez?\x00\x00\x00\xc0Jpm?\x00\x00\x00\x00y\xa9f?\x00\x00\x00@w\xa5N\xbf\x00\x00\x00\xe0\x91\xcb`?\x00\x00\x00@\xdb\xad\x82?\x00\x00\x00\x80G\xdc_\xbf\x00\x00\x00\xa0\xeaE\x81?\x00\x00\x00\xa0\x84O\x8c?\x00\x00\x00 \x999\x91\xbf\x00\x00\x00`?\xc8a?\x00\x00\x00\x80\xf6\xca\x83\xbf\x00\x00\x00\xc0\x11\xe7~?\x00\x00\x00\x80tQ\x82\xbf\x00\x00\x00\xa0\xc3D\x89\xbf\x00\x00\x00\xc08\x02\x80?\x00\x00\x00\x00\x99\x1b\x9c?\x00\x00\x00\x809\x90\x8d\xbf\x00\x00\x00@d\xf9e?\x00\x00\x00@\x19\x81\x92?\x00\x00\x00\xa0\xa3\xb9z?\x00\x00\x00\x00\x08\x9ar?\x00\x00\x00`\x06-o\xbf\x00\x00\x00`\x1e\xc4x?\x00\x00\x00\xc0\xd9Kv?\x00\x00\x00@\xb4\xb6i\xbf\x00\x00\x00\xc0A\xca\x93?\x00\x00\x00 \x1c2\x85\xbf\x00\x00\x00 \xdeIx?\x00\x00\x00@\xb8\x8cs\xbf\x00\x00\x00\xa0\xa3\x00e\xbf\x00\x00\x00\xc0\x8aWb?\x00\x00\x00`GO\x81\xbf\x00\x00\x00\xc0\xcab\x87?\x00\x00\x00\x80\x12\xcd\x86?\x00\x00\x00\xc0e\x90\x90?\x00\x00\x00 +\x01S?\x00\x00\x00\xa0\x9cC^?\x00\x00\x00\x00\x1a\xdbv\xbf\x00\x00\x00\x00v{b?\x00\x00\x00\xc0n#\x88\xbf\x00\x00\x00\xc0\x87\x16\x82\xbf\x00\x00\x00@\xd5Jv?\x00\x00\x00\xa0\x9cm\x85?\x00\x00\x00@c\xa0}\xbf\x00\x00\x00\xc0{\xc4#\xbf\x00\x00\x00\xc03`\x88?\x00\x00\x00\x80}\xd6\x88\xbf\x00\x00\x00\xa0\xc9\x17\x88?\x00\x00\x00 \x89\x8dl\xbf\x00\x00\x00\xc0\xb1\x97\x8b?\x00\x00\x00\x00W3\x83\xbf\x00\x00\x00`\xa1\x95|\xbf\x00\x00\x00@~\xd1w?\x00\x00\x00@zD[\xbf\x00\x00\x00\x00#\x8ea\xbf\x00\x00\x00 Y!h?\x00\x00\x00@\x0b\x9e\x15?\x00\x00\x00\xa0\xed\xbb\x8e\xbf\x00\x00\x00\xc0\xc8`\x88?\x00\x00\x00@/\xf8^?\x00\x00\x00\xe0\x84\xde\x81\xbf\x00\x00\x00\xa0\x1b\xe0u\xbf\x00\x00\x00@$\x96X?\x00\x00\x00\x80\x88\x1f\x81\xbf\x00\x00\x00 a\xfa`?\x00\x00\x00\xc0\xd1Lu?\xc0\xbf/s\x04\xe7\x83\xbf\x97\xe9`J\x9b:w\xbf\xf9\xc7\x921\xd07\x9a?\x9e\xb9/q>\xcfX\xbf\xd5\xd4\x8c\xc0\rCV?\xfa\xb1q\xca\x99\xda@?Pm0n\xaa\xc1[\xbf\x1e\xb1M\x8aM\x12\x90\xbf\x95g\x01\xe3\xf8\x99\x82?\x82\xf7\xad(\x9dT\x9f?&,\xf4\x9a\xb4\xa6\x8f?\x83\x88\xe7\x9a\x03i\x96\xbf\xbe\xe1\xf9\x1d\x1e\xd7\x90\xbf\x83\xed\xe3\x98-}\x89?t_\xa2\xd7f\xfcv\xbf|\xf2\x06l\xf4\xa2\x92\xbf\x15d\xb8j\xf9pR\xbf\x92\xd1\xe8\x01\x18n\x8f?5\x00\x17:\xd2r\x9e?\xaa\x9d\xa8X)=\x81?P\x1a(\xb1\xad\xecf?\x9e\x1e\x9c\xd5\x12\xff2?~\xe5\xfdj:L\x87\xbf\xd6A~\xe0\\Qi\xbfbI/\xef,\xdc~\xbf\xc6\xd9\xf8\xa4.\x05Y?\x06\x112LOR\x83?\x1b\xaf\xd6\xaa\xe7DV?\xe3r\x8bE\xe4\xd6u\xbfz\x91HI\xfbU\x90?Jwz`\x12{^?vA9d\xba V?\x02\xca\xf3a46Z\xbf\xc5\xe9\xf0\xf8\xb8\xbb{\xbf!\x9c\xb0E\xdb\xbb\x8e\xbf\x0e\'\xb4\xef\x03\x01\x83\xbf|V\x97\xe4 \xa6\x95?I\xda\x0eO)N\x81\xbf\x1ea\x91\xc2\xb7o\x92?kG\xc1\xdf\xd2>9\xbf\xd09R\x08\xbc(l?b\xc9x$P\nR\xbf\x96\xb8\xe3\xc8\xfe\x18z?\xbc\xef\x94TN\xbec\xbf\xd1|\x9b\xadtx|\xbf\x92d\x17oC<\x8a\xbf\x171\xcf#\xdc\xd7\xa0\xbf>\xf3\tK\x9f\x93\x97?\xa3kx\xcfD\xfb\x80?\xfd\xads\xa8^\x10G\xbf0\xc1\xd8\xdc\x903\x92?\x0f\xc6\xa1\x91\x08Hr\xbf\xbd\x14)\x137\xed\x88?\r:\x0c\xa9l\xdc\x96?\xe0\xb7\x86\x02Z\xcd\x18?\x89V~I\xe9>\x88\xbfF\xca\xe2\xe0\xf9\xd8\x88\xbf)\xa1\xc05\xf1\x02\x96\xbf\xb8\xf9\x07\x1d\xc8\xf9\x83?\xf8\x8f\xd8\xcd1dk?~Y?\xc6\xb1\x04d\xbf\xe4\x15\xa1,\xc6\xc5q?x\xfe\xc1=o\xfbz\xbfNJ*\x91\xc8\xabu?/+|\xf1|j\x93?=ph\xce\xad\x94\x84?\xf91v\xde\xd7\x8c\x84?W\x98CU\xe7\xe6\x8a\xbfR\x93\xdd;n\x1a\xa5?l\xaa\xcba\xc0\'\x83\xbf\x1b@\xebVQ\x9d\x86\xbf\x06E\xf1M<Lv?\x11\t\x03p\x89\xc5\x90?\'\xcdI\x17\xde\xe7[\xbf\xbc\x8c\x98\xc6x*\x86\xbf}\xa4\x18\x1elu\x8e\xbf\xf2\\\xec\xc1\xbf\xcf\x81?\xdfe\xfd\x99\xfd\x9b~\xbf\xe5&\xbdO\x191S\xbf0\xe3?Ys\x9c\x93\xbf\xc5\x82\x11\x1b2\xc0\x80\xbf\x9c\x1eQ?\x07na?yTD@x\xd0\x94?\x14\xcc\xa9p\x8a\x16G?f\x90?N\xeaz\x8d?\x86\xa5\xcc\xe2m\xa7\x8f\xbf\xf9\xde\x89\xca5^\x98?+rxO@xt\xbf\x84\xd5:u\x80\x83\x85?\xee\xe9V\xc0\x7f\xac\x83\xbf\xb3\x1eC\xea2\rp?\xa6q\n+\xc8)k\xbf\xe7]\x0e\r\xfby\x9e?#~;\xf1\xa9q\x8c\xbf\xe0\xba\x9a\x9a!Pt\xbf\x01\xd1\xf2\x9e\xdd\x99\x86\xbf\xe4 \x19\x8d\xe2\xcdX?P\x80\x85Q$\x7f\xaa?\xbbdX\xb8\xa2\xc4\x8a?6\xff("u\xddS\xbfm\xfb\x97\xfb\x1a\xe3n\xbf\xac\x1d\xc8\xb9\xaf\x80\x80\xbf\xb0\x02\xfd\xa8f0\xd2?p\xc7p\xe9\x91-\x87\xbf%\x9d@\x9d\xd1\x80\xb6\xbf\x99f\x86\xdf\x1d\x80\x88?\xa5\r\xd0\x07%7\xb3?\x84W\xe27\x9e\xf5\xbb?\xaf\xb9\x8bx\x93\x16O\xbf\xde\x90\xad\x91\n0\xa9?\xce\xe2\x91\xee\xdd\xe3\xa9\xbf\x1b.x\xee+A\xa5\xbf\x8ewW\xe6\xcd\x86\x90\xbfpG\x0e\xb3\x0e\x17\x91\xbf\xff\x97\xab\x1ck\x92\xa8?T\x96\xf7f\xf2\xaa\xb4\xbf\x8d\xd3Zy\xea\x99u\xbfXm\x9d\xaeN\xaa\xfb\xbfF\xb7\x8f\x94\xd2o\xcf\xbfr\xa7\xabjp\xa0~?\xf0\xe7\x10\xe1{\xff\x84\xbf\x9f\xcd^R\x96\x12_\xbf \x96\x84]\xf3\x9a\x83?\xf4\x01\xa6Q\xf4\xcb\x86?\xc3\x9b\x86\x07\xd1\xfc\xb9?\x956\xc2\x17/\xadn\xbfp\xa6uXzp\xa2\xbf\xa3Z\xaao\xaa`\x9b\xbf\xb6,v\x17\xb9\x04\x91\xbf\x8d<\xf0\xb0\xb7 \xdd?\xd2b\xf0\xbc\x9b\xec\x88\xbf\xac>\xeeh\x8a\xdc\x8d\xbf\xbc\x18B8\x85\xf4\xd3\xbf\x88,\xc2 o\x1a~\xbf5\x15\x84\xad\xece\xa2\xbf\x07\xd3f<\x88h\xa7?\x93Xv[\xc9&\x91?\x9f\xea\x98b}\xb5\x90\xbf\xb3\xa5\xa4\xbb\xf8\xfc\x8d?\x19\xb3w\xf1\xbb#\xa3?\x1d;\xb1\x0f\x08[f?\xbb\xb0Y\xcf\xee\xe0\xb2\xbf\x8dwZ\x81\x9b\xd4v?\xa5\xcb\xfa\xcb\x87]w?\xc4\xab\xecd\xd2\xc0U\xbf\xe5\x97:\xbeV9\xbc?9\x9b\xf8KV\xff\xff\xbf\xa1\x1e\xbc=\xaae\xe5?\xb6\x1d\xafq\x8e\xba\xc4?\x04\x06=]AR\xcd\xbfX\xb5h\x13\x81\xbb\xbd?:\xcf\xa8\xf8\x12\x13\xb6\xbf\x82)\x85\xa9S{\x92\xbfo\x8c\x106/\xc8\xc6\xbf_\xa3\xfa9;\x86\x9a?\x15*\x98+\x9cH\x10\xc0\xef\x01\\\xfb\x8b\xae\x01\xc0c\x84\xfdj\xf3\x92\xb9\xbf\x02\x96\x04\x85e\xbb\xcf\xbf\xab=\x9fp\x13\x90\xf4?\x10*=X6\xba\xc9\xbf\xb3/\xabu\xb2D\x8e\xbf\x97]\x18s\x9d8\xe7\xbf\xdc\xe3pT\xa3#o?Q\xa9\nJ?\n\xe7\xbfr+\xca\xa7\x05\xa6\xb3\xbfhA\xac\x0c\xdcF\xcd?\xe3\xec\xca\xd7\xdd\x9c\x83?\xfd\x91\xae\x910e\x08@r\x7f\x90\x8f\x97@\xa4\xbf\x80\xb0\x00\xda\x17\xf0w\xbf\xf3\xa6\x16\xd0u\x0c\x97?\n\x9da14\xe2\xd9\xbf\xe1\xbd\xcb\xe4\rG~?\x86\xbf\xb5k6\x15d\xbfS\x07\x8c.T\xc1\x81\xbf\x90\xe5w:\x9dR\x07\xc0k\xa5\xd3\xcfX.\x7f?\x1fX\xd6%\xa5+\x84\xbf1\x05\x014x\xfd\xb5\xbf\x83Hg\xb5\xdf\x8a\xa6\xbf\xc9I\x06\xfa\x8d\xd8v\xbf\x9c\'k\xb2\x84\x1f\xc5?\xd3\xd04\xe1\xffE\xe7\xbevpl\x0e2\xad\xc6\xbf\xa3Lq!\x1dp\xab\xbf\xf3\x86\x1b)\xf4\x97\x83?\x17\xd6?R\xec!\xb2\xbf\xf0\xd2\xd8\x00\x8ex\xaa?r\xa1\x0e<S\xc3k?\xb6\xd7L\x10\xd2~\x10\xc0\x11\x91\x19]\xb4\x90\xa8\xbf\xdaU\xa0[\xde\xe1\x9c\xbfX\xe7\xa3\xfe\xdc<\xa3?\xf9^\xe8\x93\x99\xf1\xa9?e\xeb\x9c\xf9T^\x91\xbf1\x8a\xcdc\xdf\xad\xa1\xbfn\xfe\xef5\xb1\x94\xb4\xbf\xa5v\x05\x82r;\x80\xbf E\xf4\x7f\x02\xf0\xc8\xbf\x00\x00\x00\x80\xb9\x9c}?\x00\x00\x00\xe0pAR?%!\x17\x9a\xbe\x90\x83?\x00\x00\x00\x00\xcd\xe7\x8a?\x00\x00\x00\x80\x91\x87F\xbf\xd8Vc\xc7^\xe4p\xbfg-\x0f\xa7\xb0m\x85?m\x83\xa9\xdd(\xbcj?\xf8\xb6\xb0!\xd4\x13s\xbf\xc8\x9c\xfdr\x18\xc9|?\xa9\x8e\xd7\xa5\xc5i[\xbf\x87\x98\xb2*mi{?\xe5\x16\xc1\xcfq\xa0<?r\xa2?\x9d\xd5(\x84\xbf]\xc4%\xd9G\xf4\x97\xbf\x08\xf0\xa3\x8d\x87\x80|?\x00\x00\x00\x00\x12\xe9\x90?\x00\x00\x00`\xdd\xfeS\xbf\x1dK[\xd2\x1b\t\x80\xbf\x00\x00\x00\xa0k\x88y?\xe1\xfe+\xc1\x91Y|\xbf\x00\x00\x00\xa0lLy?d\xd1qZ\x81W6?\x0e\xe89\xae*\'v\xbf\xdc\xf0\xf4\xf4\xa2\xaeX\xbf\xa9\x84\xf6\xe8\xeec\x99?\xb7%T\x97\xc1\xcbr\xbf\xff\x7f\xb5\xef\xc9\x1f\x84\xbf\x00\x00\x00`\\\xf4\x8d?<\xe6\x98\x89=\xf4t?\x00\x00\x00@\xab\x15\x86\xbf\x00\x00\x00\x80\xcb%c?A1\xef\xb8\xfb\xcaY\xbfUO\xb1\x9f\xa3\x95y?\x86\xfd\xcc\x06T\x8by?\xf6\x8b\xbe\xbc\x15\xea\x87\xbfI\xf1\xde\xf7\xfe\x99|\xbfi\xc8R\n\x10\xf6\xfd>\x8f\x86{:\x83\xf2x?\xc8ss\x8d\x877\x87\xbf\x00\x00\x00\x80\xc6_\x89?\xf2\x8f\xc7\xe5\x9a\x1d\x89\xbf\xb3\xcf\x92\xf4\\z\x7f?\x00\x00\x00\xe02\x07\x97?\x00\x00\x00\x80t\x04\x7f\xbf\xafh[=|\xb7\x82\xbf\x00\x00\x00\xe0\x05\xab4\xbf%7\xe3\xf1\xc5\x13y\xbf\x7f$}Y\xdd{P?\x00\x00\x00 \x08yz?\x84\xea\xde\xeew,\x94\xbfg\x1b]\xbc6\xc4\x8f?\xd0\xcbZ\x1d\xcf\x84U\xbf\xc1\x8f\xab\x86\xfe\x97j?\x00\x00\x00\x80\x86\xd2\x87\xbf\xd0\x89\xff:\xfd\xbe\x84?\xa7&\xd2\xae\xe6\xcaV\xbfo#c\xa6\x9d^m\xbf\x90\xf3\x80\xa4a\xa5d?M\x19\xbec\x0bC\x85\xbf\x00\x00\x00\x80\xeb\xa9X\xbf\x00\x00\x00 \xe3\x1a\x89?\x00\x00\x00\xc0\xa3\xa2s?\x00\x00\x00\xa0\x8d\x9e\x82?4\xe0\xa2s\xc1\xaah?\x00\x00\x00\x00\xcc{\x84?1\xa8\xb6x7\xc7d?\x15N\x13\xee\xce\x8b\x86\xbf%\x90>S\xa6\xa1\x84?HtF\xd9\xb2\xecC?\x00\x00\x00\x00*\xe5\x84?\xb0?\x9c\x1d\xcc\n{\xbf\xd3\r\xdf\x1cgvx\xbf\x00\x00\x00\x80&\xd5\x98?\x00\x00\x00\xa0\xba\x07\x86\xbf\x00\x00\x00\xe0`\x10\x85\xbfs\x08\x04A\x1a@\x14?\xfaO\xbfZ\x95$o?\x00\x00\x00`B\xc0m\xbf\x05\x91UG#R\x81?\x9d\x89\xc9x\x1b\xbds\xbf\x00\x00\x00@5\xcei?h\xc3\xe8i1\x92\x84\xbf\x00\x00\x00\x80\x894W\xbf\x1d\xcdj\xc6\x81QP\xbf\x00\x00\x00\xe0N\x01\x86?\x00\x00\x00@\xc0{\x84?\x02w\x87\xc4\xcd\xbbn?:E\xbf\x11\x8b\x90p\xbf\x00\x00\x00`\xaa\x9c\x86\xbf\x8f.\xf5\x97\x8d\x0fo\xbf\x9c-h\x9e;\x96\x94?/\x9f\xb5O9\x11\x9c?\xc3l\x1a\x08\xc0;S\xbfe\x9c\xb6\xe8\x86\xbav\xbf\x00\x00\x00`4\xe9D?\x00\x00\x00 3\x11\\\xbf\xf6\x8f*\x10[\x1e\x8e?\x00\x00\x00`\x04V\x8d\xbft\xfa\xd5+\xe0#\x1e\xbf\xbb\x03N\xa8\xb71Z?-\xca\x7f\x93jq\x9b\xbf1\xea\xdd\xb2%\x8e\xc5\xbfC\x05\xbe\xa6I p?\xdc2B\xd8\x87$\x90\xbf94T\x12@\xcc<?u\x91\xedE\x80\x06e\xbf\xccQ\x0b;fo\xa5\xbf2\xa9\x0f\xab\xc2f\xa8\xbfr\xa4\x1a\xea\x9b\xf6\xac\xbf|Ins)s\xa9\xbfv\x11\x11"\x91]\xc4\xbfz{2\x8e\xbaH\xa8\xbf95\xa9\x1c\x8f\xe8\x91\xbf\xdaf*[\x16\x1d\xb3\xbf\xc8r#\x15\x03\x88\xdd\xbf\xfc\xa4~!\xa1C\xb6\xbfb\xdb\x9a\xf2\x18\x80\xcd\xbf(\xcb\x13\x87No\xc5?>\x8d\xc8\xd2M\x18\x81?\x05)\xbe8\x07\x83\xa2\xbf-V9\x94u\xff\x87\xbf\xc2\x12\x1a\xbc\xaf\x9fp?\xdd\xaflx>\xc5b?4\xa9\x07M\xd2\x15\xbe\xbf5dc\x1fbM\x96\xbf\x91\x05W\x89\xfa[\x9f?\xc0\xe7,\xa8\xa60\x92?k\xff\x82lp\x1f}\xbf\x10D\xfe0B\xb9B?+\xa6Y\x18\x8bG\x9d\xbf:\x19Q!\xf4\xebp\xbf\xe7e\xa3\x12\xdfV\xcd\xbf\x866<\xb6~d\x94\xbf<kb\nmU\x92\xbfy\xab:.\x06&\xd3\xbf\xc4\xff^\xa0d\xa8\x91\xbf3\x83\x06,w\xb0\xb7\xbf\xd2\x96\xcb~\xe3\x94\xc8\xbf\x1e\x9eS+\xd1U\xa7\xbf"\xb4\x8e\xc4H\xb3l?\xean\x1c]X\xb2\x9c?7!\xf7}>\x8d\x93\xbfg\x98\xdb\xab\xed\xdad\xbf\x9a\xbd\x9a\x06\x18h\x82\xbf\xef\\ \xbd\x0c-\xc1\xbf\xc5\xf6=\xcf\xea\xf8\xd3\xbf\x90\x0eY\x9b\x98w\xc3\xbf?{3)"\xf8\xa4\xbf\xf6$\xf797:\xc4\xbfF\x06W\x19\xb4\x98\xa4\xbf}$\x0c>2\xe9\xbe?\x90l\x11j9+\xb9\xbf\x10\x15\xce\xa9\x84\xda\x7f\xbf\xf6\xff!\x1e\x94\xb0\x8f?x\xbe\xb39pK\xbf\xbf\xd5Fy+t\xfa\xb7\xbf\xf5\xcc\xdb\xc9\xc3\x99\xbd\xbf\xc0\x80\x81\xf1\xeb\xab\xc7\xbfd\xeb\xc0\xe9\x1c\xc2\x93\xbf\x1e\xd5r\xd9v9\xd4\xbf\xaa1\x1d\xcc\xfb\xf7\x88\xbfK\xe6\xff\xba\xbbl\xd5\xbf@\x06\x9f\x0b\xeb\xc0{\xbf,b\x1d~\x98\xd5\x9a?\x8a\xff \xa1L\xc1\xb6\xbf\xc2\x15\n5\xde1\x85\xbf)\xdbe{\x92YN\xbfNF|E\x18y\xe2\xbfG\x16~\xc9\xc0\xa1\xd3\xbf\xb2hr\xf0:V\x8f\xbf\x85d\xf1~{\x15]?\'\xeeW\x0b\x02\xcc\xbe\xbf\xf2\xae\xde\xb0)vu?\\@E\xb6\x94\xa7Z?\xbb:\xb0\xddkxv\xbf\xcb=\xe1s:\x14\xcb?o<\x0euV\x97\xa5\xbf\xb7o\xd6\xba\xbdR\x92\xbf\xe4\xcb4mY#\xb4\xbf>\xd9\xa4\x9c\x97\xbc\xc3\xbfU\xbd\x8a\xa7\xf6\x03x\xbf4\xac\xad\xd9_\x07\xbc\xbf2\xca\x00\xf1\xee\x93\\?\xe0\xad|\xdeL\xcc\xb1?o\x16\x06D\xf3\xe2\xad\xbf\x04\xdedU\xfc \x84\xbf\x10j,e#S\xd2\xbf\xc7\x19E \x87L\x81\xbf\t\xf6\xbe\x01=\xf2x\xbf\xb1wc\xfc\xe3\x98\xc5\xbf\xceh\x0b\xd6\x8cT\xa7\xbf.z\x8f\x040\x92\xa4\xbf\xeb\xe2\x12L4z\xd6?i\x0e\xb8\xd7k!\xa7?]R8\xfb\x8d1\x8c\xbf!\xd0\xc6\xc8BP\xc2\xbf\xdcH\xd3\x19\xc0\xee\xc3\xbf\xb1\xfbi\xb8\xd9\xb8\x8f\xbf\x18-o\xd2v\x06\xa6\xbfm\x9c\x82\xd08\x8as?\xc4LL\xa0E\xd9|?\xcb\xa8\x86\xda\xa7u\x8c\xbf\x00\x00\x00\xa0\xf8\xa2g\xbf!\xc9\xab\x1e\xe6S\x84\xbf\x96s)\x7f\x82\x83x\xbf\xde\xbboZ5Ov?\xc6\xcbox\x89b\x83\xbf\x13^X3\xd6\x10\x91?%\'Rc\x87\xd2k?\xb0\xb3_\x90{\xb5\x8a\xbf\x97\x1f\x11a\xf2\x18\x88?\x89P\x16:\x816\x85\xbf\'\xf6o<Y]\x99\xbf)/?\xc7\xe35r\xbf\x00\x00\x00\xc0\xc5\x1dq\xbf55n\x8a\xf4\xff\x06?\x9ba\x95\xb3\r\xa3\x10\xbf\x8f\x92O\xc2U\x89u?\x00\x00\x00\x00\xaf\xd1v?\xa7\xb6\xf4\x90Y\xe4\x8f\xbf\x00\x00\x00\xc0<\xd8\x8a\xbf\xca\xa6A\xb6\x82\xee\x8a?R\x96N\xb2\x81ew?\x0eg\x14N\xcdM\x80\xbf@\x87\xee\xff\x1b\xf4\x84\xbf)GJ\x83A\xdf:?\xc6\xa1\xa9\xf8at\x89?\x00\x00\x00\x80Ka^?\x91\x1c\xcaN\xf4o\x83?0\x84\x98\xa9\xad\xabp?\x00\x00\x00@M\xcfk\xbf\xf1\xc9\xa1\tF\xaa{?\x9bb\x1e\xa5\r\xfa`\xbf\xd9\xbe\x84}/w7?\xa7\x99m\n\xca\xeaY\xbfN\xe3{\x90\xff\x89\x86?{=\xe4\xc8=IX?t\xfa|\xe4\x86WD\xbf\xe2u\x8d\xc4\x85}c\xbf\x00\x00\x00\xa0\x8d\xf1\x8b?Q\xb1\x1bXc\xc8x\xbf\x12\x1d\xa7\xa6\xab+a\xbf\x00\x00\x00\x00\xdf@\x1c?\x00\x00\x00@\x96\x13i?\xa4f\xbb\x94\xfa\xbc\x95?\xc6\xb5M8\xcd\x17h?DL\x086T\xfb2\xbff)$i\xbb\x03\x85\xbf\xbd\x9e\xda\x0b\xdd\x03I\xbf\xebJ\x8c#\xc8nq?g\xd6\x94\xe7\xe6\xf5\x80\xbf!\xec@\xdd?\xd9d\xbf\x11\xec\xbf)\txq?\x00\x00\x00\xa0c9Z\xbf(FT\x17GT{\xbfc\xad0e\xdf\n\xa1?F\x9c\x83y\xa9\x9eM\xbf8\xf1\x1f\xbf\xc7\x93l\xbf\xd8\xa3\x83F\xfd\x02m\xbf\x84\xb8\xf8\xeb8{\x81\xbf\x00\x00\x00\x80\xc4\xe9{?\x94t\xa5\'Z\r\x84?\x00\x00\x00\x80\x15ao?\xb0\xbe\xb4\x19\xcf\xc0x?\xc1\xf4\x0cp\xc1r\x8a?*R\xdc8\ti\x80\xbf[\xf0\xa5\xb4\xcbuz?\rb\x824\x947\x88\xbf\x8aj>\xe7R\x06\x98\xbf\x00\x00\x00\xe0\x110\x92?\xc1A\x88 \xfb\xe5a?\t\xf7hP\x847l?\x00\x00\x00\xe0\xf0\x83\x85\xbf\x00\x00\x00 \xe2\x95\x95\xbf\xa9\x99\xa8\xc0u\x84w\xbfAE\xb1\x1e\xaa\x14J?\xd1\x1do\n\x18eP\xbf\x00\x00\x00\xa0S\x93y\xbf|\xd9\x1b\xb4d\x0fy?,\x96\x01\x01tJm?\x00\x00\x00\xe0\xbe\xcd}?\xcb5\x80\xb7\xc7B-\xbf\x00\x00\x00 <\x99G?\xc7O\x9b\x9f-\xe9\x8b?`\x03\x08\x9dS7\x90?\x00\x00\x00\xc0\nc\x97\xbf#u\x08Y\x87.\x89?pf\xda\x8d\xbe\xabd\xbfva\xf2f\x1c\xa4\x92\xbf\xe9\xd2\x9d(>\xfa\\?\xec\x04y\xa7"V\x83\xbf\xb8\xdd\xeaf\xecOQ\xbfB\xaa6\xd2\x18`Z\xbfE*\x8e\xd0\xd4E\x89\xbf\x00\x00\x00`\xef\x0e\x8d\xbf\xd7\xc5\xcb\x00\x04\x16P?\xfbF\xe81\x8a\xd8q?\x00\x00\x00\x80\xa3?w?;\xa4\xb5S\xd8\x03\x84?J2K\xd2\xd5\xe6\x97\xbf\xe0\x15\x99\xec\xb6\xec\x88\xbf\x1d\xf4\xaa\x8f\x8c\x0c\xc8\xbf\x9c\x88e\x95{\x19\x88\xbf\x01}\x8a\x19#J\xc4\xbf\x18N\x04\xdd\xcc\x06\x97\xbf9\xbe2\xdd\xe6\x06\xd9\xbf\x89w\xa1S\x03\x1d\xbf\xbf\x13\xbax\xc7<K\xb9\xbf\t \x8a\xc9v#\xbf\xbf\xc6\xcc\x86\'\r\xae\xd0\xbf]^K4\xc4z\xc4\xbf\xdf\xcb\xf8;\x83P\xdd\xbf\x89\nW\x91*\x8c\xab\xbf|\xca\xb1:\xe5X\xb6\xbf\xec|\x19bsO\xa1\xbf\x0e\xda@Qg#\xc1\xbf\xcc\x96c\tqZ\xc0\xbf\x89"\x1c\xe7\x98S\xb0\xbf\x02\xafja\rUT\xbf\xe4WR\xdc\xb33\xab\xbf\x85\xbdL@\x0e\xce\x8e\xbf\xba\xecd\xf4q\xe9\xa0\xbfn\xff\xea\xebA\xd4u?\x1b\xdc\x9et\xbd\x86\xc6\xbf c\x92\xa5\xab\x1a\xcc\xbf\x0c\x1a\x0b=\x8az\xd7\xbf\xbc\xc9\xb84~\xa0\xc3\xbf\xc3\xd5)\x1c\x89.\x93\xbf\xa4%\xac\xdc\xac-\xc7\xbfyb,{\xc1\xac\x9a\xbf\x85j\x08\x0f\x93\xb2q?\xafT"\xd0\xe8U\xc5\xbfjM\x862\xf6\x07\xc9\xbf\xc3\xa3\x14b+\xf8y\xbf\x97\xcd\x07#\xe06\xb4\xbfA\xda\rUO\x84\xb4\xbf\x8e\xc8<\x89\x87G\xc5\xbf\xabey\xfc\xc6D\xa2?EO?p\n#\xd1\xbfi\xd8\x08\xc1eU\x8a\xbf\xc2=\xee\x81\xdcq\xe4\xbf\x01\xca,|\xcc\x97\xbd\xbf\x02\xaa\x90\xb6\xf0Z\x82\xbf\xa1\xca\x12\xb3-\'\x8d\xbf\x18\xe6;\x02s\x8b\xc1?\xe6\xea\x05\x8fb>\xb7\xbf\xe0\xedBN\xdb\xd6\xcd\xbfhY\xc9\xfd\x98!\xca\xbf\x83Emb\xb9\x0e\xb5\xbf\xc8\xcc\xc8\x83\xdd\xb2\xd7\xbf\xc1}\xfb\xe1b\x16\xd4?/\x82\x88?\x1f\xa9\xcd\xbfh\xb2\xa7\x1a\x05\x1c\xd6\xbfu\x7f\x05\xd1 \x83\xac\xbf\xf67\xed\xf2o\x14\xb7\xbf,i\xc8\x8a\xdd7\xa1\xbf;U$\x9e\xbcO\xbb\xbf\x99\xcc%\x8d-\xfa\xd0\xbft\xb9\xc2\x04\x9dm\xd9\xbf\xe1\x9c\xe9\xa0\xdcy\xc7\xbf`\x99\xcf\xfe5<\x84\xbf38\xa0}\x99\x8d\xc8\xbf\x8d\x05\xa0\xbc6Is\xbf\xb8\t\n\xce\xee\xf1\xaa?V\xcc\xb0_2\xa3\xa6\xbf\x8b\xe4Q\xe1\r\xf1\xe1\xbf\xf9\xbe_S\xef\xcc\x96\xbf\x8a\xa99\xe2q\xca\xe5\xbf\xf9\x82\xc2 3\xc4\xd4\xbf\xd8{\x03W\x96)\x9a\xbf\x12\x1e_=\xed\xfe\x96\xbfjm\x84\x89S(\xc5\xbf\xf6\xc0\xb4\xc1\x1fp\x9f\xbfy~\xb8\x97\xe5\x85v\xbf\x81\xbc\xae\xea\xf4\xa5W\xbf\x06K\'P\x96\x88\xd1?\xee\xb1/fx\xd6\xc5\xbf\xb7}\x11\xcc\x94\x9c\x81\xbf\xb6\xa2jUh^\xc8\xbf\xf7\x9b\x94\x08\x1fj\xb0?\xe4&\x85\x8d\x96B\x9d\xbfZ)2<\x91\xf1\xc3\xbfc\x9c\xee\xef\xc6K\x89\xbfmz\xa9\x86Ql\xe9?0\x9a~8\xf47\x86\xbf\xd8\xf3\xfa\x1e\x07\x84z\xbf\xfb\xf12}\xe9)\xd1\xbf/_\x85\xe0\x8d\xef\xb6\xbf\xc8\x82Z\xa0\xcb\xd0\\\xbf\x809\xe5\xba\x1b\x03\x81?\xe4\xfa\x1f\xf1\xe6\xf0\xca\xbf\xb8\x89\xba\xa8\xa2<\xa8\xbf\x93\xe6 \r\x16\xb6R?CYs\x85\x02u\xaa\xbf\x9f\xba\x16w=\xae\x8a\xbfd\xf1!\xa0\xfd\xda\x93\xbf5\xc2\xe4+\xfd \xcc?\xc3=\xfe\xaecHg\xbf\x135vt\xc8\xea\xd3\xbf\x82h\xcft\x96\xbb\xae\xbf\xc8\xa3!\x13~O\x7f?\xb4\xa9\xbbq\x12\xd9\xc6\xbfq\xc7\x86\x9fZc\x87\xbf\xdc\xc9\xa9\x16\x82v\xa0?\x1b ;\xb8\x0f\xc2e\xbf\xf5\xf6\xc8\xa1\xc5(\xc0\xbf=\x18\xf3Ds\xbc\xba\xbf\x08\xd9\xf8\xe2^\xce\xb1\xbf\x10\x9a\xc82\xe3\xf3\xb1\xbfr\xfe\xf2u\xcap\x86?\xa7\x1b:\xd8l\x94\xc6\xbf(<\x02?\xfb\x0f\xc5\xbf\x98\xfc!"\x9f\x18\x99\xbf6\xa8\xbbc\x14F\xc3\xbfX\xae\xdfP-\x8f\x94?\xed\xd0\xa2j\x89\xb2\x91\xbfV\x8e\x17\xee0P\xe6\xbf\xa0\xbcU\xea\x9f\x9f\xd5\xbf\xd22A1\xbc\x994?\x81q?6yE\xc0\xbf\x98T\x1f\xc9T\xb9\x88?\xb4\xe4\xd6\x86\x94\xf6\xa0\xbf\x8a\xd1f\xab\x99,\xaf\xbf\xd3\x12|\x19g]\x9f\xbfx\x1b9\xdbfV\xa3?\x8b~\xb1%#\xe4s\xbfl=\x9d)Zm\xaa\xbf\x1f\xdc`\xe6k\x00\x98?P\xf3\xc23\xa0\xd4\x96?\xd0\x0c\x07j\t\xc9\x9a\xbfu\xb2\x81M\x05#\x8c\xbf\x8bZ\\!\r_\xac\xbf\x19i\xc6\xe8\xc5\x1f\xb7\xbf\xe4\xb4>\xb6?\x8b\xa2\xbf\x99-^\xd0O\xdc\xcf?a\xa14w\xc5"\x80\xbf\xf0.`\xff\xc2\xbdV\xbfT!\x83$4\xb5\xcb\xbf\x9c\xb1\x98\xa2Zf\x90?h\x99c\x87<Hu?\x90V\xe4\xb1\xda?\xa4\xbf\xad#\xaf\xb4(\xd2\xb4\xbfs*\x10yI&\x86\xbfzv\xa0\x94\x83\xbf\x94?\xc3\x98Ls\x1f(\xc2\xbf\x151\x81\xf5\ra\x06\xc0,;\x08\xa5@%\xd2?\x81\xa3\xb8\xfc\x1c\xbd\xaf\xbf\x91\xcai\x1f\'\xb7\xa1\xbfL*\xb6\x03\xc9\x9c\xb2\xbfVJk\xba\xee\xed\xc0?QEv\x9fP\xbb\xbf\xbf\x8d\xbb\x87\x8c\xb9\xb5\xd3\xbfs\xcb\xaa\x9a\x02\xb2f?\xf84i\xc6^\x95\x00\xc0\x08\xfd\x9e6\xc0\xf0\xec\xbfH\x0e2N/d\xd2\xbfR\xf6#\x8c\xcew\xcc\xbf(\xbb\x8c\xd2\x16\xb1\xf6?\xd2\xe5{\x11\'`\xb6?\x88\xf7\xc0?\xd43}\xbf\xb3\xb0\x95\xa4\xe5\xc8\xea\xbf\xba\x81\x84\xc5m\xbe\x84\xbfn/\xc82\x1c`\xed\xbf/3\x8f,\x8f\x99\xb0\xbfp\x93\xf3\xf1\xaf\x19\xa3\xbf\x83\xa5u\x95\xb8@\x83?\x88Lk\xb1\xdba\xe7?\xe3\xa3\x0c\xd7`\xdc\xc2\xbf\x1d\xed\xda>\x11\xf7\x90\xbfJ+k\xe7Q\xbc\x89\xbf\xdc0\xb0X\xef\x8a\xc9\xbf\xe1H\xb1 \x88yr?;v\x9f&\xb1\xa9v\xbfi\xefK\xae\xa9\x1a\x86\xbf\x81\x15\xd1$4)\xf2\xbf\x98\xe8\xb5\xb5\xe8\xd6\xa1\xbf\x11\xcb\xd6\xd89_\xa1\xbf\x96-\xe4\x11\xae8\xd2\xbf\xe1C\x1c\xb7\xd9\xdc\xb2?\xb4yL\xdf\x96\xf2\x91\xbf\xb8\x98g\x96\x0c\xab\xc9?i\x97\xad\x89\xefG\x89\xbf\x94\xde\xb5\x95\x11"\xb4\xbf\xe5>\xd1#E\x1cx\xbfH\x8dN(\x99;j?\xb7\xc36\xf2\xdc\xb0\xaa\xbf\x81\xdaK\xad\xe4\xd8\xa4?\xf5\xcdb/\xd3\xf5{?\x1e\x81\x18\x0b\x94X\x00\xc0\x84u!\x05!v\xc5\xbf\x98\xbd"o\xebz\x92\xbfJ\xf7\x13B\x0b\xce\xbe\xbf\xf0\xb1\'\xaf\xfd\xe5x\xbf\xb4\xfb\xe6|$\x1d\x8c\xbf\xbe\xb3\x84\xc9\x99\xd3\x9c\xbf:.s^DQ\xc8\xbfeW\xf8rD\xbey?\xe9\x93 nQS\xd2\xbf/\xda\xebZ\xfa3\x7f?\xae\x8a\xef\xa9\xdb+q\xbf\xbb\xfe\x96\xd7\xdc#\x83?nMv\xab\x9fD\x89?8\x95\x9ay\xb2F\xa2?-x9\x1e\x1a\x92\x99?\x98\xb1\x19\xeb\x06:\xb3?\x91\xc2\x80$\xfeu\xa3\xbf\':\x90\xf7a$}?/\xd4\xfd\xfb\xc6\xd8\xa3?\xe0Hb\xc02.\x93\xbf\x05@\x81v\xc8C\xbd\xbf\x88\xaf\xe4\x84\xa3\xe7\x8c?P:\xd2\x8f\xa5\xa2\x84\xbf\xbc!\x939W\xbb\x9a?\x1a\xd8\xf1\xeaJ\xa9\xcf\xbfR\x1a\xf5\xa2\x0bE\xb0\xbfGU\xceA\xeeO]\xbf\xf5\xbe\x1a\xdf\xde\x15\xd0\xbf`\xfc\xdcV/\x1a\x80\xbf\xd8\x1e\x0e\xaea\xf4s\xbf\n9\x14\x13\xbb\xc8\x81\xbf,\x86\xd9\x85 \xac\x97\xbf\xc6|\x05\xa7\xd7\x97e\xbf\xba\x96o\xc7\xabU\x83\xbf\xc7\x81\xfb\x8a\x8a\xca\x9d\xbf\xc0W\x0f\x9c\n\\\x86?\xcbV\xa6\xf3kVB\xbfj)[t\x01\xc3|\xbf\x1bo\x830\x83\xe8\xb9\xbf0\xfcN?V\xa7S\xbf\xf5\xd5\xe1?vhR\xbf|\xb4g\xfc\x10\'\xe8\xbf\xc4\xd8@\xb8\x9d%\xab\xbfz@\x94\x18\x99\\\x87?\xdb\xb5L,(W\x01\xc0\x85\xe1\xda\')\xf2J\xbf\xf6VN\xb8a\xc0\xa0\xbf\xbeT\xadr\xc4\\\xc2\xbf\x1d\xc0\x96;\x1aQ\x86\xbfr\x91\x9ep\xf1\xe0\x83\xbff\x8f\xfb\xf6 \xe7\x83\xbf{\x8bP%\x8cp\x90\xbf\x05\xb5\xdc\x8aN\xc8t?1\x96Uw\xdf)\x8e?7\xe6\x0b\xaau\x83\x97?T\x81\xc9]\xea\x85\x11\xc0\xad_*\x82\x83\x85\xa3?\x1e/\xd1|\xd1\xf1\x81?\x10\x96vP\x9e_\xad\xbf\x83\xa2\x91R\x93\xe5\xc2?\x1c&\xd5g\x7f~\xd3\xbf\x16Z\xaaq#\x05\xa8\xbfs\xf6\x85\x9f\xa7\xcc\x80\xbf\xe7L\n9n{z?b\xb2VS\xa6\xb5\xbb\xbf\xfc\xc5a\xe3\x9a\xac\xc3\xbf\xdeY\x88Uc\xa8\xe1\xbf\x97\xc4`\xb9\xa4\xf9\xa9\xbf\x8d\x96\xf9Z_V\xea?\xfaJ\x87\x89@\x81\x97\xbf\xcb\xd2\x81.\\\x11c\xbf7\x15>\x8ct\x05\xfa\xbf\xfa\x0c\xb7\xef\x1a\xabj?\xbd\xe9D\x0c\x99\xb4\xf9\xbfP\x16\xe8\xa8\x17*\xa8\xbf\x8c|7\xd29\xca\x8a?\xfeSC\xba\xfc<\x91\xbf\x9d~-\xc8al\xe8\xbf\x92\xf5(\xb9\x1d\x03\xd5\xbf.\xc5\x1d\x81o\xa0w\xbf\x83\xde|\xfd\xac\xe6\xa0\xbf\x18\x97\xf8\xe61\x1d\x99\xbf:c\x15}\xeb(\x92\xbf\xa4\xea\xbc\xd2\xe3\x18\x88\xbf\x0c\x90\x85\x10e\x15\x96\xbf\xaah\xe0p\xa5<\xc0\xbfd~\x04\x90_|T?\xb9`\xb82\xebHo?\xa1/\xf5\x0c\xc3v\xa1\xbf|"\xf7\x94\xc0\xf0\xdb\xbf2\xa7<H\xc2\xa7\x92\xbff\xb8\xef\x89\xcb3\xd1?/\xa1Gd\xd8\xf6\x96\xbf\x9a\xa4\x84c\x10\xde\xa4\xbf\x16(\xbd\x0f\xc2a`\xbf\xe4\x81+\xf8\x1d\xc5_\xbf\'\x8d\x9f\x86%\xf8\xc1\xbf\x8d\xd4\xf9\xb6\x84\x1b\x95?\xdf`\xac\x10\xef\xa0r\xbf\xee\xd8\x8f\xd8\xd6\xea\xc9\xbfU^=\x86ZF\xc3\xbfO\xda`QLe\xa2?1\x9c\xc3\xe2.\x86\xa8?\xb0\xdeR\xb3\x85-a\xbf^Kq\x01G\xb3\x8e?\xe5\xa7\x13\xbe\xfe\x0f\xb7\xbf\x1fB\x1f\xa1\x12\x0e\xc0?y\xfd\x98R\x0b:\x94\xbf,\x19zW\x1b\x1d\x9e?\xadr\xda\x0f\x94\xe6\x87\xbf+,\x17\xe2U\x8a\xb5\xbf\xc1\xc2\xa6p\x18\x0b\xa6\xbf\xd8F_\x01\x05\xfei?z\xecf\x1bq\xae\xa0\xbf\x89\xc0\xd3I\x11Gy\xbf\xb4\xeb\xccF\xf6T\x85\xbf>\xfb5\x18NJ\x9b\xbf\xa9\x1f\xec\xd7I\xcb\x98\xbf\x0e\xfdbS,C\x90\xbf\xf5\xd6\xb8\xd1\xdbC\x97\xbfo\x8fW\xfc\\H\xa9\xbf\xe5\xeb\x84\xa5^\xf3\xa7\xbf\xf8\\\x07 Z{\x83?\xb24\xe1rz_u?U\'\x0c\x9d\xd8j\xab\xbf<\x93\xe4V\xf3\xdf\x96?M\xdb`\xb7\x86\xfd\x96\xbf\\\xf2S\xba\xfa7\x96\xbf\xc0\x9e\xe0\xa8\\\x1b\x95\xbf\\\xae\xd1\xc2e\xb0\x7f\xbf\xff\xa4>\x00\xfc@t?2y\xb6\x8d!J\x8a?6\x89*\xba\x10W\x9b\xbf\x95\xf4\x00A$f}\xbf\x00a\xa3?\xb4!\xa2\xbf>\x94\xc3\xe8\xd0\x1d\x8d\xbfWC\x04\xb1\x97?\x81\xbf\xf4\x93-\xf0b\xee{?/#\x07:\x8a\xc4\xb7\xbfGTQp\xeb\x1a3?V\xb2\x98E.\xef\x82\xbfU\xf0?\xb1\x92\x92\xa1\xbf\xc94$\xf3a\x98\x85\xbfQ \x1d\xe9\xca\xaaV\xbf\r\xe7\xd5AX\xd3\x91\xbf5\xe6\t\xda\x87\xec|\xbf\xea\xdcv\xb7\x02\x9ds\xbf\xab\x93]4 \x9e\xc8\xbf\x89\x88\xb4p\xad\xc2y?q!\xc0O\xed\xb2z?`\x00y\'\xdbS\xa1\xbf\xed\x00\xbd\x9e\x1d\x1c\x84?v\x0f\xb7\x00\xe6/\xa7\xbf\x8f\xd6\xe1\x9d\x13TZ\xbf\xabOa$\x93\xf6\x8e?z\x90\xad\x19R\xc4\xb0\xbfn:\x8b\xe4 L\x9d\xbf\xcb\xc5\xa5\x17\x115\x7f\xbf\x1f\x8b\xc9\xdcy\x1e\x90\xbf\x87\xfb\x1ah\xd9Q\xc0\xbf\x14\xc9\x90]\xe6\n\x82\xbf\x17f\xd9\xc6\xb4c\x86\xbf\xb6\x18\xeb%p4\xa4\xbf:\r\x19\x18j\xdfz\xbf\xaa\x9c\xadI=&\x82\xbf\x89\n]\xba\xadv\x95\xbf\xb5\x0c\x7f\x81\x89U\x8b\xbf\xfaw\xed\xc0\xbb\x1c\x12?\xffQ\x84\xe00|\x99\xbfb\xdddI9\x9b\xad\xbf\xa4c\xe9T3\xecg??\x8fBy,\x02\xa2\xbf\nN\xd3\xb2\xea\xe4\x8a?\xc9\xe2\xe3\x13\x1a\x8a\xa1\xbf\x19\xe0x\xa3q\x1ej\xbf\x1c\x10\xd2\x0e\x0b@\x95\xbf\x15\xd6YM\xb7cX?\x8fm\x11Z\xf8\xf6\xb9\xbf,]\x87r"^\xb5\xbf\x92\xea\xd1\xfaU]\x88?>\x88\xce\xb0\x96\xbdI\xbf\n\xaf\xab\x1f\xf9"\x9b\xbfB\n\xb7\xa1\x98\xb0\x92\xbf\x96\xd9m\xa1\x07&x\xbf\x13\xa7\x1f\xae\xe8~f?\xc4:\x1f!\x9d\xfbd\xbf\xe7\xea\x08\xe1E\xe7\xb1\xbf1\xbe\xf8Qh\xcf\x86\xbf\xc9\xd8\xeb\xcb\xbft\xc6\xbfg\xdc\xfe\xdc<\xf8\xa2\xbf\xe6\xe5\x94\x9c\xff\xda\x82\xbf\xfe\xb8\xf4\x0b\xac-\x85\xbf\x8a\xf3\xab\xbe\x82\x99\x97\xbf\xfbM\r>\xe0\xc9\x91\xbf)\r\x802\xe8\xa8c\xbf\x0e\xa3H\xf6K\xd3\x8e?l\x0eL\x06\x19\x90\x82?l\xcbT\x96\xdc\xe5\xb0\xbfd\xd9\x17xS\x1f=\xbf\x82\x13\x99\xf0E4\x99\xbf\x13iPyF\x99z\xbf\xe6vA\xe2\xd2b\xa2\xbf\x8b\xc5\xbcO\x81D\xa8\xbf\x9e\x0c/\x11\x879\x8f?\xdb\xaaR\xe6\xdcK\x88\xbf\xbcX\xc1\xe8\xd2\xff\x94\xbf9\x8cy\x1f\xb27\xac\xbfz\xb7\r6d\xe4\x84\xbf\xb4\xf7\x04\xca\xca\xf7w\xbf\xad\xfaz\xe7\x08\xf0\x9c\xbf/\x8eH\x84\x9eTx?\xd50\x83\xfd)^\xa5?\xf40\xd5\x94\x83\x1f}\xbf\xc7H\x84C>\xde\xc2\xbf\x0c%\x12\x8c\x1f\'\x8a\xbf\n+\x97K\x0b\xa9\xda\xbf\x86(\xc2\x0e[\xb9\xd5\xbfr\x0c\xa9\xea\x0f\xdc\xa2\xbf8\xcc%R%{\xc8\xbf\xc2\xe5%\xa3\x9c\xcf\xe5\xbfJ\x06C\xf8\x07\xba\xa9\xbfc\xda:\xd7}!\xee\xbf6-qa\xc6\x07u?\xc0\xbf\xdd\x0fq\xda\xb3\xbf\x15\xf5\x06\x84|\x0f\xca\xbf\xc5`\xb9\xfc\x1e\x8a\x9b\xbf\x8a\x91\xc8\xc0G\xc6\xb7\xbfH/E>T\xb7\xcc\xbf\xd7\xcd\x012mP\x89\xbf\xa6\xfd\xc6\x82\xfd\xdex?\xb6mT\x97\xec\xb71\xbf\\w&\x8d\xdd\x17\x94?&q\xc5ji)\x88\xbf\xbfsa\x87\x8f\x94\xca\xbf>X\xd6\x8c>\xfa\xdc\xbf3\xa2\xbe;ar\xea\xbf\xe0{\xef\x14zl\xd0\xbf\xf3Sk0vH\xa4\xbf\xc1X\n\x17\xd0\xef\xb8?|+k\x08\xe4\x18j\xbf\x1c\x18\x9a\x89\xb9kr?\x0bY)\xad\xe3\x93\x93?\x04\xe5<\xd1J"\xc4\xbf\xed\xe1z\xe1\xa8\xcf\x84\xbf\x88Y\xda\\<\xe2\xcd\xbfX\x9eq\xb6\t\xfa\x9c?\xc5\xb2Q\xb2\x9eL\xbb?\x118c\x89\xb4E\xb0\xbf\xa1\x7f\xa9wwi\xe2\xbf\xf2K\x7f\x05\x16\xeb\x85\xbf\x0b\x1ei\t\xc8\xe4\xf3\xbf)w\xd6M\xe4\xca\x9c\xbfV\xef\xec\xcfN\x1a\x93\xbf\x00\x8a\x1bQ;:\xa2\xbf\xb5\x8d\x90\xeeAJ\xb8?\xbfe\xf8\xf4xw\xce\xbf)\xc9\xe0#3\xf0\xb4\xbf\xc3\xcf{\x10\xfcA\xe0\xbf\xa6-\xc8\x0e\xe2\x11\xbe\xbfy\xbf|#1p\xa0?<\xdd\xd2\x92\x97\x0f\xe4\xbfZ\\\x18\x83\x86\xe5\xb3\xbf\xf1"\x19"\r\xfe\xaa?(\xd7^w\x87\xe3r\xbfB\xfa\xc9s\xfa\x1e\xb5?\xb6\xf8\xe1\xa0f\x8a\xa1\xbf\x11\xb8\xdb\xd2\xc2\x8e\xbd\xbf\x81\xdd\x04c\x88\x93\x80?\xa9>>\x1f\xfaT\xb9?\x01d\\j\xf0\x9e\xc8\xbf\xedL\x93h\x9dz\x90\xbf\xb6\x06\x15\xde{4\xb7\xbffM\x15\xe3\x1d\xfc\x90\xbfk\xd0\xc9\xee\x85\x9b\x96? O\xb5\x89\xa7\x88\xc0\xbf4#)N\xd2\xb3\xf0\xbf\x04\xb4\xe3\'\xdf\xf0\x8b\xbf\xdb\xf6i\xe1\x10\x8d\xa3?\xcd%\x1b \xcf\xcc\xb9?\xc8\xe2\x0c\xde\xa4\xdc\x97\xbf\x86\xa2\x90\xce0\xff\x90\xbf-\xa1\xd9\xea\xc74\xa1\xbf\xedx\x00\xe6q\xe8Y\xbf\x85B\xc1\xee@\xf7\x98\xbfd\x96H\x130r\x99\xbf\xb2\\z\xd1\\X\xb0\xbfn,\x0c\x93YP\xa4\xbf8\xa0A_\x1bc\x93\xbf&%\xe6Y7t\xd0\xbf\x8c\x9c\xcca\xcd\xe3\xbb\xbf3j\xb4\x7f\xef:\x91?\x0b\xe0$\x14cu\xb0\xbf\x08\x05\x04q\x9d\x8b"?F*\xce\xfc\x0c\xc8\xc7\xbf\xbb\xe5\xc5\x80\xf1"\xb1\xbf\xf6r\xfb\x88\x9e\xda9\xbf\x95(\x8b\x01\x9a\xff\xd1?\x0e\xed\xdf\x99\xda7\x8f?\xabwk\xf9h6R\xbf\x8c\xc5\x8bvgL\xb0?\xb6\xb1\x1a\x95N\x8c\xc9\xbfv\xd7\xc1\xd5\xd8L\xa3\xbf\xca\xd8ST\xe1\xe8\xa7?Gu\xd1\x0c\x0cM\x94\xbf8)<\x11\x91\xc1x\xbfn(\x8c\xfa\xb4^\xae\xbfl\x1d\xb9s\xb57\xa0?\x17$\xc91\x8f\xee\x83\xbf\xb2s\x9b7\xee\xe5\xb9?\x1f\x9cz)\xb0\xf04\xbf?\x7f\xa6\x8c\xec\x92\x9d\xbf\xd7r\xf3\xb4\xdf\xec\x97\xbf\xb3\xb5\x9b$n\x89\x86\xbf\xa3\x86\xef3\x8c5\xba\xbf\xf5\xc7vu\x7f\xa2|\xbf\xf8\xb5\xe2\x1d\xd7\xab\xbd\xbf\x8eB\xe3[\x90(\x7f\xbf_\xb3\x06\xa1l\xaf_\xbfV\x9b\x84\x01\x81`\x83?.\xff\xa0\xc3\xc74\x97\xbf\xb8@\x1d\r\xe4\xbb\x97\xbf\x9f\xec\x14\xc26\xd9\xa1\xbf\xae\x98\x9e\xfe\t:\xb1\xbf\xbdR\x95\xc2\xc9}\xa9?{)\x85^\x88\xcc\xcb\xbf\xc7\x9c\x86|x\x84\xa3\xbf0\x919B\x17\xf4\xb0\xbf\x87,\x8b\x1f_}\xb8?\xd5ZPFj\xb3\x83?H[\x11\x0f=\xdfy\xbfy\x17\x95\x8e\x14\'z\xbfk\x84\x942q/\xe8\xbe\xac{\xf1:4\xc3j?c\xd9V\xb5\x8eIT\xbf7\x05f\xc9Y\xd7\x85\xbf\xe7\xf4\xea\xb7\x00\x11r?\t\x8d\xb81P<w?^\xc8\xeb\x014E\x8a\xbf=B\x14\xc0b\xdf\xc0?\x93\x80l\x98\xdaGw?j\xba\xcb\x8b\xc4\xd5\x93\xbf\xe7"\x90\x02y\x0b\xc2\xbfO\x05\x8ca\xf3@}\xbf[I\x10B`4\x83\xbfz\xb2\x9c`\xecQ\xb9\xbf\xc6\xda\xa6\xa5\xf58\xa4\xbfBxd\xdb\xd7\xe8\x96?\xfe\x946s\x11v\xdb\xbf\xf9N\xdbk\xc5\xe0\x85\xbf\xd8\xb3\xf9\xab\x99=\x83\xbfh{\x89\x9d\x87k\x87?bX\x96\xfa \x15\xbf\xbf\x1f\x86p\x91\xa6f{\xbf\xb9[\xd7\x9d\xfc`\x81\xbf\x03g~\xcd+\xd8\xc6\xbf]\x88XG`\xbc\xc8\xbf9\xaf2\xe4\x87\xba\xbb\xbf\x03\xf6\x83\xfa\xf7\x91\xca\xbf\xf0\xaa\x15\x9e\xf9\xc0\xa2\xbfE\x11]\xf1\x1d\x82\xc9\xbf\x19p2\xbb6O\xbb?&\xc9A~\x83#\xb0\xbf\x8b\xa6\x0c*\xf4\xd8\xd4\xbf)\x8fg0\xa1\xc3R\xbf\xcb\xd6\x8fX\xdf;\x8e?\r\xe1l\x91\xd3\xd6\x8b?\x8d\x8c\x83>\x80\xf2\xaf\xbf\x7f\'\xa4$X%\xb8\xbfC2q\xe3\x0e\xf7\xc6\xbf\xdcy\xda)7-\xcf\xbf\x9a\x05*~\x87(w?\xbc-\xa8\x0e6\xfe\xbb\xbf6\xba\xd2,\x1c.d\xbf\xc7F\x83x\xdd\xf1\xa6\xbft\xa1\x1c\x86\xd14\x94\xbf\xa9\x9e\x02\xc6\x942\xc0\xbf7\xb69\x83\x05\xd2\x94\xbf\xcb\x8a\x82B\xc7-\xd6\xbf\xed\xbbH\xa72\xedt?\x00\xb2Z\xf22\x94Y?\x0f\x8d\x8c\xb1\x02\xa0\x89\xbf\xdc\x97\xe6e\x9b\x8c\xb1\xbf\x0e\xb6\x9e\x83\xe9\xba\x94\xbf\xc9N\x92\x9b\xc4\xbe\x8d\xbf\xe6\x8aL\x95\x92g\x88\xbf\x88\xdf\xbfu\xbe\xb6W\xbf[\xe3\xb4\x88\xa9\x9c\x91\xbf\xf9x\xca)\x87^\x82\xbft*%\xdb\xca\xd1\xa8\xbf\xe6\xf1\xde-\xbb1\xb4\xbf\xb4\xed\xc3\xa4\xde\x16\x8e\xbf\xea\x1e\xd1p\xda\xf9\x9f\xbf\xe2\xde\xe1\x954ag?\xcb\xde\xb9\x11Y\xac\xab?\xce\xfb\xb8\x9a\xef\xbax?\xba\x04\xcd*\x8e\xd6\x81\xbf\xb0\x9e\xae\x1f:\xad\xa6\xbf\xaf\xbf+\x81\xf4g\x8e\xbf\x99\x97\xd7a\x89\xaeu\xbf\xb6\x87\n\xd7o\x95\x99?\xf1\xf3\xc4?\x96\xb9\xe0\xbf!\x07"nr\xdb\x8c\xbfV\x08\xa3-\xc4\xfd\xca?jbn\xfc\x0c{\x8c?\xda\xf6\x04\xca\x1bX}\xbf\x80~\xcasm\xde\x86\xbf\x00\xa4\xdc~\x04=\xe9?\xdc%\x1e\xf3y\x86\x84\xbf\x05\xa5\xda\x86\xf8\xac\xa4\xbfGP\xa5\xf6\xd7Z}?\xc1@\xd7\x174Z\xa5\xbf\xeeT\xeaK\xd9\x1b\xb2?V\xb4P\xf8F\xbcg\xbf)c\x06d\xc0\xad\xc1?\xfd\x89P\x00r+n\xbf_\xd0\xf6\x19\xca6\x91\xbf\xaa\x83w\xdfz\x99M\xbf\xb2\xbext\x1a\xa1\x9d\xbfi\xa5\xdcyv\xe6\x97?/M\xaa^\xe2~\x8f\xbf\x8dR\x91\xe1`A\xd1\xbf8\xa29\xa5\xa5\xd6\xa8?\x91\x95\xef>\xd8:q\xbf\xe8O\x88\xf4\x06\xd0\xc7?\xb5k\xca\xefF\xdc\xbc\xbfp\xf2`c\x8bp3?y;\xb83],b?:G\xa4\x06\xdb\x8a\x9a\xbf1\xe5\xd6z\xb1\xdeh?\xff\x01\xdaDi\xf4\x85\xbf\x01\xd0[\xc8\xae\xc8\x86\xbf`=\x03=\xdb\x1e\xb4\xbf\xd92\xdeF\'\xd9\x80?\xc2m\xe4d\t\xbf\xb0?\xdd,\xc4eG\xbb\x8e?\x97\xad\xad\x1b\x8c\xf3\xa2?\x06\x95]\xe5\xc0\xe2\xa1?%\x17\xddS+\xde\x9d\xbf\x96\x92\xbe\xf4\xe8g\xc0?\xb3P{7U\x86p?\xd8\xfe\xbd\x9arE\x85\xbf=\xb1\x1b\x97\xfcW\xee\xbf"z9\xe9\x84\xe7\xc0\xbf\xc1\x85a8\x9b\xff\x85\xbfR\xff\x82\x0eh\xdf\x06\xc0\x0c+\x99\x06\xbfL~\xbf\x8eEZ\x8d\xcbx\x9c\xbf@\x08<\xe5\xab\x86\xbc?ct\xb3h\xe1\x94\xb3?^oV\xc1\xfeT(?\xad\x87\x84$\x1er\xc1??\xe5\x80\x0e/\x17\x81\xbf\xb5\x7f\x13\x9e\x91;\x87\xbf$*z\xe5O`\x95\xbf\xbc\xc7}\xe7\x1a`\xac?-\x87\xc2\xfa\x12\x96\x0b\xc0\x0f\x04\x0b\x11\x15\x83\xb4\xbf\xd0\xdb\xe8UC\xd2y\xbf\x1b\x16\xe1\xc6\x03\xad\xac\xbf*\x19Ok\xc4\x84\x98?\xd3\xdbX\xf7\xdb`\xa1\xbf\xee:\x01\x895a\xa6? )\x99\xd8\xd0+\xb2\xbf\x13x\xb3\x82\xa8S\x89\xbf"\xa3\xb0\xdf\xf4\n\xba\xbfJ\x18\xa4\x0f\x07\xea\xbf\xbf\xa2\xfc\xce[s\x8a\xf3\xbf\xffZE\xf2\x8bg\xb6\xbf\xdbCf\xf2\xdd\xcf\xc0\xbf\x8dKOa\x9a\xae\xc2?4\xb1-\x8f\xc1\xcdq\xbfw\xb6S\xa0\x94\xb8\xf2\xbf\xa1\x84h\xd9\xda\xe7b\xbf\xcc\x03zR\xb1\xed\xf1\xbfVfo\x9b\xef%\x89?\x0eLOJ\xe0\xa8\xc2?S\x14\xf7v9\x92\x8c\xbfC\xf8\x8b\x8f\x91\xb1\xe4\xbf\xbb"\x8b\x06\xb4\xec\xdc\xbf\x07\x7f\xfc\xf5_+\x82\xbf\x1ar\xcd\xac\xf6=\xae\xbf,kB]QX\xb0\xbfP\xfa\xfdW\x1e\x92\x80?\x805vu5\xb5\x81\xbf\x14\xa0\x90"\r\x93\xb0\xbf\xce\xe1\xf0F\xbch\xc3?[:\x01\xaa\xca\xa4t\xbf\x05\xdfh\x96-\xc9y\xbf\xec\x8e\xd7\xc6\xafr\xd2?\x92\xb13\xe4\xa4\xe4\xea\xbf\xa6\xac#B\x8d\xf3l?\x05e\xe6\xc1\x8cO\x8c\xbf:\xb12\x9a,\xd1\x95\xbf #\x19=\xfcx\xc7\xbf\x0b\xb6_\xca\x92}[?\xccp\xe1J%vs?\x9d\xceaE\xb0\xb6\xc8\xbf\x9a@G\xbd\x02\x19]\xbfZ\xf7\x8c\xcb\xff\xbb4?\xe4\xda\xc1\xbb\xd09\xd0\xbf\x8c\t\xee\xf0\x081\xab?@\xf5\xc4\xb2,\x03K\xbf$\xfb\x15X\xaf\xa0\x89\xbf\xc2\xc1\xff\x8d\x15\xf0\x93?\x0bI$\xaf\x92\xc4\x8e?6}f\xdacY3?\x8c\xe5q3N\x8b\xc5?\xf8\x8aW\'\xedG\x9a\xbf\xc4\xc8\xa6\xc3\xad8\xc6\xbfdm\xf1\xb1\x1a\x8e\x8b\xbfM\xd3`\x92\x8c\xb5\x8b?Z\xa2L-\r)\xb2?\xec#\xdb\x00\xf1\x83\x85\xbf\xb1e\x1c\xfe$U\xdf\xbf\xac\x8f\x07\x07S\'B\xbf)\xe0)\x08\xd7^\xa1\xbf\x99"`\x04_\xb5\x84?\x12\x1c\x012\x12\xce\x80?\xb5>\xf4\xd7\xa6c\xa3?\xa4%\xc2\xa8\xf1\xee\x99\xbf\xefAHP=\xd7}\xbf\x18b\x1a.\xc5\x04\xac?\xcf\x99|V-\x85\xda\xbf\xe8\xccz{\t,\xb2\xbf\x90\xd5=U\xff4\xd1\xbf\xd8\x9dgh\xbfc\xc2\xbf\xab\xed\x82\xa3+\x13\xb1\xbf\x8b\xf6\xbb\x85\x0b\x9c\x83?\x02\x9d:k\xb3\x03b\xbf\x11\xd8%a|\\\x85\xbf\x7f\xcdXj\xa4)\x90\xbf\xb5\xee;^E\xc2u?60`\xd9>\xd5\x83\xbf<\x85\x18%p\x15\x9a?\xd1B\x05\xc4\xdd2v?,\xe1\xa6\xc1\xb6J\x99?\xbb\xb7\xbb\x94\xe1\xb6S?\xb1\xb0\xe1\xc2\xcd\x98>?\x04\x02\xdf\x7f\xa3r\xbb?T\xcf\x0ex\x8c\x0cs\xbf\x16B\x92\xfe\xaf\xbfx?G\xbb\'E\xcc7\xd6\xbf\xcf\xb4\xb3\xf8\xf7\xd4\x8b?\x94\x03_~\xc7K\x86\xbf\xa0\xf2Ra-\xd6\xa5\xbf:/LXWy\x95?\xb6\xac\x91O\xac\xf9\x91?X\xd6\xb1BL\x89\xd4\xbf\xfd\xf7\xd2\xf3g\x9f\xa7?\xbb+\xcd\xdcXf\x8c\xbf\x13k5\x08J\x81\x95?\xadj~\xd9\xfa\x80\x8f\xbf\xbd\xe7bd\xa5\xa3\x8b?\x80\x02\xe6\xf0(\x92u\xbf\x97\x1a/\xd7\x84\xfe\xab\xbf\xc4\xf3\x83\xa8\xdcO\xcd\xbf\xb6\xf3v\x94\xd4*\x9f?\x863\xaf\x08\x0cUZ\xbf\x9b\x82\xa4\xef@~\xb6\xbf\x8bMJ\xd4\x17\x9d\xb7?s3i\x90D\xa3\xcc?\x00L\xf2\x1b@R\xc9\xbf\x8f\x8ck(,\xf8\xcf?.\xf6\xe25\x82\x0bu\xbf??~\xab\xd6^\xc1\xbfN\x02\xa8o:\x8e\xb0\xbf.\xa7\xb0\xbb8\x8b\x9c?\xc4\xf9\\\xc5\x1dU\xca\xbf\x0b\xb9#\xcea\xd2\xb3\xbfg\xc6g~@\xf7\xe8\xbfG,\x01%\xf7\xa1\x7f\xbf8\xd4\xad\xae\xe4*\xba\xbfd\x9575\xa7\xaaQ\xbfR\x08y\xddi\xf0\xad\xbfLa\x06\x92p\x9f\xb3\xbf\x16\xa2:bP1\xa2\xbf\xd4\x1d\x9a}\x10\xe5Z??\xb9\x9d\x91U\x94\xa7?\xfb\x93k\xb4g]\xdc\xbf\x0e\xf82\xb2vNr?ki\x1c\xbd\x8d\xc3\x82?f\xd7\x0b+\x11\xec\xc8?\xb1\xf0\xf0\x86#c\x96\xbfV?\xea7\xe7\xe46?\xbf?[\x93\xac\xddn?\xeb\xf2]X\xde7[?\xf8\xb2Ex\xea.\xa8?Q~B\xcf\xd0\xe6y\xbf"\x7f\x84\x16\xe4$\xb8\xbf\x18\xb2\x0b\xf6\xc9\x90\xb2\xbffm\x87\xc3\xe0\xd6g?\x0e\xa0\xad.\x98\xf9\xb4\xbf\xe0dy\x1d\x88\xf7\x86\xbf\x03\xb7\xafi\xd77\xbf?\x04zj\x19ot\x91\xbf8\xae\xfe}\x13+\x8e\xbf\xc25/^\x96as\xbf(\x89\x98\x0e6\x12\xa6?~\x1cO\xfe\xd3\xfa\x7f?\xf2\x83\x9evn\xa2\xb1\xbf\x81Q\xdf{\xc1\t\xbd\xbfi\xdd\xcb\xb8]\x10\xa1?\xfdO\xc6S\x99A\xe1?#*\xc8\xb9\x1b\xfb\xae?,"\x19$\xfd\x81i\xbf\xd3\xda\x82\xa6\x97C\xb5\xbfs\xda\xba\xf5\xac\xb0~?\xf07\x0feyXT\xbf\xbe\x95\x99`\x91\xf7t?\x1fv\xbbn\xa3\xc3\x81\xbf\xfb\xc8x\xeb\x92\xf9\x83\xbf\t\xad\'\xe1\x9eN\xb0\xbf\xfa\x15-\x98\x00wS?\xc0*\x8e\x95\xf5\xba\x92?\x18\t\x0b\xa2\xdfHD?\x89FT\xbe\x87\xa5\xc0\xbf\x8an\\\xab\xf4|\xb8\xbf\x88q\x96\x88H-\xb4\xbf_U\xdf j\xf1g\xbf\x19\x90~C.\xa7\xa7\xbfS\xa7\x0f\x11\xd5&\xc0\xbf\xf2J\xc5:\x92\xdc\xbf\xbf\x9e\xa6j\x90\xffC\x94\xbf\x07\x81\xfe8:~\xc7\xbf\xa0\xe1\xc6\x0f\x1c\xac\xa6\xbf\xfb?:*-5\xb4\xbf\xe9\x85\xd1\x1d\x04\xf3\xbb\xbf\x00\x8eg\xfa\xfb\xff\xdc\xbf\x06\xbb5}\xdes\x8f\xbf\xa8\x19\xf0/y\x02\xb3\xbf_f\xd6\xe9;\xcf\x80\xbf\x8f\xdc\xc0di\xc2u\xbf\xd6e#\x89g\x83\xa7\xbf\xa9\x17\x82pvs\xba\xbf\xbf\x88}\xa7R\x0f\x84\xbf\x1a\x8f\x87\xa7\xdb\x9a\xaa\xbfQ\xa5\xc0\x87\xd72\x8c\xbfL\xa7\x90\xdb\xa9\x86\x86\xbf\x98\xcdb\x18\xcc\xb0\xc4\xbf\xd8\xb4\xff\xf6\x80\x16\x87\xbf\x0b\xbf\xbfi\xa4\x1c~\xbf2\xb4\xc6\x0f\xdc{\xb9\xbf\xc41\x02\xd0\xb6\xd1\xad\xbf\xec\x9e\xa7\x02V\xeb\x94?C\x1cb\xbc`=\xa3\xbf\xa5\xb0G\xf8\x82W\xb8?-k\xa8}\xbc\xb9a\xbf \xe2\x0f\xf4\xe8\xa2\xc9\xbf^^\\\xeax\xccr?P\x95O\x87\'\xd2z\xbf\xba$$J\x0b\x81\xb8\xbf\xbb\xbf\x9a\xf3\xbf\xe9\x81\xbf\xda\x1eb\xf2\xd8\xf9\x9e\xbf\xd2\xb1\xef2\xe3I\x93\xbf\x0e\\\xb8\xd0^\x07\xd3\xbf\x81|aJ\xf9\xe2\xc3\xbf\xd8\xa67\x16f\xc8\xb4?\xa4F\xf2YM\xc8\xc3\xbf\xcd\xa6\xec_\xf4\x8b\x9a\xbfR\x04\xb5\xa7z$\xd0\xbf\xb3\xf0c\xd9\xa1\x00\xbd?\xa5\xb7B\xf7n\xc5\x94\xbf.6\xb3\xca\xf3%\x9d\xbf\x1a$\x87Q\x17\xb8V\xbf-\x04\xb8p\x94\x83\xd5\xbfH\xe1Js\xc7\xf4\xc4\xbf\xe7\xc1\xd1\xd6\xd7\xa4\xb6\xbf]"\xdd\xe7\xa1\xa5\xb0\xbf\xee\xf2\xb0A3\x87\xba\xbf9\x92\x9a\xb2\x17\x16\xbf\xbf\xfa\x11\xe9\x7f\xa5\xd3v?\xba\x1a\xba\xbc3y\xb1\xbf\xac\x1e\xbb^\xaa\x81\x85\xbfz\xc1\t\x16i=\xb9\xbf\xe0\xd2 Z\xc8d\xaa\xbf0\\RT\x1f\x84\xc1\xbfi\xbe\xd0\xc6\x80\\\x84\xbf\xec\x98\x90\xd4\xc2\xaa\xb2\xbf\x952\xe7\x1e\x0b\x08\xb0\xbf\x07\xfa\xc7\xa6\xae \x86\xbfd9\x8d6\x9a\xc4\x9d\xbf\xcd\xcf\xc3\x0f\x9c\xb3\xa0?\x06\x03\'\xb8\xab\xc7\x8d\xbf\xc2\xe9\xb6\x16\x06\x8f\x82?\xebF\x10- %\x96\xbf\x0b\x8e,\xeb(=\xac\xbfI;\xf2J\x87i\xa5\xbfh\x18F\x7f2\xdfk\xbf\x1e\xe8\xd6V*w\xbf\xbfx\xe0\xc2s,5\x9d\xbf(\x1a\xaf\xce\x9a{z\xbf\xcb\xb3:\xddS\xa2\xb2\xbf1\xa8\xcb\x01p\xc0\x91?\t>$K\xc3\x94\xa9\xbf\xe3\xd11R\x92\xf1h\xbf\x00\x8eqR\xe1 v\xbfK5R}_\xb9\xa1\xbf\xbe\x9b\xc0b\xdbM~\xbf\xb3\xf5\xc1\xbd\x89\x19\x89\xbf\xeb\xbd,\xef<\xee\xce\xbfK{U>Hp\xc8\xbfs6fYW\xc9\xbe\xbf\xa0L\xad\r\xf2\xcc\x92\xbf\xb74\x9b\xf7\xce\xe7\xb3\xbf\xe8\xd2\xf2[\xec\x1dw?\xe8\xe8\xf8MC\xc0T?\xb7\xf4\xcax\x88\xf7\xb8?\xdf0\x98#\t\x90]?U\xbf\xb1\xa0\x0c\r\xbb\xbf\x06\x0c\xe9\xefif\xa2\xbfdra\xc8\x88\xecD\xbf\x98\xde!\x802\xc3\xa7?\x89-P\x86~\x17\x92\xbfW\xd0.f\xce6\xf0\xbf\xbb\x9b\xa3\xc2{\xb8X\xbfA\x04\xd7\x12\x8a^\xc0\xbf&`\x96\\q\x08\xc9\xbf\xac@\x05\xe9\x8c\xa7\xaf\xbfV\x0f\x8f\x89\xb3~{\xbfE\xeb\xcc\x10xK\xcb\xbf6\x89\xa6\xe3\xd3B\xce\xbf_\xb8t\x1f\xe7q\xd4\xbf6\xbb\x80\xcd\xc8\x9c\xea\xbf\x9b\x8f\xae\xaa\xe9\xb0\xca\xbf\x18\xab\x8d\xea,Mp?\xbf\xcf\xb9M\x1a\xf3\xd4\xbf\xb9\xbc\x897\x95\xde\xbf\xbf\xfb\xd1\x82h\x94h\xbb\xbf\nRw\xdcy\x1b\x88?\xf7\xf2\x0cAk\xca\xa2\xbf\xb9\xc3\xfa\xe0\xf2I}\xbf\x9a<\xce\'v2h?\x99\x907+\xff=\x90?7\x8b\xae \xa9k\xbd\xbf\xcf\x1b\xef\x087;\xc3\xbf"\x1d\xc81H\xb8\xd2\xbf\xdb\x13\xf6\xa9\xe2L\xb3\xbf\x8e\xfc\x15|\x1b+v\xbfb\xa3\x15`3\x07\x9c?\xb4\xe5\xa5\xbe(\xf9\\\xbf\xf2B\xb6\xd6\xe3\x1dT?\xd78\x16\x19\x83\x90\xb9\xbf\xb7\xbd{\xdd\xc8\xbd\xc2\xbf\xee\tp\xd3[\xf5\x83\xbf\x9e\xe8\x05\xf2\xb0\x94\xc3\xbf\xa3\xa5\xa6\xa5\x896\xa1?\xd4#\xadg\x0b\xe7\x84?\xd7\x94xX\x00\xba\xb5\xbfhz6\xb8\x7f\x04\xc7\xbf\xf7\xbf\x040m\xb4\x85?\xb1\xeb\xf7H\x85\x1f\xdc\xbf\xf6\xcb\x8e\x87\xfd!\x88?\xb4\x06o\xfb!}\xb8\xbfcMF@\x07hu\xbf\x80v\x8f\xb2V\x9f\xb0\xbf$1\x8f\xc0\x08B\xd1\xbf\x01\x11\xef#\xdb\x82\xbf?>Y\x02hv\x0b\xd0\xbf*\x1aaJ\xa5ky?\xcdty\xaa<\xd0\xc0?R\xa6j\x90\xf5\xfd\xcd\xbf\r\xea.\xd8:\x8a\xe1\xbf\xcbA\xe5\xf0\xd8\xf7\xdb?\xff\xb76\xebs\xbe\x88\xbf\xdf\xc2\xc8XV\xb6\xc7\xbf\xd2pc\xdd\xfc\x97\xc1\xbfP\xc6\xca;\x97\xfc\xbc\xbf\xad\x0c\x07@\\\xad\xae\xbfUv\xd54j\xb2\xb7\xbf\x05%\xd6\x18\xb1\xd5\xf6\xbf\x8db\xff,\xa4@v?\x1bJVT\x91E\xca\xbfh\x16-F\xb3\xean\xbfq&\xd9\xbe\xe4\x03\xcb\xbf\x12-\xd1[\xd0xu\xbf\xfe\xb5\x1a-u\x89\xdd\xbf\xd1\xd1\xae\xd2\tU|\xbfO\xb7\xcf\xe8\x17\x1c\xc1?\xf5\x1a\xc0,\xf0D\xd0\xbfg\xa2[\x1cv\xd3\x84?\x9c\xa6\xe3\x88s\x96\x99?\xb5\x06\x8b+\x9c\xf5\xcf?\x0fU\x1d=\x13\xad\x80?A\xda\x87\x03\xa1\xc3{?q\xf5P\x98\xbc\xd2\x83?\xfe\x87\xd5\x0c\x06"\xb4\xbf\x9c<\xc4M\x9ez\x8e?p\xad;\x9a>h\x90\xbf\xda\x878\xf6\x9d\xbe\x94\xbf\x07\x00i5\t\xbf\xc7\xbf\xd0\n\xddm\x87\xb8t\xbff\xd2\xee}\x8c\xa9\xa2?\xa0\xa1\xc9\xd0\x80\xfb{\xbf(\x8b\xab\x8a$\x1b\xb1\xbf\xbbU\x1eK\xe9Uu?\xc7\n\x03\x89P\xa4e\xbf\x16h?6-\x8f\x92?\x0e\x80-rP\x9d\xb7?\xca\x99\x83:\xde\x1c\x88?]U\xae\xdfx\xf1\xa3\xbf\xfd]\x91\'\xf16s?0\x1dfa\x14AE\xbf\xd8V@\xc8a\x06\xd5\xbf\x06\x1e\x8a\xee\xce_\x87\xbf\x8a\x13\xb1\xa5\x93\x8f~?v\x02\xb1\x08E\xcc\xa9\xbf\xe4\x16\x85\x03-\xd1\xa4\xbf\x0f\x1dmK%\x10\x8f?j+\xdc\xc3\xb4\xc9\xb6\xbfT\xcd\xe1-V\xbc\x9e\xbf\xf9m\'\xc8\x8em\xd9\xbf\x05v\xd9\xea\x87*\xc4\xbfz\xfa\x9e9\x99\xf1\x92\xbfW\x18\xb9ye\x01\x90?\x02S\x9c\x12)\xc3h\xbf\xf3\x89\xc9;/7\xd6\xbfp\xbac\xda\xbb\xc7\xce\xbf\xf0y$7\x98v\xa8\xbf;Y\xf9\x02\x80\xe5\x99?\x192(\xc2Q\xac\xbf\xbfv\xc9\x9e\xae\xce\xdc\xcf\xbfW\x87\xd4=\xec\xe1\xc3\xbf1\xf3\xcdojj\xb0?\x86m\x9d\xdbR\x18\xcc\xbf\x1f\xb1\x8a\xe6bO\xd3\xbf,z\xcd\x87`J\x9b\xbf/\x01\x95o\x8e\xbf\xd1\xbf\xee\xe1\xe0\xcbO\x93\xba\xbf@\xfb\xad\x88\x0f\xa9\x84\xbf \tP"i\\\x90\xbf\xaf\x9b\xd19\xa8s\x92\xbf\xafQ\xfc\xb3>\x06\xca\xbf;\xcf\xebQ\x05L\x9e\xbf\xee{\xb6\xa9\xf6Q\xb2\xbfn_H\xd4\xa6\xd5\xbe\xbfM<\xc2=\xa0L\xc7\xbf\xc4\t\x1b\xfc~\xc3\xab\xbf$\x07A\xca\x13(\x87\xbf\x95\x03\x17\xad\x18\xc6\xcb\xbf\xef\xe7\x1c\xee\xb0E\x92\xbf\xeb\xea~\xebc\x89\x8a\xbf\xd3\xcao\xa4D\x8a\xfb\xbf\xca\x97-p\xa1&\xad?\xdd\x9a\xb49@\x13\x88\xbf\xcb\x12\xd0I\xc9\xb3\x11\xc0:\x86\x0f\x1exv\x9a?&\xe8\x83\x84\x05J\xc5\xbf\xcb6\x92\xbe\xd1\xe1\x94\xbf\xe16\x07\x0e\xa4\xb1\xc1\xbf\xb3\rO\xffLa\x93\xbf\xd9\xe8B\xb3\xb4\x1c\xcf\xbf\xf2\xf0\xe2\x0b \xcf\x9d\xbf\xbf\x82\x0f\xbd\xd6\x80g\xbf\x81\x95\xd9\xf9SC\x80\xbfy:\xdd\xdf4j\xd2\xbf\x91im\x04\x01\xfe\x04\xc0U^kE\x199\xc6\xbf\xe9\x9e\xe5*\xcb\x8e\xc8\xbf\x02\x00-\x0b.\xc6\x9d\xbf\xcd\xa1\x92E \x15\xbd?#>\xb5\x8a\xcfU\xad\xbf|\x96\x81\x89\xa7\xe3\xac\xbfj\xbd\x9c\x8c\xe4\x9b\xcf?B\x85K\xfd\x9aj\x8a\xbf\x0fG8\xed\x92g\xde\xbfR8\xea\x82)w\xcf\xbf\xc3\x0br\xbf\xf1\x8e\xf6\xbf\xd5\x02\xcb\x03\xbb\xe3\xc2\xbf)\xd0\r\xcc\xc9\x89\xf9\xbf\xe9\x7f\xc3V\xcf\x1e\xc7\xbfmXx\xcc\xb0O\x92\xbf\xfa\xe7\xfe&\xaf\t\xee\xbfb\xa19\xb6\xab,\x83?\x0b\xbf\xcc\x98\xa4\xa9\xeb\xbf\x99\xfeb\'0\x93\xa7\xbf\x10\x18f\xf3w\xb8\xd4\xbf\xd5"+\x83\xf2\xe5Z\xbf\xff\x0cSF\xf9\xdf\xe8\xbf\x94B3[c\xfe\xa0\xbf\xe0\x96z\xfa\x1f\x0c\x82\xbf\xe8\xf1\xe8,Z\x06\xb8\xbf\x14zeA\xab\x17z\xbf\xe9z\x80\xbb\x05Vn?\xe7@\x03Z\xac\xeav\xbfP=Z\x07\xe4\x05\xc2\xbf\xd1\x0e:\xdb\x10\xbf\xad?\xf1\xa1^\x0b(\xd5\x8f?n\t\xaf&v\xd9\x89?\x19Rn\x9d\t\x02\xa2\xbf\xd6\xc6\x90(m\xb7\xed\xbfO\xe1\x99i\xd2fw?h\xc7\xac%x\xec\xe0\xbf\xb4\x82V\x07\x00\x8a{\xbf\x84}\xd1\x0b\xf1?\xb7\xbfS\x1b4]*\xb8|\xbf\xcf\x1f\xb4s\xa4\xe6h?\x06\xf5F\xe2\x86\xff\xc0\xbf\xb9r\x12\x15\xb7\x83\xa9\xbf\xc6l\xcc\n-\xdew?_\xfeg\xc0\xb65\xd4\xbf\xdd\xa7\xf2\xb0\x9eP\xb4?t$\xa6\x11a\xf6c\xbf\xa8\xe6k\x08\xd7\xb6\xaa\xbf\xd8\xc1?0\x86\xfc\xa9\xbf\xe8\xf5D\x8a`\x0f\x91\xbf}\xea\xe0|u\xf3\xb7\xbf\xf8\'&\xfb\xabN\xbe?\xf0\xb2\xd9\x17\x8f5\x93\xbf\xb7\xf7\x0fS\x99\xb3\x93\xbf\xc0\xb5\xe8-rC]?d1Ci\xc05\x91?}\xc8\x14w\xdf\x06Z\xbf\x00\x00\x00 <\xb7\x96?u\xa9+\xbf\x9a\xbam\xbf\x00\x00\x00\xe0\x85A\x89?\x8bA\xe6\xe3\xc3\xc9\x88\xbf\xdc_\xee\xab\xaa\xc6\x90\xbfm\xf4\xb5\xec.\r\x83\xbf\x94\xb1\xa4\x83\xc0\x19\x90?\x03\x11>7\xafVo\xbf\xcf\x9fR\xa1N\x04^?92Z\x82\x13&\'\xbf\xd9<\xdb\xb4QE|?b=\\\x9c\x81\x88\x89\xbf\x18n9\x83bz\x82\xbf\x87\x8e\xeb\x7f\x9f\x86j\xbf\x17\xdd\xa3@\xf0\x1bc?\x08:\xd2e\xa3q\x83?\x00\x00\x00\xa0\x17FX\xbf7f0\x8f\xa1\xc7\x93\xbf\x05\x0f[\x18\x0e*\x8a?\xe3\xa7\x92\xab\t\xfd^?\xed\x1ei\xa0o\xbc{?;\xad\xach\x90\xccp?\xc6\xe5\xfc\xcb\xd7\x04W\xbf\x01\x8f\xec9\xde\x1a\x89\xbf41\x9aA\xa3\xa0v?\x17\\\x85\xa6k\xce\x91?\x00WG\x1f\xf4\x06I\xbf\x00\x00\x00 4\xbb\x89?\x00\x00\x00\x00\xed\xa0\x87?\xd2\xbf\x0f\xa4\xac\x00\x7f?\xeb\xf2\x19\x02;\xd1w\xbf}\te\x1b\xe4\xc4\x7f\xbff\xa4e\xb1p\xb9\x8b\xbf\xec$\x13P\x7f\xc6|\xbfhv\xcc\xbaD\xd2\x91?\xfb\xddsX\xf5\xae_?\xc1Z\xbaU\xca\x0bv\xbf\x83\xa3\xf6\xd6\xea\xe3~\xbf\x17\x13\xa2\x19\xfe4p\xbf\xd0\xb5\xd2-\xb9g\x80\xbf\'m1\xf2KpM?\x00\x00\x00\x007K\x85\xbf\xd0V\xf2A\xf2\x9e\x83\xbf\xe2\x18g\xe0\xcd\xccg\xbf\xa5\xd5\xebn\x17\x1eQ?\x96-\xe5\xbf\x1b\xcf\x88?\x15\x0e\xf3\xdf\xa1\x7fr\xbf\x97\xd3~4\x05eb?\xa4^\xb3\xa7_\xe6\x82\xbfB\x00\xeb\x9e!n\x89\xbfL\x89\x03\x0c\xe51\x8b?\x00\x00\x00\xc0\xa9\x0f\x90\xbf\xdew=\x8cT\x7f\x7f?\xc9\xc1\x7f\xf3\xa2\x7fe?\xbe\xece(\x8e\xafi?\xa0\xe8Q\xa6\xe8$\x89?58\x82\x14_\xfas?d1s\x8cdEp\xbf\xdb \xeaLD\x99\x8e?\xc2\x1bh\xa8m\x95\x81?O\x16<I"\x0cw?>2\xc8-\xbb\xcd\x90\xbf\xe0j\xccJ\x8c\xc7\x94?no\x97\xa0X$\x18?\x8b\xdc\x82\xd7al\x82?\xbd\x81I\xc6\x1e[\x94\xbf\xafm\xa7"<{\x88\xbf\x00\x00\x00\x00[\xe8v\xbf^pK\xd3\xd1@\x80?\xab\x1e\xc0S\x16k\x87\xbf\xfb0\x83)\xc2\xa1\x80\xbfJKI`\x1b\xbf\x80?\x96q\xe8\xe0\xe9\xe9>\xbf\x1d\x13KY\x94;t\xbf\xc0\xa6\xab\x18\x85\xac\x83\xbf3Ly\xfe\xa7\xd2n?\xe7\xc0\xe0i\xd55\x85?*\xa0\r#-\xf0A?\xc0\xbd\xc1d\xa3\xbat?JX\xd4\xd2\x87S\x96?\xba@\xf9\x19\xfd\x18\x84?\xb5\xc2SU\x7fg\x81\xbf[e\xf9%\xb9\x8ci\xbf\x00\x00\x00\x802\xb2\x90\xbfU\xf4\xfcW>\x86s?vVI\xbd\xe4\xeac\xbf\x00\x00\x00\xe03\xda\x8b\xbf\xb6\x10j\x94\xd0\x90i\xbf\x0f~\xbc\x82&\xf7|?D\xc0$-\xad\x88\x8e\xbf\xaa\xc6\xcd\x99\xe1\'|?\x1e\x80\x0e\x7f\x02\xf4\x87?4\xae\xf4\xd2\xf9\x85x?F\x93\xef5_\xce[?\x05"\x94\xabZV\x83\xbf\xb93\xf5\xb53\xb9\x8b?\x00\xc8\x92\xc3\xaaDY\xbf\x89\xfc\x91\xcb\xa5J\x8a\xbf\tj\xc1\xc4\xa4\x8b\x84\xbf\xfa\x83/\xe1\x1bf~?\xd3\x03\xd0\xf3\x15\x80\x91?\xbc\xf0\x85\xb4\xf1!r?O7\x11\x850\x0e\x88?\xac\xdb>\xbf \x84z?a\xd7|\x85(J\x94?\xfc\xcb\x9b\xeb\xff\x91\x93\xbf\x15\nq\xc1\xc7\xec`\xbfrZ\xfb$>C}?\xdb\xe9\x7f\xf6\xdd\xc0\x82?\xf7\x10nU\x16>\x87?\xed\x16\x91\xd3\xbf\x1b\x8e\xbf\xda\xa9(\xf6\xfa3\x87\xbf).\x97\x81t1\xcb\xbf3\xd4\x197%Qo?\xab\x02z\xac|\xb8\x93\xbf\xbe2\xba\x00`\x18\xcf\xbf\x7f1\xbf\xf3R\x1au\xbf\xe2\x06\x1b\xaa\x95\xf9\x90\xbf&\xe6\xb2E\x96#~\xbfX\xd4\x1bHC\xccz?x\x9f\xb5\xb6\xec`\x8f\xbfyl>\x06d\x8a\x83?\x8ed\xafUoRp\xbf\xb4\x7f\x86\xc2\xaeH\x88\xbfN\xbf\xc9\xf9\xd6u\x94\xbfJ\x14bD\x93\xb3\x8e?\x91\xd8\xadM\xed(\xe2\xbf\xae<F\xd3un\xa7??\x1c\xdb@\x0fY\x7f?\xe5\xaf^\xb9\x0f\x11\x9c\xbf\xe5\x7f0\x92o\x1f\x80\xbf\xc20\x1di\x98\x85\x86\xbfWL\x95\xebn\xd2s?u\xddE\xf6\xb4V\x91\xbfH\xa0\x9b\x99\xd2\x92B\xbf\xaaS\xcc\xeb\xd8\x05\xcf\xbf\xaf\xa8A\xcb5\x9b\x7f\xbf[\xa0\xf9H\xec\x88\x83?\xee\xd5&b\xbbR\x88\xbf\x8c\xb0\x11\xe7)8\x97\xbf\xc1\xf3\xc4\x17\xe6\xb9\x87\xbfo\xde,\x15\x1c\x1e\x95\xbf7\xef\xbb\xe6\r\xcc\xce?\x07\xf1\x83i_\x95\x93\xbf\xa6D\x7f\xbb\x95\xbc\x94?vn!3\n\'\x84?\x83X\xfa\x8f\xc0\xf6\x8a\xbfMi\xf8K\x03\xf4\x9b\xbf\x01\xab\xb7\xd3\x92]\xd0\xbf\xa2g\x10\x18\x87\xc6?\xbf\x05\xfd\xf9\xe2\xe1?y?\xc47\xe5iL%|\xbfe\x07(\x8bb\x08Z\xbfZk>\n\x9f\xf0\xa5\xbf\xe9\xa5U\x07\xb1|m?4cQB\xe6\x91z\xbf\x8f\x060\x01\xffR\x91\xbf\xf9R]\xa1\xd9=p?\x80\xdd|\x17t\xfc\x8b\xbf\xb6\xaa\xfb.\xae\xfc\x8e\xbfN\xdf\xddn\xc0x\x89\xbf\xb2\x967\xe2\xe1\t\xa7\xbf\xe8\x9d\x06z+\xedD\xbf\xf1\xceTE._\xa8\xbf\xab\x9e\x06ar\xd6S\xbfB\xad9\x12\x1e<\x8c?F&\x91\x9c\xfe\xfb\xd5?7\x7f\xedd\x8ci_?x\xc8\xa2\xfe\x83\xf0x?n\xe2\x84\xff\xd43\x93?B\xcc\'m\xfb\xda\x8c\xbf6\xb7\x82\xfe\xc7\xb5\x86\xbf\xf9\xa7JA\xbf3u\xbf\xfaz;\x06\xdb\xa3\xa5\xbf\xc1\xab\x8f\x92\xf7\xdbf?\xfc\xd9oOw\x91{\xbf\xbe.x\xf4b\xc5\xe0\xbf\xf5\x1c\xf3\x8f\x9b\xe6\x93\xbf\x9d\xb2\xc3Z\'\x0bq\xbf\x938\xb6E5\x94t\xbf\x9cV0J\x1f\x90}?`\xb5\xf7\x9d\x1bL\xd4\xbf`d\x9a\x0c\xc1\xa6t\xbf\xf5f\xe9\x13\xd2x\x7f\xbf\x0fZII\xa9:G?\x88\xc3V0\x1a\x08o?\xbe\xd64x\xe8Ap?\x12\xe33\xf8\x00\x00\xa9\xbf\xd2\x1f")\x13X\xa8?\xd1o\xc1mN\x80\x8f\xbf@\xc6\xaa\xd1i\x02\xa9\xbf\xd2\xf6O6nW\x95?\xabJeu\x95\xa3W\xbf.\xa7\xf4\xa3\xf0\xcd\x11\xbf\x1c\xa2\x90\xd3\xa4O\xb1?\x00\x00\x00\xa0\xf9\xb2v\xbf\xc1(g\xd1\xd5\xd4q\xbf`"+\xc2U\x04\x94\xbf7(\xf3\xb9\x11\to?\xb0\xa8\xb2\xe3\xbcy\xce\xbfl\x96\xd5\xb3hS\x92\xbf\xdd\xe5\t6\xd4\xd7\xcb\xbf\xf2f\xd1X/\x01\x8d\xbf/\xe7A\xa8\xba\n\x9c?\xbd\xa94\xb8k\x8c\xb1?N\xb4!\xb9q\x04\xbb\xbf\x81\x878\xb1>\x10\xa6\xbf!\x87\x01\x06|\x98\xc3\xbf\xb5pi\x15A\xd3\xa0?\xd7@a\x14\x82\xbe\x80\xbf\xf9\r\xc0\x91\xd4\x10\xb0\xbf\xb4q\xe85[\xd0\xbe\xbf\xa4\xc5\x91\x85p,\xb1\xbfx\xd5\xa1(\x9d\xc6\xd3?\xd8J\xb6\xd9\xd3J\xfa\xbf\x85m\x04t\xbe\xd5\xd0\xbf^0q\x99_\xad\x92\xbf\xb5\x835H\xe7\xf3\xb3?w\x93\x98Ri\xef\x96\xbf\xd9{\xbc\\\xd2X\xad\xbf(\x97e\xe2\xc7A\xbd\xbf\xbfT\x0c^\xf2\x7f\xb0?i!\xbbTC\xa1\xb0\xbfA"\x9a\'\xfb\xc8\xc5\xbf~[\xd7\xd4\x1at\xb6\xbf\r\xe7\x98\x96/K\x9f\xbf\xd2\xebk\x95\x05\xa7\xa5?|\xa2\xd2B\x80O`\xbf\xad\'}\x80):\x80\xbf\xb0D\x02\xfez!\xb0\xbf\xe8\x95E\x1d\x1a[\xd7\xbf,>8\xbfm\xd1\xaa\xbf\xdcrDEch\xbf\xbf\xed\x07s\xdf\xd5\x1f\x94\xbf\xdc\x7f\xdc\xd8\xbe\xd8\x94\xbf8\x8d\xb6V(\x91\xc6\xbf\xd5\x91H[A?\xa2?\xf8\t\x90\x07}d\x9d\xbfZ\x17\xf3\xfb\x86\xca\xd2\xbf\xd2\t&U(\x1e\xb5\xbf\x04.\x81*\x86#\x9e\xbf\xb3k0\xf1u\xde\xa8\xbf/.\xd1\xfe\xc9\x15\xb7\xbf\xef-\xe8\xed-\x954\xc0T\xcb\x02\xca\x07\x9d\xe6?\n\x93\x9c\x88\x9dD\x81\xbf\xe9\x1a\n\xa5W^\xd2\xbf\x06\x91\xac\xe0\x9c\x96\xdd\xbf\xceP\xef\xb8\xb1\xcc\xe0\xbf\x14\x87\xda O\xa2\xc5?H\xaa6\xdd\xf6\xdf\xe2\xbf\xb9\x834\xb3\xeb\xcf\x8e\xbf{G\xd7&c\xa8\x12\xc0&\xc1\xfb^\x1c\x84\x03\xc0\xf6\xda\xd8\xfa\x8f\x0f\xd1\xbf\x90\xedg\x7f\xf6\x04\xda\xbf\xbd\x975\x93\xae\x80!@R\xc11\x17\x03[\xc3\xbf\xbd~\xd9t\xa9h\x81\xbfU;]Z\xe1<\x1d\xc0\xcd\x10:\xe1O\x0fq\xbf\xaa\xe2\xd0G\xacl\x1d\xc0\xb2\x1b\xe7}\xedR\xc6\xbf\xce\x12l}\xdb\x8e\xb2?+\x15o\xe1\x0f]\x83?G\xacR\xc25\xbb\xda\xbfh1_\x04\xa7\x05\xb9\xbf[\x00\xbf\x1c\xda-\x9b\xbfQ\'\xc7\xc5\x94\x05\x83\xbfmg\t Q`\xdb\xbf3\xf0\xa6\xeb\xac\x18\x8e\xbf\t\x0e\x8b\xce\x85y\x95\xbf\xc5\xbf\x07\x9f\xa9\xe5D\xbfX\x88\x11|ja\t\xc0\x83\xe0\xc2#S\x0e\xc1\xbf\xf2\xfe\xb8\xd0\x9b\x1b\x98\xbf*\xbe\xbcq\x98\xdb\x81\xbf\x89t\x8f\x10 \x14\xdb\xbf\xeb\x02<\x0fp<\x9a\xbf\x8f\x0bE\xfa\xe3\xf5\n@\xde\xf5(\x9e\x87H\x86\xbfC\xa7\xad/\x96h\xbf\xbfj\x16\x93\xf9k\xe0\x84\xbf\x11\x1eUG^l\x82\xbfk;\xb2$\x1fk\xd0\xbf\xc5h\x06\x07\xe0\xb8\xc8\xbf\xa3\xb4\x14z\xd7lp\xbf;Z\x99\xa7E\x14\x11\xc0\x11<\x009z\xaa\xaa?\xdb\xb2\xaa\xcc\x10\x1d\xb0\xbf\x0c\xd1\x9ec\xf1u\xb0\xbf\xf9\xae&v\xd6\xce\xba\xbf\xd3\x1b\xfe\xabqax\xbf\xae\xdc\xf2\x8f\xae\x9cd\xbf\xf5Z\xa8\xf3-\x97\xa6?\xc1g\x14\xe7\xb22\x81?@\x82\'\x1dLS\xbe\xbf\xbe)\xbe\xdc\x836:\xbf\x8a1\x17 \xcems?9\xe9L\xf2\x84\xcc\xa6\xbf\xb2\xae\xe3\x93\xe2\xb1^\xbfI\x9c\xf1\xbbt\xd2\x97?\xd3\x9ay\xb6\\\xbd\x83?]\xe2\xc1\xce\xfe\xe8\xa1\xbfL^\xb1\xec|\x88\x93\xbfK.\xc6b\x0eM\xa2\xbf\x83\xbe\n!X\xd6\xac?\x90\x0c\xa1o\xdb\x05\x9a\xbf\x8c\x9a|\xb8\xf6<\x95\xbf\xbf\x8bt\xea\x9f\xbe\x9b\xbf\x87\xfa\x0e\x94c\x05\x9d?\xc6\x0c\xa8\x19<\x9f\xaf\xbf\xdeju\xf9\x0bW\x84\xbf\xf2\xcaJ\x13b\x08\x97?\x07\x1c\xe9\xe4\xed\x97\x9c\xbfY\xfam\xf8\xbc"\xd8\xbf\x1d\xc5\xbe\xda\xd2-x\xbf\x08b\xc3\r\x93\x1c\x90\xbf\x98\x12a)\nx\x8a\xbf\xbb\x0b~\\\x1bMp? \xa1\xfc\xdc?\xd5\x9c\xbf\x02\xf9g\x18\xe1\xd9\x83\xbf\xce\x90\xb1\xb7\xbb3\x80?\xf0H\x07k\xb4c\x96\xbf\x9b\x90\xdd|\xe1)\x91\xbf+\xa7F\xcc0=~\xbf9\x96\xdePQ\x1f\xb2\xbf9\x17\x02\xba\x8c\xad\x82?\xa4\xb2\xfa\xc8\xe7`/\xbf\xe8i\xa0\x05\xa70\xb5\xbf\xa8"\x1e\xab9\x92\x89?\x19\xa8\x01\xfa\x7f\xc4\x89\xbfQJ\xc7mC\x02\x83\xbf\x90E\xa0j\x1bj\x9d?\xaa\xe9N\x9a\xb0+~\xbf\t<cP@\x14\xaf\xbf,\xcfK\xe2\xd1\xfd:?\x17\x1e\xcb\x90_\xe4S\xbf9\xd3,a\xcc\xa6\xa1\xbf\x96\xdc\xb8C\xc2=r\xbf\xe4\xf3\xf4\'\xeb\xc6X\xbf\x9c\xf0\xd3^\xc4m~\xbfb\x16\xaa\xa7@\xc1\xbb\xbf\x049z\xe3\xa7?\xa0\xbf\x02\xc9\xf5\x92-.\xbc?\x06\x8a\x8f\xcc\xc1\xee\xa4\xbf\xe4j\x14J\x9e\xf4\xab\xbfI\xda\t5tj\xc5?Y}\x15\x10\xb9\xf6\xb0\xbf\x923m\xdaD\xfeo\xbf\xb5\x93;^K\xef\xb7?\xf4b\x86\x89\x12\xfb\x88?z\xdf\xc7\x00\xe6\xd5\xb2\xbf\x08\x00ZP\x0fi\x9c\xbf%\xf2\xc9\x80\x95\xf7\x99\xbf\xbd[\xd1L\x9c\x9c\xb2\xbf\xbeu\x85\\\xad\xba\x8e?p+<6;K\xb2\xbf}(\xd4s\xf0\xe7z?P\x80\xea\xc1\xd9\xd6\x8b\xbfq\xc0$lf/\x93\xbf\xd6\xd3\x7f\x19xx\xa1\xbfG\xac\xbf\x7fN\x81P\xbfWF\xe36\xd0,\x83\xbf2\xb4\xa1P\x03\xdf|?\x9b\x03\xc8j\xd5\\\xba?\x1d\xe4\x90\xbc\xc9\xcd\xb9?\x93H\x8c\xa6\x16\xf7b?\xdf\xfc\x9e<\xf1\x9e\x8e\xbf\xca\xe73\x10\x92\xb2\xa8?e\x94\xaeJ\xa2o\x99?Fl\xa9\xf0U\xfe\x85?..\x07\x17\xf0nS?\xc5\xba\xd1X|\xfb\xa1\xbf\x7f\x07a\x0fn\xe5\x94?\xd1\xd1<!\x10+q\xbf\xbfyEM\xaf\x9c\x94?\xd1k\x89`mW\x9d\xbf\x8fz\xf2k.Tg?\x81=\x81\xd2hW\xa1\xbf\x87\xa3\xe8\x0ewt\x8b?\x03\xf4\x12k\xad\xfe\xcd\xbf\x85;&i\n\xef\\\xbf\\j\xac*\xf46\x92\xbf\xaa\x1fR\xd7)\xfc\x9b?\x83\xffb\xc2\xc0G\xa6?2\xb7al,P\x8d\xbf\x02a9\x91\xd5\xa2\x80\xbfz\xa7\xe3\xe6\xbdf\x90\xbf\x13\x1c\x03\xe2\xbc\xb3\x90\xbfO\x99\x15[\xf4rv\xbf\xe0\x12\xf5\x90\x91\xfa\x80\xbf\xb9\x03\x16e\xc8\xa2h?-\xc1\x10\xab\xf3s\xa3\xbf\x15\xda\x84i\x00\xb8\xc0\xbf%b\xabf6\xd4}?iy\'\x1cs(\xb2\xbf\xe6\xb7\xf5\xaa\x18\x8d\xaa?Q\x9a\xd3+u\xa2\xa2?\xf0\x1d\xef\xce\xc6n\xc6?Ru%4\x87\xf3\x8a\xbf\xe0\x8c{\xe8M\xb3\x8d\xbf\xfeH/e\x962\x92\xbf7\xb3U\xa59\x8c\xc4\xbfz\xc6\xa3b\x1f\xe3\xdb\xbf\x89Mr\xdb\x83\xa2\xc9\xbf\xf8~\x1d\xdd\xd1n\xcb\xbfU[E\xbf#\x97\xe7\xbf\xd3\x1b\x1cS\xa0\xaa\xb3?P\xab\xaar\xdd\xed\xf4\xbf\x81\x0cH\xd1[\xa4\x91?\x9a>\x08(\xbe\x9a\xcd\xbf\x02\x87\xc2\x0e\xdeG\xc7\xbf3V\xe43\x10\xe7\xc6\xbf\xf9F\x02G\xa7\xc6\xbe\xbf\xe7\x14\xe9\x9f(\xe1\xb8\xbf%\x14\x05<o>\x9c\xbfw^)\xd9\x1a\x15\xc5\xbf\x8b\xcd\x1f\x8e|q\x80\xbf\xde$\x8bN\x82\xb2\x87?\x1b\x1a\x84v\x99;\x92?\x9c\tz\x8eI&\xc6\xbf\xb1X\x8d\xbb\t\xd6\xd7\xbf\xf5\xbdI\xa7nW\xef\xbf\xbd~\x1f<\xf2\x90\xd9\xbfK\x84\xaa\r\x91\xf4\xae\xbf\xb4F\xaf\xff\x1a\x95\xd0?=\x93\xc8\x0e\xa4nT?\xeeV\x18\xd2\xf0\x9e\x88\xbf\x15\x8f-\xad\x11\xca\xe1\xbfu9oru\xa4\xc4\xbf\x84\x1d\r\xc8L\x8as\xbf6=\\\xa8\xc8:\xda\xbf=\x9d\x03\xbc\xf1M\xb0?\xe1\x85\x87\x83U\xb8\xb8?S:\x01\xdcu\x88\xe3\xbf\x83\x16\x98\x1d\x94p\xe0\xbf\xbe?\xcf)\nZ\x8d\xbf\xc0\xa0\xec\x84\xb7)\xfa\xbfC\xd4\xa8\x92\xb8\x05\x91?w3\xde\xb4\xa2\'\x8e\xbf\xa0uI\xcd`]\xa4\xbf\xd2\xfd\x04:\x9c^u?\xe1\xe9\x8bp$\xdc\xd5\xbf\xdc\x16\x99\xa7\x1f\xf3\xa9\xbf\x91\x90&\xb6\xb2\x1a\xeb\xbf\xcf8V-8\x05\xd1\xbf\t,\xaa{F\x82\x9d?\x9c\x94j\xcf\xee\x81\xeb\xbf\xac\xf0\xcb,m\xf5\xc6\xbfITJ\x0c~$\xb1\xbf\xb6X\xb1\xdcxrv\xbf\xe2\xf2\xc9\xac\xc7\xfc\xb3\xbf1\x18\xc5\xff\x8a4\xc7\xbfs\xce)Y[\x11\xc7\xbf;\x13\x03\x9b1A\xd4\xbf\n\x86\xab\x83V\xc3\xc0\xbf\xd3\xe4\xfepLx\xd9\xbf\xae\x86)b+\xcf\x8e\xbf\xfeut#\xa5_\xc3\xbf\x89b\x9c\xc2\x0e_\x97\xbft\x9b:\x0f\xd1\xbc\xa1\xbf\xc9\xc6\xba\x12"\xc9\xa3\xbf\t\xc5\x16\xb4i\x01\xe8\xbfG\x12\xfcR\x1f\x0c\xaa\xbf\x14,\x9a\xc6\x15u\xcd\xbf\x85dA\xf8\xdd\xb0\xde\xbf\x14L\xedn\x8bs\x98\xbf\xd1Q\x12y\xe1S\xb3?\x9cb\xb6\x85=u\xa2\xbffq|\xc7U\x9f\x88\xbfoH\xf9\xdc\xee\xdaD?0Z/Vl.\x9c?\xe0"m \xd5[\xc8\xbf\xb8\xca_\xea\x11+\xbb\xbfW\x96\xa9\xdf\x8e\xe9\x90\xbfPl\xd64%q\xc7?\x9c\xef\x95t}\x1e\xd2\xbf\xfd\x0f4j0)\x83\xbfg\x1e0\xaf_I\xbc\xbf\x02\xdf\x92\xf6`\xd8z\xbf\xa8\x8f\x88p\x90&\xc8?\xd1I[\x0fN){\xbf\x17G\x0fH}s^\xbf\x87B\x14\xe3\x01\x0f\xd1?0;\xa5Q\xe4d\x98?= s\x03;Hw?\xccd8W\xc7\x0fr\xbfv\xcdut;X\xc4\xbf\x19\xb4\xb0\x06XQ\xb6\xbf~P\x8b\xd4\xdc"\xd1?>\xa8JO\x88\xad\xc0?]\x10\x19o{nf\xbf\xa0C+^\xb5\x04\xc0\xbf\x19\xe9.\x91Y\xe6\xd1?\xa9y\xa7\x88\xa7y\x92\xbf\x943\xfd\xa5<=\xca\xbf\xcfU\xbb\xf9\xb6\x18g\xbf\xc2\xbf\xd2w\x98\xcfk?\xd9p\xbb<\xb4\xa6\xd3\xbf\xb3\xeeyK\xc0kS\xbf\x11\xa5$c\x1a\x9c\xc0\xbf\xd6S\xdb\t\x0f\xbb\x8c\xbf\xddV\xb3n\xbf\x17\xab?>%\x9b\xe5\x19\xa8\x91\xbf\xd0\xe9\x9b\x83\xc2\\\xa2\xbf]$8^\x82\xcf\xb6\xbf\xa9G\x19\x1c\x87#\xc5\xbf-\x99\xbej\x9f[\x9c\xbf\xad\xa7\xee\xd1\xd5\xf8\xc9\xbf\xde\xfb}\x19\xc7\x91\x91\xbf\x8a\xb8\xabN\x159\x9f?\x0c\xe7\xc5\xabt\x99\x96\xbf\x1b\xcf\x1e\x8c\x05K\x92?\x82\xc4\xbe\xa9\xd1\xa0\xb2\xbf(h\xa4s\x02\t\xa8\xbf\\\x01\xd0N\xe6Zc\xbfi\xb3KeC\xd5\xa1\xbf\xdf\xa4\x18\xd70 x?\xe0\xac\xde\x16\xb3V\x8a\xbf\x1f\r\xf0\xe9\xeai\xb2\xbf\x94\xb3b\xa5\x18\xd3\xa2\xbf?81\'F{c\xbf\xa3\x9f\xd1\xa6}-\xbb\xbf\xf8{\xd7H\xe0\x9f\xb0\xbf\xf4\xb2%3K\xa4i?v\xdb\x02_!c\xaa?\t\xb0^N\x03\xc0l?7T7\x15\xe4\xadV?\xb0\xa2,A\xd1\xe9\xcd\xbf\xf8\x94;\xf2+\xb8\xa2\xbf\x0eX}\xb1\xbe\xb5\x7f\xbf\x1d!\x8ff)\x81u\xbf\xbc(\x90\x16\x1f\xd4\xa5\xbf\xee\xfb\xd2\xb8lrs?+\x1f\xfa\x85Dd\xa2\xbf|\xe7\xc9\xe8\xbet\x9b\xbf\x07|6\xcb\\\xccp?\x91\xa1jW\xebs\xc7\xbf\xc0$\xab\xdb\xb2\xc3s?a\xe1\xb7\xf7V\xfe\x8a?h\x9a\x95\xab\x98Z\x82?\xc6\x99\xe6\xc9?\xd9\x8b?P\xdd\xe92\xf3v\xcb\xbf\x03\xa9\x08\x073\xba\xa2\xbfJ\x13\xcc\x9f\xdeP\x94\xbf\xec\x93k\xab3d\xbc\xbf\x0e,\x8e\xb0H\xb9\xe6\xbf\\\xa5\xaa\xd4\xf3\xe8\xb1\xbf"\x05m7\xa2\xcb\xb7\xbf4\xe9\x890F\xfa\xe2\xbf\xaa\xf2z\x05\xb0U\x8e?\x9aD\'\x8f!\x19\xa0\xbf\xaa\x9cJ\xec\x91V\x92\xbf4\x17B2\x16\xd3\x8c\xbf\xff(\x99&\x01o\xc3\xbf9\xc24 t\xeaP?"\x8b\xdc\xb5\xe7\xd9\xdd\xbf@\xdeU\x02a|%\xbfC\xaaU\xf2\x1a^\xc4\xbf!\xf7\x06\x86\x0b@v?\xd2$\xe8Z\xc1\xb2\xb6\xbf5\xcej\t\xbd\xf5\xa6\xbf\x19u\xcd\xc9\x0e\xe1\xbc\xbfs\x8b\xcd\xf9\xd6\xd4\x96\xbf\x0c\x1c\x90\xe6\x13\xd6\xe2\xbfN\x18 6\xf4\xa0}\xbfI\x02\'\xbaO\xe3}\xbf\xd9\x19\x9e\x00By\x99?\x11\x04s*i+\xc7\xbf\xd0\xd5\x1c\x88\xb9\x05b?k\x07\xe5\xa4\xfd\x02\x83?\xa7\xb5+\xff"t\x85\xbf\xd2\xad\t\x12\x12\xe7\x96\xbf\x9ap5\x1f\xc8\xd4\xc4\xbf\x95\xafw\xa6d#\x88\xbf\x0b\xd5\xc7\xce\xc7Y\xd0\xbf\xd5\xca\xa3\xd9\xd6\x0f\xa3\xbfV{n?\xb7\xd4j\xbf\x1c\r\xc3\xfd\xd4W\x92\xbf\xbeJ\x118\x96H\x89\xbfy\xbe\xfcc\xd6\x86_?\x99m[\x8e\'\xd0\x90\xbf0iu\xb0I\x1ec?\xd3\xc0\xa4C\x10\xb7`?\xd3:R\x12(\xf0\xd2\xbf|s\xff4\xf2-\x81\xbf\x01\xe0\x8f F\xf2\xb5\xbfV,\xcf\x13\xf1|\x83\xbfy\x0cXk\xf5\xc5\xc8\xbf}3\xf0b\xa0\t\x8f?e\x13\x97\xad\x1b\x08\xa8?\x9f\xb5\xb8b\xc7\xd7Q?\x19\xb83\xe0\x1f\xb6\xab\xbf\xd5\xfe\xdb\x0b-\xa3\xb0\xbf\xd6\xd0It\xae\xaek?\x9f\xe1)\x94X\xdf\xb0\xbf\xf2\xf0\xcc\xd1\x1cr\x95?V\x0ch\xf2\xf7aS?!\x88\x1d\xeeE\x1b\xc9\xbf\xf7{\xe1 \xf9O\x81?`\xa2\'\xb0\x0fE\xb0\xbf\xac\xf2\xab\xe7\x04\x84\x9a?\x81t\xf6\x15\xb5R}?\x88(t\xcc<X\xaf\xbf[3w\xac\xd8\x02\xa1\xbf\xcc\x9a\xe3\xaa\xa2,<?\x80\xaa\xb3E`A\xb0?\xaeM\xa0\xe9x\xda\xb7\xbfix\x19\xf0\xe8\xa1\xa5?\x084\xf3U\x0c\xca\x94\xbfXB\xff\xf2\xc1\x82z\xbfa\xb2\xfcg\xc6J\xaf\xbf]\xcb\xfa\xef\x17\xdf\x8d\xbfBA\xee\x90\xf1-\xb3\xbf+\xa6M\x13\xcb\xf4t\xbf\x89x\xe9\x1fO\xf3\x94\xbf\xf7\'\xd9\xbd\xea)h?>\xffR\x90\x07\xa9\x90?G{}\xc0\x14\x87\x84?\xe3G\\\xad\xbb\xe1\xb7\xbfc\xb3\x11\xc8\xaa\xca\x84?\xb80R\x8f98\x80?=\x89\xdf\x10L\x03\xb6?\xf5\xebK\xf2\xd6lk\xbf\x01C.\x9e*\x029?\xaa\xff\xaa\xcbL:\xb4?\xacXHS\xa3\x1fq\xbf\xfb?v\xa5`Q\x8b\xbf\x8a\x12\xba]\xc0%\x97\xbf\xb2X\xaeO\xe5\x06y?\x0b\xb0X\xcf#Y\x93?\x14\xc1\xde6C\x1e\x88?j}n\xdf\xc4\xcc\xa6?\xa7\x12\\t\x0f\xf6\x7f\xbf\xfcF\xa2\x9ey\xb6\xb4\xbfa7\xe3\xa4\xf6\x16\x91?%\x91\xd0\xef?R\x92?7e\xef\xbe(>\xc0?\t\xa1Xo\x9e\x96\x9b?\xafY\x19|\x0b\xa3\x89\xbfy\xdcgI=pj?\xe9\xc3"\xc1F\x9a\xc7\xbf\xf0\xf5\x1bO,T\xba\xbf\xff\x03\xb8\t\x02v\xad\xbf\xae\xd7\x7f\xf2\xfa\xb0\xa3\xbf\x12b\x8f\xba\xb6\xa0\x84\xbf\xcf\xeco\xfd\xc2\x0f\xe1\xbf\xbd/r\xc4O\xaa\xa4\xbf4K\xe0\x0f\xf5\xac\xaf\xbf\x15\xa8\xfe\x12\x03\xd9\xd8\xbfc\xf4\x03\xfc\x14\xa9\x87?J\xe9\xa8U\xd3k\xc5\xbfzI\x89I,E\xc1\xbf\xb5\xfb\x05\xd3>\xd6\xb3\xbf\xa0\x8e\xc8B\x01\x92`?\x88\x03n\xd8\x9e\xf0\xb4\xbf\xcaF\xbeb<#\xd2\xbf6\xa6\x06t\xe5\xdd\x80\xbf\xe5\xf5\xcb\xcf\x9eX\xc0\xbfAg&\xec%#w\xbf$\x84\x18\xd9}5\xb7\xbf\xa9\xc39\xf8H\xb5\x83\xbf\xb138]\x92{\xb7?\x02\xc0\xc1a\xfa\xe3\x8d?2!\x07\x13\x8c\xe6\xd7\xbf\xb1\x1a\xfd.b\xf1\x8a?\xd9\xce\xd0\x19\x85Kf\xbf\xcb\x17\x96\xf02DQ\xbf\xb9\xf1\xf7(\x08\xbf\xc1\xbf\xa9\xc2)\x1b\xc4\x1e]\xbfJz\xbfVcFX\xbfo9\xc7|}\xfcq\xbf\xd4\x8d0\xb38\xc4k?\xe8"\x8d\x01iP\xb3\xbfa5v\xff\xc4\x86\x83\xbf\x0f\xbd\'\xb1xT\xcb\xbf\x17\xfd\x1fZ\xf6\x1a\x97?\xda}\x853\x1c\xf1>?G\xf1\x8f\x12\x9f\xe6\xa5\xbf$De%\x84\x9c\x89?,\xbd\xe9\x0c\xfc\x13\xbb\xbf\x06[\xd2ha\xd2\x98\xbfk\x87\xfe\x1b\xce\xde\x8d\xbf\xe3NSf}\xc7\xa1\xbf\x88\x00b<\x9b\t\xc5\xbfy\x01\xb9\x08|\xb9\xa6?M\xe4\xc44\xd4\xce\xad\xbf\xdeu&\xe6W\xf2\xae\xbf\xe5.h,\xbb\x9a\xbe\xbfJ\x84\x07CM$\xb7?8j\xc9^P\x15\xa1?\xbd\xdd syQ\x8b?\x03\xfd\xb2\xbc\xd6\xe5\xb0\xbf\xe3hn\x17\x07\x8f\xca?n\x98yx\n\xe2c?\xf5\xb7\x0f*\x8b\x97\x88\xbf\x17\x16\xcdq\xe6\xda\x90?}\xd4W\xe7\x8en\x8b\xbf_\x8a\x14Vp\x03\x7f?;\x01\x7fF\xb6\xb6\x8e\xbf\xe6\tG\xff\x1dfg?\xbe\x8bo\xe3\xd6\x80\x8c\xbf<\xae[\xd16\xbdv?\x80$`\xf1\xcc~I\xbf(M6Dh\x0f\x90?6f\xe0\xa4\x8aJ\x85\xbf\x96x+\x91\x06\xcdv?+\x80\x11GI\xdey?l\xfd\x06&8\x95G?\x85\xba\xda\x8a\x18\xf8\x82?\xb6L\xa4\xc0\xa9<~\xbf~\xcf7\xd5K=\xa1\xbf\x00\xec2\xf7\xbc\xcc\x88\xbf>\x99\x11\xb5\xf7\'\x8b\xbf\xfa\x15\xaf\x82o\x90\x92\xbf@\xecd\xd8)]\x8d?\xc9\xe04c!OX\xbf\x00\x00\x00\xe0\xbf\xfd\x8d?\xf4AD\xcbYQS?\x01\xa5\x1c\x03\x19\xd6o?\xdf\xe2\x01\x02\x19\xc2\x80?F\x98\x16\xd2\x1f@\x88?\xabU\x8d\x1e=\x11c?\xbc\xab2\xa0r\x01\x82\xbf\x8b\x9a\xc8\xea\xfeQr? \xc3F9O`\x8a?\xf0\xf9_\xf0`g=?*#I\x18\xb8\xc2\xed>\xf2\xa1\xe8\x80\xe4\xd2\x88?x\xcc>\xb7R}|?\xcat\x880\x08\x10p\xbf\x06\x8e\x96n\x99\x86z?8tn\x8b[\xa4\x87\xbf\x1d\xb1*M\xc1\xbaz?1\xa6\xf8=\xa1\xef\x90\xbf\xdc\\,\xe7\x92\xe0p\xbf\x90\xba%p\x8al\x81\xbfD\xdd\xc7\xf76\x9c\x81?\xa6P\xa2Q\x90TS?;\xc1\xec=\x13&\x92?2\xf8\xc41\x8eS\x80?\xa2^\'T,\x86\x8b? \xc4\xaa\xc7\r\xc2v?\x08\x10\x1f>|\x8cl?\xfd\xcc\x08\x82\'\x1bi?D\x80\xf7\x04\xaf\xcfN\xbf\x87)\x08TY\x95c\xbf\x88\xf0\xc09\x82d\x94\xbf \xa7\x8c\xcd\x83\x04\x80?t\xf7\xb8\x90\xe5X\x86\xbf\x00\x00\x00\x80\xbe\xfa\x82\xbfB(\x1c\xfdS\xd3l\xbf6a\x87&\xadgx?\x9a$\x9b\xf1\xc0\x98q?\x86b\xf7h\xce\xe6\x8c\xbf:T\\O7\x88\x87?\xe6X\xd7\xbf\xe2\xe2\x91?h\x9b"\xb8t(\x80?h\xa34>\xa0Mm?[A\xa8E\xf6\xeb\x81?\x90\xfe\xa9\xb7:N\x87?c\xa8\xc8\xeb\xc14\x8b?\xeeb\x1f1\xcaKt\xbf\x0b\xd32\xbc\xe7\xf5\x82\xbf\x1c\xcbG\xdb\x11\x1e\x8e\xbf\xa5\xea69\x9bj\x90?\xe4\x8e\x1a\xaf|[p?RvAqg\x0e\x83?\xaf\x96\x0eR9\x13\x97\xbfZ^\xbd\xd1\xec\x01x\xbf\xc1p3\xf7t\'L?\x1f\xf6\xedgw\x13s\xbft\xf3\'\xcaH5}?\x0e\xba\x00\xd2\xdcRz?\x00\x00\x00\x80\xc2\xe0x?\xd5\xc0\xe7\x90\x93\xa7v\xbf\xb7\xa77\xe0>\x8ar?\xca\xa6\x93e!\xc2n?\xbf\xa4\xb8\xfe\xa4\xd0\x90\xbf\x1d\x99%\x9d\x04\xccx\xbf\x15\x91%\x01\x06i2\xbfC\x83A\xbfgl\x98?\x00\x00\x00\x80/r\x92?\xe7O\xf2$\xb0\xbe\x95\xbf\xa6\xff\\\x9f\x16\x0f\x83?r\xce\xb0W\xf4=t?\x00\xc3_?\xad\xd3e?\x18\\\xc31\xc8\n\x19?eN\xd4\xe2\x13\xbag?\xa4\xac"P\xe9\xdc\xc4?\xdb9B1\x92e\x87\xbf\x9e\xd9b|\xebUk?\x9a\xebt\xbe\x07\xaf\x83?c\xed\xa3I\x11\xf9w?\x00\x00\x00\xa0eGh\xbf\x86?\xc1F\xc0\xa6\x92\xbf5\x10>\xc1\xc1\x93\x8b?~"\x85\xcfI\xce\x81?\xd5 \x15\x82\x8e\x93\xaf\xbf\xa3F\x0cS\x17\x13\x86\xbf\xc1\xf3Qn+}\xc8\xbf\x1e\xea~\x13\xc8vq?\xcc\xf7\xaf\x0f\x90\xa0\x90?#)KZ\xee\xa8m\xbf\xc0F\x8e\xcb\xd9[\x91\xbfs\xd7-\x87({\x9d?\x93O\x06O\xbe\x8e\x91\xbf$U\x82\x9a\xf5\xc6\x90\xbf\x82W\xf6\xd6\xbf\xea\x9c\xbf\x84a\xf4.\xd0\xa9\xc7\xbf\x9b\x19\x1a\xa4w\xf4\xa3\xbf\'a|D\xc7\xd9\xad\xbf\x83\xfe\x84\xfbC\x80\xa3\xbfJ\x03\xe5X\x8c0\x88?\xab\x1e\x1af\xec\xb1\xa7\xbf\xe1\x8d\x0e\xc0\x93\xedd?\x10\x00\xcc\x9f\x86\x0fo\xbf2i\xf6\x1fQht?[\xc8r{\x06\xaav?7\x0f\x94m\xbfa\x83\xbf\xf5\xc2\xf7\xd6w`\x8d\xbfz\x16l\xa6JJ{\xbf`G\x13\xf8\xeb\xc8_?\xe3!\x1e\xaa\x11\x08\x80?\xf0omN\xbe\xf3\x8b\xbf\xa4a\x00\x95\x81\x8ee?\x81CQX8J\x8f\xbf[\xcf\xc1\x02z\n\x91?\xa1d\x87)\xf8Wq\xbfb\x9b*\x1b\x16\x08\xa2\xbfAqw\x87w$\x8f?w4\r\xa6>\xd0\x80\xbf \xae\xf2@\x05\xe2\x98?\xd9\xfd\x01\x962T~\xbf\xf40\xcav2\xcb\xb7\xbf~\xef\xc2\x07N\xc8\x9a?\xc8\xf7\xd5\xf7`*v\xbf\xea\xd3(\xd1\xfcI\x80?\xde\x7f\x16\xf2\xaa\xcd\xa2\xbf\xa5\xb4\xb8\xa9P\xee\x8e\xbf)\x14\xa3x\xb5\xafr?\x99\x1d\x88\xa3-\xc0\xa7?U\x15\xb2n2A\x8b?\xd7\x96\xa3\xa0p\xd4\x90?k(\xb3\xcf\xbf\xc1\xa1\xbfj\xbf\x9aT\x00\x04\x81\xbf=!\x7f\xc8\x04V\x87?\xb8\x02S+\x06V\xbd\xbfV\x0c^fN\xc0\xb4\xbf#Be`Z>\x96?\x85\x98\xdd\xc3\xbd\xedT\xbf\x8a\xd5\xdd\xa8\x964P\xbf\xe2\xa3\x19\xeb\xd9\xf2\x87\xbf#\xe0\xf6\xb0x\x80\xa5\xbf\x98\xd8#\x90]\xa1\x89?\xf7E\x01>)+\x8a\xbf\xablW~\x97s\xd3\xbf\\ N\x86\xb1\x93\x80\xbf\xe7\xc3\xbbU;\x93}\xbf\xb0t9Z\xb9(P\xbf\x85\xd1\xae\x02r\x1f\xab\xbf}T\xae\xfe*\xbc~?-}UQ\x95\xa4\x97?\x83\xd3d\x8f\x96x\x8e\xbf\xd5\xf1\x02\xedFN\x89?\xf3\xbf\xd9198\xc4?\x99\x84h2\xf5\xeam?\xa9_6\xc2\xc7C\x85?\x0b]w\xc7\x19\r\x90\xbf\x81\x83h\x95\xe0 w\xbf\xfa\x00\x9a\x95\x97\x8c\x97?|j\xff"\xe7\xc9\x87\xbf\x9aO;vy\x18|\xbf=\x0f\xca\x95N\x83L\xbf%\x0e\x83iVQ}?@\x15{\x9e"\x88\x96?XT\x15\x84\x01\x8e\x94\xbf\xe6\x00y\xae\xd1\x8a[\xbfiLxb\x93\x9cw\xbfR\xc0;\x1d\x93\x80_\xbfa\xfb\xf4~\xfe@\xd5\xbfV:\xdbhD\x8d\x80?@\xd1\xf9\xd3\xbb\x8d\x80?)^D\xd5\x04\xa1\xa1?\xec\xe9@\x01\xe2\xa8\x8e?\xf3\xe9!\xde\x8d4\x87\xbf\x96Z\x02%x"\x90?\xcf6\xe6<kT\xa9\xbf\x08\xd8\r\xea`\xb5\x88\xbfqi|,\xf8\xef\x81\xbf\x86\xc7\x12\x96r^]?\xf6Mu\xc3\xd3\xb3v\xbfH&\xf4\x96\x0f\x00s\xbf>\x93S\x86\x81\xad\xe3\xbf\xc9W\xf3-\xc0\xd4\x82\xbf^>\xc0+Rg|\xbf+`\xcd\x8c(\x1b\x84?.\xd3g;\xee\xcb\x92\xbf\xe4:\x1fJ\xe7B\x90?\xa5uM\x8b\xa4u\x85\xbf\xf7F\xf8\x808\x97_?\t\xf2\xc9P\xa7\x8b\x88\xbfT\xd2\x1br%\xf1p?\xa8\xd5/\x05>\x84j\xbfu\x0c\xadL/}x\xbf\xbb\xdd\xb2\xe4\x88\x18d?\x9bb\xc6\xaf\xdf\xf6\x81?U)\xbb\x00\'\xccG\xbfb\xd8\xd8\x88\x9e\xe4\x93?6\xcf\x91\x07"T\x83\xbfUz\xbb]B\x14s?&\x161a\x82\xe1\x88?u7r\xe9!\t\x84\xbf:2\x90\x9c\xc9\xea|\xbf\x9b]\xe4p\x8f\x98\x91\xbf~\x98a{`\xabA? \x82tt\xd5\xcbd?\x00\x00\x00\x80()\x92?\x9f.KD\xac\xbe\x80\xbf\xab\xb8\xe5\xb8\xcd\xb3o\xbfj\xc9\xdc9\xb7\xa3\x81\xbf\x80\xc4K\xd93\x0e}\xbf\xa6\xf1E\xe0\xa7\xe7\x94\xbfpG\xa6\xed0\x0c\x92?\x00\x00\x00@\xb5\xf5d\xbf\xf7\xfd\x06\x86\xf2[\x96?J\x14\xfc\x0cC\xc5T\xbf*\xf0\xca~z+P?\x90\xc0\xd8\xc2\xb3\x1ar\xbf\x94K\xb0\xf3f\x11\x80\xbf\xa4\x94\xd3<\xcf\xbf\x8d\xbf\x81l\xa5\xc9p?\x80\xbf\x8f\x03\x01\xf6\x93\x81\x8f\xbf\xaf\x02\x03\xffx\xa3P\xbfQ\xfe\xa4\xaa\xd7>\x98?Rl\x16\x8b\xbb0g?\x1e\xa7Z\x89\x1f\xd2\x92?Q\xf4\xf4\xe9M\x0b\x86?\xdf\\y\xec\xfc*\x9b\xbf\xed\xd6\xce\x8du\x86v\xbf\xe7)\x05\xf3f\x95\xdc>\xb9\x18\x91\xff\x9b\xa3\\\xbfY\'\x18T\xc8\x8b\x84?s\x85\xb8xl\x95T?\n\x82$\xf8LUp?"\xf9\xdd\xb3M\xadT?\xe3\xb5\x8c\x8bfq\x88\xbfF\xac\xc7\x0c\x93`i?\x9e0]\x98\xd2\x82v?q$p\xe1ZL\x89\xbf\x00\x00\x00\xc0\xed\xf9q?E\xdf\xb2\xcfL\xb1~?TE\x96v\xe6 \x7f?\xd90\xb21\x9ar\x94\xbf\xaa\xdd\x99\xbc]\xed\x86?\x95\x80p>\xb3\xf8\x80?6\xbd\x9dL\xf6Wj\xbf<\xde\xe9=d!\x91\xbf\xda\xb7\xd9\xa8\x13\x17O\xbf_\x19m\x8f\x18\xbe\x87?\x82[\nj\x00\x1bg\xbf2\xcday\xfa\xed\x8a\xbf\xcbY3\xc3y\xd9\x9b?\xbaYk\x0b\xd5p\x8b\xbf\xf2&|\x8f2\x05\x8a?y8\x92\x8e\xb2SZ\xbf"\r\xedd\xc6\x10\x89?T|\x93\xbeW\xa2\x81\xbf&\xb2\xe6\x9f\x15&I?\x00\x00\x00@\x00\x10\x84?\x00\x00\x00 \x11\xe6~\xbf\x00\x00\x00\xa0\x00\xca_\xbf\xa1\xfc\xbf\\]\xd9\x8b?\x89\xd8\x971\x0b\x8e]\xbf\x00\x00\x00\xc0T\xe8\x90\xbf\xcaq\xce\xa7\xcd\xf9\x98\xbf\xe8\xc9\xc6h\x0f\x8bf?\x00\x00\x00`W\xccv?\xd4\xda@dn\xa5r?N8\xbf\xf4\xdc\xebi?\xa1q\xd9\xba\x01\x0c\x92\xbf\xb1 \xe5\xc3\xe0\xb1|?\xc2\xfa\xad\xa0\xcc\xab\x83\xbf\xe8N\xe6\x8b\xb7\x14\x80?\xed\x82\x8di\x0b\x9f\x82\xbfJ\xa8^\x94x\xc7\x85\xbf=\xdci\x16&\xafY?UA\xad\xfc\x93gm\xbf\xb6\xb1\xfa\x93\xcei\x8c\xbfP\xc4_\xd2,\x8dx?+(@+\xf0\xcd\x88?\x1ak\xde\xcbp\xfe\x87\xbf\x92\xc3s\xe2\xec6j?\x18\xdcu\xcaZ\x88w\xbf\x00\xbe\xf4\xc8\xb0\xdd\x8b?\x85\x8d\xfe\xcc\x1f\x8be?;\xf4\xb4\x8e\xee\xd9U?}\x91?\xcf|t\x8f?\x0c&\x9f\xf0t\x8c\xb9?\xc7k\xf5ql\xcb\x8c\xbfS*\xb0\xc5\xf7\'o?\x7f\xaf\xa6\xc3\xc3\x94{\xbf\'\x01\x17\xcdUu\xa2?\x03\xa5\xfbn\x1b^}?4\xa6\xf8\xf4\xf7G2\xbf\x15\x97cA\x0b\xab\x92?\x174\xa5S\xcf\x14\x92\xbff\xae\xcd\x7f\xa9\x88{\xbf\x18\xc1\x89bRZ\x93\xbf\x89^\xcf[\xa0>7\xbf\xacCK4!*\xc2\xbf_\xfb\x10\x98\x84\xbem\xbf\xfa\xcfu\x87\xc13\x8f?\xf6LC.jK\xb3\xbf\x82\x9ev\xef\xc7\xac\xc6?\r\x08\xd6\xf0\xe6\xbaV\xbf\xbd\xd5\xe3\xd0E(\x81\xbf}\x07:d\xd2\xe8\x92?\x1a\x07\xfe\x0f\xec\xa8\x87?\xe8\xa1\xac\\h\x96k?\x93ct\x97\x82\xc4\x89?\xf0W\x90\x12\xbf:r\xbf\xc7\x87\xe8\x0c\xef8y?r@O\x91=\x05a?\xe3:]\x1a\xdecs?\t}`\xf9;\x12\x93?t\xde\xafz\xf4\x11t?/\xa9Cr9\xc0\x8d\xbf\x9b\n\x02\xa8\x95\x84\xa7\xbfL\xda\xbd\xafQ\xdd{?\xda\xfb\'\xa6E\xdfA\xbf\x82-\x1c`\xe6\x1eJ?\x89\xccP\xed\xa0o\x8e?\x98\xf9"\x81j\xf3\xa2\xbf\xdf\x82>e\x03\xc4\xbf?\x19(\x88\x8cQ\x98@?\x8e+\xc4_\xe2\xc6t\xbfr\xa8i\xb9\xa5\x94\x82?D\x14\xcc\xf4:\x17f?\xb58\xbb\x08\xb3\x19u??\xdc\x0b\xa9\x8dM\x8c?\x95\xc7\x93\xc4\x81\xeb\xca\xbf\x84E\xbf\xcb\x98\x13\xb4?\x9f\x9a\x1b\x81\x9d\x14\x83?\xc3\xc4\x0c\x1cx\rv?w<(\xa72\xa6\x98?\xa4\xc7N\x10\xb5l\xa2?\xdc\xc7$Wc\xe8\xc9\xbf\xa0\x1d\xe3h\xf7B\x83?"zI()\xaaq?\xb5P\xf3>\xe3\x0f\x95\xbf\x8b\xf8\xc4j;<\xbe\xbfpTb\xf9\xcd\xc9\xb5\xbf}\x06\x00\x1eP\x93\xbc\xbf\xf3/1\x1f\xac\x0f\xa4\xbf\xe1\xfdo\x85\xa3\x1e\xa2?r\xa0\xa3(z\n\x9d?B\x7f\x13\xbd\x9aeu?B\xe0\x8d\xee\x88\xb4\x9c?\x88\xf1\x88\xc5\xec5x\xbf\x94!\x84\xd0\x8eI\xa4\xbf\x1ehzc\xc8\x9c\x8f?O\xc5\xf9B\xbe\xd8\xa5?\xbdEq\xdf\x83\xdc\x81\xbf\x1ao\xe0j\x1f\'\xa9?\xc5hf\xa0/1E\xbf\xeeDo\xa1_\xb7k\xbf0\xe1\x95\x8f\xdc\xae\x8b\xbf.\x96\xd3#(\xff\x89\xbfD\x9f\x1a\xe0\xf1\xaf\x80\xbf\xbb\xb1\xd1\xf8I\xb2s\xbfw\x07\x9cv\xc4\xacc?\x94\xee`\x0b\x1e\x83\xbd\xbfg\x85\xe0\xae\xf3g\x8c\xbfi\xbc\xb9i\xb6\xa6g?\x02\xb52\xf3\x01\xf6\x8f?\xd7\xbe\xaf\xff7f\xa1?\x06\xbd\xd7\xc6\'\xd7\x8e\xbf\xae@\xba!\x19\x89\xa3\xbf\x89;\xd0\x82\x7f~\x99\xbf&X\x8dM\xc8\xa2\xdd\xbf\x16\x86\xbd-\x00cq\xbf\xe1\xe1\xf8\x1a,\x991\xbf\xaf}\xb2\x88\xab\x17\xc1\xbf\xcd\x8c\\9\xd3\x08p?\x02\xd3\xe4#\x93\xbez?Sd\x85\x7fc<\xb4\xbfy\xe7x\x0b\xf5X\xc1\xbf\x8c\xc3e#~$\x91\xbf\xfb\xd2!\xf9\x00\xef\xb6?i\xa6\xa8\xad\x0e\'u?9\xd4\xe1)\xdap\x80\xbf\xc6\x06\x11<\xf3\x98\x85?\x1e\x15h\xe0\xc06\xb6?\xc5\x02\xbd\x8fZ\xcd\x86?\xd5\xea\xef\x8d5\xe6\x87?\x05R\x194\t\x9f\x9b?\xfa\xd2\x92\x08\t\t\xe2\xbf2~\xdb\xf5\xff\xea\xa2?*\xf1ug-(T?\x0fZ\x91\xc6tx\xdc\xbf\x19>q\xe9\xe6\n\x86\xbf\xb4\xcb-\x11/\xa2\x8e?T!U\x95\x12\xae\xb2?\x94\x8c\xa0\xe6q\xfc\x87?\xb0\xa2\xb6\x1az%\x9a?zY\x0c\xfd\x88\xce\xb3\xbf\xe2&\x85\x07B\x9e\xc6\xbf\x89O2\xda{"~?E\x8ex\xa66<\xd7\xbfb\xbeP\xb9\xddj\x87?\x84L\x8f\xde\xaa<\xd7\xbfA\\7\xeb\x1f\xdb\xb3\xbfze\x06\x93eG\xb9?\xba\xeer/\xea\xcc\xa3\xbf%\x04\xe1)K\\]\xbf\x03\xbe\xe8*\tV\xa7\xbf\x10\x1d\x89b\xfe\xbc\x86\xbf\xf5\x18\x92\xbbV\xb5\xd6\xbf\x1f\xbb,\xb4:\xa1\xa0?&\xb5\xa1\xad\xe5\xec\xaa?R\xc4\xbay\xf6\x10\x97\xbf\x06\xca1\xa9\xc6#\x9c?\xfd\xe9\x0f7\xa2B\xa2\xbf\x807r\xadU\xa0\x94\xbf6\xcf\x03\x17`\x99\xd3\xbf\xd0H\xec\xdbT%X?\xaa\xb6\xdf\x83\x98\x95}\xbfm\x8cV\x97>\x10\xe9\xbfgg\x1a"\xc1\x15\xc1\xbf\xf91\xca`\x10\x17t\xbfa\x13t\x8e[\xe0\x15\xc0\x1b\xd06\xac3\x97\xa8?9B\xbe\xf6\xa8>\x84?\x9f\x97c\x7f\xb7\xcd\xa6\xbf\xe0\xef\x9ay)\xc1\xa2?\xbb\xef\xf6\xa7F\x14\x80\xbf\x89y\xcb\xe78\xa9w\xbf\xa0\xa2\xdc\xb7m\xe7\x99?6\x01\x93\xc7\xf0\xb7n?\x1e\xb9\xcd/2\xa4\x91\xbfQ\xa4\xa2SH\x07\xc9\xbf\xf5\xbcz\x03 \xe0\xed\xbf\x0bf0F\x99\\\xd7\xbf\x16\r\xba-\x90(\xc0?\x11\xff5<\xdf\x1b\xb4\xbf\xef\xcb\x03\x8f_\xe5\xb3\xbf\xb9\xc5X\xe9\xd9d\xa4?\x16{*\xe7\x94\xb1\xca\xbf\xbc\x17W\x1eh\xda\xc4\xbf\x1b}\xd7\xbf\x90\xd4\x8d\xbf&\xc6u{t\xfd\xb6?\xcc\xee\x1e\x83\xb8\x94\x84\xbf\xc1\xdb\xa4\x90\x9c\xf8\xc4\xbf\xfe?\x94Nl\x9d\xb9\xbf\xf62\xcc\xb6\xa0_\xf5\xbf\\|\x84\xff\n\xb8\xe6\xbf\xa09\xa6\xe9\xc0Gm\xbf\x15GQ\xce\xf3\xcb\xdb\xbf\xe2a\xd1\xed\x1c\xf5\x8e\xbf\x85\x04\xb7-\xbc?\xd6\xbf\x98\xc0-1\xf1\xf9\xb6\xbf\x9d\x99\x80\xc5\x86w\xc2??\xc3\xf3#\xca\xe6\x95\xbf\xe6\xf9GKT*\xd0\xbf\xbf?&\xf5X\x9e\xd8\xbfcK?eW\xc6}?\x0eG\xa0\x10N^\xba\xbf\xea\xfa\xbf\xe4T\xbf\x98\xbf&\xfc\xc8\x04\x8c\xd2E\xbf(\x83\xbb\x9d}_r\xbf\x1a\xd7\xf1#\x01f\xb7\xbfP\xc0\xa8\x04\xe8\xe2\xb1\xbf"\xc6q\x9e\x0bP\x95\xbf\xee\x9f\x1c\n\xcc8\x81\xbft#\xe6H\x93[\xe3\xbf\xce\t\xcd\xf4\x8c\xdd\xf3\xbf\xb5\xbd\x94\xf6F\\\x80\xbflU\x08\x9dC\xf3\xd4\xbf\xc9\xbfn\xf6\x19\x92w?\xa2\xdc@?\x99\x00\xec\xbf;\xd3IhE\x1e\xa5\xbf%]\x7f\xbf\x1e/O?\xc8\xff\x1f\xa9+\xf9\xaf\xbf\x94&\xea\xbf_\xef\xa0?\x01\xa5UuW\xdae?T]\x8a\xca\x07\xe0\xb0\xbf\x90\n\x126\xf2\x0f\xba\xbf\xa3";\xe6p\xdcy?\xc9\xb1\xa5\xb8\x867\x98\xbf\x9b\xfd\x98\xb9TP\xb0?W\xd3\xb1^\x1b\x0cB?"8c\xc8\x07\xcb\xb1\xbf"Z\x856{_P?W\x86Yz\x84\xc0\x9a\xbf\xd7\xa4\x97\xf5\r:\xaa\xbf\x86m\x1b\xc3XU\x86\xbfwq\xabo;\xb6\x12\xc0\x88A\xbc\xbc\x02]\xc7\xbf\xfd\xf9\xa0\xa1#\xbe\x80\xbf\r\xdc\xec\x15\xe6\xbd\xed\xbf\x04\xba\x1c\x06\xeb\xe9f\xbfg\xae\xfc\x19\x16\xd2\xb6\xbf\x1f\x19\x05\xcb\xc4\xf2\xb3\xbfk\xc6\x98c\x8ck\xb9\xbf:\xa4\xaa\xa8{\\\xbd\xbfG\xb0\x0c\x0ey\xd3\xba\xbf\xa1\x1a\xe4-\x1d\xa1\n\xc0\x9c\x06\x15\xc1\xc6>\xb1\xbf\xfb\x00\x8cL)W\xe5\xbf9,\xb2\xbc\xdc\xdb\xbc\xbf0\xacX5\x8c\xa2\xd9\xbfV\'\xe0\xe1&\xf4\xc8\xbf\xd9\xc8\xa3T)\x13\xd5\xbfY8%Jb\x9e\xda\xbf\xb9[\xc8\xc1\xa3vM?\x19\xbe8E\n\x06\xb2\xbf\x86\x08\x98xtw\x87\xbf\x9e\xcf\xbc\xa3\xd3\x91\x80\xbf\x04n\xb2V\x8ec\xa3\xbft\xdfY\x9a2\x0b\xb0\xbf\x93\xfel\xfbT\x8a\xd5\xbf$\xaa\x8f\x82 &\xa4\xbf\xe6z\xe3/\xcbwt\xbfB\x0b\x1aj\xc3\xc2\x7f\xbf\xb9\xdf#\xfd\x02\x947\xc0\xad\xbc\x96N\xdf\xc8\x83\xbfv\x8a\x00\x17}XT\xbf\x1a.\xa3\xb0\xebS\xfc\xbf\x80d\xe4\xce\x7f\x91\xcc\xbf\x8b\x8e8\x91)J\x95\xbf\xb0\n\xed\xb5\xce\xaf\xd2\xbf5{24\x06;\xb6\xbf\xfa\x82\xf8x\xa9)\xc9\xbf\xb2\xe4\xab\xb9SJ\xda\xbf\x18\x97nB\xcbj\x90\xbf$\xef\xbd\x14\x1d\r\x89\xbf\xb0\xc1\x86\xafd\x8c\xb4\xbf0]\xef\xcd`\xdc\x9b\xbf\xe9\xcf\xa6l[\xee\x02\xc0\x19\x7fT%\x94\x18l\xbfq\\\xb7\xfd\xb3\xf2\xc4\xbf\xe5q\xdcB\xa7+\xcd\xbfjp}\x1cw\xed\xd8\xbfaU\x86*\xb3\xea\xaa\xbf1[2\xafb`\xc7\xbfB\x16\x1bQ\x01\x97\xce\xbfKhZ\xd4\xefo\xc6\xbfm\x19\x92\x8b\x18:\xe2\xbf\x7f\x13\xdcB\xf8\x87\xe2\xbf\tX\x8b\xb01\x1d\x9c\xbf\xcd\x80\x8e,y\xb0\xe6\xbf\x06+\x134t\xf0\xd8\xbf\xee\xbb\xa7\x13S\x14\xbd\xbf\x1e[zo\xb9\x0e\xd3\xbf\x92\x98E\xe4\xab9\xf1\xbf\x1f:\xe6^\xb4\xe3\xf6\xbf\x11\xdc\x92\x83\xe1R\x93\xbfa9\x9c\xa5\xd0\xb0\xdc\xbf\xa7\xae20\x82\x88\x9e\xbfEP\xb5\x0c\xb6\xa2\xc3\xbf\x1a\xc2\x9b\xb2\x18\xa0\xc2\xbf#\x150\x96I\xee\xa8\xbf\x10\xcd\x9a\xb3\x83.s?/U|\xfa\x9a\xb4\xf4\xbf\x8eq\xf5\xea,D\xf8\xbf#\x92:\xf8\xb4\xc9\x93\xbf\x90\x93\x8d\x86\x11\x1f\xca\xbf\x93_\xf7\xd5 \x88\xd4\xbfc>\x99\x04\xf7\xf2s?\xb5\xdd\xda^\xd4\x95j\xbfq\x0f\xe6\xfa\xe7\xf6\xd5\xbf\xb5\xde`\xef\x1f\xa8\xd7\xbfE\x83\x1f\x9a\xcaj\xef\xbfv\x04\xf0F{\x0e\x80\xbf\xa9\xb1\x9aB\xc6K:\xc090\xcd"\xa1\x98\xc0\xbf\x86\x88Dk\x83\xff]?\xb7\xe4\x15ij\x11\xd4\xbf\xfb\xdcz\xf8:\x8bW\xbf\xf9\xf6\xcf\x9d\x92\x01\xa6?\xbf\xfbSHD9\xb3\xbf\x00\x00\x00\x80\x07\x94B\xbf\xd9\x86_\x11i\xb1\xc8\xbf\xe7\xb4\xc2`\x9fx\xc6\xbf\x8e@G\x11\xec\x08\x8b\xbf\xbd\xfe\x13\x17\xe2`\xe8\xbf\x83Z\xfd\xf9C\xd5\xad?\xea\x97\x809\x197\xc7\xbf+\xfeJ\xc2\xcey\xc9\xbf\xee\r2"\xfc\xdf\x9e\xbf\'\x174c~sl\xbf\xfb\xd8Qf`\xc5\xc9\xbf\xc2-\x11\x08\x1a\xbf\xf9\xbf\xd6\x1d\x9dlV<x\xbf\xe9\x88^\xcd\xb9\xdc\xc1\xbf\xe2\x1f\xb0\x84\x08\xeb}?\xd3z\xdb\x1b\n\x07\x83\xbfD\xba\xb6\x8b+\xa5t?\x00\x00\x00\xe0\x8f3^?\xf1\xdb\xc0v\xcb\x1cc?\x8a\xdb\xeaL7(\x8d\xbfa\xc4\xf0\xc28\x96\x90\xbf\xa1\xb1\x8d\x1d\x07\xa6}?kA$\xd7,q{?\x8fWB\x14\xce;\x8b\xbf\x1c#F\xf9\'9\x92\xbfdG\xe8\x93FD\x94\xbfFNT\xe2\xe5\x1eq?d2\xf0\xed\x07\'\x8f\xbf7\xf7#8\xc4\xcd\x8d\xbf\x8d\x9d\xf5p\x19\x882?\xd6\xc9\xdc\'\x08\xe6\x83\xbf\xd4\x19\nE\x8e\x1f\x88?\xf7"\xb9\xd2\xcd\xdaw\xbf\x00\x00\x00 G\xe7D?\xdb\xf5\xa9\x13\xcc\x9cp?\x00\x00\x00\xc0v\xf4_\xbf\xda{S\xee\xec\xc1\x84?\x19\x9d\x9b\xe4e\x815?\x87\x1bj\x04\xe31#?f\xac\xeb /%\x80\xbf8\xf5\xea\x8cbL[?\xe03\x94\xd4\x18\xfc\x80?\x00\x00\x00\xc0\xa1\x90\x93\xbf\xf2\xb6R"?\xf5r\xbf\xea\xab\x01]\xfd\x8be?\x00\x00\x00\xe05\x82\x95\xbf\xa7r4Xw\x81d\xbfZ\xb2qH\x9d\xefR\xbf\xfb\xe7n\x87\xa1\x0ba?\xfe!\x99\x04\x82\x00x?\x85\xef\xd4\xde\x00\xdd\x82\xbfU\xc5Y\x06$oV\xbf\xa1g\xc8\xa2\rc;?\xfe\xd4\x91[S\xd7}\xbf\x00\x00\x00\xc0\xcb`o\xbf\\|K\xd0\xc3\xb2u\xbf\x85\xd5\xd4\t^X\x7f\xbft\xf1\xe0\xe96\x86U?\x00\x00\x00`x\xa6]\xbf\xd1\x0c\xf36<GK?g\xef\xbc\xb9\xcfX\x8c?+:\xbc\xf9\x1aLc?\x1e\x17G\xe1\x81\xd0\x83\xbf\xa1!\x1b\x11\xb1>\x84?\x9f\x14\x18\x80\x9d\xbey\xbf\xf1\x87\x14\t\xc5\x9e\x8a\xbf\xd2\xac\xacRm\xded?\x0fS\x1f\xa8_*\x8a\xbf\x00\x00\x00\xc0\xeb,q?\xa9\x0b\xea\xab\x91o\x84\xbf\x14\xd4\xf3\xa8\xe1)\x93?\xb9x\xd7\x1c\x06\xb7~?*\xbc\xe1R\xbc\xbf;\xbfN\x88\xb9\xbf\xc1\xf6t?\xad|\x80\x1d\xc54\x85?\x00\x00\x00 v\xaf\x81?\xf6\xcc}<{\xd7\x9e?\x00\x00\x00@\xd4\x9a\x8b\xbf^\xd7\x12\x9c7\x9eL\xbf\xe3/\xe7\xb2\x9aL\x82?\x8a\x05AF\x12\'\x81\xbfj\xab\xc4q\x9b\xf9\x88?\x93&\xbc\xfd\xdeS\x9b\xbf\x0b\xc9\x87\x0bJ\xb8T?\x00\x00\x00\xc0,g\x99?v\x82_\xf5k\xd5s\xbf \x8f7\x86\xbd\xe2q?\x00\x00\x00\x00a\xf7\x8c\xbf\xdfxf\xf5\x9f -\xbf\x00\x00\x00\xa0K\xe7\x8b?]"\xb7q\xe6\x80f?\xdcJ\xea\xfb\xeb\xf3p?\x00\x00\x00`m\xdfc\xbf\xa2\xc2\x96\x93nws\xbf\xca9\x855@\xf1\x87?\x00\x00\x00`\x97ov\xbf\x02\x9e\xcb0\xb3\xae\x8f\xbf\xeaU5\t\xdd\x03\x95?\xff\xdaht\xaeg\x81\xbfi\x94\x81\xa5\xff*\x80\xbf\x00\x00\x00\x00*\xe4\x90\xbf<\xfaq\x0eq\xf5\x80?\x9b\x80b8\x96\xf5}?\x00\x00\x00\xa0-\x9a\x80\xbf\xb9\x14\xa39\xa5O/?\xaa\x87~\xa2\xf3\xbec?f\x98\xc7\xb36nr\xbf_\xfd\x04\xa5,Y\x97?G\x97\xba]\xa0\xe8J?\x00\x00\x00 \x89\xff\x86?G8\x8d\xc6\xfft\x88\xbf\x1f\x86\xd0\xd8\xe8\xa0s?\x00\x00\x00\xc0\xb8q\x82\xbf4\xc77\xaa\x13\xa6{\xbf\xaf\xa6\\OQ\x86V\xbf\xbe\x08\x92\xe3\x1c8x\xbfs_\xa5\xcb\xdd\x95e\xbfk\x85\xcdu\xe9\xdep\xbf\x1d\xc3\xfe0\xb0w\xd0\xbf\xf9\xc8\xd9\xc0PY]?~\x19f\xbd@\xe8\x98\xbf\xe8\xbaUz"x&?\xa7h\xaa\x89\x12\xab}\xbf\x0c\xb4Ei\xb6\x03\x85\xbf\xfb\xfd\xd9/\xbbG\x83?\xfe&jt2\x1e\xa5\xbf/)^6#\x9b\x85\xbfW\x86X\x80\x8fI\xca\xbf\x92\x0b\xed~\xf1\x8d\x8c\xbf\xc9\xb0\xef\xabi\x00\xb7?\x16(W\xa9\xb15\xb4\xbf]\xb2\xc65\xe7\xd5\x80\xbfc\x86(\xcd]\xaf\xd0\xbfc\x1ef\x8c)[\x92?\xd0\x18\x99y\xf33}?\x15\xab\xd3\xe9\x8dui\xbf#\x8d\x8d:\xd1\x81e\xbf\xce5le\xae\xc4\x8b?Y\x07;q\x0e\xe1}\xbf\xeb\x19\xecz\xce\x89h?\xdf\x0c\x16\xc6\xb2\xffp\xbf\x17o\x87\xd3\xa0\x97s\xbfc\xab\xac\x91\xd5\\R?\x17\xa2\xf3\xab\'\xb8x?\x1c&\x8f\xe0\xce\x95q?\xf5"\x18p\xa6s}\xbf\xbei{\xe2\x90\xc7\x9b\xbf\x99\xf3\xf3\xa0\x03\x93\x8a\xbf\xd9fq\xa8\xcav\x89?I\x1d\xaa\x88\x9c|\x96\xbf\xa0\xd5N\xac\xee\xf4\x9a?\x1a\xe2\xfd{\xcb\x87\x82?f\x8d$S\xf2\xd1\x92\xbfC\x87X\xd8\x84\xa3\x97\xbf,GL\xf9\x85\xdf\x93?\x1cf\xf9g\xa8\x02\x89\xbf\xabO\x7fU\xe6H\xa3\xbf#\xa0\r\xf6"\x97\x9c\xbf\xce\xe8/\x03\x87Aw\xbf\x87]\xe2^\xf7\xf5\xbd?\x94\xd0\xa1\xc6\xcc\xae\x92\xbf\xdb\xaaO\xc6\xfa\xfb{\xbf\\|0.\x83\xe7\xb5\xbfb|&\xa7\x8eB\x90\xbfd\xe5\xbd\xf5\xb0\xde\x9e?8\xc8Bd\xd0\x8c\xbc\xbf\x13\xc8\xc07z\x07\xc0\xbf\x80\x9b:}F\xfd\xab?\x1b1\xf7wZ\x13s\xbf\xeb&\x94"\x91D\x93?~\x04\xb6\xd9U\xd2w?>*\x1fn\x86a\xa0\xbfm`$\x06\xb1\xb5\x84\xbf\xf9\xba\xceAz\x8b\x8b?\x10\xc3ZO\x92+\xd7\xbf\xb3kw9a8\x93\xbf\xf5\xfb\xd8\x1a+u\x93\xbf\xb60\xf1E\xc3VX?y}\xb9u\xbd\x96\xa0\xbf\xbf\xab\x85y\x89\x97s\xbf*\xdew\xce\x9c\xae+?|O\x01\xc5\xe4\xe4\x88\xbf-\xf9\xadJv1\x9d\xbfQ\xfcz#q\xc3\xb7?T\xfc\x88\xa8\xbf\x06C\xbf\xa4/j9\xbe\x10~\xbf\x99^\xec\x0e`\x93\x96\xbf\x02S\xea\x8d8%v\xbf(\x05E\xf3\x82\xfc\x7f?\x02\xe4=\xf3\xf2\xc1\x93?:\xc2t\xd3\xb0\xe95?\x1ewO\xa1n\xf3s?\xb2N\xb8\x8c3\x93\x85?wwk\xa4\xf1\xf2\x84?\xe1\xe2\xf0\xc8\xa6\xd7\x98\xbf\xa1\x97V\xeaTIu?\xf7\xbff\x19\xa8\x12\xa6\xbf\x15\xc1\xd9c\xa1\x86\x80\xbf\xbf\x9fs u\x7f\xc0\xbf\xf5\xa2\x0eK\xde7u?\x7f\xee9=^\xacc?\xe5\x01\xf4\xeb6\xf1\x8b?d\xed\x9enn\xcfk?8\xd8\x7f>\xebIb?\'_\'\xc4.\xdfl?\xb2\xff\x0f\xd9\xf8Q\xb5?/\xc2\xacGa7y?\xba\xd3\xb9L\xde\x1f\xb3?uX\x14\xe2\xe3\xc2\x8a\xbf\xbb\xceu\xd48\x83\x93\xbf\xf7%\xec1|U\x91\xbfa\xfe\xf0\xbb\x10 \xb8?6\xe5\x1a\x96%\x8et?5\x19V\x8e\x9c?f?\x1e\x12FH\xcb~\x86\xbf\x9e~\xdcU\x17\xbap\xbf\xcc\xa1\xae\xac7\xbd\xa2?f\xd0\xcd\xdco n?\x02\xa9\xda\x02\xfa\xe9\xc7\xbf\xdd\xdf\x02\xe9\xf2\xfc}?\xea\xa6\xb0s\xed\x12\xb7\xbf\x1f\xdds\x16\xbe\xb8t?\x92\\?pA\xc8\x93\xbf\xa8h\xeai\xc4Uu?F\x8f\xc13\xf3\xa3\x8a?.\xeb\xd6 \xa7\x03\xc7\xbfj\xae{6\xa4|\x9e\xbfq;,\xc1\xd5E\xc3\xbf\xaa*\x8e(ej\xab\xbf\xad\xb64g8n\xcb\xbf\xf8\xfd\x90\x94\x99\x8d\xb5\xbf!\xdb\xd4\xa3\xc4\xeb\xaa\xbf)\xd4\x855\xb9\xf9\xbb\xbfqT`\xe4\xc1\x08`\xbf\xcdq;\xf0\x93\x9e\x8f?\tW\x8a\x9a\x0c\x06\x83?= \x9e\xc7D\xf5\x82?\'\x84\xb0|[\x8bw?e\x90X\xf9\xfe\xe4q?\x90\x86\xbd\xfc\x86\xb5z?b\x8f\x1d\x9b\xfb\xdf\x80?\xb1\x99\x0c\x88\x9c\x16{?j\x08D>\xc7Ru?\x1c\x8fu K]\x8e?\xdb\xf0\x12\x9c\x05\xe5T\xbf\xe4\xc5]\xa5\xc6\x1c\x88\xbf\x06\xdd8w\x0c\xed\xac\xbf\x059D\x95\x8d\xde\x9f\xbf\\o\xae\xe3\xb9\x87[?Q\xf9\x93\xc2\xef\x0c\x97\xbf\xcc\xd3,)?y\x90\xbf\xb6_\x08\xf6J\xc5\x8d?.\xee)\xee\xc5?\xca\xbf|\x88\x14\xbd\'\xc1w?\xdbdj\xdcn\x95p\xbf\xa90t\x90\xfa N\xbfrT6x\xdbWb?\xec.\xbaE\xfe~i\xbfl\xfd&\xaf\xa9\x16u\xbfs\x86s\xee\xa7\x07\xe2\xbf\xd5X\xee\x06\'\xcf\xbb\xbfe:\xbd\xea\x0b\xdb\x8f?\x99\xcf\xc98/\xcd\xa1\xbf\xef\xb02y\x96GM?M\x16\xa4L\xb9\x12\x97\xbf0\xfd! \x0ce\xce?\x93\xd5\xb0\ns\x8b\xb6\xbf\x97\x87c\xdb\x99\xbb\x8e?n\x06\x80\xe4T[q\xbf\x9fO\x03\xc4\xca\xa0\xbf\xbf\x97\r:\xf6\xa0B\xb0\xbf\xebM\xaf\x18\xa2c|?\x9cJ\xe0\xae\xcd$\xa7\xbf1\xfd\xc4\xc4;\xc9\xaa\xbf\\\xe3\xa7\xc6s\xc3\xc8\xbf;T\x0b\x93\xa5*]\xbf\x1fLt\xb9\x1b\xe4\xab?\xb1\xb2\xb8u\x822\x7f?\xb8\x07\xaf\xce\x11\x19\xa6?Jb\xf0\xf0\x11\x12\x8c?\xc7e\xce7\x80bp\xbfs\xad\xfe6(Zh\xbf\x84\xd3\x9c\xc0\xa3\xe4\xb1\xbf\x8c\xe0\xfd\x84\x9d\x18\xe0\xbf\xf16\x1c\xd8\xe7\xf1\x8b?AF\x91\x1f\xb8E\x03\xbf\xa6\x87Cf\x18 \xb0\xbf\x9c\xd8\x83 8\xe9\x88?}\xa4\x7f\x08\x13\xefa?\xcc\xa5\x0b\x99\xd1\x7f\x84?y.{\xea\xe1\xbe\xb2\xbf\xd5\x0bi\xe3\r\xaa\x8a\xbf\xa3\x9ds\xb9\r\x1fi?W\x18f\xba\xde>\xb1\xbfj\x156h\x83O\xc8\xbfiq\xea\'k\xebe?xE&\x1b:y\x9a\xbfT\xbaz\x15\xf5%\x81\xbf\x17\xfe\x1d\xe4\xad\xab\xe0?\x1e5|\x95\x85\x12m?0Fp\x19\x1fx\x86\xbf\xea-\xee\xe7/s\xb3?\xef~F\x15\xe9f\x91\xbf\x9e\xb0\xe2b\xb2+z?\xb7\xe2\xc11\xc7\xa5\xb4\xbfg&\xefj\x12\xbc\xcb\xbf\x9f\xf1\x89=\x88\x0cj?\n\x15\t\xdd\r\x05\xb0\xbf\xf1\xfa\x12\'\x1b\x0cJ\xbf-\x0bx\xb6\x84\x88]\xbf\x93\xf6\xa7\xdfC\x0b\x83?\xb0\xdb\xacqW\xaf\xa0\xbfF\x12Q#[\xd7o?:R\x06\x81\x92\xc6\xb2\xbf\xdf\xf4\xf9\xc2\n\xe9\x15\xbf\xb3\xe2c\xa6 \xfc\x98?kL8\xc3T\xd7\xa1\xbfG\xc2\x90\xae\x00\x89O?\xc3\x97\xa5\xa95\xc0\x8b\xbf6\r\xa1\x939\xae\x94?\xe7{(\x88\x0e:\xd1?j\x9e\x0e\xf6\xdd\xaa\x80\xbf{\x0eH(d^\xad\xbf9\xbc\x13\x8b\x02\x87~\xbfq\xd3\xab\xf7D\x1d\xbf\xbf\x9a\xc2\xe1{I\x04\xd6\xbfG\xed\xd7q\xc2\xde\xb2\xbf\x94A\x89\x8b\xdf\x10\x99\xbf\x0c\xceMy\x9f\xb7\x95?h\x16\x8a\xf2O\xfd\xb7\xbf\xec\xa5\xe7^\x85yT\xbf\xbe\xc3A\x1ewJ\x85\xbf\xd2\x97\xe7\x91\xbe\xd9\xc0\xbf~j\x97\x8b\xdf\xb2;\xbf\xcebx\xc7\x9e\xbc\x84\xbf4\xba\xf8R\x89\x93\x88?._:\x00\xc9\xaa\x80?W+\xf5l\x1c\xf6\x81\xbf\xf4\x8a\x17Si\xfaz?1\x1bM\x15\xbf\x98\xb2\xbf\xe6\x9e\x9e\x9eC\t\xbe\xbf\xd4\xc2\x07G8\x03\x85\xbfN\x00\xfa\x9a0\n\x14?\xc2\x9f/r*E\x87?\xc5q\xec\x14j\xc7g\xbf\xd6\xd1\xe0\x99k=F\xbfGzK\xf1\xf2+\xb4\xbf\xa1\x1e\xac\xfd\xea\xf1k\xbf\xf1:\x07\x8f|\xff\x86\xbf\xb7\xe8\x19\x9a\x1e\xd0\xa7\xbf\xc9h\x98"\xd4\xa7\xa4?\xaaF\x04\xa3\x9b\xc8\x89\xbf\xd9;\x89\xf7a\x9e\xe0\xbf\x9eyW\x19\xee\xd0\xb7\xbf\xa4n\xdf<\xc2\xa1\x9c\xbf\x1fy\xce\xa8\x01\x0f\xca\xbf.F\x9d\xcf\x7fbz\xbf@v\xaf@\x05w\xb1\xbfo.\xb9\x19\x88\xc4\x8d\xbfWes\xe0\xc4&\xb1?W\x05h>\xe6\xeb\xb4\xbf+\x90\x17\x1f\xd4t\x88\xbfv\xa3\xa9B\xda\x14\xcc?F\xdc\xf1\x15y\x15\xac\xbf\x86\x80\x05"\xf2\x9d\xce\xbf\xc1\xe5\xea2\x04x\xba\xbf\xdb\xaa\x186\x86\x9d\x9f\xbf\xdb~\x95sN\x15\xc7?\xbf\x01\x12I\xa7\xce\x99\xbfP\xdb\xcb\xb7<#\x8d\xbfW\x18\x02\xc9u\xe9\xad\xbf]1A\x8a\xb3\xca\x93?\xf9\xbb\xf7l\xa8\xa9\x8c\xbf\x1c\xc6j\x04\xc0o\xa3?\x93F\x14\xd5(\xa3\x9a?\xab\x9fj@H\xa7j\xbf\xea\x08`\xfe_\x14\xb2\xbf\xc6{0T\xa5\'z\xbf\\\xd0\xd6n\xc5\xbc\xa9\xbf\xd7\xd4]\x1d\xc4/\xa4\xbf\xb9\xb7\xcfH;{\xc1\xbf\xd6\xc3\xd79\x85\xee\x8f\xbf\xdd\xea\xab\x1b\xc4W\xbc\xbf\x8fZ|2?o\x9f\xbf\xa3\xb6\x9c<\xe4\xffy\xbf\x1f\x06.\xbe#\xdb\x88\xbfA\x91%\x040Q\xb3?\xd1_V\x9f=\xfc_\xbfJ\x91$\xa2\n\x91\x88\xbf\xe0o\x90\x0c\x84\xf4\x9a\xbfz\x0e8$\x81_\xa7\xbf\xee\xcd\xc8\x13\xd0E\xa2\xbf\xb2\x94\xd2\xc2l\xa7.?\x8a\xe3\x06s\xaa\xc8\xda\xbf"\xaf\xf6\xa4\x95\xa1\xb1\xbfb LB3)\x90\xbf\x03$\x8b\'T\xe6T\xbf\xda-\ni8g\\?Ex\xe9-\x8c\xfb\xa4\xbf\x8dI\xda<S\xdaa\xbfC\xd8U\x10AY\x97\xbfE\xcf/\xfd\xc9\x88\xae?\xb5\x99\x0b;m\x9a\xb1\xbf\xfc\xb3\x96r*\xe0\x86?\xd6-E~\xb9\x9et\xbf\xc8\x82\x84\x9c\xa9.\xab\xbf\xa6\x91\xcf39\x87\x8f\xbf\x9c"\x95&\xc2y\xc0?c/JN\x86\xd3\xa2?\xd2\xab\x9fE\xcah\x88\xbf\xa2<\xab\x99\x8f\xbdf\xbf\xf7z\xe0`\xf0o\xca\xbf#a9\x817\x0f\x86\xbf\xea\xc4\t\xfa\xf8\x1c|\xbf\x00\x00\x00\x003:\x80\xbf\x00\x00\x00@\x04\xd4`\xbf5\\\xf9"2S;\xbf\x00\x00\x00@\xae\x9a\x7f\xbf\x19\xd1\x92\xed\xcd\x1c}\xbf\x00\x00\x00`\xee\xb8\x81\xbf\xc0S\xcd\xb4_$z\xbf\xb8\x00\xd525\xadq\xbf"\x98\xce2\x8c\x13u?\x95\xb454\x9c\xc1m? \x1a-\xb0,3W\xbfe}i\x11j\x8fP?-\xbf\xdf02\xed\x90\xbf\x00\x00\x00\xe0\x86\xec\x7f?\x12g\xd6G\xa0\'e?\x00\x00\x00\xa0\xc8u~\xbf\x00\x00\x00\x00\xb1\x90\x87?\x00\x00\x00\xa0\xba\xd3\x92\xbfhM\xca\tk\xf5\x93?\x00\x00\x00 \xc3\xd5o\xbf\x00\x00\x00\x80\xc6\x08\x84?\x00\x00\x00\xc0p\xe1\x8c?\x00\x00\x00`f\x8d\x80\xbf\xceE\xff\xc2\xaf\x9as\xbf\xc3\x13\x9c\xd5\xf4\xcb}?\xbcf\xebi\xcftf\xbf.\x04\x8d\x1a8\xb7u\xbf\xe9\xe5\xf5\xeau\xb6\x87\xbf\x00\x00\x00@\xbf:\x84\xbf\x89V\xa0\x91\x94#\x90\xbf\x00\x00\x00\xe0-mx?\x00\x00\x00 \xec\xdf|?\x10\xc60\x96\x18+z\xbf\x8e\xb2\x02\xac\xb9\xfdi?\x00\x00\x00 \x05%\x8d\xbf\x00\x00\x00@X\x93P\xbf\x9aG\x10\xd8}\x06w\xbf\xa9\x9a\x0e\x83\x0f\xb4x\xbf\xb9\xdeP\xde\xe9lr\xbf\xf0G\xf4u\x1d,\x96?\x00\x00\x00 c\xac\x87\xbfG\xe6M.\xe6\xc4q?\x00\x00\x00\x80\x9d,b\xbf\x00\x00\x00 e\x1a\x82?\x00\x00\x00\x00Mu\x88?\xb7b\xfea\x9c\x15[\xbf\x00\x00\x00\xc01\xbc\x8d\xbf&\x0c\xf6\'\xe3C\x84?\xa4\x15x\xb8}Q\x87\xbfAHqOu(\xfa>\xf8\x83\t\xfem\x92o?i\xe9\xf6\x9dr\x14\x90?\x00\x00\x00@\x11\xeaq?s\x18xb\xb0\x8ad?\x00\x00\x00\x00\r,\x81\xbf\x899\xc5,"\xf2I\xbf\x00\x00\x00\x80\x88G8\xbf\tQN\xbc\xb1\xfb~?\x00\x00\x00\x80\xb27x\xbf.b\x9cH\xdc\x08|\xbf\x00\x00\x00\xc0|\x82\x98?\x00\x00\x00`r\x07\x81?\x00\x00\x00\xe0\xe8_D?\x00\x00\x00\xc0\xf3\xe1N?\x00\x00\x00\x80Z\xd2}\xbf\x00\x00\x00\x00\xcfF\x7f\xbf\x85R\xeb\x99&\x91\x8e\xbf\x9e~\xb3\x06\xa1\x9en?E\x1dF\xdf\xce\x1e}\xbf\xe1\xda\xe7\x95\xc1\xa0\x8e?\x00\x00\x00\x80p\x91\x87\xbf\x00\x00\x00@,S\x98?\xa37AD\x88Aw?\x00\x00\x00\x80R\xa9\x80\xbf\x00\x00\x00@\x85\xf2q?\x00\x00\x00\xc0\xce\x83y?\x1b\xf5.\xb6\xd8d\x88\xbf\x00\x00\x00\x00\x88M;\xbf\x00\x00\x00\x80\xedRY?\x00\x00\x00 F\x0cy?\x86\xb4rFh\xd6+?\x00\x00\x00\xc0O!\x84?xa\xaaX\xfc\x0by\xbf\x00\x00\x00\x00\'\xc1\x87?\xe2\xc9\x05\xbe+A\x89?\x00\x00\x00\x80+`S?\x00\x00\x00\x00H\x15!?\xe6\xbcoebNi\xbf\xe8\xfaM1#\x0fs\xbf\x00\x00\x00`(T\x89\xbf\x00\x00\x00\xa09\xee\x83?b\\C,\x7f\x14\x80?\x00\x00\x00\xc0\xc0\xe3z\xbf\x9fQX\x184\x9a\x84\xbf\x00\x00\x00\x80\xacH\x8b\xbf\x00\x00\x00 \xff\xb5q?\x00\x00\x00\xc0y\x1d\x8f\xbf\x12=\xa6K\xb7ep\xbf\x00\x00\x00\xe0\x18\x02\x91?\xc4\xbe\xd0\xdbo?~?M\xa2c\x1et\xfe\xae\xbf\x99\xe5\x01V\xefw\xc4\xbf3f\x13B\x96\x9e\xcb\xbfW\xff\xa0x\x8bD\x91\xbfn\x00\xa2Y\x92>\xbd\xbf\xf6\xe2\xb0^<\xe3G\xbf\x01\x00\xa4BN\x87\xc2\xbf_(\x16s\xe7Z\xdc\xbf\x89\x1fb-#j\xc0\xbf\xffH\xb3\xf2\x19\xdb\xab\xbf\x7f\xe5:\xe9a\x00\xe2\xbf\xc1\xdd\xe4W\x7fI\xe0\xbfS"\x96\xf74\x19\xe5\xbfy\xf4qb\xd1G\xb3?\\\xb7D\xe2\x1c\xc6\xd1\xbf\xdbw\xaf\xa0\x82\xb5\xb1\xbfDN\xab>5J\xa3\xbfi\x00\xe8\x0b\x112\xc4\xbf`Q\x18U\xfb\x08\xdc?\x9b\x15\xe4\x0e\xfdQ\x8b\xbf\xe8;\x82\x1f/B\xb1\xbfLq,\x82\xba\x82\x82?~\xbdQ\xc6y\x06\xc8\xbfN\xe7\x903\x08\xf3\x89\xbf\xb0\xb7\xe3\x81|\x80\xd3\xbf\xc2\xcb\xeb\'\x15\xe1\xdb\xbf\xae4\xab\x11\xfb\x07\xe6\xbf8,\xe2\xa9\x9c>\xc8\xbf\xf4}\xf6\xd6\xe9^\x9c\xbfbz,YA\x82\xa3\xbf\x8e\x1f\x8f\xd0\x15\x08\x99\xbfH\x80aZ\xd7\x12\x83?\xb2c\xff\xe6\xf4\x9a\xbe\xbf\xb2;j\xa61D\xbc\xbf5\xc2\x86\x83\xae\xae\x98\xbf;\xee_R\x10\xd6\xd6\xbf\x18x|\x8b\xd1\xe7\x9f?\x11bJ\xe9>\x8b\xc3\xbf\x84\x0e\x90an7\xa2\xbf\x0e!\x04\x81\xff\x89\xdf\xbf\rO;\xbb\xa95\x93\xbfc\xb1\x84%\xd1\xf6\xf1\xbf\xa3\xb3$\xb5\xc6\x15\xb9\xbf\xe3\xb8\xf8)\x8f\x80\x96\xbf\xb7\x16)\xb9\x16l\x84\xbf\xb8{\xe3\xef0\x04\xd9\xbfP\x11\x19\xbe_\xdd\xc3\xbf1\xa5\xf9\xd8\x03\xe8\x7f\xbf\xc5\xfaJ#M\x7f\xdb\xbfcDsn\xa8a\xbe\xbf\x926D\x99\'\x1d\xc9?\x9d\xa54\x13\xe3\xf0\xe4\xbf>\xbb\x03\x12m\x1c\xa6?\x83\x18\xe3c~\r\xcb?\xf8O\xbe\x12\xee\xe3\xb0\xbf\x10n\x80\xfa\xff\xce\xca\xbf\x11 r4\n\xf2\xc9\xbf\xd6V0\xe3\x04\xf0\xb0\xbf7\x1f\xde\x07q]\xa0\xbf\xec\xecf,\xaf2\xd3\xbf\xe2F\xd3\x08\x06/\xcb\xbff\xc9_\xfb\x85\xbdy\xbf\xc4\xaf\xfe/\xe6d\xbc\xbfB\xb3\x1d\xccl\x94\x90\xbf\xb9\'+\xa5\x80\x98\xc6\xbf\xc6\xcbd6l\xa4\xb3\xbf\x04\xc3\x06)$*\xf4\xbf\xb4\x1dGYS\x95\x91\xbf\xbe\xde\x05P\x01\xf1\xcd\xbfE\x1f\x0b4\x10\x8c\x99\xbf\xe8\x95]\x97\xb6\x9d\x9a\xbfICS\x8c~V\x94?\xc8gEaN&\x1b\xbf\xf1\xc2x%\xb6\xc3\x95\xbfI\x0fe\xfdz\x08\x99\xbfM2j\x0e\xccA\x90\xbf\xb5\x1f\\*\x0e\xaf\x94\xbfTVG\xfd;\x15\x93?\xb6\xed\xc1\x9bt\x1bA?v\x86\x9a\xd5\x92(\xe0\xbf\x927\xc0w\xdc\xad\xd2\xbf@2Q\xeb<\x98h\xbf\x01)^\x9b\x10\xa6\xbe?\x08\xd1\xa6w\x8e8\x8e\xbfs\xdb \xc5\x1b\x7f\xaa?\xbf\xd1\x1c\xaej\xa8\xad\xbf\xb2\xb3\xc1\xa4\x8c\x97\x8c\xbf\xb4`J\xf7\xa3\xae\x85?\xa8\x02\x9e\xc6_\xb7\xa7?\x07\\ \xef\xca\xa1y\xbf\x92\x99h7\x0b\xa4\xa6?\xeck\x0c\xae\x8b\xf2\xe5\xbf\xe7\x0b\x04\xd6)\x9a\x8c\xbf\xe9\x0c\xac\xbc\xcc1\xa6\xbf\xfd.\x9e4\xbb\xd7\xb8\xbf\x8a\x9aq8 \xb2\x8c\xbf\xc4<U\x8e\x93\xde\xb9\xbfkk\x0e\xa7\x97:\xc1\xbf\xcd\xf9\x12\x06\x0ee\x8b\xbf\x87T\x0b3\xa2\x90\xb0\xbf+\xb5\x88\x91\xb2\x99\x95\xbf\xfbT+w\xbb\xa5p? \xb0<Zl\n\xb2\xbf\x00\x00\x00@\xd4(y?RN\xc8*\x10^\xa6\xbf\x88\x8dC\xc3\xd2\n\x8a\xbf\xca\x83\x14\n\xc70\x93?9p\xb1To>t\xbfO\x1dW(\xce\xbd\x94?\xe5U\xee~\x15\r\xa6\xbf!\x88_gV\xff\xaa\xbf\xa9;\x96S\x1a~\x85\xbf\x85\xe2\xb9\x14\xcfJ\xa4\xbf5\xbd\x95\xa1\xdb\xa0x\xbf\xbe\x1f\x92\x91\x13\xefd?$\xe3\xf36\x14\x05\x92\xbfe\xecQ\xcd\xbd\xe1g\xbfe\x9c\xd4\x9c\x03\xe0h\xbf\xb7%\xb8\xd4z\x17h\xbf\xe9\xbc\x15\x18Z\xcbq\xbff\x14\xd72Z\x98B\xbf\xb6\x17K\xa2\xfbAg\xbfK\x84n\x1bW<n\xbfVn\xf8\x97\x89\xeb\xa1\xbf\x16e\xca\x1e\xdfj\x83\xbf\xebz\xfcJ\xc5\xff\xa4\xbf\xf1q\xcdO7\xe6\x92\xbf\r^\x00|u\xb4\x85\xbf\xa2\xe1[\xeb\xb7\xc2\x85?\xb9\x1c\x0bjJu\x88?\x1b\x87w\x95\x85\xb3{\xbfC~>9T\x14\x81?\x15D\xcb\xe0\xacu\xa9\xbf\xd8?\xb5\xc8\x14\x95\x7f\xbf\xbb\x13kk\xbb\xba\x92?\xdf,\nb\xdf\x8b^\xbf\xc5/\xedm\x11\xb9\x92\xbf\xe6\xf6\xd8\x93\x9e\xe1\x8d\xbfIF\x110\x97\xf9\x9f\xbf~!O\x9f).\x9b\xbfd\xeb\xd3\xf7\xd2+\x8f\xbf<\x8a%\rS\x1b\xa6\xbf\xa8\x97\xfc\xcf\xdc\xf0\x89\xbf\xf4\x8e\x0fq<(V\xbfB\x19\xbf\x050\xb8B\xbf\x93\x1d\xcet\x06\xd7e\xbf\x00U\xe1\x90=\xba\xab\xbf\xb2G?`\xa4\x0b\x8d\xbf\r\xe4\xfc\xc2^\nS\xbf\xfb\xad\x0e#\xc0\xbe\xa2\xbff3\xf9\xcbc<\xc9\xbf\xa5\x1b\x19\x14\x9bW\x91\xbf\x19\x18e\xed\x9d\xbf\xa7\xbf\x0b\xc9\x1a\xf6!o\xc4\xbfD\x9f6\xf7\xb17j\xbf\xb2\xbe\xd9\x11\xb4q@?\x93\x8d\xe7\x85\x05\xeb\x80\xbf\xf7<\xa6\xd1%\x86~?\x16O*\xd1\x84>\xa2\xbfHIy\xa3\x85 \x88\xbf}\xf9\x07d\n\xc3\xbe\xbf\x80\x1b\xd7Y@\xc0j?\x06\xac\xb6U\xc8O\xa1\xbf\x82\x11\xe8\xd4\xcf\xd7\x91\xbfI\xe6WI]\x0b\x97\xbf\xac\xbe*\xd0a\x17B?*s\xd1\xf4w\xb8\xa1\xbf\x178\x1ekP\xd0\x80\xbf\x1e\xb7o\xec\r}\xc5\xbf\x15\x17\x8f\x94\xaa;r\xbf\x1a\x99\x19\xfa\xea\x7f_?\x17\x8c\xa5\x83\xf2\xd3c?u6qA\x03\x16\xa3\xbf6\tq\x15\x01\xb6u\xbf6\xd5\xe2\xb5\xe0X?\xbf\xfc\xbe/*Zsh?w\x036\x01\x1f\x85Y?)K1T\xdd\xac\x8d\xbfv{\x84\xbf\xa4\x81\x84\xbf\xd8\xf6\xc58\xe1\\\xb6\xbfo\x91`\xf8\x95G\x87\xbfl^\x9a\xa3\x99n\x81?\xfb\x96\xe0\x8e!\x85p\xbf\xa8\xa6\n\xc4\xa7\xaa~?\x07\xbbf\xc1\xfca\x86\xbfd\xa6\x808\xaa\xa9\x91?\x8dh\xd4nRRu?fK#B\x94\xc0S\xbf\x08\xca\xc8\xd6|\xde\xba\xbf\x9e4\xe0q\x80\xa6\x93?G\xfe\xdao#+\x99\xbf\x96\xb1\xac8\x01^w\xbf~?\xc9\xcd\x92\xe5\xa1\xbf\x1eu\xfe\xa5\x82\xdcu\xbf\xdfR[\x8e\'Of?\x99\xc2y\xe7/R\x80?\x1b\xe9\x80\x16\xfd5\x95\xbfE6&\xc9\xb3\xe5\x8e\xbf\xf0C\xf4>\xbd\x03\x8b\xbf\x9b\xcf\xe2z\xad\x15\x8e\xbf\x89z^\xa4\xcf\xb2\x98?d\xbe8\x10D\xba\xfc\xbfP\xed\\ISt\xd0?\x9b\x82\xc1\x87\xc9|y?\x8ff\xd2\x8e\xc8`\xae\xbf\xca\xc0\x191\x95q\x89\xbf\x12G\xb8\x9c~\xb5\xbf?\x93\xd9\xb3w#\x0c\xa5?\x02`53\xa85\xa7\xbf-\xbe\xce\xe3\xe7)\xa6?\xb2\xd1W\x9a\xfd\x15=\xbfg;\r\xeb\xc9C\x0b\xc0\xf2J<\x83@\x9a\xb3?\n#92\xd4\xb0\xa1?\xe8fi\xe7\xa2\x90\x83\xbfI\xdfA\xd5\xe2H\xc6\xbf\xba\xfb\xaa\xb4&\x15\x86?o\x058\xec\xe5\xaf\xef\xbf\x10\xb4\\\x17Rk\xc5\xbft\x94\xbai+\xe3\x80\xbf\xa8\xd0\xfa\xb2\xb2\xec\x85\xbf\xcdf\xab:60\x89\xbf\xcd+\xd8\x89\xef<\x89?\xe04\xae\x0b\x93*\x99?A\x82\xb3\x9a\xfc^\x9b?M\x00\xe9\x04\x1e\xa3\xcc\xbf\xb5\xcc\xe8\xf4\xcat\xa4?\xb1\xe09d\xd4\xa2[?\xd0jp _\x9e|?\x83#\x1c\xcc\xb9s1\xc0\xc2\xa5z%\x8e\x96c\xbfOI_`e\xd7w\xbf\x94\xd1kd\x9e.\xf0\xbf\xd7\xbc\xb7\xa86\xc7\xae\xbf\x05\x9e\xaf\x84V\xb4\xa3\xbf\xca\xbb\x13\xc0\xcc\x86\xa2\xbf\xc81\xcfz\xf4~\x9f?\xa6\x05\xf1\x0cu\xbd\xc1\xbf\xc5<\x9dnj<\xb3?\xa7r\xd4w\xed\xf4\x9d?@u\x88\xc2-\\\x8c\xbf3(\x19\\\x1e\x03\x9e?\x0e\x14\xce"\xb4et\xbfU\xacH\xd3\xf0\xcd\xed\xbf\xe7\\\xaf\x10&\x14\x83\xbf\x8e\xb3P\xf3\xc1\xf1\xb0\xbf\x1c:AJ\xec\xa6\xcb\xbf\xefV\xf9phY\xd4?&\xc8\xa4\xa9T\xf7\x98?I\xe6\x19\xc6\xf3\x9f\xb1\xbf\r\x9f\x8f\xa8\xa3\x00\xc2?\xd9Q\xcb\xa1\x1e\x05\xb3?\x13am\x17\x15\x17\x9b\xbf2\xa1\x14\xac\xabJ\xdb?\x0f\xef\xe8\xb5\xa7\xafr\xbfc</\xf0\xdf\x03\x03\xc0w\xb1\xa8TU\xce\xf4\xbf\x08D\xf1\xdf\xc8\xbc\xaa\xbfxn\xcd\xad\xfd\xa8\xb1\xbf)\x1bW|\xd0\xb3\xae?\x04X\xc4\xf8\xcf\xc5\xa5\xbf\xdb\x9eG#\x07a\x0b?a\xbfD\xac`\x88\xd0\xbf\xf4-="\x9f[\x8b\xbfa\xea#}\xe8a\xc3\xbfGy{\xb3"\xcb\x8b\xbf=\xd2}\xaa\x9c\x15\xc4?\x96?\x9fK\x18\xdb\x83\xbf\xddsY\xeeL\xfe\xeb?<\xcf\xa0\x1fOv\xdc\xbf:+\x1f\xcb SL\xbfa\xba\xf3\xe13\xc3\xb2\xbf\xb4\x1f\xccO\xb3\xcb\xcd\xbf\xa3s\xa4\x1b\xaf\xd3\x8c\xbf\xa5\xect\xc3s\xfc\x81\xbf7\x1f\x90Im\x05\xc1\xbfg\x9e!\x91D\xdc\xf8\xbfs\x83\xff\xbd\xd6l\xd0\xbf\x8a\xa2S\x10\xee\xffv?\xdd3\xaa\x97\xba\xda4\xc0\xf6!\x8f\x82\\\xec\xb3\xbf\xae\x81\xc3\xddS\x88x\xbft\xba\xdf\xbb\xb2w\xb9\xbfCn\x9d\xf7\xee\x88\x8b\xbf\x14JF\xe0\xf7\x15\xc5\xbf\xe6\xce[\xe7\xf0\xb2\xa0\xbf\xbb\xd4\xc3\x11\x8e\xea\x82?^\x1fz/\x12!\xa3\xbfva\xc1\xf7|\xe0\xa6?Z\x99\xcd\xce\x1c\xa8e?\xc8J\xc8\x08\xc5\xdf\x02\xc0\x1e\x87\xad!8\xcf\xd0\xbfN\xf5\x9dF\xf5\xe4\x9f\xbf\xe6\xf6\xa6B\xc0\x86\xe0?\x03{I\xbf5\x03\x9d?\xabn\x14\xc2\xacH\x7f?js!\xd8[\xb9\xa9\xbf\xffB\xf0\xb1 \xc1\xe8\xbf\x14\xed\xf2\x9a\xad\x10\x88\xbf\x06\xc9<\xae\xf1\x03\x99\xbf\x1bE;\xc2\xc6\x8d~\xbfC>\xfd?hV\x81?Y\x9fW!W\x85\xb0\xbf4\x86}\x81Y\xf8H\xbf!p\x8b\xd4\xa0\x9b\xb9?a\xe3\xe9\xb0\xf3#`\xbf\x8e?4(\x99\xb5\xbc\xbf\x91\xe4,Ep\xf9\x9f?\xcdw\x0271/l\xbf\x85\xd4\'\xc1\xa8\x19\xa2?\rpO\xef!\xa7\x9a\xbfZ\xae+}h\x0b\x91?\tB\x0b\xb3c\xd3\x89?=\x10\xdf\xba\x0b*\x98\xbf\x80|\xf1\xd45\xa8\xa8?\xed_\n~\xc6\xa5i?\x8d\xf7\xf1\xcf\xe3_\x80\xbf\x07\x8es3>\x9e\xe8\xbf\x90x\x87\xe7\x96\x06\xcf\xbf\x90\x8a\xea\xbb\xf8\x85\x84?\xf49;h\xf2\xad\xa5?)o\x05\x1e\xfc\x9fv\xbf\xd3Z\x8e\x87v\x7fu\xbf\xea\x19\x98\xda\xa81n\xbf\xd2\x0e\xb6\x9a\xc3\xf5\x83\xbf\x0e8\xb2!5Tt?=\x90=\xce~\xab\xa6\xbf\x05\xcfRZ&\xa5\x86\xbf\xbf\xe4\x9e\x80\xda\x1eV?t\xbc\xdd\xa8\xa0w\xb2?\xadR\xd6l\xd7|\x8a\xbf[\xe8;\x0f\xfa+u\xbf\xfe%\xe1\x8b\x10\xadw\xbfI\x14\xdb\xc6\x02\xf2\xbe\xbf\x95\x90\xde\x17\xc7h\x99\xbfQ(R\x9e2\xbb\xac\xbf\xf6\x96\x18*w={?\xf6\x1c\x82\x84\xb1d\x95\xbf\xe4\x8c\x86\xa7q:\xa1\xbfe\xc3\xfc\x8f\xdb\xbd\x92\xbfLC6\xdc\x98${\xbf\x16\xbffn\x8b@\x87\xbf\xbe\xa6\xb0s\x83\x03\xa4\xbf\x13\xf8,]\xedg\x97\xbf]\x97X9\x0bz\x92\xbf4y@P\x94Jk\xbf\xc4*Z\xc1Gh\xf5\xbf\x0f\x9a&\x92f\t\xd8?\x08y\xc5\xd67\x97\x95\xbf\xa2"#\xa7be|\xbf"\xd9\xa74\x1d \xc5?\xa8\xa9\xa4\xc4T\xeb\xc4\xbf\xa0+\x05\xbf\x8e\xed\xa5?oGT\xc4\x1en\xd2?\xd2\x0b\x8b.v\x06\x87?\xc2\x91/\xfb\xf5\xbd\xfe\xbf\xd0\xe13\xd2=Z\xf0\xbf\xddvd\xdf\xed\xef\xb7\xbfR\xa4\xf1\xee\xad\xf9\xa9\xbf\xf1\xca\x95N\xceG\xe5?\x92\xb6t\xaa\xe9O\xab\xbf$j\x08^\x81\xe9u\xbfB({\xb2\xcc\x00\xdf\xbf?DZ\x9c\xf6=n?|\xaf\xba\x80\xbc\t\xde\xbf\xecR\xbf\x01n\xd59?\xa8\xfb\x829tEt?-]\xd8\xe1\x93kX?k\x7f\x8cqD8\xf8?\'hl\xdbG\x00\xbf\xbfN\xc6}\xdb_\xb4\x80?\xebb\xcf\xcatG\x84\xbf\x10\xaauT.\x1b\xc3\xbf\xd2\xbf\xa3\x84bW\x88\xbfH\x95XY\xcd*j?H\xb3\x90hL\x8c\x88\xbf\xc1\xed\xd0G\xd7\x05\xf7\xbfi\x01\xf2\x0e\xe22\x99?\xb3\xd7\xf8\xc0\x9d\t\x88\xbf\xf0\xc7\x19)\xfbV\xa7?\x10\x18\x82V\x88\x9b\xac\xbf\x83\x12]\x8a\xf3c@\xbf\x95\x14g\xf1z\xba\xbb?\x11\x01b6\x1c\xd9w?b5\xd6V\xb1\x16\xb8\xbf\xe6\xec&C\xd3\x97\x8a\xbf\xc9!\xa7\xc6\xc9\xe4`\xbf\xb1\x99_&\xcd\x93\xa0\xbf\x15\xb2\x06\xc7\xf3a\xad?\t\xa7\xcf\xc0\x17\xc6[?#\xb3td\xaa\x0c\x00\xc0\xa9\xad\xd3\x0c\xa3\x85\xb0\xbf\x84%\x13\x86P\x0f\x96?\x90\xd7:>\xaf\x1b\x9b\xbf\xd0?\xaa\x1a\x81U\x8d\xbf\xb9\x81qK\xa9&\x96\xbf\xc4\x90\xd6|\xd5\xd0s?\xce\xd1\xd3\x86\x89\xa8\x84?\xfd\x92\x8f\t\x8f1H?\xe3\x81\xc4\xd9\xef\x11\x9e\xbfs\xdb\xdd\x94N\xee\x8d\xbfL\x9c\x06rq\x83\xaf\xbf\xba\xcd\xc5\xdd\xce\x0b\xb1\xbf\xea|\xf0\x04\x0f\xedz\xbfE4R\xf8\xc1\x7f\xfc\xbfi\x0e(~\xd7\xbd\x81\xbfv\x0b\x1aW\xb6\xe7\xb1\xbf*F\x85_N\xcc\xc2\xbf\x14\x7f\xb8\x88R\xf3\xbc\xbf\x84\xcdkM|t\xc0\xbfA\x86\x19*\xbe\xc8\x81?E,j"\x83/\xb5\xbf\xfaz\x89\xffe-\x8c\xbf\xacR\xff\xc8\xb9@\xf8\xbf\xd6J\x92\x85\xc2\xeb\xbb\xbf6vl\x98\xd5b\xc9\xbf\x94gE5\xbc\xcd\xe2\xbf\xc7\xfb\xec;\x81g\xc3\xbf\x99Q\x8c\xdb\xa0\t\xb8?\xe9\xe6]\x0f\xbd\xd5\x92?\x13\xca\xfd\xf7\xef\x06\xb1\xbf\x97\x1d\xb8&A\xacl\xbf\x7fy\xb8u\xed\xfcn?\xa9\x80\xdb\xd5\xf0\xeb\xb2\xbf\x98Q\xb7y\xb0)\xa9\xbf3\x1b\x81\x07w\xe2\xa9\xbfQX[ \xee\r\x8d\xbf\xc7\xe0\x18k\n\x10\xa4?\x0b\ry\xb9\x89%\xa4\xbf2\xc96\xd4\xe1d|\xbf\xb9j\xd7\x9fE\xa8r?hw\x87A!Z\x8a\xbf\x8e\x020Hh\x82\xf3\xbff`\x826ZI\xc9\xbf\x870\xc9\x86\xd4\xfc\x89\xbf*{|\x12\x95@\xfe\xbf\xbe\xe9\xe1N\x18\xb4\xc2\xbf\xd6\'\xc8s+\x8b\xc0\xbf8~-2qM\xb5?O\xe0\xef\xae+\x07\xa2\xbfE\xfd\x8d\xe7\x16\xd4v?\x0b\xc4"+\x0e\xc9\x9e?\x9f\xb5u\x19\xac\x04\x8d\xbf\xde\xcdx\x17\r\x8b\x92\xbf\xc3\xe4Hk\x7fu\x83\xbf\xb2\xe1\x7f\x01\xb6\x18\xc1\xbf#\xd3\xccA\x87\xf5\x11\xc0\x83\xc5T\xa8os\x8e\xbf\xffi\x8a\xd7 \x7f\xbe\xbfM\x08\x9f9B8\xa0?m\xab8\x1d\xa3m\xc6\xbf\xd3`)\xc3\xbf=\xbb\xbf\xadf:\x1aZ \xec\xbf76*\r\n0{\xbf\xd0\xc3\xdf\x07\xfc\xdfr?\x00b\xb5[\xe6\xe7\xc8\xbf4\xe9r\xdaQ2\xc9\xbfN\xc0\x0e\xe6\x88\x8c\xf5\xbf\x80\xc1\x03\xd0\x01\x81\xb7?\xdb\xcaU\xb6p\xcd\xb7\xbfO\xbe\x1d\xff\x98r\x03\xc02r\x82\x072\xe6\xa0\xbf\xe7M}\x91A%\xff\xbf\x13\xd3\xa7\x1e1\xfd\xa2\xbfI\xeb1\xf0\x97\x0f\xf9\xbf~[\xaa=#\xa2G\xbf\xa5\xb7\xd5\x1a1\xca\xb3\xbf\\\x9e^\xe5\xd2\xc5\x89\xbf\xc2\xdel\xb0\xfb&\xf9\xbf\xbc\xfb:\t\xe0h\xa2?<\xd8\x01DA\xd2\x81\xbf\xd0%k\xd7\xd7\xbe\xa7\xbf \x88\xe85\x9d\x87\xac?\xea\xef>?+\xef\x8e\xbf\x9c\x11\x0b\xc3q\x18p?~|Tt,_\xaa\xbf\xe4\x19\x19a)K\x97\xbf$>at\x8c|\xb8\xbf6\x87\xd6Js\tu\xbf\x8d\x1e\x19g\xa9X\xb7\xbf\xa1\x92\xf1\x04\xb5\x08\xd9\xbf\xa3\xbc97\x96\'`\xbf\xaf\x1a\x02\x18 \n\xba?\x8cJ\x86t\xf7\xc7\x8c\xbf!)\xc7\x08c\x8e\xd1\xbf\x96\x15~W\x88\x99\x9f?.3\xecc7h\x82\xbf\xeb]\x15.C\xfb\xc6\xbf.\x94[\x80\xcf\xd8\xd1\xbf5\xf2AL\xfd\xb1\x94\xbf\xa5\xb4W\xc6\xd0\xc1\xb4\xbf1\x18\x9f\xb3t\xcc\xa7\xbf\xa6C\xca\x03\x92\xe2\xc5\xbf\xfa\x817M\xec|\xae?\x04\xa2T\x88\xf8m\xb0\xbf\xf2\xb2K\xc63Iy\xbf1\xb6\x86\xcc\t\x93\x9b\xbf\x1dm\xe9WB\xff\xd4\xbf\xf3P\xa1{\xdc!\x85\xbf\x94\xfe\xb0\x9e*\xa2\xb9\xbf6\xb4\xcf\x17\\\xa6O?~\x91}[\xac\x11R?=\x9b\xfa\xfb\x07\x95\x81\xbf\xa9!\x8f\\2<\x8a?ZT\x10\xd6\x16\x13\x90\xbf\xdf\xee\x02\xa6\xfbx\x84\xbf\xfe\xbe{bq6(\xbf7\xceg\r\x8a\xb4\x81?\x11E?}Z\x92z?\xb7\xe0\xf9\x00`\x7fb?\x10\xa1\xd6\x8eM6\x91?m>\x7f$\xb9?}\xbf(^e\xc4\xdd\xbf,\xbf\x94\xddun\x1b\xb4\x83?\xcf\x13\x85~L\x1bt?v\x955\x13\xc1\x81i?\xcb@\x03\xbc\x9bw\x91?\xfe\r`\xf7\xdc\xef}?kQ\x0f\xc2\xe2\xbd\x86?\x00\x00\x00\xc0"\xebV\xbf\xc1 \xd9PI\xd3l\xbf\xb6,t0\x1e\xd1\x86\xbf0a\xe1\xbf\xaa>\x93?J\x13\xa0\xc9|\x9c\x84\xbf\xb8;\xb4\xb0\x96\xae~\xbf\x0c\xb6H\xd8\x98Y\x83?\n=N\x1f\x1b\xe5{?$U@\xaf\x80\x07{?QF\xa4\x93]\xb5\x8b\xbf\xebg\x00\x99\xfa\xe0{\xbfH\xb9(\x00\x9ezk?\x00\x00\x00@\xca!_?Wk\xb3\x9fik\x89?\xe7\xf2\xac\x9fj\xfen\xbf\xfc\x9a\\\x01\xac\x95\x93\xbf~\x9e\xb7\xa2\x11\xa3\x8d?L\\\xccgs\x97\x91\xbfSs! \xa8/\x8b\xbf\\u\x1b3\xe5\xf6d?x\xc4\xa3\xc2U!l\xbf\xddq\xfa\xf7\xb7\xc8v?\x00d\x85u\xb8\x00{\xbf\xf3\x08\xd7\x8fd(\x8b\xbf\x00\x00\x00\xe0\x14@z\xbftz\xb7\xd8\xe7L\x89?\x07S\xf0\x1a\xc4\x08\x95\xbf\x89\xd7;w/\xa9\x81?\x04\x83bob\xd4i\xbf\xd2O%N\xea\xdb\x93?\x81\xb3\x94/\x91*c?\xb4c\xb1\xaf\r\xbcP\xbf\x1f\xc8\xdbp\xbd\xcf\x82?|\xc0\x92\xa4\x9e\xc1o?$\x8f\xb90\x0b\x99\x83\xbf\x00\x00\x00\x80\xc2\xa5v\xbf\xe5~I\xfe>\x80j\xbf\xa6g8\xa3@\xd9m?\xa6\x9ao\xcb\xc4\xd7v\xbf\x88\xec\xcf\xb8\xe9\xb3h\xbf\xc5\x8d\x88 :\xca{?\x9c\x88\x0bI\x0f6w\xbf\xfarM\x99\x07\x11e?\x16s\\\xf5d\nZ?%\x17M]\x89\xebm?C{\xd8A>5\x84?\xc3w\x04Q=\xe9T\xbf\x0c\xc9\x89\xcf0\xb9P?\x00\x00\x00\xe0Kdr\xbf\x15r\x954\x7f\xea\x8f?\x8f\x08$r4t\x95?\x00\x00\x00\xe0\x05Qq?\x0eo-i\r\x84\x89\xbfy3\x8f\x81C\xbfx?\x00\x00\x00@Xpd?\x00\x00\x00\xa0\xb4\x80q?\xac\x84V\tV\x1ab?\xb1\xe0\xcaG\x0c,\x8d\xbf%\x8c\x16\x07A\xf3t\xbf\x00\x00\x00\xc0A\xe8\x83\xbf\xc1GG\x0f\xd2\x7fs?rQ^xowi?\x00\x00\x00\xe0\xbc\x07\x90?\xf2\x13\xf2s\x902h?\xad\xf9\xf7PF\xfe\x81?\x87\xe0G\xc6z\xe8\x90?W\xf0{\xef]QH?\x00\x00\x00\xe0c\xb4O\xbf*\x8d\xe2)A\xd0\x86\xbf\x06E\x07?\x89\xe8\x84?\x11o\x01\x8a&Ht?\xeaE\xee\xf1\x19\xb3}\xbf\xde\x9c\xcd\x9c\xa9wh\xbf\x15\x19g\x02L\xf6Z\xbf\xcb-$T\xfa\x16\xa5?6\xd8\xb8Tr\xe8j?\x00\x00\x00\xa0\xba3f?\xd3\x90\xb2\x92W6f\xbfL\x1fB?\t\xa5\x86?\x00\x00\x00\x806\xd4q\xbf-\x98\xc3\xe5\xf6\x9a\x90\xbf\xfe\xd8\xf1\x85\xe6\x8b\x83?\x93\x81\xe1E\x0b]\x80\xbf\x1e\x03\xa0\\\xa8Fr?\x00\x00\x00\xc0ad\x95\xbfW\xd7\x9f\'\xb5\xe2\x85\xbf\xa4q\xb6\xd9\xca\xb5d?\xc5\xca\x87N#\xbdV\xbf\xb5\x08\xdd\xd9\xa1\x07\x81?\xd2\xdai\x9eY^\x8c\xbf\x96\xbb\xd4\x0eqjI\xbf\x1d\xbb\xd3kPJ\x81\xbf\xf6V_\x87\x9e\xd8j\xbf\x1avZ\x81\x14\xbfx\xbf\x868\x98\xf5B\x04e\xbffVW\xe5\x93\xe9L?f\xd5?\xaa\x9c\xb6s\xbfu+\xb1fD\xa5\x88\xbf\x84\x04\x0f\xaf\xb2\x85p\xbf`\xcc\xb6\xef\xc3J\x86?\x00\x00\x00\x00\xba0r?\x0c\x03\xabB\xa5\xee4\xbf\x00\x00\x00 \x7f\xdb{?\xd9\x17\x85\xfbr\xabb?l\x9b\xb3r\xb5\x8d\x7f?bycW\xdd\x8d\x93\xbf$@\xfb\xda\\9\x92?\x15\x1b|[56\x8d?\xa7c\xc7\x1fW\x1dc\xbf\x00\x00\x00\xe0A\xf6p?\x12\xd8\x15\x9dr\xeb\x82?\x12\xaeb1\xfa\xd7d?\x00\x00\x00 \xf6\xfc\x85?\xf6\xd0\xb0;\xc2\x99s?\'1\x83q\x07\xad1?m}\x06s\xb3\x86Y?\xa5\x82\x9eY\x9aM\x88?1\xd9\xcf\xfc"\x9ez?m\x13\xb6\x86L\xd9}\xbfU\xfc\xee\x94\x89\x0b}\xbf9\xf0ku\xdd\xb2\x80\xbf\x00\x00\x00@;V\x93?\xaa\x84uH\x8d"\x17\xbf\xe7\xe2>!\xc5nb?\nK\xde\xd9\xf5\xf0\x92?\x00\x00\x00\x001<\x82\xbfI\x9b\x00%T%\x85\xbfQ\x0e\xb0\xd8\x17U\x84\xbf\xa6\x169h\xab,\x85?\xe2\xe6\x90VH\xaak\xbfOx\xe5\x06$$a\xbf\x0eP\x08\xdd5\x87\x87\xbf\xce\xee)\xeeD\xc4\x8a\xbf\xa4\\c-B\xa8\x7f?\xad\\j\x83A\'O?\x00\x00\x00\xc0\x0enw\xbfk\xb5&\x88\x1eaw\xbf\xa0U_8\x16\x9e_?\xb7\xc4\xd3\x03\xb2\x90\x82?`\x99\xf2\xe9\x17\x0c\x8c\xbf\x84\x88&\xadCh2\xbf\xcb\xbb\xcd\xfd\xcbv\x8b?\xa6\xff3}\xa2c\x90\xbfj\xb1Fc2 l?)\x80\xa2\x08A{n\xbf\x8e\x91\xf7\x0f\xb1\xb1e?\xc3\x8e\x03\xe5\xc7%y?Dz\xeaO\xbao\x8c?\xc1\xc9eI\xa8\xdbc\xbfKY\xd2\x8b\xcc}q\xbf\xe6\x85\xbf\xae6\xd9l?\x00\x00\x00\x80e\xeb\x8c?\xb8l\x07&\x9e\x8bi?H\xa8X\x89\x195\x80\xbf\x00\x00\x00 A\x1fy?\xe4\xf8\xcc)\xbf\xce~\xbf\xe8\xd6\xc1\xd7\xdakp\xbf\xe0=\x1b\x87\x99\x0bb?U\x9a\xbf\xd69\'\x8e?\x00\x00\x00@\xef\xc8t\xbf}*\nY\xb3\x06b?W\'!\xe4g\x0c\x95\xbf\x00\x00\x00\xa0Q\x0cP\xbf\xdf\xab\xbcX@\xd9v?\xbb\x8845\xbcd\x8a?a-1\xa1\x99\xacy\xbfu\xe5\x1b8\xd1\xa9\x84?\x00\x00\x00\x80\x00\x13\x95?\xb5\x90\x98v\xd6\x0cq?\x10\xa8\x11\xd2K\xb2b\xbf\xe5\x0f/\x12x\xefb\xbf\xbbA,\x1b\x08\xdaf?t\n\xbd\xa5&N\x88\xbf5\xf5\x9b\xd4{\xd7t\xbf\xb5.aa\xb8\xf3}\xbf\x0c\xcf6\xd0\x15<\x81\xbf\x00\x00\x00\x80\x81u`\xbfj\xbe%sY\x91\x99\xbf.Rx\xcf:\xdaz\xbf\x00\x00\x00\x00\xb4\x0f\x86\xbf\x9e\xc9\x8f\x13\xde\x16t?\x0e\x0f3\x85C\xf9i?\xb9s\x8e[lFp\xbf\xe1\xfe\xc6a)\x03\x82\xbf\x00\x00\x00@\x10?\x91\xbfN&\xd8\xec\xca\x91w\xbf\x00\x00\x00 \xf9Q@\xbf\xed\x08\xbe#p\xb7\x90\xbf7\x13\x935\xe1Ks\xbf\x0c*\xa6\xfb\xfd\xd8u?\xf89|\xde\xedjw?B\xba\xfa4\x17+\x90\xbf%\x82\xae\x9c\xf6\xa1v?\x06\xd7\xe3u\xc4\xce\x84\xbf\xd9!\xbez\xf9H\x91?\xf1s2\xd8\xc8\x9bV?\xc3\xab\xc4H\x85\xc3\x99\xbfy\x9f\xb8\xe1Xw\x15\xbf{\x1c\xc6 V\xe1~?>\x89\xfb#I\xd1|\xbfK\x01\xc4\xba~\x87\x84?\xd5\xfc=\n``\x88\xbf\x000\x03\xc0ku1?\xa0Gs.f\xcdd?\xf8U8\x9a\x13\xae\x80\xbf`0\xcf}Y\xcb\x9a?\xf2\x1d\x03\x98\xf5\xe8\x85?\xd6\xbc\xe6\xd5\\\x04A\xbf\x0eq=\xa1v\x9b\x97?\xbe\xd1\x1f\x1a\xe2\xff[\xbf\xff\x1a\xc7\xd4\x1a\xact\xbf\xbd\x8a\xe6\xe7\xa4\xff\x97\xbf\x00\x00\x00\xa0/\x17u?o$\xe4\xa36,w\xbfj,\xab\xee\xa1Tx?\xf1\xe6\xe7\t\x14\xf8~\xbf\n\xa1?\r\xc1\xe9k\xbf\xfd\xb4\x11}\x93\x9cy\xbf\xd0(\xa0\xcd\xbfFx?\xad\xaf\x03\xe46\x7f\x91?\xe6U\x88\xcc\xe7\xa5\x88\xbfC\xcc\xdd\xbe\x89\x9bi\xbf.2\xb5P\xfc=o\xbf\xc3\xf31\xa1\xe2\x10n\xbf\x1c.\x97tix\x8c\xbf\x1c\xfaW\xbf\xf7s\xa2?\x0cT\xf3\xea5\xb0w?4"\x80\t5\xf0x?]R\xe9f\xab\xc5\x9a\xbf\xf1-\x9b\xc6\xaf\x17m\xbf\xeb\xb2\xd0)\x06\x82\x90?\x0fPN\x8b#\xeb\x92\xbfK\xd5\x81\xa7\x9f\xe6m\xbf\x0bB=\x8f~\xa9r\xbf\xec\x93\xe7\x1d9\xfdj\xbf\x00\x00\x00`b\x92v?\xcdZ\xd7\xc0\xa7c\x82\xbf\x9c\x1a\xcf\xf2^\xa9k\xbf?\xc0\'\x0b\xc1]~\xbf\xda\x81<\x11?\x84F?\x8fp\x18i\x82\xb9G\xbf\xec\x16\xe9g\xb72\x85\xbfD\xa9?eD\xb0\x84?)7\xfej\x16\xcb\x95?\xa1\xbds\xf7\x83\xab\x8f\xbf\xf7\xf7\x15\xb2\x15\xd7e\xbf\xab;\xe2\xc2\xa3\x89t?\xc7:\xf9N\t\x97a?\x9c\xa7p\xcdV\x13v\xbfx\xe8Y\xe2\x17\x10\x81?M\xec\xcd\xcf_\xac\x80?\xcf\xc6\xd1\xfc\xff\x01b\xbf\x00\x00\x00\x00$<\x88?\xb2\x89W\x8c#\xdc\x91\xbf\r\x10\xac\x0c\xfeJ\x91\xbf\x91\xfe\xff\xe1\xf7/t\xbf\x84\x83a\xe4\xbf\x8b\x88?}\xa9\xab7\x15^t\xbf\xf4\x1c\xa71\xb1MS?\x00\x00\x00\x80n\xe7\x93?\xea\xb2\x9a;u\xf6\x82\xbf\xec\x0f\x81\x97P\x0bb\xbf-\xa4\xd6\xfd\xf1\xc7\x90\xbf\xc3\xbd\x18\x92\x98&\x91?b\xac=\x11\x13_|\xbfj\x06+*\xc7\xder\xbf\xf7W\xed\xf5~\xfbx\xbf\x00\x00\x00\xa0\xf3\xb3\x89?\xe0pO\x03\x00)\x84?\x84\xd1u\x81!\tM?\x8b\xcdM\xcb\xac\xfb\x84\xbf\xf0\xcc\xc2\x19f\xf4\x80\xbf\xab0\xcd\x0fh\xa9\x82?\xbe\xe7@\xce\xc6\x8eu?\xba\x03B\x7f\x96\xf2\x92?\xa1\x88\xd0\x83\xcd\x1ee\xbf\x00\x00\x00\x00\xa8\xcb\x93?bi\xca2\xc5H\x97\xbf\x99\x03+u\xe5\xa2x?\x00\x00\x00\x80\xd91\x88?2\x10\xac\xf8\x1c]}\xbf\xd2^\xb2\xae\x04{}\xbf\x91B0r\xd8A\xf3\xbfd\'g\xe1<\xb3\xc8\xbfn7\xb8Q\x97QA?\xc3q\xe0C7\x92\x9b\xbf\xe4q\xcb\xe6\x84\xd6}?\n\nz8\xbd\xf5\xbf\xbf\x12\x19\x99\x9c\xff#\xbe\xbf\t\xa8\xe8\x9f\xe5\x90\x96\xbf\xb6\x15p\xefc_\xa6\xbf\xef\x90\xe67\xbe\x9b\xc6\xbf\x1d\x81\x83\xeftO\x00\xc05Ngme\x84\xd1\xbf\x8c\xa0\xe0-\x99\x97\x87\xbf\xde\x1a<\x8d\x97\xf3V\xbf\x1dI\xca\xb1\xc1\xf3\xb6\xbf^l[7\x85\xf8{?\xed\xd8\xf1\xdeIg\xd1\xbf\xd2\xffvX+g\xa7\xbfp\x03y5TJb\xbf\x16\xfdm\xd3\xa0\x86\xa5\xbf\x1b\xe8\xd9\xf7\rFa\xbf\xcf\'\xf3z\x97\x91\x98\xbf\x15\x9f\x009\x0e\x98\x94\xbf\xd0\x16\xe2R$\xef\xb6\xbffM\xa0\xe4\xfe\xdd\xcb\xbf<~Q\x19\x82U\xc6\xbf\xfb\xf7\x8b\x9eR\xd7\xb1\xbf\x18\x18\x8c\x17=\xd4\x95\xbf\xbbd\x9c\xfa]\xf4\'\xc0V\xcee\x8f,\x97X?\xca\x0b\xa1L{\xfcm\xbfy{!\x93F\xbf\xe8\xbf\x1aN\x14i\xf7\xb1\xb8\xbf\xf7d\xa6\x88\xa4p\x91?Z\x95\xa9\xfeJ\x11\xaa\xbf\xaeO\x80\x10\x8eI\x8b?/\x95H\x16\x0eC\xb4\xbf.\x0cF\xff@T\xb9?\xe2\x9e\xf4|q\x8b\xbe\xbf@\xbb\t%\x1d\\k\xbf\xf4\xc7\x8a\xb4\x95\x95\xd3\xbf\xc9\xbb\xa3^\xc3y\x86?/\x08{z\x07@\xe7\xbfV\xb01v\x1d\xa4l\xbf\x97\x82\x95\x87\xa5I\xb1\xbf\x89(\xa1X<\x17\xd0\xbf|\xc1{Q}\xfc\xb8\xbf\xd5\xb4\xdeb{g\xc5\xbfn\x16y[g\xf1\xa3\xbf\xaa\xdb=kX\x8c\xc7\xbf\xa4\xedh,\xeb\xad\xba\xbfA\x86\x0b\xeb\xb6\xa7\xb2\xbf\x910\x8e\xe4\xd0\xe4p\xbf\x9c\xecn\xf0\xfe\xf7\x8c\xbf\xba\xea\x8b\xec\x91\x11\xe1\xbf\x1c\xd5Qp\xe3\xae\xd2\xbf\x06a`\xa0C\x8e\x8c\xbfv\'\x0e\xd9\x9f=\xa5\xbf\x80\xachSi\x1d\xca\xbf\x94Eb\x92J\xce\xc0\xbf\x14\xbb\x17\xf4\x9aVG\xbf1U\x8cz\xde\xaa\xc1\xbfS7\xf7\xe8\xcf%\x87\xbf\x80\x85\xc7\xa7\x9a`\xa5?K\r\xbec\xe8h\x84?\xff\xc6X\xc5\xa8F\xd5\xbf#\xf9\x8b\x90\x07\x99q\xbf[\x13\xb7@S?\xd8\xbf\x9au\xbf~\xd1*\xeb\xbf;\xe7I\xb8\x1e\x87\x8e\xbf\x93P\x08^\xbe\xe8\xa3\xbfB>J#9{\xbc\xbf\xe3LX\x10xj\x85\xbfC\xcd\x88P\xec\xaa\x8a\xbf\xafB5\x07\xa2\x96\xb0\xbf\xaf\xad\xe7\xf9\xc9\x06\xd2\xbfl\xad{\xbe-\x90\xd2\xbfCy\x81\x9b\xb3,p\xbf\xc3\xad\xd1\xe8\x01=+\xc04ao\x8f\xea\xfe\xb8\xbf\x84\xd9"\xf78\x1fT\xbf9\xa3V\xe3\xac\xa6\xad\xbfX\xd1\x04\x8d\xdd\x9d}?\xf4\x80I\x91D\x96\x90\xbfa,\x19:\x05\xc8a?|\xe0\x82\x1c/!|?\x82\x1a\xdfM_\x9b\xa4?\x86\n\xde\xa0\xd6q\xa9\xbfn\x1f\xa2Z\xbcQQ\xbfh\xee\xd8\xa1we\xde\xbf\xa0\x91\xf5&\x86\x9e\xa0\xbf\x18\xda\xda-\xa4\xb3\xb0\xbf\x90\x19\xd1\\\xe2\x03\xe7\xbf~\xcbG\xeb\x9b)\x94?\x1dX\xee_\xd9cr?\x0b\x1a\xdcy<;\x90\xbf\xca\xa2h\xd9\xbe\x8a\xe5\xbf\x00%\x0c\x8be\x08B\xbf\xb8\xb4.\xe5\xcc\xd7\xa2\xbf\xe8\x95\x90\xd7^Qt?\x97O\xaf\xdb*^"\xbf\xb6\xb7\xff\xd1\x04\x02\xa9?\x98\x05\xecY$\xe4o?\xadUu\xe8\xa9}\xad\xbf\xd3\xc8Y\x7fgG ?\x94Q\xc2\x05Vp\x9e?\xaeX\x9c\xae\x83\xa8\x9b?fQ\xd7f=\x10y?d+\x12\x94c\xf7\x92\xbf\xbf6B\xdce\xbe\xa4\xbfH\x7fp\x12j9\xac?\xdd\xa2\xa9\xb3\xa6\xf3\x7f??G\x84\x94t\xadw\xbf1aT\xaa\x9d\xba\xb0\xbf\x0f\xc4\xc78\xf7\n\xa6\xbf\xd8\xfc\x8f\x87Y\xa6\xa9?;\x967".\xfc\xdd\xbf\xb0\x1d\'\xe5K\xf6\xbc\xbfY\xcbWM\\\x13\x84?\xa50\xad\xf5\xb7\xb2\x87?\xbb<\xb3\xb8[\x9f\x91?bQ\xf4\xadl\xdc\x8c?b\xc3\xc9\xa6\xe4F\x9c?oYz\xe5|\x00\x87?5\xf2\xe4\x0emF\x7f?\xb72\xcb\xca\x13\xdd\xa1?\xd4\xb9\xdd;E|\x90\xbfH\x93\x8czG\xfd\x9a\xbf\xbbk\\\x84\x07l\xa4?\xe1\xb2\xe7\x9c\xfeg\x85\xbf\x96\x13b\x7f\xb2\x01p?\xba\xcd3\xe5\xc3\xc1\xac\xbf\x0b\xc9\xfe\xf9T\x08\x92\xbf\xb6\x1f3\x18\xc1\x07\x87\xbf\xae\x8e0>b\xc4\xaa?\x87i\x97\xa5\x9a[a\xbf\xe4N\xb8L\x02\x8c\xa1\xbf\xf9(h\xb8\xce\xaf\xc1\xbf\xdf\xb3U\x8b\xfd7\x94?\xfblb\x7fEl\x89\xbf\xff\xe1\xb6\xd3T^d\xbf\x89\xff\xc5\xa4W\xc6\x95\xbf\xbe\x8fNIhvd\xbf\xcb\xe0\xa4\xb2B\xda\x8e\xbf(cl2\x99\x90\x9b\xbf\xa9\xe9s+\x04\xa2%\xc0\x80Q\xb9\xad\x15\xad\xd1?L\xb5d\xb8\xa6\x90\xa5?\xbdK\xb4 \x06\xa8\xb2\xbf\x9e\x0bFb\x91"\x8e?\x13\x9fV\xfa\xb0\x01\xc4?\x1c\xa7:\xbe1#\xb7?+ [In\xee\xb3\xbfAclj\xd6d|\xbf\xb1\xeck\x9b\x06V\xf0\xbf\x10P\xa4\x02\xddp\xe2\xbf)\xb3\x91\xea\xce|\x91?\x91:J\xea\xf81\xc1\xbfqn\x10\xac,\xed\x0f@E3~\xb5\xbbX\xb6\xbf\xdb\x05\x0c\x86\xfa\xder?\xba)8\xb4\x9cZ\x0e\xc0\x13\xed\x88\x1e\xfczs\xbf\xc6\x1f1\xd4\xacj\x0e\xc0.<{\n9\\\x9e\xbf\xfdz\x15z~\x89\xbc?\xe0{\x1cI\r\xef\x82?\xbd\x1a\x9f\xc9T\xe5\xf0\xbfi\x82\x16\x8bRK\xb1\xbf\x06\x80\xa0\x11\xa7\xaf\x8e\xbf\xb28\xad\x05^Y\x97?\x8b\x91\xbb\xbf!\x03\xc3\xbf\xef\x0c\xc6H\xdfJ\x80\xbf\xc8\x8b\xde\x8cp#\x88?\xb4M\xc8\xc5\xdb\x18b?\xd3\xf1\xf9\xfb\xd7*\xeb\xbf\x91~B\xb7\xee\x1e\x8c?\x8eA\xc0!\xe93\x84\xbf\xa5\'\x8ay\xf0\xce\xc3\xbf6\xd2\xb1g\xd9\x1d\xb7\xbf\xd9\xef\xb68\xed\xe6\x94?\xcc\x1d\xd8p\x0f\xc0\xf8?\xefqe\xd9\x8e\xd3v?\xd5\ng\x19\xb0\x07\x95\xbfxJ\x16\xdb\xd0\xef\x83\xbf1r\x0c\xe2[\xc0P\xbf\x94\xd4\x94\xc0\x854\xab\xbf\x1ee\xc4\x7f!\x12\x1d?\xc4\xb4P\xdb\xcd@D?wu\x1e\xc1,\x96\xf2\xbf\x07\x00\xd6\xf7a\xc0\xb5\xbfkCt"\xba>m\xbf\xd01\xe6\x05\xba\x06\xb5?^\x96q\xd8_\xf6\x91?\x1f\xda\xd4\xfe\xb2\xbf\x84?$\xad`y2\x1c\xae\xbf\xbc\x05f:XC\xaf\xbf\xa5\xb2\x10\xc0\x10\xead\xbf\xa4\x9d\t|d\xcb\x85?\xe7\x93\xeb\xb7\x97\xea\x82\xbf\x8c}\xe9\x04\xcc\xcf\xce\xbf\xddk\xd1\x0b\xb4(\xc9\xbf\xa8\xc3\\\xae\xe3\xe1q?\xb2\xf0\xb9\xecR\x8c\xa1?uy\x18\x17y\xd6L?Q\\)a\xed"\x9b\xbf\xe06A\xa3\xbc\xcb}\xbf\xbd\\\x8e\xef\xf7O\xb0\xbf\xf8\xb0\x1a\xb3\xfbQ\x83\xbf\x01\xc1\xf3\xd3\x0b\xe0\x89\xbfS\xcf\xa2 \xa6B\x01\xc0`\x14\xc1<\xb6\xd4\x93\xbfF\xa4\x08\xfd\xf7vt\xbf\xadY\x96\x18L\x9f\xbe\xbf\x07B\\\xd6Ck\xd0\xbf\t\x1b\x9cu(H\x96?\xbb\xdf\x9e\xdd\xacJ\xb7\xbf|\xf5J\x19\x04\x9a\xdb\xbf\xcf\xae{6}|/?\x8d\xbe\xd8N\xba%\x92\xbf\x08}i\xab\x8a\x98t\xbf\xfer\xa3X\xcc\x17f?\x8fS\x18\xe4\x8a\x1e\xac\xbf\x05"O\xa2o\xf7\x84\xbf%=!\xae\xd2\xfa\xcc\xbf\xed,\x94V\xe4\x97\x96\xbf7\xac\xe1\x83!(\x83?-\xf5\xd8\n\xf3\xc7y\xbf\xc7\x99\x9c\xc0\x1fh/\xc0\xd9Rpf\xb1\xe1\x83?E(g\x03\xb7\x93`\xbf\xfe\x03\xf7V\xb1\xe6\xeb\xbfW\xabM\xc2\xc3\xc7\xb4\xbf\xad\xc6\xb9A\xf9\xba\x9c\xbf\xc0(\xc5\x9a\xfd\x15\xa6\xbf\xaa\tpXOm\xa9?\x8a}<,q\x0b\xbb\xbf\x05BQ\xc5~\x01\xc8\xbff\x9c\x10\xc9\x99Z_?\xce\xa7e\x88&\xd8F\xbfc\x12f\xf5\xdbt\x92\xbf\xc9k\xe3\x05z\xb5\x92\xbf\xae\xb93\xa2)\xe0\xd8\xbf\xacP\x9a<T\xa4\x88\xbf\xdb\xee\xab\xb46\xda\xac\xbfs\x95=N\x9e[\xa3\xbf\xd3\xc1\xa4.ZI\xb0\xbf[\xad\xec4[\xdc\x9a\xbfX\xac\xbddp#\xa0\xbf\xdf)\x18\x05+[\xce?\xbe\x13\xdbZ\xd57\xd9\xbf*c"\x8b#\x11\xb2?9.\x0enq\xd2\xbb\xbfBT6\xca\x99w\x80?M\x95\x93\x90,1\xd0\xbfT\xf0\xe2 \xf4\x8e\xc3\xbf9\x94\xa3\x9b\xfe\x89\xaf\xbf\xdb\xc0\xe7k\x04\xd7\x9d\xbf\x91[H\xed\xf7\x14\xa7\xbf\x9a\x90\xe4\r\xca\xe0\xa2\xbf\x07,DL\xc6B\x80\xbf)\x0b\x15\xe7Q>\xc2\xbf\x1d\xfb\x82\x87~F[?\xdb\xb5fs\x89\xb1\xc6\xbff]\xfaL\xaa\xae_\xbf\xde7\xb1\x96\xdd\xb2\xb2\xbf]\x94\x92|\x9e\x12\x83\xbf\xfae\x9eb\xd4\x96\xd5\xbf\xfe\xd9\x14/x\xd5\xd1\xbffk\xb7N\xa9i\x90\xbf\xbc\x81\xday\xe2\x98c?\xc0v1`o\n\xc4\xbf@\x9c\xd1\xba\xf4\xab\x84\xbfA\xb7\xaa1*T\x86?V$\xa3\xdfl\xd5\x9e\xbf\xf91\xe2\x90\xca\x1a\xbd\xbf\xf2d\xb8o\xe7\x0c\x82?\xcd\xe6"\xd41X*?%D\xe3\x1e\xde\x7f1\xc0\xd7\xdd1\xd2\x9d5\xc4\xbf\xee\x8cva\x07\xdfX?\xf5\x15\xeb\xbal\x93\x98\xbf\'P\xe9\x19\xff\xe5t\xbf6\x12\xa0\xe5\xa0\xd5\x97\xbf\xf3Jn\x16\x8f\x0eq\xbf\xb0\xc4\xbdG\x02\xd5\x85?~(;x\x13\x06\xac?\xe1\x14\xbb6\xde\xb1\xaa?cWrH\x08\xec_?\xb9\x0cHl\x08x\xc3\xbfa\xedKc\xf7$\xcc\xbf7H$>t\xee\x93?l;\x05[\xec\x01\x90?\xe5ja!\xda\x9d\x94\xbf\xce\xa5\xa1\x1b\x98\xcfi?\x13\xcf\xa1`\xba,\x97\xbf\xe4V$\xbc\xed\x0c\x9d\xbf\xf8 \x929$\n\x85\xbf\xc5\xb2\xd7n\x8d\x9e\xa3\xbf\xdf\x8d\xa1\x02\t \x9c\xbf\xfb\x14\xe3e<M\x81\xbf\x1eU_\x06F9\xb4?#\xfcXX\xfb\xb7\x84\xbf\xf5\x19s\xdd\xceX\xd2\xbf\x8d|\x8bR\xd4\x10k\xbf\xc9\x836\xf6\x14\xd4\xa9\xbf\\.\xb9b\x85|\x8c?D\xd23X#k\xc0\xbf\x94\xa3U"\xbe\xf1F?\xbbl\xe1\x05\xe2\xd8\x8d?`\xe0?t\x93G\xa4?Vo:\x1e\xaa\xfe\xba?\xc5\xb9\n\x1e\x8f\xff\xd9\xbf\x11\x82\xf6r\x1e,\xa0\xbf\xa0$\xda\xb5p\x04\xc1\xbf0eF\xdag7\xa5\xbf\xde5$\xd7\x9a\xca\xaf\xbf\x04\xa6\x83\xa1\x9d+\xcb\xbf\x8c\xfeeNK\xaf\x8d\xbf\xfa\\\x03^\x13\x82\x81?\x1d*\xbe\xc2\x97\xca\x93\xbf\xb6\xd4\xff\xaa\x90F\xad\xbf\xc6\x05\x1c\t\x11\x0c\xa9\xbf\xd0\xdc\x10]\x83\n\x86\xbf\xeb}21rS\xa0?\x83\xb6J\xb7\x81\xec\x9d\xbf^xi?PC\x87?a\x91\xc7\xfe\xaf\'a?b\x93~Zf\xc4\xd7?/"\xda8u\x7f\x84\xbfZ\x83\xf5\xf9\xf2\xb0\xa3\xbf\xe4\xe3\xce+\xf3\x1b|?\xa1p\x1b=\x05\xea\xac\xbf\x07\x0e#H\xf8\x18\x9a\xbfM7y@ct\xbc\xbf\xbd\x19\x86\x06{\x0e\x82\xbf%l\xa7@n\x01\xa4\xbf\x84M\xca\xb4\x87\x83\xaf\xbfA\xf3\xa5\xfd<\xe6\x90?\xb1\x98JhXY\x90\xbf\x86\xf1\xc8(\xc8\xf6r\xbf/i\xd1\x86\x9f\x07\xb0\xbf}Xcu\xce4\x92\xbfi\xc9\n.\x8b\x1d\x81\xbf0e\x1d\xcfP}\xd1?\x8e\xa7\xda\xd8N\x0b\x98?r\xee\xe0\xf8a\x99\xbe\xbf\xf5z\\\x84\x02\xa7\xbb\xbf\xd15dp\x8d\xf1\x9c\xbf\xdbJ\xdc\xc4+\x07\x92?\x80\xe5\x9f\xc9\x05\x8a\x9e?AA\xf1\x02/f\xca\xbf\xe5\xc1\x8f\xff\xf6J\xde\xbf\x05\xca.\\^\x9a\x84\xbf\xedhnO9\x04\xcd?\xc7L\x04T\rx\xa4\xbfO\x99u\\\x1a\xbd\xd1\xbf\x87\xb5\x04\x9e\xf4\xf7\xb1?\x80B\x0f@\r\x82\xc3\xbfoJ\xe2\x87\x19\xfc\xd4\xbfmt5\xec\x10\n\x90?\x0e\xc6cm\xcfu\xa4?\xa2\xfa\xec\x0eE\x15C?\xa7L\xbbF\xfd0\x95?\xc2\xbf;\xe09\xeb\xb1?c\x1a\x9c\x10^\x95\xc6?>\x14\xf5\xfd\x8f\x05\x9d\xbf\xa5"p\xb0v\x15\xc8\xbf\xb0\\`\xef\xff\x8a\xd1?T\x19\t\x19\xc6yn\xbf\xc7\xb6aP]\x13\x87\xbf\xe5\xf6\xc2\x9e\xad\x85\xc1\xbf\xd9\xfcF\xb0/,c\xbf\x9fJ]\xf5\xf9{\x97\xbf(\x9b{2\xceh\x85\xbf\xcdv\x04\xa9\xbe\x08\xa5?\xfc\x92\xa5w\xa8\x19\x96\xbf\xab-\xddG\xe9\x1e\x85\xbf\xef\xed\x07\x81\xb3\x07\xc7?\xa3\xeet\x170\xdf\xc3\xbf6\nK\x11+\xecx\xbf\xf0\x9b\x10\xd9\xe97\xb4\xbfX\x1c\xe1M\xa9\xbez\xbfM<\x819\xc0\xe1\xb4\xbf\x17\xa9Xa\xaa\x0c\x92\xbf3ks^R\x06U?8u\x16s>\x08\xbc\xbf\\rZ\x14\xc6\x9f\x8f?he\xc0\xfag\x88\x8e\xbfD\x90X\x8c\x1e~\xa3\xbf \xfb~bN\x94\xc2\xbf/R\xd8~\x97a\x82?\xf0<\xa4\x9e\xed\x95\x8e?Q9\xdd\xef\x177Q\xbf\x9a?S\x01\x93^\x8a\xbf,\xab\x8eAO\xee\xb5\xbf"\xca\xc7\xd5\xb1u\x94?\xab\xfb/5\x0b\x8bv\xbf\xd7\x15\xb01n\xba\xb3\xbf\xe8\xe6\x9e+e\x1c\x9c\xbf]\xd6\x83\ni\x92\xef\xbf\x06S\x15\xc3_\x1a\xcf\xbf\xf1K"l\x13\x9d\x80\xbf\x85\xb8\x91m\x18\xfb\xb5\xbf\xee3\xfd\x8e\x03T\x8a\xbf\x02\x8f\xd7v\x86 \xa1\xbfu\xb5\xb2\x06\xfd\t\xad\xbf\xd6\xe89+k\xa8\xaa\xbf\xe6X\xd6v+\x06\xa8\xbf\xd0\xf4\xe2.\x9d\xd4\xa0?Sv\xa1\xae\xdfF\x10\xc0\xef\xdf\x16\x11t\xfe\xab\xbf\x02>u;\x9b\x1e\x8a?=x\xd0\xb9T\xb1\xda\xbf~\xa3\x85\xae\xff\x19\xc9\xbf\xabd\xab\xd7\xab\xd5\xa3?Mp\xf2/"\x80\xda\xbf\x12\xbesk\xe1\xc4\xc6\xbf\x9d~\x03:\xdd\x11}\xbf\n\x15d\xf3\xb5\xa9\xa7\xbf\x8f\x94\xebfz\x9e\x83\xbf\x0b|\xa1\x89P\xb8\x83\xbf\x9e\xe8 \xe9j\xee\xb0\xbf\xe7\xb3r\x9d\xde\xc9\xbc\xbf+\x0b\x0c\x7f\xd0\xad\xd6\xbf"y\xc4\xdd\xff\x11\xc0?M\x91\xa5\xa5\xf6\x7f\xbb\xbf\x85\x8b\x95;Wic\xbf~\xab\xe0\x9d\xe1\x19:\xc0\x91\xb2,\x95y~\x88\xbf6\xb7S\xb5\x18\xf5\x86\xbf\x9d\xc4\x9c%\x1f\xd2\xf9\xbf\x95\x0b\xea\xc3\xc5\x8c\x8c\xbf]\x86\xb4K\xc6\\\x94\xbf\x8cA\xd0t\xde\xdb\xa9\xbf\x95\x83\xa6\xd9o\xd7\xa4\xbf\xadV\xbdg\x84\xfa\xca\xbf\xea/\r\xadm@\xbd\xbf\x9b\xf4\x88_\xd9\xd5\x94?:\xfb!\xa1\xe7\xacz\xbf\\\x11\xfc&\x978\xb0\xbf\x82\xae\xb7\xa8\x9f\x84\x91?zo\xc8\xc8g\xd7\xe3\xbf\x12\xacG:\xbbO`?q\n\xd0^&\xc1\xbb\xbf{!{\xd3@\xf3\x94?\x17\x14\x07?\xfc\xf2\xd4\xbfc\xd8\xf3\xc8\xc7\x90\xa9\xbf \xd0\xaf\xaa\xe2\x04\xac\xbf\xc9\x0ed\xb7_,\xb9\xbf.\xad\xc6\'\xfd\x8a\xc6\xbf\xe9\x0c\xcb\xb8]\x18\x89\xbf\x84\xe6;\x93>\x87\xd0\xbf.\x06Q\xfa\xc2ER?;\xdd9\x08\xb5\xfb\xfa\xbf\xfeLR\xc1\x9e\xf5\xe8\xbf\x9a3\xe6 \x99\x9f\xb3?\x16G\x94\xb3\xde\xe5\x9e\xbfz}\xef/\x85\x01\xd5\xbfr\x9b\xd6kW\x17\xb8\xbfhS\x8b9\x1f\x15s?\x7f\xd3Xa\xdb\xfa\xc4?\xa9uF\xdf\\\x8er\xbf2\xb3bj\x9d\xa1\xd1?\xc7r\x8d ,\x85\xa3?.x\x109\xd4\xa1\xb1?~\xe0\x0b\xe3\xb3\x89\x96\xbf\xe4\xf6\x01\x04\xb60\xe9\xbf\xbbdt\x00\xac\xd5\xe6\xbf\x17Vs\x18c\xe0\x93\xbf$\xb9\xb6ssU\xae\xbf\xed1\xda\x1b\r\xf9\xd3\xbf\xf8\xdf\x86s\x08<q?\xbd\xf4\xf0:\xa4\xccd?\xed\xcd"n\xbeS\xc0\xbf\xf1K\xd5qF\x0b\xec\xbfep\xf0\x14$b\xcf\xbf\xbab\x99(\xbe9\x84\xbf\x84\x9e3\xb4n\xaf=\xc0\xe8\x8eT\x19\xe0\xba\xc2\xbf+x\xba\xdcsYy\xbf\xa8\xc9\xc1N9.\xb2?@\x03\xd5W]\x80\x9a\xbf\x89\x8b*\xe9x\xbf\xb1\xbfd\xbe6hk\xd0u?\x1d\xbf\xeb\xe9\x063\x8f\xbfT\xd1\xd5\xf4\x0c\r\xac\xbf\xc83\x18\xd8\xc0/\xab\xbf\xc5\xc0\x95\xce\x05*w?(\xaaY\x11\x85\x98\xf3\xbf\\n\xbc\xe5I3\xba\xbf\xccO\xad\xcb\x88\x18\x94\xbf\xa2\xff\\^\xecb\xc9\xbf\xc5\xb9\xc1\xee\xdd\x03a?\xbe5KDf\x17\x91\xbf\x86\xc1\na\xb8(p?6\x13\xe7e\x8d\xee\xf9\xbf\xa7\xbb\x1d\xa5\xd6.\x85\xbfMT\x13\xcc\xde(\xc0\xbf\xee\xb3\x94\x14%\x0f}?\xee\xea\x89\xb2\x97\x12\x80\xbfq\x01iv\x8a\xf1v?\x00\x00\x00`\x9a\x11\x8a\xbf4\xb4\xcd\x03\xab\xa3\x88?\x9d\x99m\xf1$\x0fa\xbfL\xd9H\xad\xba\xd4q\xbf\xfd\xf3\xec^\x98\xb5\x83\xbf\x82\xfb\x12(-Jv\xbf\xff>r(\xc7\xbf\x8a?\'\x9b\x04\x02o \x82?m\xc1C\x1f(hw\xbf\x10/i\xa1\xc7\x92\x88?\xf1\xab|\xc0\xdad\x9c?\x16\x85\x182\xfa\'\x81?\xb6 Y.\x88\xb3\x80?<P\xe5\xcf\x15[\x98?Y\x86\xd4\x177\xc7\x90\xbfIp\xe0\r}\xa8k\xbf\x93\xb5\x08C\x91\x85\x8f\xbf\x80\xf8R\x9b\xcd\x9fZ?\x8a\xa7\xb9\xc6(\x89s\xbfJ\x8c\xdc\x0b\x11\xd0\x92\xbf:\x15\xb0K\xdcqC?\xce\x91\xedQ\xdc\xfc\x88?\xaeb\xd6;Z\xa7T\xbf\x06\xda\xf0\xdc\x98\x11\x94?\x1c\x18\xf4\xa7\xb9k\x81?$\x1f\xbb\xd5rh}\xbff\x00\xf4\xe5\xe1\xa4e?/_Zx\xb61J\xbf\xa7(\x18Gl\xcc\x83?\\\x01\xa1\xaa\\\xadj\xbf;TG\xb4\x8e;e\xbf\xbb\xf3\xfa\x01f\ta?\xa0\xcdx\r\x108u\xbf\xf4.V\xcd\n\x1fv?|\xe8=l\x7f\xa6\x8f\xbfp_\x87d\xa5\xac\x91\xbf\xf0\x03\xef!\x8au_?\xbe@\xd2\xe8[ u?6\x8a$2\xd9\x8aI?.\x83\xa4\xc4\xfa\x8c\x93\xbf\x9b\xf7\xf0\x17b\xca\x85\xbf\x16\xf9m~HTf\xbf\xc5nk\xa6R\x8dp?D\xeb\xc4\xc7\xaatp?\xbbNq\x11\xc0\x8fx\xbfsv+\xba\xc5S\x80?\xbf|\x9c\xfa\xca\xdf\x93?\xfb@\xe2\xb7l\x87\x81?\x19\'<\x08\r3~?"\xaf\xd8\xcd\x084t?\xf7\xf5g\x96\xf0\x8a\x93?\xff\xaeN]g~\x1b?\xc0b\xed\xa4\x13\xe5\x97\xbf"6?\x9eS\xdf;\xbfc\xbb\x95\x93v\xb8t?\xd6\x00\xf7#\x8cI??\xe2\xb2\xcc\x1by~w?\x05\x80\xb0\xda\xf2\x92h\xbf\xef\xff\x9c\xd6S\x80\x86\xbf\xc5\xd30\x1c>`\x81?%)\x88\xf9\'Q\x86\xbfF\x82\x1e\x88yqk?\xf7*\x15\xa1\x17\xcb\x90?>V\xf4\xf2\xf0G\x82\xbf:\xb0\x96\x01\xc7\xbe\x8e\xbfR\x10\t\xe8\x86\r\x84?\x1a\x139\xee\xa6\xbeu??E(\xc7\xf0\xad3\xbf\xa2\xb3\xa5\n\xbf\x9dn\xbf\x1a2\xa0\xc8&\xc7u?r\xd5\xe5b\xaa\xddd\xbf\xa9%\xf4!U\x7fm\xbf\xe0bZF\xb5\xfew\xbf\xdct\xf0J\xc2\xa6{?\x92\xb0\x07\xd6\x8a\xc6S?\xd3\xd4\xa8\x18u\x14|\xbf17\x95\xd0\xeeTi\xbf\xa4b\x8b\xac\xda\xe8\x93?\xc3\xb9\xefo\xe9\xd3p\xbf\x9e&\xf2P-\x1cj\xbf\xfb\x1b\n\xbb\x11\x94\x89?\xc8\xb3\xe9T\xc6\xffc\xbfs"9:\xfa\xfe\x84\xbf\x00\x00\x00\x80\xc3Tj?\x11\x14\xdb\xf6\x9f\xc3\x8c?+\x84\x0b\x88\xa6\xfbf?a\x18\x15Ni\xddr?\x9e\xe3b?3Sa?\xd9U\xf75\x13\x98\x83?=\x01W\x8d\x94\xa0\x92?\xf0y\xa8O\'\xade\xbf\x1d\xdb\x87,G\xe8}\xbf\x9b\x14=\x9d\xb9\x83p\xbfR\xb6,\xda\xda\xe2Y?\xac\xc3\x81\x01x\xf9^?\xa5\xbd\xb3|\xba\xba\x93?o\xc4<h7\xab\x85?\x8a\x88$M\x06\x90u?\x00\x00\x00\x80:\x10]\xbf$K\x13\x93\xf8\xd6_\xbf\x00\x00\x00 i\x9a\x92\xbf$\x0b\xa1?\xe3\xd9{\xbf\x00\x00\x00\x00\x11~\x90\xbf>/7U:\xc3\x8c?\xd1\xca\x02\xfa\xab=O?\xcd-c\xdc,\x80m?a\x84\xec\xc84\x85w?\x83\xc1\xbb\xf8%\x9a\x86?\x15\xf6\t\x1e"={\xbf\xf2\x7f\x0f\xca\xa4\x95\x83\xbf"\xd4,\x93gt\x92\xbf\xe7\x08<\xdd\xe9\xcb\x99?@\xb84\xc3\x84\x9c\x13\xbf$]\xd2\x9f\xd4B|\xbf\x01\xe2O\xe2\x90\x85\x91\xbf\xf9g\xc3\xb8\x16\x07\x90?\x91\x1b^\xc6\xc7}Z?\x8f\x19\xdd\t\xf5lu\xbf\x00\x00\x00@+?x\xbf\xaf\x8b\x1b\xa48r\x82\xbf\x83\xc3k\x1a\x1fS\\\xbf\x02\x17\xbc\xeb\xd7]\x99?}\x95\x12\xf4D$r\xbfy\x87\xf9I\r\xfey\xbf\x9f\xcc\x9b\xf0\x81\xf9\x83\xbf\x00\x00\x00\x00}$\x81?|\x15c\xc8\x92\x9c\x95?\x00\x00\x00\xe0Q\x84\\?a\xfb\xcbE\x08)z?oa6\xda\xdc?U\xbf\x14+~\xbe\xab\x0c|?\xb5\t\n"\xed~S\xbf\x17\x87\x13\xef\xf7\r\x82\xbf/\x13Rb\xb9\xfdx\xbfQ\x17m\xf7\xc1\xfbq\xbf;\xcb\x89\x81\xeeTp?-A\xe7\xf5\r\x1ew\xbf\x00\x00\x00\x00igy?\x89T\x1d|\xc1ij?g\x04B\xe5!\xdf\x86?\x00\x00\x00 z<\x81?\x00\x00\x00\xa01\x07y\xbf\x10\x99\xed\x06\xd5Fa\xbf\x0e\xfaCt$\x07\x87\xbf2V@\xca8f\x87\xbfg\xb9\x91H\xbd\xf3{?k\xb0\xc6\x92\xc1 v? \xc38MwUR?~C\xd5a\xe7\x88\x8f\xbf\x82\xabz\xa8\x0c\xf8\x8c?\xb0\x08F\x19\x86\xb1\x84?\x84?\xeb\xe1\xee0v?\xc7\xa5\xb9\xa6\xd1\x9dO\xbf|\xf4{\x9fj n?)\xee|\x9c\xca\x06{?\xde\xf4\xbd\xc4\xcf\xc2d?\xea"`\x81\x1b\x05z?\xf9\x1ez\xf6\x0f\xcaH?\x00\x00\x00@TG(\xbf\x00\x00\x00\xa0\xd7\xc9}?;\x92\xd8\xda\xb6%o\xbf=\xc9\x0f\x82;\x96\x90?\xa0\xf8JBL\x9f\x92?\xcc\xb1i\x08mC\x91?cj\xf7\x7f\xa6\xd5s\xbf\xe5\xa6\xd0\xdbd\xe5R\xbf\xd2\xdeu\x85&\x98\x95\xbf\x00\x00\x00 \x8c\x89n?w\xb8\x95r\x06h\x92?\x14\xa4\xee\x86\x0e\x04l?\x0b\x9a\x91\xce@\xaf\x8b?\x00\x00\x00\x80\xfe\x1di?\x00\x00\x00\x80\xd9\xf0e?\xe8\xb8a\x9e\xdc\xfa\x86\xbf\x8f\xab\x0c\x9a\xc2!s\xbf\x00\x00\x00\xe0K]\x91\xbf\xb3HN\x80\xd3\t\x82\xbf\x8bK\xdb\xc7\x06\xe3\x80?\x00\x00\x00\xc0V\x15s?\x97\xe5\nWf[E\xbf\x00\x00\x00 \x0b:g?H\nl\xe5\x80B\x97?\xfb=q\xa9\xa9\x03\x91\xbf\x00\x00\x00\xa0\x1e!q?4\xcd+\x19\x90V\x80?\xe5}H\xad\xb3fc?4\xb7t\xb4v\xa5s\xbf\xa6(`\xc6\xc7zS?\xcf\xaf\x95-\xaal\x83?\x00\x00\x00`\rN\x83?H\xad\xb8\xf3e7\x8c?\xe0\x91\xe5\xfd\x95\x00\x92\xbf\x00\x00\x00\xa0\xd5\xe2o\xbf-\x84(Cx\xd0a?\xc5l\x9c\xd9\x81my\xbf\x00\x00\x00\x80\xe0\xc8y\xbf\xc6\xf7\xbc\xc7*j\x8d\xbf\x90\x06\xcb\xd2\xcd\xea\xa3\xbf\x99O\'i\x0fr\xfc\xbf\xbd\xce\xbf\xbf\x9f!\x9a\xbf\x04@G[R\xb1G?\xb8\xe2\x7f\x11\xfb\xc6\xaf\xbf\xd6\xbb\xfc\x93\r\xe5\x8c\xbf\xa2v\xb6\xcd,\x8d\xc6\xbfDkpy\xf6p\xb7\xbfT\xea\xb5R\x9d\x0f\xa2\xbf\xbb\x01\x8a2^E\x9b\xbf\x96T\x84\x96\xbc\xab\x85?k\x1e\xcf\x0f\xb7\r\xc4\xbf\x9b\xf9\x08/\x8f\xa6\xba\xbf\xf9\xef*\xca\x90\xd0\x96\xbf\xa8z\xea+\x96\xb2\xa2\xbfK\x13\xfa\xa2\xe4\xbb\xd4\xbf\x0f\x89\x98\xfb\xd5\xab\xbb\xbfL@\xc9\xf7\xa57\x82?G\x1e\xf6E\x0fk\xd3\xbf\xd7\xda1i\xaf\xc1m\xbf\xfb\xde\xf1\x93\xf4\x99~?\xeay\x1b\x8fvD\x83\xbf\x12\x17\xf8(%\xb1\xac\xbf\xab[}\x93\x16.\xa3\xbf\x9a5\xa1`\x08d\xb0\xbf\xdb\xdc\x9c0\x1c\x8a\x88\xbf\n\x00\x03\xf2\xda\x8c\x8c?\xbc\xa6\xa1&OD\xa8\xbf\xaf\x14*\x05\xf2O\x82\xbf\x13en\xed\xa7\x08\xc7\xbf\xe0\x88|a]\xd3\x90\xbfXT\x95\xf7v\xa9\x96\xbf\xee\xfa\xa2\x8bt\x7f\xda\xbf\xbf\x98\xed\xc68\x13\xad\xbf\xf5\x14\xbe\xbc\x17\xdbV?\xcd_m\x13\xaf\xe5\xea\xbf\xc4\xf5\x0e\x92cX\xa2\xbf\x87;\xf7\x12Z\xbc\xac\xbf&\x00\x89\x84b`\x83\xbf\xba`\xc3O\xf3E\x96\xbf<\xa4v\xcfp\xd5o\xbf\x8b\x1d\xeb\x8d\xd6\xe2\xbd\xbf0\xc7\x8d\xffC\xcd\xa9\xbf})\xfa/\xc4\xc0\xe3\xbf\xd1\x18L8l\xf0\x8a\xbf\xc1\xef\xc7\xe1qW\xd0\xbf\xa9*Q\xb0\xac\x1d\xb3?p\x14\xd2\x12\xb8+\xa1\xbf\xaa\x07\xd4pIf\xb7\xbfp]\x01$2\xbc\xb1\xbfA\x8af\xe2\x10]\xb3\xbf\r\x00\xbfM\x96\\\xb3\xbf\x8a\x8b\xc7\xcb\xc4\x9f\xcd\xbfu\xe5:\xedMI\xaa\xbf\x14L\r\xf7\xe5{\x9b\xbfz"\x19\xe2\x17\xf6\xbb?\x87\xd1*\x85H\x92\x9d?\x0e\xdd1-\xd7\xd2\xd3\xbfQg}\xa9\x8e\xc7\xbd\xbf\x87#n\\<\x1e\xf0\xbf\xc4\x15Dm\x9c\xdd\xad\xbf\x97\xcc\xe2\xceQ\xa6w\xbf\x88\x1c\x13 /\xcb\xa5\xbfQ\x9d\x00\xecC\x17\x93\xbf~\xad\xb0\r\x7f\xba\xc4?}\xfa\x9a\xa8\x82\xcb\x83\xbf\x03\xdd\xf7\xd9\x99\x14Z?v\x91R\x1bJ\xad\x93\xbfI\x17\xd9K\xc2\xd5\xb7\xbf\x98t\xa8\x05\xc6g\xdf?"\x1eE\xb6\xc2J\x85\xbf\xc8Nf\xe1\x8f\x98\xc4\xbf\xaf\xd8\\\xf5Wn\xa8\xbfb\xf0G\xbbi\xc1\x91\xbf\xae4$;\xf4\xde)?\xe9\xb8>\x07A\x7f\xbf\xbf\xf7!_\x80\x1fP\xb6\xbf\x95S2\xd6\xcaB\xd9\xbf\xb2\xd4\x97\xbb:1r\xbf\x86\x1dH\x11n>\xd6\xbf:\xbc\xd8C/\t\xc7\xbf\x9aS$\x1b\xf1\xa5\x90\xbf\xa7\xe6~e\x9cu\xd5\xbfF\x97\xa3\x1a\xa6\xc6\x96\xbf\rb\x9az\x8f\x14\xe8\xbff\x07\t\xdfz\xa5\x93?\x02\x102\x16\xed~\x8c\xbf\xd5sH @[\xcb\xbf\xb4v\x8e\x91\x99-\xad\xbfo\xbb\xe9%\xf6\xa3\x8e\xbf-[:3\xd6\xb9\xa6\xbfe\xb9\xd2\xec|\xd6\xd7\xbf\xed"\xd3T]j\x98?\x0bf\xffX\xed\xe7j?\xcd\xcaV\xd6\xd3\xa1\xae\xbf(\xd4\xd0\xf0H\xa3\xa2\xbf==.f\x87\x06\xba\xbf$V\x89J\xff\xb5\xcb\xbf&\xcaT\xe8A\xd9\x99\xbf\x92N\xdcV\xf9Q\xb2\xbf\x82\xa1\xd4\xaf\xf4u\x8a?\xdf\xccR\x03\x18Za?\x1f\xf8-\xc13\xbe\xb6?\xd2\x94\x117\x0c\x05Z\xbfb\xf9\x05c\x16\r\x93?m\xa7\x01\xe1\xa2\x0bV?1\xc1\xbbqKg\xb2?\x1e\xd0\xb9\xa1\xde\xcb\xa8?R\xcc`\x9e\x14\xb3\xad\xbf\x10\xc0\xa4\xb8\'\xfb\xa2?L\xa8\x16\x99\x04\x9d\xa9\xbf\xf5\\6\x7f\xf6\x1e\xe8\xbf|\x07.\xf4\t\xea\xaf?t[0\x1eb\xeb\x7f?\x18\x00\xf5\xa0\xac\x07\xc0\xbf\xa4\x11XU\x0bl\xb2\xbf\x8c\xa2j%.\xe7\xb0\xbfn\xb95^\xcb\xc3\xe1\xbfF\xa7H\xf4\xffjq\xbf\x88o\x04\xf4E\xfd\x9b\xbf\xbd{\xb9\xf4\x9c\xe2\x9c?E{\x16\xc0\x96\x8ag\xbf\x81\xeer\xc3\xc2\x89~?\x8f\x9b\x8a{\x02\xad\xaa?\xe3\x16NnP\xfa\xa7?x\x839O\xd1\xf3\xa5\xbf\x94/k\x1f\x98ma?aBaU%g~?\x16\xd2\xe4\x03\xfe\x1d\x98\xbfS\x1c\xfb\xe2\x85\xd1\x14\xc0a\xab\xee@\xc3Qk?\x0f8ud\x9a\xe3\x95\xbfV\xb2?\xb3"\xbc\xd7\xbfm\xec\xd0\x15\xd6\xa5\xab?\xde\x9d\x11\x92MQ\x93\xbf\xeb\xce]\x1d\x11\xc8\xbd\xbfrtV\x04\x0b\x1fb\xbf\x17\x0c\xfe\xebAE\xb0\xbf\xc1\xcc\x1d\x88i\xa4y\xbf\x94\xf6~\xed>\xf1\xb1?\xf9r\xe2\x9a\xe0S\xa6\xbf\xe5\xb1\xdbcs\xc0\xae?\x19k\x9aLy\xbf\xbc\xbf\x05C\x81uY\x03\x88\xbf\xdb\xfd\xed4\x91\xf4\x94\xbf\xf9o\x1a]VJ\xc7\xbf\x15\xad\xb33JQ\xa7?\xb0\xe0\xa0?\x98?z\xbfU\x86\x04\xbc\x04\x92p\xbfk\x06\t/Cj\xb4\xbf\x87\xb8\xd9\xa7L\xfb\xc0?Dc\x0e\xf4c\xc2\x9c?\xdd\xb7\xbf\xb8-\x98\x99\xbf\x12w/\xect\xe5\xb7\xbfY\x8f\xbf\x84\xffV\x8a\xbf\xef\x8fwl\x98\x9a\xf2\xbfo\xd5Y\x1c[,\xe5\xbf\xd9\x85\xe2?8\xda\xd1\xbf\xc3E\xffwX\xc0\xc9\xbf\xf4\xeb\xc2\xf4W!\xd7\xbf\x1a \xb2\xb5\xden\x88\xbfp\xf0T9\x86\x97n??z\xfeS$;\xbb\xbf\x84KM-|:q\xbf\x8d\xa7\xcfCs\x9c\xc4\xbf2\xabU9\xbcC\xa0?\xff\x1d$u4j\xd0?\xa0\x18\xc1*\xc14a\xbf5\x92\x8e\xc0\x93I\xd8?Z\xce\xf1Y\xb9\xd0\xb4\xbf\x1b\xebPF\\0\x8b\xbf\xa1\xc4\xad-\x06n\x8c?\x14\x1a\x88\xdd\xc6\xe1\xc0\xbfoq\xaf\x9f\x1bQ\x82?h\xf4Z\x9d\xd5\xa4m\xbf\xb5O\xad\xf8\x17,h\xbfE\xf2\xbeH)2\xec\xbfW\xf9s\xe6C\xbf\xb4\xbf\xde\x85\xaa\xe4w[o?\x8eO\xfa\x96:\xa4\x17\xc04\x18:\xb6\xf3\xb0\xcd\xbf\xa4\xbcj\xa1\x1f\x9bT?nl\x04/\x15\xd7\xcb\xbf\x04\x8c7\xc6\xcb\xcah\xbf\xe9yAh\xf4\xd3\xcb\xbf\\B\xbc\x87\x84\x99|\xbf\xa7\xe1\xedS\xe1o\x98\xbfe\t\x18\x83\xa9m\xbf?\x0c\x04k\x8c`o\x8b?\xf5\x00\x89N\x81c\x90\xbf\xa5\xa4\xc3\xcf\xb8S\xf3\xbf\xdb\xfe\xf8\xacP\x99\xc4\xbf\xce\xe4D\x8a2s\x8e\xbf\xe4\x8c\xb9U\xb2\xad\x94?\xce\xd8Ls\\\xa4\xa1?\x99\xe8\xfad\xdfAy\xbf\xa1\x11bB\xaf"\x9d?\xd5x\xf5\xa5\x98\x88\xa6?~\x85\xc7@\xd2\x7fo\xbf\xaem,\x80b\xbd\xc6\xbf\xb9\x0fg\x10\xf3JZ\xbf\t\xf8\x1a_\x18\xf4\xe6\xbfB\xfb|\xb6\x9dz\x86\xbf\x93\xe4\xdc\xde\xd3\x076\xbf\x80\xeb\xc5L\xe1\x8f\xb1\xbf\xdb\xad\x9e\xbdAz\x8a\xbf\xc7\xde\x00-J\x15\xc1?\x0b\x9c\xbc\xd2\xbb\x05\x97?\xb0\xea\xde\xd6\xfb%p?]T\xa7\xae\x81#\x96\xbfjz\'?M\xf7w?\\\xcb\xce\xea\xc4,\xe4\xbf\x94-\xc6\n\xe7\xec\xaf?)\x8c1\xd4w\xad\x96?R*\xaeAzI\xb3?\xbaO\xeb\xa3\xbd\x95\xd6\xbf\x0e\xb5\xae\x18\x12\x01\x80\xbf\xae\x95\x17\x1d\xf1\xbd\x98\xbf+\xeb\xab\xd7\rM\xa8?\x93\xfe\'\x02X\xab\x84\xbf?\xce~\xe5\x8b\xb4\x94\xbf\xbbW\xe0\x83\x7f\xdb\x8c\xbf\xf36U\x83\x8a8\x96?\xfbX\x96\xa8\xf9\x03x?\xcf7\xc6\xea\x1a\xb9\xb2\xbf\x11\r\xb9\x93C\xf3z\xbfZ\x16\x83\x97\xa1]\x97\xbf\x19\x06\xa8z\rx\x89\xbfT\xd0\x1b\x0c\x7f\xf4p\xbf\x85\xe2\xbc\xc5\xcc\xea\xce\xbf\xbe\xbd\xc9\xa19\xb4\x9b?\xa2\xec\xd8O\xc2\xa9\x93\xbf\x8dip \xab\x92\xd2\xbf\xfcK\xdf\x15a\xb5\x82\xbf\xa6f\xdd\x960\xc4t?\xea\xf1\x06\xbcVO\xad\xbf\xe1y\x92\xf5\xc5\x81\xa1?)\xa2\x83\xa7\x84u\x80\xbf\xe6\x18#\x93x<\xc6\xbf\x07\x06M\x86\xd8\x8b\x94\xbfh\x8a}\x13e\xbaG?\xf9\x1e\x83\t<\x87\x9a?;\xc5ZU\xf2W\x81?\xc9S\xcb\xe1q1\xb9\xbf\xc8\xd9 \x94\x9b\xd7I?\xc9\xc4\r\xab\x8b2\xc1?\tz,\x18~\xe4\xce\xbf@\\\xec\xfcL\xba\xb1?M\xd6\x85\xc0\x01\x1e\x93\xbf\xb5Q\x89\xab\xd0\x95\xb6\xbf\xc3\x05\xa7\xb5\xca\xcd\xaf\xbf\x11\xd61*\xfe8\xa2\xbf,\x021\xa4\xd0\xe0z\xbfi\xcd=F\xa2\x99\xca?\xb2\x14\x1d\xb3Xz6?$\xdd\xa9,\xa0\x8e\xb9\xbf\xb4%I\xb3\xef}\xa9\xbf\x10F\xf6\x0c8\x9c\xbc?\x18\x90^N.\xa2\xb6\xbfD4\xe8\x96\xa8B\xb7?\xf3[\x88\xdd\xac=\xc4\xbf\x98\'Vg2x\x87\xbf.s\x0b\x9c\x14\x94\xb9\xbf.\xa6x\xec\x8eNi?\x88j\r\x13v\xb9\x9f?\xf8\xd5\x9f\x80\xf92\xac\xbf?\x8e\x8d\x9c\xb1\xc6q\xbf\x8cY\xf5\x86\xd85 \xbf\xe6\x1f9\xc9\xaf1\xac?\xd11\x00\xb1\xcd\x8f\xbb?\xd3\x97?\xf6\xc7\xe4{?\x82\xb3\xb9\x90Z\xee{?\x19\xfc\xc4C\xd7k\xa3?K=Y]s\xecd?HsL\x1e;xf?\xd3\xa6\xc5\x9b\x14Wx?\xa9T\xd3\x1a/\x04\x82\xbf\xa2:\x12\r<V\x8c\xbf\xc6jW\xdb\x9e\xad\x90\xbft\xa6\xd1\x7f7h\xf0\xbfY\xec\xe6\xf3\xd0_\xb9\xbf\xbfg\xb0V\xfb9v?x7\xdf\xbc\xab\xbd\xbb\xbf\x0e0\xd9=\xd8,\x96?D+\x91<\x13+\xc9?\xac\x07\xde\xca\xc2p\xa6\xbf\xb6\xb9\xe1\xbd\xa7hF\xbf\x15a\x8d\x0bI\xa7\xc1\xbf\xa5\x81\xd6\x05G!\xa4?L\xd6\x1f\xa4\xd4\xf6\x90?\x0bH\xd2\xf2\xaf\xae\xba\xbf\x0f#\x00\x9f\xcbs\xa2\xbf&2\xcc\n\x0f\x96a\xbf\x9a\x8b\x0cr\xf8\x1a\xce?tk(\x98\x82uZ\xbf\xac\x81\x9dbw\x91\x93\xbf]\xe2\xb1<\xeb\xf2\xb0\xbf\x08\x17\xeaYqx\xd1\xbf\xd7/3\x16Z\x93|?\xfe\xf54v\x1c\xa8\xa0?\xc9\xcc\x8eW\xdf\xcd\x84?\xe8#14\xdcI\xf0\xbf^\xb9Q\xc3.b\xad?\xef\x9fg\xf9mhj\xbfhR8\xe7X\x93\xc1\xbf\xbb\xac+\xad\xbe\xdb}?\xe6\xb9\x14\xf4N{\x9e?\xe7\xa4\x1a\xab\x07x}?\x89\x9d\t\x97\x01^\x95\xbfB\xac\x8bS\x88\xfd\xa1?V\xb4\x87xDhi?\xcc\x90E\x0fp\x93\xbd\xbf\x04B$\x15N\xe8z?\xc4v\x1f\x8d\xd2\xdeO\xbf\xa7M\x02\x11\xdb\x8b\xd4\xbfL.\xae\x81\x8a\xc8\xc0\xbf\xba%\x1aH\x8b/\xa1\xbf\xa2\xe1\x04p\xe3I\xb9\xbf\x90\x95\xdd\x8b\x83P\xc6\xbf\xb4\xa3\xaa\x02\xd1I\x8e?\xbbO\x88\x8d\x12q\x8a?\xfc[\x05\xf7\x8eg\x8c\xbf1\xd7\n\xfb\xf6\xcc\xbf\xbf\xa5],\x05\xb3\xdc\x8e\xbf?\x13z-\x08\x86\x84?\xe6C\x81\x89L\xfb\x9d\xbf\xb3\x04{\xab\xdc\xaa\x99?\xc3\xe7\x81\xcb\xc8\xa4\xa6\xbf\xdb\x06\xb5\xab\x9eh~?\xd2m`bz"\xe1\xbf\xc1\xe6\x85\x9c\xb9\xdf\x91\xbf\x8b\xa1\xb5z-\xe6\x99?\xee\x19\x08\xcb\x99~\xb1\xbf\x06\x95\xab\xfc\xa9\xeb\x88?s?\x9e\xc258\x89?\xd9\x9a\xbd\x83#\x05\xcb\xbf\xb3R>\x86\xe4\xabY?F&\x92\xb4w\x01\x90\xbf\xe7\xb0n\x0f\xd3\x85\xb4?\xa3\xa3\x91\t\xff\xc3r\xbf>\x89\x90z\xfd\x06x?w\x0c\x89\xe4KI\xb0\xbff\xd1\xc6\xbe\xa5\xf6\x8e?\x83\xad\xb5\xeb\xb5\x04\xc4\xbf\x11\x13,[\xec\x17o\xbfS\x9b\xdeC\xceb\xb1\xbf\x84?f\xb0\xe3\x01\xcb?\xb4ae\x95\x84O\xa2\xbf\xdc\x94e)\x93\xd5\xbb\xbfW\xf5\x15l\x0f&\xc0\xbfT/u.e\x11\xb3?\x08\xa8N\xe1\xad\xe3\xd8\xbf.\xc8\xca\xf5\xfa\xd9u?\xc2\x9d\xc4I\xc8\x1b\xad?\xdc\x01;(\xcd\x02\x86\xbf\xd2\xb1%\xaeku\xa1\xbf\xb0\x08$\x9b\x8a5\x98?u\x0e\xff\xd3UK\xbd\xbf\xa2\x13\x13\x9e\'\xe2\xa7?\xc1\xa2\xef\x14\xa3\xc5\xdc\xbf\xc9\x12\xac\xb2\x9d=\xb3\xbf}\x8b\xd0\x1c\xe2(|\xbf\x93\xe2\x95\xcd\x8f\x96\xb8\xbf\xfcz\x073\x88\xbaI?\x84\xdb\xe3\xdc\xe4\xab\xa7\xbf\x89k\\\x15\xa6*\x83\xbf\x1e\x89_\xf4\xbf\xdc\xbb?\x97\xb5oT\xdb\xf0\x85?\x8b\xae\xd4\xc8\x90\xd2\xb8\xbf\x1bJ,F\x9bY\xbc?\x19\x05\x94qx\xf7\x82\xbf\xa4R\xd0\xa5\x81\xa0\xb1\xbf\x02\xf8\xa4iY\xd4l?\xe7\xbc\x9d\x90\n\x07\x8a\xbfgU\xb1m3\xf7g\xbf\x14MZi\xd7\t\xad\xbf[\xe6\x0e\xd2\xc4\xd4\xb9\xbf/\xb1\xde\x1bz\xec\xc9\xbf\x06{c\x0f\xd4\x0f\x8f\xbf\xa3\'\x87\xa6\xbc-\xf7\xbf\x86\xad(#)\xb2\xc2\xbfe\xd9}\xfb\x7f\xc4\x92\xbf\xef\xc7\xf9P\xfd\xc9\x9f\xbf\\\x8c\x0fm\xe8\x03\x89\xbf2\x9c)\x112\x89\xca\xbf\x8ft_g\xb4?\xa2\xbf\x83r;8"+R?\xc0\x1eK\x1cT)\xb1\xbf3\xd2\xf93\x03\xc2\xa1\xbf?\x01\xda\xce\x9b\xa7\x8f?\x99xx\xf2\x81\xf8\xcc?\xc3\xfa\xc4\x9b\x1dM\xb9\xbf\xcd\xfa\x84\xa0\xef\xa3\x87\xbf\x92d\xf8S\x03\xb8\xa4\xbf!\xf6N\x16\x8a\x19~?~\x1c\xf8\'\x86\xbf\x8f\xbf+ \xe4`\xa5R\xa4\xbf\xf8\xf1\xd9\x8e(P\xa2?<\x14c\x83\xa5Ru\xbf\x99\x83#\xb86\xbe\xc4?\xb6\t\x07\xe9B\x9f\x84?\xe12\xc4Y2\r\xf8\xbf7B\xa4\x16?\xf2\xb7?T\x9c\x12\xa6`\x07r\xbf\xbf\x9e]\xa5D\x85\xac\xbf$\x1d(s\xadL\x85\xbf\xcd@\x99\xe0[\xbb\xbc\xbf\xfbG\x91y\xb8\x89\x93?\x9e\x1b_l\n\xfc\xa1? !t\xfc\xec\xd8\x82?N\x19B"\x19%\x86\xbf\xc2\xd8\xe7\xb0\x16\xd7\xc1\xbf\'\xfb\x85\xd3\xd6\x88\xb0?\x11\xe8\xe3\xfc\\\xd9a?-\x1f\xaf<#\xcc\xc0\xbf+~\xa6\xda\xea3\xc2\xbf\x06\xf9?\x87\xc7(\xa6\xbf\xd1?\xaa\xf2\xf7b\xa1\xbfHnyah6\xc8?\xee\xda<a1|`\xbfU+\x11:\x1b\xa6\x86?\xd6De\xec\xde;`\xbf(\xa7=B\x05\xca\xaf\xbfM\xa6lv\xd0\xd6\x90\xbf}\xc9E\x82^\xd0\x85\xbf\x9b\x8a\xeb)\xdb5\xa0\xbf\xd1|\xb1\xd2\xab\xca\xb1\xbf\xa4\xd5l\xdf\x02\x81v\xbf\xecb\xa1m\xa5\x92h\xbf\xc9")x\xe4\x0b\xc7\xbf\xa5\xcf\xf7Zl\x0bu\xbfK\xb1\x1b\x89\x1b\xac\x93\xbf\xc5\xed2\xb8g\xa7\xd1\xbf\x01\xc9\x96Y\n%\xcd\xbf\x8b2\xee?\r\n\x97\xbfA<\xa8\xea\xac\xd1\xc4\xbfY\xc11\xed\x11b\xa1\xbfS\xbf2\x14Z\xed\xb2\xbf\xce\x17\x1cA\xf0\x94\xa5?\xf0\xc0c\xc7%\xf0"\xbf\xd1\xf9\xe8\xe4\x8e\x18t?\x00g\xd0?\xe4$\xa4\xbf\xb90Y)5\x94t?/\x04\xb1\xf6\n\xa8\xdf\xbf\x1f\x8e\x137k\xa9\x90\xbfy$rrRp\xc4\xbf\xe2\x88\x86\x07\xebu\xfe\xbf+X*\x89\x05Q\xb1\xbf\xfe\xc0i]*J\xa1\xbf[\x18\x8drL]\x9c\xbf\xc2\xb8\r\xd2T\xce\xa2\xbfVK\x98\x8esb\xcb\xbf\xc5\xe12\x84\x07\xd6\xa7\xbfx\x98\x95\x8f\xd2\x0c\xab\xbf\xf9\'\xbb\x9fC\x80\x8e\xbf\rd\x9c,\xed\x95\xc1\xbf\x11\r\\U\x1fK\xad?K\xfd|\x0bw\x9c\xe1\xbf\x93dO\xc7\x9fH\xbc\xbf\x14m\xb4\x1fcE\xa8?\x8a\xbcx\xffu]\xc2\xbf2\xda\x06\x8bCc\x91\xbf\xafY\xea\xf3\xa9s\xec\xbf\x0b\xbck!C\x93\x93\xbf\xcf<G\xac\x15\r\xe4\xbf\xfc\xfc\xb8\xc2\xe9\x8e\x9a\xbf\x0e\xb4\xb3\xf7g\xfe\xb1?\xf7\r|\xea\xfd{\x7f\xbf\xbd^rV\xf5\xe1\xe0\xbf<[x\xf1\xd6\x93\xd8\xbf0H\xa1t\xae\xc0v?\x00zt\x01\xb3h\xb8\xbfj\xee\x1b\x9dI\xaa\xa2\xbfQ\xeaK\xd0W\xccQ\xbfKm\xddv\x88\xc1\x84\xbf|\xb9I<\xb2!\xbb\xbf\xe4\xd6\x03HBI\xb2\xbf7\xa8\x00\xd6\x00\xf6\xd6\xbfs\xa8\xfeu\x13\x9e\x80?b\xce?\x87oy\xeb\xbf\xb4\x1d\x94j\x1b>\xc6\xbfF\xcd~,\xe4\xdb\x85?\x148T\xf4\xa4~\xcd?dxW#\x8e\xeda?\x0b\xb6Y\xa8\xe8v\xb7\xbf}\xd7\xce\xc1\xc7\xf9\x93\xbf\x16\xe5r(\xfd\x8cs\xbf\xe0\x11\xbffe\xa4\xb0\xbf\x13Q\x94\xb4\xbb\xe2\xab\xbf\x89\x9e\x0f\xd1S\x1f\x80?\x89\xc1\xd8c\xf2\xa8\xd4?\xd0\x86h\xba\t\x8a\xac?{\x8d\xe9\xc7\xf7\xeb\xab\xbf\x864\xf6\x0f\xb0"x\xbf\x04\x1c\x9a\xab\xfe\x00\x97\xbf(\xdf\x80\xa7\xc2zr\xbf\n\xf9\xd9Z\xfb,\xb7\xbfW\x8aI\x05\xf8\xf7\xb6?\x8a35\xb5*\xe5\\\xbf\x14I\x1f\x0f\xb4(\xc3?\x9a\x1d\xa2\xad\x9d\x85G\xbf/\xaf\xc1\x1b\x93\x82\x93\xbf\x03\x9c\x13\xb6\x0c\xabz?\x00\x00\x00\xa0\xba\xb3e?>^c(\xf4e5?\x00\x00\x00`\x16aN\xbf\'P\r\xd56e\x8a?\xdb2D\xf4\x9e\xe5\x81\xbf\x9dKa\xd8\x9f\xee\x84?\xee\xfd>\xd8\xd5\xfbu\xbfS\xa5\xb9\xe3\xd5\xf4\x84?\xecI\xf8\x9b:m\x86\xbf\x91\x12\xefF\x90eP\xbf#c\xdbX<\xef\x87?\x14l\xa4\x9d\x16K\x85?\x00\x00\x00@\x04\x80{?\xee\x7f\xb2\xd9G\xb2O?K\xb8OV\xc4\xb2n\xbf\xdbj\xb5\x07\xc2l6?\x00\x00\x00\x80\x04\x1a\x9b?H\xa7\xac(\xdf\xaba\xbf\x00\x00\x00`\xc4a\x81?\xc9\x94\x98\xe1\x89\t}\xbf\x84\xb5\xb6N\xab{\x93\xbfX\xba\xb5B\x87\xf7z\xbf\x15\xdc\x0cB\x11\x98W\xbf\x98\xc8\x08\x8b)-+?\x00\x00\x00\xc0$\xa6i?\x00\x00\x00\xc0\x85\xb3r?\xa2\x1a\xcc\xd5l\xd7\x81?\x00\x00\x00\xe0\x1a\\q\xbf\x00\x00\x00@v!\x80\xbfWE\x0c`o\xdd\x82?\x00\x00\x00\xa0f\xdbz\xbfB\x8d\xec\x8fmnz?\x15d9\x89eD\x95\xbf\xa3\x99\x0b\xe0\xd5\x02\x8b\xbf\xf1\xc5\x97\xe5\xae\x1b\x82\xbf\x87\xaf\xaeS\x91Z|?n\xffh\x04\x97\th?\x00\x00\x00\x80\xdc\x97G\xbfe\x9f\x12\xc5-FY\xbfIM~X:\x07\x87\xbf\x00\x00\x00\x00\xd9\xe4R?\x00\x00\x00 \x10\xd5C\xbf\x1fz1\x1f\xb2ly?b/A\xff~Ml?\x00\x00\x00\x00)\x8d\x99\xbf\xbc\x15s\xb7\xd9\xd0m?\xd1GS\xf1\xfb\x9ej?C~ 8\x92f\x87?H\x17T\x1b\xef\x8f>?\x941\xd4\x99\x9c+v?{B\xdcAy\xfa\x82\xbf\x00\x00\x00`\xf2\xb2\x8a\xbf\xd8\x00\x91\xcf\x8d\xd0m\xbf\x00J\xd5q\x88\xe5Y?\xbf\x96\x82\xd6\x084~?\xf9\xb6\xd1\n\x9f\x07D?\\\x10z\x1c\xd7d\x87?\x1f;o\x98\xe1Qr\xbf\x00\x00\x00\xc0\xda\xc2\x94?\xd9r\xb6 1\nC?\x00\x00\x00\xe0\xf7#o?M\x04$V\x00r\x89\xbf\xc8\x93]\xdaw\xd8q?.>p\xd9\xbcX\xf7>I\x11\x8b\xd3F\xfa\x96?5\xea\xea\xff\xa5.\x80\xbf\x19nK\x96\xedt|?\x00\x00\x00\x80t=Z\xbf\x03G+\xa1\xec*h?!\xefj^H\xdeT\xbf\x00\x00\x00\xe0\x15<q?\x00\x00\x00\xe0\x0c&\x80\xbf\x00\x00\x00@\xaf\xecR\xbfV;\x7f\xdc\x9a\xa2\x90\xbf\x00\x00\x00\xa0j\x8bq\xbf\x00\x00\x00\xe0\xa3vO?\xe8\xc9\x86\xaf\xfb\xf7\x1d\xbfGY\xd7\x00\x1a\x13v\xbf\x00\x00\x00\x80?\x87\x87\xbf\xfa\xc9\xc5\x8f\xaf\x83\x8f\xbf\x00\x00\x00@\xe6\x00\x80\xbf\xb0J\xe0\xfd~h%?PSZ\xe9[\x97\x9a\xbf\x00\x00\x00\x00\x07L\x97\xbf\x05\xd0\xc7\x98\xd3*l?%\x8f\x07`\xec P\xbf\x00\x00\x00\x80R\x01\x97?\xf1z\xc7#\xef\x85w?\xdb\xd8\xd0%{\xcf\x96?\xc5\xaf"\xcb\x0e\xccz?\x9f\x10\xd2\xd8\xd98z\xbfU\xcc\xdb\xd7\x1c\xcc\x8c?\x00\x00\x00\x00\xdcu\x84\xbf0\xf5\xd8\xe1A\xc5\x94?\xc0#y\x01x\xc3t\xbf\x00\x00\x00@&\x96\x81\xbf}\xd9!\x1d\x00\x9a\x86\xbfB\x07u^\xba\t\x90?eX\x8e9\x06i\x83?\xbd\x11rbt@\x87?\x00\x00\x00\xc0%\rg\xbf\x01\xd8\xcd\x98{#\x81\xbf\xac\x1a\x7fw\xa9a\x85\xbf\xc7\x18\x0eteLw?\x00\x00\x00\x80\xba2\x93\xbf\x9a\x84\xf2\x05\x1a\xa1\x86?\x87\x86\x90\xae@nh\xbf/\xd6\xc7z\xaa?\x7f\xbf!S^I\xb4\xc3S?g\xb9\xa9\xc7\xa5\xf6t?\xc9\\y\xb1\xf0\x18r\xbfp\xc2\xb9\r-ff?t=\x08\xb7\xc7tH?\x1f\x16\xf4\xfc\rOL?h\n\xdfU9\xe3\x90?\n\xfb\x87\x9a\x1a\x10\xf2\xbe\x00\x00\x00\x80\xa6\xe1z\xbf\x053\x80\x07-\xa3\x82\xbf\x00\x00\x00\xe0\x90\x84\x82?\xda0\xc9\xcc\x08\xf3\xfb>\x0e\\\xa8\x1d\xa0\xa9X\xbf\xe2\x1ev\x13\x88}r?[\xd5\xbd\xc1u\x8e\x7f?\xde\xb1\xe3\xcd\xde\xf1\x94?c\xc48\xfb\xb4Z\x91?\x00\x00\x00\x00\r\xddo?\xec\x8d\x7f\xd18ju?i\x08C\xb5\xcd4q\xbf\x00\x00\x00@:~\x89\xbf\xd9]\xf0:ub\x97?S\\\xaeE\r\xb0\x94\xbf\x96\xb9\xe4,\xd4\x84p\xbf\x9d\xaf\x10j\x1d\xf4s?\xc8\xe6\x1bZ\xcaZ\x91?\x00\x00\x00\xa0i\x02i?*Z\x19\x9e)\xd6l??\xd3\xed\xa4Cn\x89?\x00\x00\x00`\xccW\x95?\xe5\xe4!\xe0\x1a\xa3X?\xba\xeeKv\x8bw_\xbf=W\x84 {\xdf\x7f\xbf\x00\x00\x00\xc0\xa0\xe8o\xbfS\xc8\x10\xf6\xabmi\xbf\xc5\x99\xa2?\x82]1\xbf\xdemobLk}?\x8c\x99\xfb\xdb\xff\x85\x9a?\xcc\xa471\xfe\xc2\x84\xbf\xb4\x0b\xf6\xbbz5u\xbf\x84\xfex\x94^Va?i*\xecW\xd3\xd6d\xbf\xa2Wt\xec\xad\xb7\x99\xbf\x00\x00\x00\x00\x93be\xbf4\x97\xe6\'\x9b\x85\x84?\xf3\x7f\xa8\xb6\xc0\xa1\\\xbf\xda\x15\'\xef\x1ekj\xbf\x97\x99\x1e\x1f\xe2\x94x?\x04\x0f\x8c[\x8d\xe5d\xbf\x8e\x19\xb8\x12~\x1cp\xbfs\x1b8apu\x93?p\xb3$M\xe3\xebm?\x16G\xaa\x1c\x98\x11\x87\xbf\x81\x8e\x04\x90Im@\xbfh3\xf0\xeb1\xfdL?\x16O\xe5y\xf3\xdd:?\x00\x00\x00@I\xaeb\xbf5\xc8-\xdbg\x0cz\xbfJ\x80=\xdb\x02S~\xbf\x00\x00\x00 \x95Hh\xbf\x00\x00\x00@\xe7q\x95?@p{C\xd3\x04\x85?\x00\x00\x00@\xd6.O?o\x14\xdd\xb2\x99\xfe\x80\xbf\x00\x00\x00\xc0B\xad\x91\xbf\rCN\xb4\xa8\xcc\x85?\x01\xd4\xe1\xdf\xdf\xf7\x8c\xbf\x00\x00\x00\xa0E \x81\xbfZ":\xec\x03X\x83\xbfF\xe6\x0e\xd6J\x14\x7f\xbf\x00\x00\x00\x80[\x96z?\x0c\xb6\xbc\xae\xe0\x88\x94\xbf\x18d\x88\x8f0ut?\x1eeB\x1c\x88\tw\xbf\xef\xf8s\x87\x88\x02n\xbf\x00\x00\x00\x00\x10\x82\x84?S\xbfG\xce\xc4\xffR?\xdc\xca\xcc\xa3]\xeaL?\x00\x00\x00`\x87\xca\x96\xbf\xcfi\xba\xbf\xfag+\xbf\xae\xf2\xf3\x98\xbc\xbbW\xbf\xa8\x8c&\xd1b\xfb"\xbfY\x9c\xf4YB\xa9\x94?\xcaA%\xe9\xb2#\x8b\xbf\x00\x00\x00\xc0\xe8\xb3m\xbf0F3\x06\x12q}?$LY\xea9\xb9\x82\xbf\x00\x00\x00\x80\xc5\x08\x80?\x7fI\xba\x85\x9b\xb3\x80?\xbd\x9c\x0ezs\x86\x97\xbf\xc6\x1a\x06\xbdLL_\xbfu&\x94_~:\xe5\xbf\x00\x00\x00\x00\xed\xa4\x81\xbf\x96\x84i\xb2$\x9c\xb1\xbfX\xfaR\xa5\xfa\xe5a?\xb3pa5\x9c\xe5\xdf\xbfM\xb6*W \'\xd3\xbf\xbcD\x82t\xa5\x13\xa8\xbf\xbcs\x95\x95\xbc6\xc7\xbf9\xe5\x06\xf2\xce\x8c\xe7\xbf\x03\xc6\xc9S@\x11\xb6\xbf\xc4\xbdR\xb6g-\xf6\xbfA\x05Q\\\xf0c\xab\xbf\xf5\x15\xc6\xc1\xe7G\xb7?\x839\xdd\x10\x14\x83\xa0\xbf\x16W\'\x16k\x91\xa0?\xb6w\xbd\xdc\xdby\xa5?\xb7z{\x82:\xda\xc0\xbf\xcd\x02\x83\x06V-q?_Fs\xbb\x0e^\xbb\xbf\x9c\x93\xbb4hX\x85\xbf\x94\xfcy1XR\xa0\xbfZ\xcfcX\xb53\xc3\xbff\x1c\x8d,\tY\xd7\xbfW\x88q\x1c\x8f\xcb\xce\xbf\xa7\xb5\xdd\xc5\xbe\xe0\xe8\xbfg\xd8YU\x0f\xd4\xd6\xbf\xd9\xad\x9c\xda\xdf$\x9d\xbfc/\xc3\xdca\xa2\x92\xbf\x00>\xe0\x97O\x82\x8b\xbf\xf9\xbe\xc1.\xc0P\x90\xbf\x08\xf6y\xbf\xc9Qj\xbf\xe4\xc4\x17b\xa4\x19\xc1\xbfC\x969\xc6\xdc\xa8\x95\xbf\xdb\x8f\xadC\xbcj\x90\xbf\xba\xb4\xb6\xd6\xd2\x1c\xa6?hU~Y\xbd\xd1\xa8?\xc5jef\xe0#\xc0\xbf\xa3:s\x0e\xa4\xcf\xde\xbf\xb6\xda\x07$\xee\x13\x89?\xf5\xd3\xf5\xa0\xce\x94\xf3\xbfK\xd7P\xd4\xa4\\\x82\xbfb\x1e\x7f\xf5v}}\xbf\x1f\t\xdb$\xe9\xc9K?\xd9P]\xdb\x0b\xfd\xbe\xbf\x86\x02\xdb\xc26\x98\xa8\xbf\xaf\xf6\xec\xfdi-\xc3\xbf\xd8\\ \xdf\x9e<\xe7\xbf\x99A\xfb\x8eP\x0e\xc3\xbfI\x92\xaa?\xb2\xc9\xef\xbfR\xbb\xb7\xc76D\xb6\xbf\x9a\x84:\xf3\x92\xe2\xbf\xbf\nFF\x04\xfbZ\xf2\xbf\xdf3\xb8\xc5\x02gQ?e\xef\x98\x89t\x81\xb0\xbf\xe8kXi\xaf\xcc\xbc?\xee\xc4\x1c\x00\xb2G\xb0\xbf\xcda\x8a?\x84\xa1\xc4\xbffga\xcb\x9c\xf0\xa0?PJ#\x80\x8e\xaa\xd9\xbfU8\xb9Y\nA\x99\xbf\x90\x92"\xd3\xa5\xfc\xbf\xbf\x1c3\n\xc2\xe6\x9c\x8a\xbfKA\xf8\xc6\\\x86\x97?8\xc8\xbd\\ZI\xb1\xbf\xac\xee\x15M\xa3\x86\xf2\xbf$\xd2\x13\xae\x94\xca\xab\xbf\x0f\xac\xee\xfa\n\x14\xe4\xbf\xca\xe3\x89\x8d\xb1\xaa\xd4\xbf\x9bM\x95\xac\x92B\x83\xbf\xadvZ\xfe[\xbc\x81\xbf\xf5\xd2\x0e\xc5\xd4\xeb\xd8\xbf\xbbj\xca\xbd?-g\xbf\x8e\xfa)]\'fb\xbfd\x96\xa2C\x8b\xfal\xbf\xfb\xa80\x11&\x02\xba\xbf\xe7\xb8f\xc4w\xff\xc3\xbfyUh\x0cS\xa3z\xbf3X\xf2N\xd5\xec\xbc\xbfI\xea\x0c\x07\t\xe1\xca\xbf\x10\xa6\x1d\x94\xe83\x7f\xbf\x97b\xb2#\x96p\xae\xbf\xabG\xbd\xb3kXv?\xab\xed\x18"!\xe3\xa1\xbf\xfe^:\xbe \xb4\x9f?E}\xc5#\x98\x90\x7f?E\xe7\xc0y\xa9\xd8\xc7?\xdd\x9a(\x01f\xce\xd2\xbf\x92\x05\x95\xd0\xa4\xdd\x94\xbfM\xb1\xca\x92\xe8O\xaf\xbf\x1e\x99\xe8\xb6\x95x\xc6\xbf\xb9G\xd0+\xf6H\xc9\xbf\xdb\x15\x0bM\x97y\xbe\xbf\xa9+\xd4\xdc\x87\xda\xb1?a\x1f\xae\xd6m+\x86\xbf0\xe8\x83LB\x9f\x93?Z\xd5\xe2\x13\xda\xe6\xa2?_\xa7\xb7\x06PyK\xbfb`@u\x8c\xf7\xd3\xbf\xb3\xbf\xe0\x14\xd7\xe8O\xbf\x00\x00\x00\x80F\\\x90?\xb11\x833\x04\xf5l?\x00\x00\x00\x80\xbe\x9eh\xbf\x00\x00\x00`:T\x86\xbf\x00\x00\x00 \x9b\x9bD?.\xf9T]q\x0f\x94\xbf\x9b\x1c\x07s;4N?>~\x174\x8c\xdaq?\xb0\x87\xdf\x0c\x10\x97\x89?\xd7\xf1R\x02\xb5\x7f^?\x93\xee\xb2\xdc\xa9d\x8c\xbf\x8b#9P\xa2\xc3\x86\xbf\xa7u_\r\xcf\xdcr?\xd4\xcc`\xfeb\xab.?\x9a.;\xea\xe70\x86?\x96)\xcb\xceC\xfax\xbfr\x12\x08\x8br\xedE?[\xf5\xc7!\x8a\xc9y?\x00\x00\x00@e\xd4h?\xf0>\x04\xc7\xe9\x96\x87\xbf\x00\x00\x00\xc0\xcc\xf7F?\x00\x00\x00\xc0 dq\xbf\xae:4\xba\xa3"\x83\xbf\xa7\x85\xb9Sn5\x92?vi\xc4`\xf6\x85o?\xe0J\x1e\xf0\x84\xa8p\xbf\xdcV\x1a\x1ar\xb6L?\x00\x00\x00\x00\r\x97\x81\xbf\xadC\xddT\x08\xbc\x81?k\x10P\x1efup?\x00\x00\x00\xc0\xed\xb5\x88?\x00\x00\x00\xc0\xda\x12\x89\xbf\xc9OIPa\xc5\x81?\xda\xcetl\x84\xb8[?0\xecN\x16\x1d\xbf\x8a\xbf\xb3\x10\xe0\x00\x9f\xbau?\xaf\xea\x8e\x85\xc7Tc\xbf,&\x81nM\xbd\x84?\x1aP\x1d\xb6\xc0@\x87?\x00\x00\x00\xa0"\xd9{\xbf{\x0b\xccu\x1a\x94b?=\x898O\x06\xb3\\?\x00\x00\x00@\x86\xf3{\xbf\x00\x00\x00\x00\xff\xce{\xbf!\x9d\x1e\xc37,~?\xbf\x84\xd2\x84C\x8c\x9b\xbf\xad\x7f\r\xea9lT\xbf\xc5\xc6\x0f\x05\x7f\xae^\xbf\t\r:\xa3\xe4\n\x86?y\x0f\xa9\xedy\x8c\x8f?\x9c\xa9\xb6\x86\xbf\xda}?j\xe4I\np[a\xbf\xd0\x9c\x98\xfc\xc2\x85o\xbf\x00\x00\x00\xe0\xe5\xd0\x84?,\xeeT\xc8\xcb\x18\x8a?\xccc\xc4\xc6hzu?h\xea\xa1\xa8\\\x9ef?\x00\x00\x00\xa0$8r\xbf\x8c\xc7\xd0\x08\xc9\xcb\x88?\x00\x00\x00 \xb9\x9a\x8b\xbf\x00\x00\x00@\xb3Y\x81\xbf\x00\x00\x00`\xd7\x9bp\xbf\x00\x00\x00\xa0o\xb8p\xbf\x1a|n\xbc\xb3Yy?\x00\x00\x00@\xb8\xa6\x95\xbfHg\t\xa3|\xb8\x95?\xa1\x80\xf43-WZ\xbf\x9fb\xa5\xf2\xf52w?\xfc\x82-\xb7\xf1r&\xbf\x00\x00\x00\x00\xbb\xff\x8d\xbf\x12dMj\xe4w\x87\xbf\xbe\xb8\xa7\x18q8\x8f?\x00\x00\x00@\xcew\x85\xbf\x00\x00\x00 0\xb8k?\xb5~\xae?i\x9c\\?\xbb\xb3\x0b;\xae\xf9h?\xb2\x9c\xd9\x98\xc6\x0f_?\x00\x00\x00`\xe0\xd7n?\x00\x00\x00\xc0\x9c\xf5r\xbf\x8a\x87\x88I\xb2\'`?\x00\x00\x00\x00\nD\x97?\xc9\x17\x9aQ\x80\xfb^?\x00\x00\x00\x80\xa6\xf0\x8c\xbf\x87r\x91\xf9,\xb3p?\x00\x00\x00\xe0*W\x83\xbf\x00\x00\x00\x809\xf7\x8d\xbf\xefHf\xe6)\xd9a\xbf#\x1d\xe3\x82\x98\xad\x8c?D$\x1c\xba\x85\x002\xbf\xbb\xb1vH\x90\x9c\x87?\x80\xfd \xb6\xaf\x03\x8d?\x88\rC\x94\x94\xa0|?j\x1c\xd6m\xef]=\xbf\xb9\x05\ri6\xc4l\xbf\x00\x00\x00\xa0\xcf\xaes?\xc9\xebI\xaa\xa8\x17??w\xe0n_j\xcdt?\x00\x00\x00\xc0\xe4\x1c\x95\xbf8:\xbb\xbe\xd8\xfdk?8.J\xe4\x8e\xacF?)s\x88\xe2\x07\x97\x90\xbfn\x85\x9d^+i\xc1?\x82\xcf\xfe\x7f\x9f$\x81?\xc5\xde\xb3V\x8dF\xde\xbf\x00\te\xac\xc8\xb5s\xbf]!LA\xfd9\x91\xbf>\xf4\x18\xb5\xe2K\xa2\xbf]\x16{\x0bvb\xad\xbf\xa9)\xf58\xfb\x89\xa7?1c\xb9/L\xf7|\xbf\xa6~\xc6\xe0\xf4\xaa\xab\xbf\x90\x9f\xe5;\x8e\x99\x9b\xbf[AC\x83C\xd1\xdf\xbf\x9d\x1e\xbf\x87\x8f\x19\xb6\xbf\xf1\xae\x9d[\x8a\xd3\xc2\xbf\xa9\xed9d\xca\xcc\xc5\xbf\xea\xbeqR\x88\x10P?|Dx\x83g^\xce\xbf\x02\xdbL\xb2$Dn?\xf24\x19HM\t\x89\xbf>\xec\xce\xec\xec\xc0\x88\xbf>\x11\x11qn\x1cw\xbf\x96\x1b\x0e\x15\x9b\xfcr?W\x1as;F\x18\\?\xf3e\xab0\xf2\xa6\x92?\\\xa6s~\x7f\x97S\xbfV\xf9\x10\xaa&\xbdf?\xb7\xf5,\x8aH\x03\x89?E\x98\x19\xcc\x94\xb7\x93?\xackQ\x8b\x81N\xa5\xbf\x800\xd0\xac\xc2,\x92\xbf\x7f\x14\x8d\x10\x96\x93\x98?\x0e\xa1\x9c\xacH\xeb`?M\xean\xaa<\xc9q\xbf\x96\xbe\xfeJ\xee\xf0\xa3\xbfs]D\x90S\xb2\x98?bBt\xff\xda\xb2\x89\xbf\x1f\n\x9c\xbaWx\xb5\xbf\xe9N\x11\xb3\x9a\x8d\x99?q\xe3\xd6J\x9a<i\xbfC\xef/\x82\x05F\x8a\xbfcw]Xb\xa2\xa6\xbf\x80\x1dX\xb5\xc3[~\xbfX\x04\x87\x7f5Mw\xbf\x02\x89!L\x8c\x19\xc7?\xe5\xca\xdbP\x90\xf7\xaa\xbfM\xe4{\xb4`\xca\xa8\xbf\xb5\xaf\xe4\xce\xb5\xdc\xb3\xbf\x9c\xd1\x03)<\\\x91\xbfU\n/\x90k\xe6{?\xac\x8b\xb0_\xe4\xeb\xd7?z\xa0\x10\'\x08\x91\xd0\xbf\xd7\xc7Gu\x80\xc3\xc1\xbf\xa3Mk\x97&\xd6\x80?\xc0\x11y\x95\x05\'\xb0\xbf\xf0\x93^\x962-\x97\xbf\xc3\x9fT\x9c\x0ej\xb0\xbf)U\xe07|>\xa6\xbf\x1d\x8e\xcc\xe8k\xaa\xae\xbf\xab\x92[y\xbaU\xe6\xbf\xbe\x07\xdeEV\x15\x86\xbf^\xf7\xe20\x07\x99\x98\xbfph\x08\x00\xae\x8f\x84?\xf9\xa8\x90\x83<O\x9c\xbfX\xc7\x9fD\x83>\x8c?O\x0eY\xae\xec\xf6_\xbf\x87\xb8\xe7\xfa\xd2\x97{?\x86\xbcR^>\xff\xa2\xbf\xcf2#}\xb0\xb3\xa6?\xa6u\x13\x06@\x98u?\xef\x1e\x95\xdc\xed\xf6\x86\xbf\x89\x84\xcf\x8fD\xc4\xa0?\x99B_\xea\x82\xc3U\xbf\x1e\xec\x01sfH\x84?\xf9\x15\xca~\x132_?/\xa7n|\xe5Y\xa9\xbf\xa9\xa1TE!\xbff?\xcf\xe4Q\x14)\x19{\xbf\x069_\xd3\x18]\xcd?\xf8\x1b"\xab\x17\x06\xb7\xbf\xc0!\xa6\x16\xef\xb4\x88\xbf\xac\xe8\x1e\xc7\x82P\xa0\xbf\x8e\xccX>_\x02~?,\xe2\x18\xa1\xdb\xb8\xb4\xbf.\x9f{@\xf68b?@\x1d\xaf"\xdeen\xbf\x82\x1a\x01\xbf\xc5\xb4q?\nO\xdb\xd5\x1f]K?\x91\xe5U\x13Z\xd7\x8a?~\xc7\x10s\x8a\xdc\xb4\xbf\xd1w\xd1,7?\xc1\xbfh\xe3\xac_o\xc6t\xbf\xd4\x19Q\xa4\x8cX\xb8?\xf3\x938\xcd\xb5\xe9\x95\xbf63\r\xd1\x88\x01\x81\xbf\\c\xbf]X\xd4z\xbfc\x97S\x9bW;\xe5?Us\xc8\xb8\xcf\x1b\x92?;\x00\x13\xe2\xc6\xc1\xb9\xbf\x13xM\xe7\\\xa1\xb0\xbf\xe2\xf2g\xa2\nQ\x91\xbf\x99\x80\xf2\x8dt\x90\xde\xbf\xa2y\xa6\xefd1|\xbf\xc5\x184\x90At\xfc\xbfo.\xe4r\xdd\xf6{\xbf\xa7\xe9\xe7\x9e\x1b\xf4\xc5\xbf\xee1\xc0\xb7\xd6\xf1\xad\xbf\x83/I\xd5\xa0&\xc0\xbf6R\xdb\x90\x0b\xe8\xd1\xbfSk\xdd\xcaT\xf4\xb1\xbf\xdfE\xf1\xc7\x1c\x7f\xb1\xbfmd\x99^:\xfe\xd4\xbf\xca\x99\'\xa5\\\xdf\xfa\xbf\x87\xa8\t\xfe\xe3B\xc8\xbf\xa5\x00\x1e\x0cuC\xb5\xbf\x8e\x02?\x98\xba\xed\xd5\xbf|\x1e9\xc6NZ\xa7?j\x01\xc4)\xa3,\xd0\xbf\x99;\xe02r\r\x8e?\x06a\x9ea\xce\'\xc7\xbf\xdfmu\xc1c\x88{\xbf\xeb\x01\xf2\xaf,#\xad\xbf~c\xe5\xb8\x8c\xd5\xc9\xbf\xe1!\xef\xdcl\x90\xae\xbf\xdc\x91\xb1\xad\x1f\'\x92\xbf,\x82\'\xb37$\xb7\xbf\xe9\x95\x13\xe7\x1a<\xb0\xbf _\xc4gyfu?\xb3\x8dM(\x16\n\xb3\xbfc\xcd\x88%\x94\x06\x8e\xbfZTV\xec\x06\xb8\x95\xbf\xbd\xb5n\xd4#\xf6\xb1?\xcfb\xb4e#\xdd\x91?\xfe{[Q\x14\x88\x98\xbf\xdf(Et\\S\x9a\xbf\xb0\xb7Q\xe9\x94\xa3\xd1\xbf`\xaf\xd4\xd4\xd7\x1b\xaa\xbf\xee\xc2\xb6\x9cd\xd4\xb8\xbf\xcbL\xdc\xe8\x82}\xa8\xbf\xab\xfe@\xe8\x12\x86Y\xbfN\xd5\xb3\x87[c\xbd\xbf\x04W\r\xd2\xc4^\xaf\xbf\x08\xde\xb7/\xca\x9a+?\xd8\xa0Ok\x19\nb?\x94K9\xc8\xfe\xea\xcf\xbf\xf9Y\xe6\r\xfb\xb2\xbb?=n\xf0,yF\xcb\xbf\x15P\x91:;\xe0\xd2\xbf\xed\xd8\xe9s)\xe51\xbf\xdd\xd8\x8b\xca\x93l\xe3\xbfO)\x85\xd5\xad\x1e\xc5?\xd0\x8df\xca,\x8f\xec\xbf\x9dSs\x1b\x8c\x08\xca\xbf8\xb9\x89\xfao\xd7X?\x17\xd4\xb50\xc8-\xb1\xbfg!d\xdf\x13\xd0\xbb\xbfN\x83fR\xbcK\xa9\xbf\x9b\x1f\x9e\xa6\xc0\xa2\xaf\xbf\xaa\x12l\x1b&\xfe\xb7\xbf\x00\x7f6\x93\xd9\xc4\x01\xc0\xe3\xfeZt\xaeq\x90\xbf>\xb8\xb1W\x12B\xac?\xe7C\xf5\xbdZ\xb0\x9d\xbf_}^F\xcfj\xb0\xbf\x0ep\xc5\xd63<\xb2\xbf\x8dI\x95\x18\x8b\x8d\xc0\xbf+t/H\x97\x9d\x93\xbf\x81\xb1\xc3-\x14\x8c\xe7\xbf7\xc6q\xc4H\xf9\xbc\xbfqe\xbf\xa2\xaem\x9b\xbf\xfb\xba\x08\xad\x81\x9d}\xbfNT\xf4\xc2\xed&\xd3\xbf[\x8d/\xc0Nk\x92\xbf\x83F\x01\x19\x05\x9b\x81\xbf}\xbf\xf8\xd6$|\x93\xbf\xa0\x05\xc8\xba\x97\x16\xbb\xbf+R\xe0\xed\xfdo\xc1\xbf\x8f\x0f<\xaa\n\xc5\x80\xbfX\xb3\x16,\xc2W\xcb\xbf\xee\xf4\xc0\xe9G\'\xbe\xbf\xc4\x9f.x<yT\xbf\xd13F\xfb\xb84\xd0\xbfv\xa8kH\x0c\x81\x94\xbf\x93\xa9\x97\xf3\x8c\'\xe0\xbf\x8dnm\x114:\xaa\xbfEw\xf4wE\x08p\xbf\xf7\xba\xad|tD\xc7\xbf\xe2\xd5\xfe\x8e\xa1\x00\xd7\xbf%d\x1c!,\xcf\x96\xbf265|\x0f\xf6\xc4\xbfKk.\xc6\xf0|\xc0\xbf4\xa3\n\xf5\x90\xa7\xc3\xbf\x1e\x83\x029JB\xa5?\xdaI=\x87\xbfr\xb4\xbf\xd4dX\x1b\xeb\x12\x9a\xbf\x8d\xb9\xb7E.\x04\xba\xbfS\x9am\xacK\xaf\xb6\xbf\r\x9fZ\xbb\xd0\x1dx\xbf\r\xe0\xad\xa7;\xb4\xc6\xbf\xc1,`\xd2\xa8,\xa6\xbfv\xd0y|\x94\xb6\xf9\xbf\xbb\x01\x8e\x0e\xcc\xcf\xca\xbf\x86\x06DR\x1d\x90C\xbfY\xe8MA\xa8s\xe1\xbf\x1f79\x85:\x81Y\xbf\xeb"\xf5UT\xac\xa7\xbf\xcf\x9e\x0e\x859\xda\xa8\xbf\x94\xe4$\x8a\x1c\xcb\xa3\xbf\xe4$\xb8\x8fE\x02\xb7\xbf\x89\xa2\r\xed{\xa6\xb0\xbf^@,\x97\x10#\xb5\xbf4t\x12lq\xf7\xb3\xbf\x98F\x89py\xd6\xd9\xbf\x10m\\&II\xc7\xbf\x11\x84\x93\x8e{\x9b\xb9?b\xd2\xab\x17L)\xb7\xbf\xd0\x8b\xe4\xfdw\x18\x82\xbff\x90\xc5X\xc6\x13\xb3\xbf\xcad\x10\x7f\xe7\xc9E?\x1e%b\xefb$\xa7\xbf\x88\x89\xf9.\xd1\'\x9b\xbfK\xe1(F\xf4}\xa0\xbf\xfc^\xe6\xafd\xc3\xaf\xbfF\xb5\x92uv\x07\xa5\xbf\x0e\xa0U\xed\xbc\x0c\xa8\xbfo\x86^K\xa2K\xa2\xbf7\xeb\xc8\xf8\'\x8e\xa3\xbf\x810s\xdak\xaa\x80\xbf\xf6\x89\xdaQ\xd4\xc8\xbd\xbflaU\xf3P\x17u\xbfK\t\x95\x88]\x06T\xbf\x9a\x0bZ\x01\x03\xd3\xca\xbfX\xa5N\xc6\xab\x0b\xbc\xbf@=Oi\xde*\x81?fu\xe3\x8b\x91h\xe6\xbf{\x00aul\x15\x9e\xbfq\x0c\xfa=ef\x8f\xbfb\x894:\xc9\x02\xc3?k\r>\x89>\x8b\x91\xbf\x1e\x8e\x8d/\x18\xaf\x81\xbf\xa3\x95\xc2\x8bv6\xb6\xbf\x0b\x13W\xfa\x91\xf8\xa2\xbf\xf3\xed\xdf\xaf\xa0m\xe1\xbf\x80\xedB\xa4O\x01\x9c\xbf\xa5\xb7Ir\x94e\xc6\xbf`K\xf4\xf8\x93\xdb\xa0?\xc6\x19\xad\xaewe\xd1\xbf\xba\xc5=\x8e@\xf0\xad\xbf\xcc3C\xedma\xc5\xbfipK\x81q\xef\xd0\xbf\x17\x1b\x96\xc0\xe6\x1f\xba\xbfW\\\x84\x0e=\xd3\xd5\xbf\xffm\x84\x99\xd5D\xe8\xbf\xc4\x88\x8e\x93\xb0Nh\xbfxlI\xd5\x08\xb7\xba\xbf\xd3\x95\x15\xb8\xc83\xb0\xbfj\x9d\x0b\xad\xa6Q\xb6\xbfvV\x18\xc6\x96\x1d\xcc\xbf\n\x8e\xa1\xa3\x847\xe2\xbfA\xbbv\xcdCP\xee\xbf\x96A(-\xcdGj\xbf\xc4\xde\xd7*64\xb4\xbf\x05\xdd\x87\xf3\x93\xfc\x9d\xbf\xed\'*\xd3%\xda\xbb\xbf\xc4e\x8f_@\x01\xbc\xbf\xf3Z\x18w\xfe\xc5\xb8\xbf\xe0\x19\xb6\xb7\xc3U\x85\xbf\x86\x16&\xefcf\xe1\xbf\x12t\xc5(t\x8c\xc3\xbf[\xdd\xb7\x15\x81\xf3~?\xb7q\xea\x1f\xb4x\xac\xbf\x8c\x8f\x93\xce\x85\x85\xd1\xbfw\x8e\x1c\x14\xd9\x87\x97\xbf\x1c\xbfI\xcc\xa9V\x90\xbf\xa7hN\x18\x8eB\xbf\xbf\x0b\\\xb6\xef\xdc\xe9\xb6\xbf\x9cT\x1bN\x81\x05\xd3\xbf\x88\x12ebM\xcf\x89\xbf\xffBmY\x8d\x0b\xcf\xbf\xfb}p|\x8cH\xd0\xbf\xd4\x039%\xa1\x0c\x93\xbf\xb1\xa2\x98y\xfd\xfe\xca\xbf\x99\xbaI^$\x05\x9b\xbf\xec\x9c\xf6\xd7e\x10\xd9?\xc6_Ptt\xfa\x99\xbf\x00\x00\x00@\x9f\x9e\x83\xbf9\xaa\xda\xf5|\xea\xc6\xbfj\x98I\x85q\xd9\xc9\xbf\xfe\xcc\xd7\xe82KL?\xb8]|")\x0c\xce\xbf\x997\xfe.\x16\x00\xd5\xbf3\x0b>\xe9?\xbc\xbb\xbfL<\xd4\xf0\xf9*\x9d?\xbfI\x9a\xa5\xdb\xbc\x97\xbf\x03q\x88\x04\xc5Qz\xbfw\xd7\xcc;oy\xba\xbf\xb9\t2\xc2\xd2\xa2\xc5\xbf\x0e\xe8\xdf\x15w0\x8a\xbf\xdc\xa1\x81\xc1\x01\xc9\xa6\xbfy6\x85\nI^\xac\xbfs\\8\x0eq\x0ce?&\x93X;w\xfb\xc3\xbf>O\x98\'\x1f_\x81\xbf\xd8FAk\x1c2\x90?o\x08\xd6\xdcvi\x92\xbf\x87\xde\xed\xa2y\xc3\xa3?\xb7g7S\x85\xb2\xa8\xbf\x1bf\xecH\xfc\xbc\xb2\xbf*\xf4\xac\xe2\xd4\xf9\x94\xbf\x99\xe8\xc3\xa1y\xb7\x9d\xbf\xce\xe2\x00E\xef\xe8\xbc\xbf\x0c\x0c\tQhF\xae\xbf\x12\x9e+\x8c\xb2\x12\xa5\xbf>\x7f\xca\x1c\xb8\x17\xb1\xbf\x85.G\x99b\xaa\xc4?g\xd3\xe6\x1cd\xd3p?\xfc\xe5 \xdd\xad\x12\x90?\x82\x10\xb6\x9e_\xae\xca\xbfj\x0b]*3T\x83\xbf\xa0^\xe8}iT\xa7\xbf\xd4Db\xfarlQ\xbfu\xcd\xa4[\xd0\x05\xa7\xbfq\xff\x81~\xb3V\xa1\xbfm\x1e\x96@\xebmi\xbft\xc2\xa2s\x9c_\xa3\xbf\x8b\x8bB\xe9\xf7\xe2\xa8\xbf\x9b)\xb0\x05\xd4\xcfp?.\xfe\x97W\xa0\xbf\x96\xbfP\x8a\xd0\x15&\x1e\xaf\xbf\xc1\xed\x8c\xff\x89an\xbf\xa9\xd3 \xb7P\x89l\xbfO\xd9\x1f\xa4z\xc8\x90\xbfw6\xc6E_\xea\xa7\xbf\x0f\xa8p=\xe6V\x1b?k\xca\xd0/\xda\xe9\xb4\xbf\xf3\xc9\xda\xcb\xe7\xbf\x8a?\to\x85\xb2K\x14~\xbfcH\xa6\xd7\x81\xf5\xd8?\x7fV\xa59T~\x84\xbf]\x91\x15>&I~\xbf\x8fi\xafN\x01\xe6\x9b\xbf\xa6\xe5\x07\xba\x98\xc3\xa3\xbf\xb6\xa0l+\xe6K\xa5\xbf\xb14\xf7\xad\x9a\x9f\x95\xbf\x01\xa4\x93\xea\x8d/\xd7\xbf\x9c\xf64{\xb5`\xee\xbf-M\x12\x9c4\x96\xaf\xbf\xba\x8f\x9d=\xd0F\x89\xbf\r\x82\xd1\xb2\x11\xd1w?\xa5\x93\xb6\xdfI\xb4\xc6\xbfE>\x82+\xe2\xb4\x86\xbf"\xaf\xb1U\xf8\xd7\x92\xbf\xb9!\xfd\xdd\x9br\xc2\xbf\xaf\x00NY\x8b:w\xbfW7\xf6\x825\x92\xb2\xbf\xfe\x9a\xdf\xc7XA\xb6\xbf\xb7\x0b\x0c\x7f\xa0\x9d\xbc\xbfh\\\x92\x14\xa7d\x9c?r,]\xae\xc9\xc6\xc2?\xd73\x05f\xd9\x0c\xa5?\xac\x15\x99T\xd9\x18w?a\xee\xeeU\x9c\xd9\xcd\xbf\xc5rW\x97\xb2\xc0L\xbf{Qx\np\x03\xd3\xbf\x86\xae\x94\xbfn\x81\x95?\x96\xe53\x94\x91#\xb9\xbfk\xf8\x1d?9|\x8b\xbf\xd3\x82O\x9a\xe4\xea\xd5\xbf\x11Fxz\x9b\xa8\xbe\xbf\xb5\x0b\xe3u.\xaa\x82?\\\xad\xaa\xd61,\xac\xbf\x96\x13C\xf2@\xb5\xb9\xbfL\xe8\x8e\xb8\xdd\xa6)?\x1b\x9f\xbf\xbcQ\xebv\xbf\xff\xd7_\xd7\x17T\x8f\xbf\x9e\x99pN\x99\x03\x8e?\xff\xd24\x13\x12\x04\x86\xbf\x02\xdb\x1d\xe9\xc5\x1f\x81\xbf\x98)\x93\x8e\xd6C\xa0\xbf\x99\xe2!\x15}S\xa7\xbfd\x88\xb0\xff\x98,v\xbf\xee\x8bKq\xecM6\xbfc\x80cf\xfer\x97\xbf\x91\xca[\x86\xd9\x90\xd4\xbf\xeeO,k\x1e:e?\xd5\xe0\xc6\x069\x1d\x89\xbf\x0b\x88*\x86\x17\xfff\xbf\r\xa5\xff\xb9[\n\xb6\xbf\xb9\x06S\xc1\xa5\xedN\xbfO\xa9\x91)\xfd\xe1\xb8\xbf%\xf7\xca\x1dE>\xc3\xbf8\xa8\xb2-\x0b*\x90\xbf4\x87U\xdc\xed\x0e\xd0\xbfEat\xa5\x0c\x0f\x9f\xbf\xb7r?\x9f\xb5+T?^\xc1\xe0s\xfb?\x8b\xbf\xec\x9b\x15v\xf3M\xae\xbfk\xddt/\x9e\x99\x8d\xbf\xb7\x84\xf5\xafk\xfd\xad\xbf\x1a@M\x0f\xb8b\xb8\xbf\xd3\x7fZ\x12*\x93\xa8\xbf2J\xd0\xf9\x0ck\xc5\xbfq\xba\xd9\xbcl}z\xbf}c\xb2\xcb\x07\xb3\xbd\xbfgzk\x19\xbem\x12?\xe2K\x8e\xb0\x1e\x8a\xde\xbf\x1dmy-2\xd5\xd5\xbf\xeb\x1e\xc7\x83]\xd8\xd0\xbf[`\x05\xbal(\xc2\xbf\xcf\xe4\xe3L\x90\xbb\xd0\xbf)\xc3\x8b\xf5\xc0v\xe1\xbfr7.\x947\xf8\xe4\xbf[=\x10\x1f\xed\x16\xa7\xbf?\xd8)0n8\xd8\xbf\xef\xa6\xa7\xf9D@\xc2\xbf\xb0\x95xH\xb3\xee\xc1\xbf\xa5\x13\xe4\x90M\xd4\xc3\xbf\x17V\x8f\x96\x01f\xd1?\xdd\x9a\x864\xf7\x18\x8c\xbf3\xf4\t\xb6]\x98\xd0\xbf\xde\t%\xcd\xfa\x9bw\xbflO\\)d\xe9\xd1\xbf0r{\nX\t\x9b\xbfA\xe8\xb4\xb6K\xa3\xd0\xbfS,\xf6Js\xfc\xc8\xbf\x02N\xfa\x17a3\xe2\xbfCF\xac\xa5\xce\r\xbc\xbfn\x8a\xd9\xd4\x819\x9a\xbfw\xeb\xfc\x82XU\xc0\xbfp\xb9\xa1\xb92\xa1\x9f\xbfN\xe6\xd7\xa9\x85[\x95\xbf%\x00TO\xb2\x07\xe8\xbf\x1e\xa2\x01%\x8f\xa1\xa5\xbf|\xc8\x02\xf0I}t\xbfBu\x84OmK\x02\xc0C1E.\xf9\xf3\xb8\xbfgmQ\x1a\x89h\xa0\xbf\xd1\x89\x04E\xefU\xb0\xbfU`V\xd0P$\xd8\xbf\x1cE\x02\x13)\nu?\xb3\xbe\xbf\xf1\xf3;\xe1\xbf\x1e\xaa\xa1x\xe0X\xb2\xbf87\xe7\xf5]V\x94\xbfA\xb8~\xbao6\x8b?GHg3\n~\xcc\xbf\x98]L\xe5B\x01\xf6\xbf\xafg\x1f\x16\xde\x88\xce\xbf\xceO\xb6\x95\x8d\xd0\xdd\xbf@\x94qR\xc6gp\xbf-u\xb9\xa2\x87\xfb\xd3\xbf\xabB\xb8I\xe7\xe1\xd6\xbfdg}\\l"\xca\xbf\xa503\xb2]\x83\xc3\xbfP\xcf\xd9D\xe6\xf5{\xbf\xcb\x81\x0f\x13A|\xd5\xbf\xaazS\xdb\xb0W\xd2\xbfP\xd8TV\xf8\xa2\xea\xbfL\x9b6\x03\xb9\xa0\xc8\xbfr_\xdeRRi\xf5\xbf\x9d\x07c\x00Ne\xaf?*5*\xb1\xd9i\x84\xbf\x0f\xb5\x0f\xe42\xd0\xcc\xbf\xd0w7\xb7\xbc\x9cu\xbf\xccR\x96\x0b<\xf9\xce?V\xf7\xa7*\x08\x8e\xc5\xbf\xa1\xfb\xb1\x1e\xa9\xef\xeb\xbfs\x8a\x0c\x11\xde\xbf\xa2\xbf$n\x08\x91\x91\x1a\xee\xbf\x94\xdbky\x7fa\xae?\xb8,\xbbB\x90@\x9b\xbf\xec\x85a\x98\xefQ\xbb\xbf9tv\xb8\xd8&\xc9\xbf\xd6\x87|\xf5\x06\xba\x90\xbf\x02\xc6\xe9\xfa\x05\xb5\xa3\xbfL3.\x88\x14\'\xbc\xbfVJ\xaf\x98y\x19\xb8?\xd3Ur\x11\x91\x81\xb3\xbfGP\x7f\xee\xfb\xa6\x8f\xbf\xa6H\x13\x83\x9d\x15\xa9\xbf _\xe5\x05\xb8\x98\xd3\xbf\x99\xbd\xcb\xd7\xa3E\x91\xbf\xac\xc4|\xbf+D\xd5\xbf\xfa\xc2:3\x9c\x94\xa0\xbf\x8d\x91L\xe9s6\xdd\xbf\xd4N\x8f\xcb\xd7#\xb4\xbfPa\x19\xf8\xeez\x8a\xbf0\xe8I\xaf\x84\x83\x98\xbf(\xefM/\xb0\xb2\xa7\xbfb\x01\xaa\xf5\xf0\xc5\x91\xbfcq\xa4[\xb8\x0c\xdb\xbfW\xbe\x13n(t\xbd?y\xcc\xe0\x83\x9fI\xa2\xbf\xa3[T\xc1\x01\xc2\xa0\xbf\xb7\xadH\xe0\x14\x86\xb8\xbf\x18\\\xb7\x9bt;\x83\xbf\xd5w\x80-\x02}\xcf\xbf\x1d\xfa\x80\xf9R\x9d\x92\xbf\xb8\xe7\x08\xe2\xd6N\x80\xbfxbMq\xee:\xc3\xbf\x1a\xaa\xec\xef\xb80\x85\xbf\x06\x07\x97/\xa0\xdc\x9c\xbf\xbbH\x9e6\x81\xfc\xd3\xbf\x95D\r \xb1TT\xbf\x91\xc5\xe6\xfd\x90\x02\xa9\xbf\x8f\x15Y\xf9\xcc\x15\x91\xbfK\xef\x01\xfb\x11l\xcf\xbf#\xf0LG\xecy\xb2\xbf\xcdh\x17.\xa8\xca\x98\xbf\x97P\xdb\xfeh\x9c\xaf\xbf\xb6*&\x80k9\xc2\xbf\xd5\xb6\xae\xca\xcd\x90\xa2?\xfc\x90c\xe3\xbc\x9f\xd0\xbf\x02\xd08]\n\xe8z?\xe2\x01\xcev\xc6\x9e\xc7\xbf\x8fP\xfd\x15T_\xa1\xbf\x18\xeeO\xe0\t\xcf\xbd\xbf\xab\x89\x95R\xa6\xf7\x93?ZFm\x1a\xfd\xfe\xcc\xbf5\xb2\x98,\xff\xb4\x92\xbf\xda)\r\x12YdV\xbf.C\xc3\x15\xd6\x89e\xbfA\xe2x\xe3\xe7\xb7\xb7\xbflF__\\\xab\xa5\xbf\xf3]Gz\xd2m\xc0\xbf/\xf0\xccO\xb8]\xc0\xbf\x0c\x9a\xb7\xfe\xe0j\xbc\xbf\x87\x025\xda\xd2e\xb7\xbf\xb1\xbf\xc1\x18\x117c\xbf9\x05\xc89\xc3\x94\xc6\xbf\x8e\xb4\xc2=\t\xe2\x82\xbf\xc3\x89]\xb3\x8a)Y?A\x05\x9d\xcd\xc2\xdb\xe7\xbf\xc4\xbb\x9e\x95\xbe\x19\xa0\xbfS\x89\xbe\xd8E\xe6\x8d\xbf\xcf\xdb6|At\xf7\xbf\xf3#\x0c\xb9\x04\x9f\x8c?T\x80J\x99C\xde\x8e\xbf8\xe6\xe9V/ \x93?\xe9\xdf\xbd\x01\xb57\xc2\xbf\xad\xd6B!\xa6/~\xbf\x032\x8d\x97\xc5\x1e\xd4\xbf\xdb\xf6\x891C\xc8\xbf\xbfx\x87\xd1\xfe\xd8t\xca\xbf$"\xf64Z\xe5Y\xbf/\xfc}j\x9e\x86\xb3?X.*\xd3\xb0\xf7\xfa\xbf\x8ez\xaeh\x11\xb4\xc7\xbf\xf2\x17s\xf5x9\xc2\xbf0\xe1@\xb3I\xd7\xb0\xbfE\xad\xe0\xb4\xf8\x11\xbf\xbf\xaf\xb75\xc7\x8e\xa9\xdf\xbf`\xc1\x05\xa0\xa3>\xc4\xbf5\xe3\x00\x8fLI\xc7\xbfR\xe0\xf4"\xe8b\x8d\xbf\x88i\xc1N\x95\x05\xbb\xbfU\xf2\xf4\xfa\xb3\x0b\xba\xbff\xeb\xb5\xfd\xf6\xce\xbc\xbfZ\xb2\x8d\xd2G\xf0\xac\xbf_\xb3\x05\xf6\xed\xcf\xd7\xbf\xce\x87\x10\x15\x8a@\xbb\xbf\xf7\x05i\xe4\xd4=\x83\xbf\xb6\x1a\xe2:\x97\x94\xe3\xbf\x16\x93\xe2Q\xc4\x9f4?\x0b\x04\x1a\x92\xa2\xf5\xde\xbf\x11\x04\x00X\x1fW\x98\xbf2\xbb\xa8\xadD4\xd7\xbf\xc9-\xad\x13\x05N\x83?\xf2\xe4?7q\xec\xe8\xbf\xebl\xc0\xa3\xa5\xe3\xbd\xbf\x012Q\xcc\x97\xbd\x98\xbf\xbb!\xd8\xe0\xb3\x0e@\xbf)\xd5fk\x910\xaf\xbf\x11\xf0_W:\xdd\x8b\xbfHK\'^\xd8\xf3\x88\xbf\x12\xebq\x17\xd2\tx?\x06\xe7A\xf3\xe8\xb3\xc3\xbf\xec\xc9C\xa1\xa8Z\xa1\xbf\xcc\x99U\xd3\xa1\xe6y\xbf\xea\xa1\xf1[\xd8\x8f\xc3\xbf\xdb\x14\xda\xcf`:\xb8\xbfkt\xfca\\qj\xbfo1\x829\x86\xa9\xc7\xbf\xe8ZH\x82\xed\xa3\x99\xbfn\xca\xee\x12\x9eM\xdd?D\xaev\x83\x16\x94\x9c\xbfD,e\xdbp?\x91\xbf\x10ajf\xbd\xba\xc5\xbf\xf5\x0bT\xa3%O\x96\xbfY\x91\x9e\x03\x8b\xe5\x81?\x8a\x0b\x8f\x9e\x8a\xe3\xc5\xbfUOu\xf2\xf3\x83\xc6\xbf\x16\x16\xee\t\xa4\xfa\xa5\xbf\xf1\xa0\xd7"t\xfa\x8a\xbf\xe3\x8fI\x8a\xef\xad\x97\xbf\xd1\x8a\x0b\x0e\xdf%q\xbf\xf2\xd5e>\xbe\xe8\x82\xbfgK\xfe\xe8\xc6\xf6\xc1\xbf\xdfQ\x876\x12\x0b\x80\xbf\x96\xa2~\xe3VwX\xbf\x01\x8f\xce\xb4\xa7\xfbp?c\xe3\x16V\x8f\xc4o\xbf\xfb\xe8\xb3U\xcd\x91\xc7\xbf4\x8e_)g=M?o\xfc\x8f+\xdf\x8a\xab?e\x9d\xd62p\xf8\x8a?K\x1f\x0eU6l\xb6?\xcd\x0b%Nb-\x8b\xbf\xf3\x03\xb4\xcc\x9a\x85\xa8\xbfp\r\xb7W\xecB\x88\xbf\\J\xb5\xbcc\xf5\xa3\xbf\x8a;\xe5\x14CU\x85\xbf\x03\x9b\x05o w\x99\xbf\x10\xb8O\x15\xe0g\x99\xbf\xef\x95\x9ch:\xb0}\xbf\x08\x08\xf7\xf6\xa3\x82\xa7\xbf\xa9\xbdY2\xa6\xd0\x9d?\x8c\xce^\xd5h\x0b\x94?*\xde+\x80=\x94\x8f\xbfy\x07F\x85ZT\x8b?/\x12\x8b\'X\xe6\xa6\xbf\xa8\xf6\xc1\xc3p\xfdV?\xb4!1A\x17\xe1\x8a\xbf\x8a\r\x91U<;\xa6\xbf\x9de\x12\xfe\xabR\x99?DJ0D\x16\xfb\xb4?\x9eX\tx\xa6\x7f\x9b?9\x89$\x83\x878\\\xbf~w\xae~uRW\xbf\x03Y>\xe9:\xf0\x88?;\xaf\x1c\xe1d3q\xbf\xf7g\x8aN\xc3\xfb\x9b\xbf\x1a\x8b\x01\x00?+E\xbfUM|H\'Dp?\xfcg\xd3g\xc9I|\xbf\xc4\xd6g\x88\x8c\xeb\x94?\x047\x03O~\xe6x?\x16\x8c\x18\xb2D\xcf\x99\xbf\x80\xe8\x87\xa6\x1d\x95\xc6\xbfu\xdd)r\xf1\x7f\xae?wF\x84\xd5\xa1\xdf\x82\xbfW5J\x8e\xac\xeb\xa7?\xde\xceQ)>\n\x83\xbf\xa5<\x973\x97\xbb\x8c\xbfxa\xa6\xc3L\x8ch?b\x8e\xfc\xf2\xccD\x8b?\xa6\xe40\x93u\xed\xb2?\x07\x94W\x98\xd9\x91\x98\xbf\x13\xd4\x1e\x13r\xed\x88?\xdd\x87\xb5\x07&!\x9c\xbf\x8cou\x01\xe7P\xde\xbf\x18\x8e\x13\x8d\xb4U[?\x97\x8c/\x93\xc4\xcf\x87\xbf|5\x90C\xc7\x92\xd5\xbf\xfeN\x0f\xb83 `\xbf\xf1\x17%\x82\xdd\x0e\x9f\xbf(\x9c\t\xc8\xf0\xa5\xaa\xbf>\x942\xec\x16>\x97\xbf\x0f{\xc4\x1e3\x95\x95?A\x01+G\xcd\x1a\x96\xbf\x17sLH\x0c\x0f\xc3\xbf\x04\xc4\xa5\xb1\x92[r?2\xa3\x1c\xda\x1ai\xb5\xbf(/\xcf:\xcb\x06|\xbf\x7fj\xaa\xd8Jm\xb7\xbf\xa6\xeb\xbbC\x91>\x8e?Q_\xff\x04\xd2\xea\x94?9\x1c\xd5Y\xc9\xc8r\xbf\x1e"\xfb\xcf\xfcq\xd6\xbf\xb4"\xcfY*9\xb8\xbf~F`\xdaB\xee\x82\xbfSv\xed\xa9\xa9m~?>C\xdc1\xb0v\xc0\xbf\x1fV\x19\x0e\xed\xd4u?\x85\xae\xf1\x80$Ar?6\xa6\x9aM{\xfak\xbf\xd8\xee\xd9}\x01\x9a\xa2?$\x7f\x84\n\xa5\x00\xb5\xbf\xe7\xacG\xddN\x99z\xbf\x01\x90hrZ3\xa6?\xe4)\xfb\xd2\xfa\xe3V?\xce\xe3\xd3\x14\x83kt\xbfR\xe86\xbe\xed\xc4\x82\xbf\xa1\r\x88\xb1~\xc6]?\x04!\xf5\\\xf9u\xa0\xbf\xa3R\x1a*\xad\xe7a?t\x1c\x84\x95%\xdcR?\xebRt:\xed=\x99\xbfn/\r\xe6Jy\xc7\xbf.\x15\x97\xee\x80\xc9\x91?,[\x1cL\xf8G\xa3\xbf\x18Ka[\x9e\x14\x93?\x8a\x81\xae<\x16\xa7\xba\xbfOR\xdeQ\xee\x9b\xa1\xbf)l$y0\x14\x9e?\xda\x15r/\x0cK{?\x81m7Q/v\x96?\xeb\xe7\xb0\xe32\xdb\xa6?n\xda\xf5\xd0}\xbe\x8a\xbf;6\xa1*\x18\xed\xb6\xbf\x89\x04\xc4\xd8<\xffy\xbf\xf8U\x8e\x89X\x82|?+0\xd1\xd5\xbdu\xcb?\x05\xf2\xeb\xf5\x17\xe7s\xbfn\x03\x173\xd3\x80u?\x99-\x17\x89\xa4\xfdh\xbf\x07\xbcP\x93vW\xa7\xbf\x1f\xccR\x0c\xa4\x18\xa6\xbf\x97\x7f\xf7\x94\xb5\r\xb4\xbf\x9bf<E\xf4\x8f\xbd?\\\x9d\xae\xc1\x02\r\xa7\xbf\x06\x1e\xddl\xa1+\xc7\xbf\xc5\xf4\xa7`5_\xae\xbf\x88t\x98\xe3\xff?\x9b?\x02\xb5KK\x8fs\xca\xbfY\xa8\xe5:\x02\x1b\xb1?\x84y\xbdYu+\xa7\xbf\x17\x9b\x1f\x86G\x8a\x9d\xbf\xf3\xb2\xf4oZ\x90m\xbf+]\xa8A.?a?X\xd3F4\xa8\xc9\x88\xbf285\xf7s\x04\x84\xbf)rG\xc0\xd65\x95\xbfys\xa8J\x82\x9b\x94?\x80\xb5gS\x8d\n\x8c\xbfC\xb5t\xe2\xa0\x02\x98?\x01\x05\xb5e\xac\x85\x80\xbf\xf7\xf1\x87\xba\x7f"\x9e\xbfd\x9c[\x18p\x18s\xbf\x0b5U\xab\xe2\xc3\xb4\xbf\x14\x87\x08\xdb4\xb7_?\xaa\x86z\xfd\x89\x16\x86\xbf\x80\xd8\xc1J\xc96\xbc\xbf\x01\x02\xc2s\x9a\xbda\xbf\x9f.^\xf4f\x12\x83\xbf\x83\xe0n\xb6@=\xb5\xbf\xc2\xbd\xfc\x9e\xd9\xdec\xbf%\xd0\xab\x9f\xa0\xfb\x80?\x03\xe1NQ`\xd1\x9d?\\!\xe2Y\xe3\x87U?\xe6\xdc\xcf>\xe2\xdcy?\x1bQ\xbc\xe0\x08/\xb4\xbf0D\n\xddD+\x83?\xd7\xcb\xd8X\xfc\xb9\xc6\xbf\xc4\x0ec[I!l\xbf\xaeo\xa3\xb8j\x88\xd5\xbfnMd\x85\x08\x9b\xc0\xbf\xff\xdfM(z#\xba?.\xa2\xe7\xc1\xcfg\xbe\xbf\xdc\xbc`\x17\x01]\xb9\xbf\x8bL\xecQ\xaa)\xc7?\xef\x95r\xfc\xd4\x13\xca\xbf\x7fS\xb8\xfey\xa7\x9a\xbf0\x91\xc38\x83\xe9\xc8?\x1f\xed\x0b\xc2\xf4\xb6l?\r\xeb?-u\x84\xc5\xbf\x90\x80\xadI\xf4\x02\xb0\xbf\x84\xc6O\xbb(\x01\xa9\xbfk\xac\xebY\xfaO\xc1\xbf\x8f\xda\xd0\x88\xa5\xa0\xba\xbf\x04\x86\xfd\xc7\xd5\x9f\xb6\xbf1\xaf\x7f\x8cq\xfc\x80?x\xc3\x89y\x0b\x80\xb5\xbf<@n\xab\x08\xec\x93?S\x04v\xdc\xc3D\x9c\xbf\xae\xdel\xf7\xaa\x94\x8e?k\x16\x18\xe5\x0e`\xa5?\xc7\x19\xf4^\x9cl\x90\xbfg\x9f\xfc\x19\x83_\xb4?\x1d\x0f\x0e\x0fm\x0e\xc8\xbfm\x11\xdaD\x1f\x1dQ\xbfl\xb3\xba:\x0f\xd6W\xbf\xeaE\xf2\x83\xb3\xb6\xa1?\xa7\x96L\xdf\x95\xe8c?\xdc\xb9\x19DJ\xbe\x91?\xbe\xd0\xd9\xdb\xce\xfcV?\x9c\x19Q\xf8\x8a5\x9b?\xf9\xc7\xe3\xd7\x92\xb3\x91\xbfM\xf7z\x89F\xcby\xbf\xe5\x81s\x8b\xcb\x8f\xbe\xbf0"\xfe\xae[\xc0\xa8\xbf\x9c\xa0\xcd&2\x8du\xbf\x00?]\x93\xcc\xd9\xaa\xbf7\r\x80\xcb\x17\xf1\x06?/\xba\xcb\x07\x02/\xe8\xbf*\x0e\xf9`M\xb6\xa6?$X\xbev\xf7\x81~\xbf\xf3\xf2\x1a\x81uX\xb8\xbf\xce\x0b\x0f\x1a\xafq\xb3?\x05H\xfb\xe2\xdf8\x87?\xb2\x01EV\xd9g\x85?_l\x9f~\xb0g\xad?\x80\xc3T\xe3\xa3Z\x9a\xbf\xa5[=\'\xab\x14\xde\xbf\x16\xb3\xc8\xe8\xa7b\xa9\xbf\xa0\xdf+\x88d\xfcu?\xed^\xc0\xb9\xd8\xaba?\xf2\x8a^\xe9\xaeu\xdd?\xbas\x8dK\xd2~\x89\xbf\x14\x02c\xba$\xac\xbe\xbf\xf1\x0c?\x80\x1a5\x8c\xbf`a!7\x1d\x06\x8d?4\xf6\x0cQ\xe9\x98\xd5\xbf\xd7\xd6R\xfe\xa8\xfa\x80\xbf\x84\xbf\x9aP\x8b*\xc5\xbf\x14;\xbf"DS\\\xbfr\xfa\xf6\x08\xb2re\xbf\xfb2)\xe1I\xf8\xb4\xbf\x8fU+\xa9w\xf9\xaf\xbf\xecm\x83\xab\x97\x8f\xb7\xbfY_\x9c>\x9a7\xd2\xbf\xbb\xb2\x80\x07P=\xd2\xbf\x89\x90\xc9\x93\xe0\x07\xcb\xbfpyk~\xaa\xc1\x98\xbf)\x17C\x8cW\x94\xbe\xbf\x10\xd2\x86\xa3D\x82\xca\xbf\xd8\x7f0\xa1!\'\xb6\xbfW\xc5$\xb6\xe2n\x89?&\xa9\xd9\xd3\x00\xa9\xba?\x1e\xcb`.\xf2\xf0`\xbf\xa0\xa9\x96r>\x93\x7f\xbf\xd0\xe3$iH\xcc\x90\xbfY\x89\xf6X\xc7\xd1\xc4\xbf:^ \x88\x00\xc4\xb1\xbf\xa9&\x88(\n\x80\xc1\xbf\x87\xe7\xe8:G\\\xc8\xbf\xdf\x8e\xe9G\xe4\xf4\xd7\xbf\xd0\x16\x88\xd2@\xd2\xb8\xbf\xddwQ\xb4\xb9\xb6x\xbf$\x9a\xc3\x1f\x7f\x84\xd8\xbf3\xf9\xc5\xe8\x16\x9c\xa5\xbf\x81\xdar\x1f\xbd\xd3\x88\xbf4cp\xe6\x99\xcb\xe1\xbf1\xa3!b=\xae\xc8\xbfk*\xd5g@\xc7\x89\xbf\x00H\xe6\xf8Y\xc9\xe0\xbf$G\xbbr\xe8\xa6\x99\xbfp!\xac\xd2\xdfX\xbc\xbf\x8e\x94wq\r\xec\xd3\xbf\x11o\x15(\xc9m\xd2\xbf]\xe6\x9a\xfcT\xdd\x90\xbf\x139\xb6\xc7\xfb\xea\xe0\xbf8\xf52\xea\x0f\x17\xb7\xbfp{xo,\'d\xbfH\xc7G\x9cd\xd9o\xbf\xb1*Y\x17H\x0e\xd3\xbf\xa5Zm\xce\x91-\xc4\xbf\xb6\xf4"\x89El\xd1\xbf\x94+KIWU\x93?f\x1c\xb1\x9d\xdc\x06\xc4\xbf\x1a0\xe2\x1a\xd1\x84\xcc\xbf\xd4\x11@<\xc5\x10\xbe?_\x91\xbbE\xbd\xd1q?cg\r\x9bl)\xaa\xbf\x07B&\xaf\x9e/\xa0\xbf\x1b\xc7\x11\x82\x06\x04\xaa?>o\xf3\xcb\x0c\xd0\xca\xbf[\xee\xdfM:\xd1\xc9\xbf\xdd\x89\x854\xa9\xf0\xd0\xbf#\x15\xf8\xb6\x1c\xc8\xde\xbfw\xe1\xd58\x12\xd4\xd0\xbf\x1cL\xd9\x8d\xf9\xa3~\xbf\x85\xd7\x12uzS\xd9\xbf_p\xec\xbf\x1e_z\xbf\x18 \x91\x12\x13b\xa3?~OZ\x1d\x01(\xb3\xbfe\x02R7;\xfa\xe1\xbf\xc3Z\x10\xe7\x97\xf8a\xbf\xc2\xc0A~\xac\xf2\xe4\xbf{c\x16I.*\xbf\xbf\xd6+C\x04R\x13Q?\x81\xd6<8\x15\xd2\x81?1\x82K\x92\xe1]\xb9\xbf\xb9\x84\xc1\xed\xf4\x15i\xbfUU\xadi\x9b\xccR\xbf&\xdcfCI\xb0\xaf\xbf\x83\xc2\x0eU\x8c\x8f\x97?\xb9s^\xd6\x05\x0f\x8c?\r\t\x0c\xda6\xf3\x94\xbf\x1b\x8a\x0e\xde\xbf\x07\xd2\xbf\x98~\xc9\xe3R\xf9\xd2\xbfg(K8\x15j\x80\xbf]a\x8c,\xbd\x12\xc6\xbf\x13SD\x81\x16\xd1\x91\xbf\xd0N\xa1\x1e\x11\x9b\xc3?\x0e\x0c`\x99\t\x7fc\xbf\xc1\x95\r\xff\x11o\x87\xbfh\xfc\xd0\xd8\x8b\xc5\xc3\xbf\x83sE"\x85\xdd\xa5\xbfK\xf0\xc0o\x16m\x88\xbff\xc3\xefyVu\xc2\xbf\xcb\xb2b\xcf\x00\x89\x87?\xa4\xea\xc1\xd5\xd0\x87P?\xc2\xf1\xc6\\:\n\xdb?\xe1W>@\xc16\x94\xbf\xb4\x84\xd9j\x1co\x86\xbf\xd4\xb1\xa9q\x82`\xb2\xbf_\x95R\xceK\xf7\xd9\xbf\x7f&\x16\xa8\xf5\xa7T\xbf\xc8BR\x7f\xa8\xc8\xb8\xbf\xd4\x9eF\xc4-h\x8c?\xc1\x17\xdeY\xba\x17&?\x99y\xffH2\xcfv\xbf\x00\x00\x00\xc00\x96e\xbf\xab\x82H^^)~?b\xc4\xfb\x93\xa5\x90\x80?6\r.\x91W\xccx\xbf4$\xc9\xe5\x95D\x8d?\x1d?\xec\x94\x8d{0?\t\xde\x0ev\xab\xc15?\xe5P\xcbN\xb7\xdfx\xbfR\x17\x16\x0b\xe3~Z?\x96C\xd9\xd0\x99\x9b\x82\xbf\xb6\xa9\xac\xdb\xad8\x97?"\xb6\xbfD\x8czf\xbf[\xb3\x88\x01\x83a\x90?\xa1m\xd6=l\xc1f\xbf\x84\x88\xf4\x1dz\x87\x8d\xbf\x1c\x00\x16\xdc\t\xe8e\xbf:\x8d>\xa6\xa2#\x86\xbf\n\xda\x07\xf0\x13#\x87\xbf\x00\x00\x00@\x9b\xffw?n\xb2\x14"\xce(\x88\xbf\xcaMT\'k\xccd\xbf\x0f\x06\xe90#\xd6y?\x18<\xc1\xbe\xd0\x13\x94?\x84\x93\xbb\x96U\xcep\xbfYh,\x17j5\x84?\xdb`\xd4e\xd5\xa4\x87?av\x1d\xbf\xcdNs?\x00\x00\x00\x00\xa0\xe4z\xbf\x85\xa1\x11-`\xc7r?p\xad\x15\x01F\xc6[?\xb6\xf0\xf0\x9eF\xd2v?\xf7_t\xa2#\xf0\\\xbf\xd9\x8d\xc7N\x8at|?%\xb0\x1d0\xe6Rl?\xc8\xeft\\\x91\xd5\x8a\xbfy\xac\x94\xd6\xb5\xa8\x84?\x01n\x8ch\xc1\x16v?\x9e\xc5A\xd5b\x08E\xbf\xb0\x99M\xbbh\xe7\x83\xbf.][f\x9f\xf4o\xbf\x00\x00\x00\x80B"y\xbf\xa4\x7f\x0f\x85\xa0v\x90\xbf,\x7f\xa8\x18\x9e\x07\x85\xbf\x81#\x03\x9b\x7fDp?\x11\xb1\xcb\xad\xa3\xb2\x9b?\xe3\xacMx\x0fox\xbf7\x84:\xd7\xe8\xfa\x89?YF47sB\x7f?d\xdc\xe5\x14\x8b\x0c\x91?\xa7\xdd\xb9\x03\x92R\x89?`;\x05\x9au\x1f\x84?\x00\x00\x00\xe0\xca\x08\x80\xbf\x0fy\x15\x7f\xe6A\x8a?\xf4b\xde\x81\x9e\xcdJ?\x83\x86m\x18w\xfb\x85?\xf3,\x8c{Q\xaf\x7f?v\x86\x01\x80\xe3Ur\xbf\xfb\xdc\x96\xe1:\xfc\x90\xbf\x1c\x85\x08\xe4\x05\x19\\?\x96,\xbf=Agg\xbf\xe7\xcb\xb2bd+r?\xc5\x0b\xe0\xf9\x17U\x82?\xeb\'f\xe1lc\x87\xbf\x8f\x0eYt\xba\xf0p\xbf0\xc4>\xa1-&\x91\xbf\x07\x8e\xcbV\xb9\x92\x85\xbf0\xabX\xc3;\x89l?6E\xb0\xd4A\xe1\x81?\xbc\xe0\x16q\xf2\xf8\x87\xbf\xbf\x11\xe3\xeeS\xee}\xbf$>3\xf8\xb47p?\xa7^\xe7\xebwR\x8d\xbfvS\xd2K\xe6\x83|?\rI\xc3eJ\x8b\x87?Y,\xbf\x11T\xb2^?\x00\x00\x00\xa0f"\x82?\xc2\xd40\x0cvL\x81\xbf\xbf\xed\xa7\xefn:\x8d?\x00\x00\x00 \x7f\'\x87?o\x95\x0c\x8a\xb2\xfe\x87?\x00\x00\x00\xe0M?\x81\xbf\xccd@\\\xe9\xc3\x80?s\xc9\x84\xf8.\xe2\x85?\x00\x00\x00@\xa4\x94\x89?\x82l\xc1I\xa9\x96\x82\xbf\x94\xe5\x88\xa1\xcd\xe5\x93?\xf9\x85\xae\xebA\x16\x87?\xed\xe29P\xde\x04\x94?\x84\x0bk\x14\x86\xdey?\x18\x86c\xbd\xa9\xf1t\xbf\xe3\xbf\x11`\xf7\xb5\x81?\xc95\x91\xa20\x00r?\xbep\xb3\xb7\xbfG6?P\xabJ5\xb8\xaa\x96?\xdb\xa0\xea\xff\xf6\xec\x81\xbf\x00\x00\x00 9\xdbq?P.\xf2\x7f\xbe\xc7\x82\xbf\x00\x00\x00 \xf8\x93u?\x00\x00\x00\xa0\x9d\xf4u\xbf \x86\xc5\x02$\x9fc\xbf\x00\x00\x00@\xde\x01m\xbf\x00\x00\x00@\x85\xbd\x82?\x00\x00\x00\xe0\xba\x8aJ\xbf\xf0,\xb7\xaeI\x95l\xbf\xf5\xae\xd2K$\x07\xa3\xbf\xc9o\x07\x18\x9f\xf4\x8d?4l\xd5h=\x8e\x88\xbf\x00\x00\x00\xa0l\x9b\x82?U\x0f$<\x05[u\xbf`\xb6\x03?c\x0c\x86?\xd7\xecA\xff\xe0!~\xbf>\xb2\x7f\x90\x00\x02c\xbf\x00\x00\x00@A\xe9a?\x00\x00\x00@\x82\xc3\x93?@\xe2\xbc\x9f\x02J\x80?o\xb8\x0e\x93s\xb0D\xbf\x00\x00\x00\x80\xa0\xbeH\xbfML\xbdV\x9cWr?\x00\x00\x00\x80\x84a\x87\xbf\x00\x00\x00\xc04\xbb\x8e?P,\xb2\xe8\x88\xd2\x92?,\xc8<6L\x00k\xbf\xec\xbf\x1e\xbe\xac\xdf\x82?\xed6o\xb6\t\xbfr?\x00\x00\x00\xa0\xc7gu\xbf\x00\x00\x00\x00\x1d\xfcl?\x0f\xd9\xb7\x05E\x1a\x8f\xbf\x00\x00\x00\x00\x0e\xb4~\xbf\x00\x00\x00`onb\xbf\x00\x00\x00`v\xffm?\x1c6\xb7\xea\xdfu\x92\xbf\x00\x00\x00\x80\xb3\x03\x93?\xb9\x80d`\xb9K\x87\xbf\x02,\x04\xb7\x87\xcf\x80?\xf80\xb4\x11P\xa0R\xbf\xc4\xde\x15\x8f\xd5\xc6r?\x9e\x07l\xd0\xdb|\x8b?\x00\x00\x00\xe0\xe3\x90\x8f?\xe9b\xc5$\xcf\t\x82?\x00\x00\x00\xc0\x05Wq?\x00\x00\x00\xc0\xd7\x82\x88?\x00\x00\x00 \xff!{\xbf@9\xa6V-1o\xbfT\xa0\xef\x03\xc1;X\xbf\x00\x00\x00`\x14Ty\xbf\x9a@H\x9d%\xdbR\xbf\x00\x00\x00\x80\x91\x01\x9f\xbf\xe9\xef\xc9\x9d\xc1\x8f\x80?4\x0e\xedE+\xdf\x90\xbf+5\x9f\xc6\xb0\xdc\x89\xbf&\xc4\xb4\xcbR]\x90?\x00\x00\x00\xe0\xd1Xz?\xce\x98\xc5\x9a\xd1\x07c?\xe6\xa3\x8d\x82+\x8bl?\x9a\xbb"\\\xaf+\x83?\x00\x00\x00\x00\xac\x15\x96?^CP\\\x07e\x94?\x00\x00\x00\xe0\xf4\xf5p?\x00\x00\x00\xa0+_\x81?\x00\x00\x00\xa0\xde\xc6Y\xbf\x00\x00\x00\xc0\xd2\xf0\x86?\xd9\xe5k\xd7\x08\\u?\x00\x00\x00\xa0\x1d\xbf\x85?A\xa7w\x03\xa6\x81l\xbf\x00\x00\x00\x80\x9e\xd2|\xbf\x00\x00\x00\xc0\x17]`\xbf\x08\xa8\xb1\xdc\x19\xa9\x8e?\x00\x00\x00\x80\xba6W?1\xf7Qm\xa7|\x8b?.E:R\xef\xcf\x8d\xbf\x00\x00\x00\xc0\xe8\xb0g?\x00\x00\x00\xc0\xa7\xdcs?\x00\x00\x00\x00\xfd\xdf\x89?\xcb\x8b\x1e\xd5g\xb4\x80?\x00\x00\x00\x80c\xbe\x85?\x00\x00\x00\xc0\xe3\xd2C\xbf\xd6Z\x0ce\xabN\x8b?\xac\xef\x19M\xc1/s?\x00\x00\x00\xe0^\xf9\x8d\xbf;yklhq\x85\xbf\x00\x00\x00\xe0zp\x1f\xbf\x9a\xd3,\t\x9d\xe78?\x00\x00\x00`-$j?\x00\x00\x00\xe0|\xe0X?\x00\x00\x00@\x83\x87Z\xbf\x92\xf5\x89iYT\x86\xbfk\xf5\x80p\x83\xddd\xbf\x00|N\xfe\xf1\x8az\xbfl\xed\x07\x9e\xb3\xb1\x89?\x00\x00\x00\xe0\x1f\x83H\xbf\xed\r\xdf\xdfk\xb1@\xbfD\xb7\xacm\xbbn~\xbf\x00\x00\x00`\xdfEs\xbf\xe1\'\xe9\x8d\x15\xb0i\xbf\x01\x1c#\xa1oWm?\x00\x00\x00\x00F\xbe\x84?\xd6\xd3\xc2g\x98\x10n?\x14wPA\xa3\xab\x84?\x8d0\xffi\xdf\x8c\t\xc0k\xad\x03\xb7\xffQ\xb0\xbf\x88\x9fb%\xf3\xear?3\x00\x83kv;\xc4\xbf\x86\x93*{\xc6\xe8\x84\xbf\xda>_*\x8aA\x9c\xbf\xc7Q\x10\xacf\x11\x9a\xbf\xacm\x0b\x9f[w\xa6\xbf,e\xae\x0c\xcd\xed\xb7\xbf\x9f\xac\xfa\xb1=\xbb\xaa\xbf\xd7\xca\xd7rM\xde\x0b\xc0\x1d\x8c\xebm\x08\x96\xa2\xbf\xce\xc8m@\x85o\x97\xbf\x96P\xbf\x8d\rC\xb6\xbf[\xb6b\xe0\xa2\xea\xd4\xbf\xf9\xadb\xba\xee\xd3\x91?\xf3<\xb2c\xea\r\xf0\xbfc\x90N["\xd8\x94\xbf\xef`\xdf6\xe9y}\xbf\x0e\x16\x1dg\xf4~T?\xcf\x8c\xa2\xeaoeq?\x07_\xdb\x87\xa6\xce\x7f\xbf\x082\x80yv\x10\xa3\xbf&V\xc3\x7fF\xa1\x96\xbf\xf7V\xcc\xe3\x80\x85\xd6\xbf\xf1\xb2\xbbY\xa9\xad\xb3\xbf\xd6\xa6\xaf\xa8\xeb\x0f\x9b\xbf\x92.\x98\xbd\xfe2}\xbf\xd6\x98I"\x97J7\xc0\x8fgr\xbf\x1c\xc2^\xbfC\x05\x9b\x01~\xc2\x93\xbf0F\x82\xe3br\xf8\xbf\xd9S\xee\xc0\x85\xf5\xc4\xbfj~\xab\x02\x82\xbf\x93\xbf\r\x08y\xa2\xf8y\xb7\xbf\x1b\x0bU<\x84\xb1\xa6\xbfbA\xd8\n\x07\xf0\xc8\xbf\xc2\xe2\xe44\xf6\x86\xd1?0\xf5\x91\n\xbet\x81\xbf\x02\xda\xc2\x89m\xd9\x86\xbf\xab\xfa\x1fkJ\xcb\xb6\xbf\x98\x15O\x94\xc6q\x9d\xbf\xd3,l/U\x97\xfa\xbf\xa1o\xd3Q\xa1?O?\x8e5\xf4/\xe7\x0b\xb0\xbf5\xe4:D\xc8\xfa\xde\xbf9\xc5\xe5\xf1t!\xc2\xbf\x05[M\xc0\xd3\n\x9a\xbf \xf4r;\xfe\xbc\xb4\xbfz<)\x1f\x95[\xc7\xbfW\xbf\xc3U\\#\xbc\xbfuP,iy\x89\xc2\xbflQ\x0e5\x88\x16\xc5\xbfT3l\xd8)\x9f\x98\xbf\x96\xd8\x89\xc6\xec\xa8\x02\xc0H\xd2y~\xd2=\xf4\xbf\x0f\t/\xcd\x96\x17\xaa\xbf\xea{<\x1b/\xc5\xc7\xbf\x99\x8f\xce\xf4\xf5s\xd4\xbf<\xae\xc3\xe3\xf9\x03\xd1\xbf78\xeaZ\xf1\x87\x9f\xbf\xdd\xc6\xdf\xac\xd1\xfb\xd8\xbf\x8d#*\x02\xedW\x85\xbf\x1d@\xab\xba\x14\x87\xc0\xbfUk\x88Pi5\xab\xbf\xd3d\xc1U\xd5\x08\x91?\xb7mi\xfa\xe2\xad\x8c\xbf\x88{\xe5\x89)|\x9f?\xc8\xc9\xf7T\xe6m\xf2\xbfd\xa1_\x89\xd6vm?\xaa\xb5.\x17\xb35\xc1\xbf\xe3^xM\xc0\xa8\xd8\xbf\x19\xb6\x82\x86\x1d\xcb\x96\xbf2\xd2Z\xe2\xc6~m\xbf\x1d\xda1\x16v~\xcb\xbf\x95\xc95\xab\xf4\n\xf7\xbfH\x9b5I>\xc6\xe6\xbf\xbe\'\xc8\xc0U\xe1\x88\xbf$\xdd\x83\xba\xb9\x8c:\xc0\r\xcdz\xcd.\x03\xb3\xbf\xe9\xe2\xa6\x9e+\x17t?\xfdC8\x02\xdb\xd8\xbf\xbfOL\x17\x8d\xe8\xa4\x1e\xbf#\x1b\xbf\x18\xe8\xaf\xc7\xbfC\xf1\x1d!o}\xac\xbf~A\xdd\x88\xdc\xa2E\xbf\xe6\x15s\x1dt}\xb9\xbf\x85\xee,Z\xf5\'\xc0\xbfQL-\xfd\xa9\xb0R?\xee\xe7\xb6\x08Hy\x02\xc01(*5\xd4\xe8\xa9\xbf\xf5AZ~@\xf1\xc1\xbf\x16\xb3\xbf\x82\xc3/\xa5?\xff\xfeN\xd8\xc9\x95\x8e\xbf\x82\x9f\x9b\x93M(\x91\xbf\xd5\xb0\xef\x14!\x9b\xb4\xbfj\xf0\xe0\xfb\x929\xf9\xbf\x07=\x1f\xe6\xe8\x00P\xbf\xfdq\xaf\xc4g\x9d\xa7\xbf=L\x93\xc6\x05\xe9\x86\xbf\xe2\x0f\x9b[\xa5\x12z?\x0f$C\x10\x90\xdc\xb4?\x85\xba4\xf5\xdc\xdc\x80?\x14\xfb\xe7\xda\xcf\x82\xf6\xbf\xfa\x91\xa5v?1\x7f?\x0f,\xe5\xb9\x8b\x86\xb2?f\xbaYH1G\x9a\xbf\xe8\xd2\xd5\xcc\x99P\xbe\xbf\x8a\xec\x1f_\x81\xb3\xad?\xee\xaa\xf2\x8b\xb3\xaf\x86\xbf\xcb\xb6\xfd\x9c\x0c\xc6\xb3\xbf\xa2x\xe5\xf6\xd8M\xb3\xbf\xfa\xb4\x9a\x9aCI\xf5\xbf\x19\xf3\xc3\\~\xaa\xb6\xbf\xbb\x11I\xabV\x15\x8d\xbfj=E\x8e\xcd\xe5\xd7\xbf\xd5\xdd\xec\xeb\xbb\xe6\x82?o7$\xd3\x94R\xad?j\x9b5\x86H0\x87\xbf\xa0\xae\x93\x87k\xd7\xa9\xbf\xd5\x93\x81\x0f\xfa\x17\x95?m\xa9\xe6:\x82\xaf\x91\xbf\xdd\x82\x86\xd0\x8a\x8c\x8a?\x10\xc3\x01\xcd\xfb\x1a\xa5\xbf\xbe\xdf$N%2\x8f?\xe9<\x87\xd7\n\x1ao\xbf\x1f\xff\x14\xc6\xe8\xb3a\xbf\x87\xd3x\xed\x85V\x88\xbfgB~\xb85O\xb2\xbfz/\xc8\x82\x10>\x93\xbfq\xbao\xe6\xf1\x07\x8a?\x9cCY\xe8\xd5\x8a\xa0?\xb3#{y9m\x95\xbf\xa6I\x11G\x0e\x00q\xbf\xf3\xef(\x99\xfd\xe1\x97\xbfA\xc4\xf6\xb3\x899\x96?!\x0fC\xca7;Q\xbf\x19\x8a\xc8!+\xb9}?\x06\xc8\xbf\xf8\x19!e\xbf\xfacj;\'\x12R\xbf\x84\xf0\x0bL9\x98\x9c\xbfx\xdc\x1d\x93\xbfl\x84\xbf\x14\xf8\x18\xe88\x8f|?~\xa0\xedU\xce\x7fv\xbf\xd6f\x93\x1e\xe8E\x8a\xbfh\xb0<\xe3\xfc\x0c\xa2\xbfK6\xc7\xdd\x8f.\x83\xbf)k\x94\xce\x17\xf2\xb4\xbf.\x98\xd3w\xc7\x84Q\xbf\x90%*I\x1c\x9f\xd5?D\xd5\t\xd9k\xbe\xc0?\xc1\xb1p\xfb\xc5A\xe6\xbfO\xe0\xf7E\xac\xc1\xcf?\x97]tL\x0eDg?\xcel\x00\xb31t\xc0\xbf\xca\xd5+U\xc4\xfa\x9d\xbf\xa5/\x18\xbe\x86\xd4\xc4\xbf\x97\x86\xb7%\xf8\xc6\xa7?\xda\xc19\x14\xf1\x83\xa7?Z\x9a\xb8\x9a\xc6\x81\xfd\xbf\xb3]NH,:\x8c\xbf\xc0U}\x8c\x0c\x18\xa5\xbf\xce\x88UVV\x18y\xbf\xce\xa3\xa87K\xdf\x9a\xbf\xbav\xb0\x9c\xa2\x03\xa0?\x1a\x14\x92\xba\xaf\xdb\xa8\xbf\xb2\x8fnt\xbd\'\x85?\xaf\xf8\xe7hZ\xc3\xc4?\xb4\xfd\x0f\x04\xcc|\xd1\xbf\x03\xaf\xdb\xa1?\x9f\x8a\xbf\xb0\x99\xcb[\xe7\xf5~?\xa1\x08\xf8\x90M1\x96?\x96\xc9\x9bY\xfabI?/u\xf2Q\xc6\x84\x99\xbf\xef\xc2\x8bD\xd1\xebr\xbf\xc0\x07\xf7C?2l?\xf2\x1b\x86z\xc9G\xbf?|<\xb1\xf5\x9f\xcd\x89\xbf\xae\x97\xd0\x9d\x91\x17\xcc?\xda\x90]/*\x91\xb1\xbf`\xbb\xcdp\xe9\xe3b?\x8e\xe9\x93\xdc*\xb1\x9d\xbfDT?\xb1C\x86p?bw\xfbBS\x15\xc0?\xd3\xd6\x7f\x05JF\xa0?VpO\xf8\xf4\xa4e?\x0c\x81\xf3\xa1m\x08}?\x97\xb3k3\x8d\x13\xb7?R\xf2G\xfce\xc2\x86\xbf\xf6\x8a\xa3\xd7.\xd7\xa3\xbf\xd8\xed\'\xee&\x81\x9d\xbf\xec\xd1\xe2\x1a\x92b\xb0?\xba\xe1\x98\xf93\xb4\x99?~_\x9aMj\x1a\x89\xbf2{\t\xd0\x94h\x86\xbfa\x81\x12\x1e;h\xb3?\xb8\xa01\xf8\x11)`\xbf"}j\x0f\x852v\xbf\x83\x81\xd5\xb4\x05\xf2\xb7\xbf\xd5\xfa\xc2\x10\xb7]\x93\xbf\r4S|6\xffi\xbf\xc9\xed\xa7\xc4y\xa3\x98\xbf\x0c\xde\xd7\x17jgw?\x88\x05\xaa_\xc7\xef\xed\xbf\xae\x1b\x0cr\xf7.m\xbf\x81\xa4\xef\x7fM\x13\xab?\xech\xbf\xf5\xffU\xa2?4/\x91\x1d\x88\xed\xb0\xbf\xd5\xfc\xecV\xe4\x15\x89?\xdd\xd9\x90\x17N\x8d\xb0\xbf\xde|.$\xe4\xcf\xa8\xbf\xad\x0e!u\xdd\xf7\xac\xbf+\xe8\xe88\xf4A\xec\xbfU\x11\x18N\x134\xb8\xbf5\xd9\xcf0vqr\xbf\xc4\xbeV;1$\xbe\xbf\x8d\xadAB\xe4U\x9e\xbf\x9eR\x0e\xb3*\xaf\xc5\xbf\x92\xaf\xf1RtKd\xbf\xb01y\xa47X\x9b\xbf\xb6\x90\xe6?\x88\\h\xbf$\xda\xff\xf7;lU\xbf\x89\xd1\xdaV\xcc=\xa3\xbf;Q\x1e%\xa1Q\xa8\xbfO\xea\xe7Q}L\x94\xbf\xf0~\xf8y\xea\xc6\x96\xbf\xf7\x1bV\xb2F\xa2q?\xba\xed\xbb4\xe5\x0b\xa0\xbf\xe5IW{\x14\x97\xbd\xbf\x04\x0b\xb2\x83\xab\x9b\\\xbfZAvgN]a?l\xea}\x97\xef\x1e\xc0\xbf\x03\r\xab\x15\xc6w\x93\xbfA\x0eyE\'p\x8d?\xc5,\xd7\xa6\x05A\xc1\xbf\x1dc\xba^\xa7}\x9d?[\x8a\xee\xed5ZA?\xd31\xb2\xf5\xba1\xcc\xbfD\xf8+\xef\xb3^\x80?7t\x1f\x14\xb8\x93\x8c\xbf\x1bx\xaf\xf6\xc6\xc1\xb7\xbfvV\x91>q\xd4\xb0\xbe\xae\xbb/\xdb53O\xbf`\xa2\x19\x1d\xaf\x85N\xbf\xfd\xa8\xeb\xe8\xca\x89\x8e\xbf\xe8\xe4\xa8;\x12S\xc0?mq\'\xfc!\xe4\xb6\xbf5T\xae\xbf\x98\x9a\x82\xbfJc\xa4\x02\xb6Y\xa3\xbf\xb2\x9f\\\xbcK\xc7\xa8\xbf\xf2\xba\x87\xeb\x8ee\xa0\xbf`%\\\xe6\xf3d\xd2\xbf{z\xa8\x13\xd6\xd1\xbb?\x930\x9b\x87\xd0\x0f\x90\xbf\'\xca\xddu\xdd\xc1\x83?\xaf(\xf4v\xb8\xed\xa7\xbf\xad\x00\xef=;\x01G?\xf9\xef\x9c\xa4Ft\xb4\xbf\x12\xa8>\xa6\x15\x17\xcd\xbf{.\xbdz\xdf\x9e\xf3\xbf\x1e\xad\x0f\x06\x1e\x0e\x95\xbf\xc0a\x1eP\xb8Z\xa0\xbf\xea\xc8\n\xdf\xa6 Y\xbfW\x04G\x0f\xda*\xd0\xbf\xac\xfa\xf7.Z#\x93?""R\x87\xc8\xff\x93?\x04\xd9q?\x81\x14\x8f\xbf\xf9eu\x9c\xf9,\xce\xbf#\xe8\xea\xd5\x96u\xc9\xbfS\x16\xbe/+\xf8\x93\xbf#\xa2\xdd\x97\xe2\xb6>?\xb3\xc9\xae\x9e}:|?\x91!\xb1YW\xd1\x97\xbfF\xc1\xe8\x0cV"\x8b\xbf\x9d\x8e\x99\xa7\xa3\xe1\x91\xbf\x89~\x14jkZ\x9a?v\xdf\xb7[A\xb6\x93\xbf7\x0c\x971i4B\xbfxS\x05b\xa8F\xb1?&F\x0f7\xf1\x17\xcb\xbf\x19(\xfd\n\\\xf6~?\'\x81\xadV\x1c\xc8\xb6\xbf\xb3\x17o\xb5Ti;?\x10\xc7\xc0\xcd\xf3a\xc1?\x80\x1c3]\x80\xbe\x92?\xef1\x1a\xf5\xc9(\x8d\xbf\xbd\x01z\xe5\x02=\xa1\xbfdr\x9e\xe0Q\x89\x98?\xf0jm\x13\xf2\x11\x86?\xffa\x86G\xb0\x81\xab?\xb4\x1a\xc3\xebu\x04\xd1?\x99\xe6\xe3\x0c\xcb\xa2\xaa\xbf=?\x07\xc5@\xe2\xbf\xbf\x10o\xc4\x080Tt\xbfoO$\x18l\xfa{?Q\xcdg\x8a\x889\x95?\x0cc\xaf\xe0\xab\x80\xc9\xbfit\x7f\xb07\xa8_\xbf(\\\xf3\xf8c_\xc1\xbf\x91\xae4W\xd0D\xa7\xbf\x1d*t\xcd\xfd\xdb\x14\xc0\xf0S\xe1X\xcc6\xcd\xbf<\xf1i\x80\x9b\xf4\x99\xbfo+{H\xa7s\xef\xbfT,\x8c\xdb\xafMJ?\xb3\x9a\x14\xc5%\xfe\xc4\xbf\x9a\x96(\x06:N\xb9\xbfd\x9ax<Pz\xc1\xbf\x8e\x7f\xd3\xe9Y8\xc1\xbf\x88\n\xf36i\xb6\xb9\xbf\xdc0q\xcd\xc8N\x13\xc0\xc3\\t|\x02\xaf\xbf\xbfK\xb6\xe5\x94\xbdU\xe6\xbf\xe6\xaa\x80u\x9c\xd7\xc5\xbf~)z\x98i\xa3\xdf\xbf\xdc\xdb\xef\x9f(\xf1\xca\xbf\x03kfFc7\xed\xbfC\xb5\xb7k"\x1d\xe3\xbf\xb0\xd6m\xc4\x8b;\x90\xbf\x10\xa8\xb0\x04\xa3\xea\xbd\xbf\x99\xac.\x9ab\xce\x8e\xbfeQ\x83\x97\x11\xdc\xa0\xbf#1\tX\xa3\x9c\xab\xbf\x94o\xa5\x8a\xc6\xc1\xb1\xbf/\x8f\x87\xc0\x8b\x14\xe0\xbf\xc3\x92\xb7_\xcf\x19\xb3\xbfQ\xefV\n\xa1\x08\x93\xbf\xa1\r~\xc8\xf3\xc6\x90\xbfS\xa6\x96\x8c\x974A\xc0\xe8x\xcdc\xc4\xebJ\xbf8\x99\xdds\xcb\xd2X\xbf\x17\xf0\xe90{a\x03\xc0\\7\xb84[\xbe\xd0\xbf\xfa=I\x91\xaa\xf9\xa4\xbfF\xd1\xd0\x80\xda\xf9\xb6\xbfb\xdc\x11\n\xd1%\xbe\xbf\x81\xb0\xafAI\xe2\xd1\xbf\x8d\xa5\xbd=\xc6\x0c\xb2?\xf5\xc3.M\xbc\x18\x98\xbf\xa2\'\xaeI~\xe7=?\x92\xd1\xfeX\xc4,\xc3\xbf\x04\x17\xbb\xd8:\xe4\xac\xbf\x8fv\xc2\x07\x90\xf6\x05\xc0\xce\'\x8a1P\x16p?~\xef1Y\xe7\xdd\xc2\xbf\x1c\x1aw\x99\xa7\t\xcf\xbf\x8e\xc8\xd6\xb2 F\xd2\xbf-Gq1\x06\x9d\xb4\xbf\xe2\xe2\x03\xcc\xa8\x10\xcc\xbf\\\xe5\xf6\x1a\xa1\x91\xd1\xbf\xd0\x0b+\xbc\xb30\xc1?\x9bWp\x9d?r\xe5\xbf\x9c\x1a\xd6\xb0\xe9\xa9\xdd\xbf\xc27\xe9\x17;\x00\x90\xbf\x89\x85\x97F\x1c\x90\x01\xc0\x99\xf8\xe32\'\xab\xf2\xbf)\xbc\xcd\xf5\xa4\x90\xbc\xbf\xa4zM9F\x04\xd7\xbf\xdb\xf3X\xe7\xb6\x98\xf1\xbfjP5\x11\xc0\n\xf8\xbf\x8b\xe6\x96\x82~]\\\xbf?\x95j\xc9\xcf]\xdc\xbfH{Yb\xef\x9d\xa1\xbf\xbf\xfa\xb4\xbe^\x9b_?r\x0c \x88wj\xc5\xbf\xab\xec\x03\x929\xb4\xc1\xbf\xf7\xd8\x1f\xdf\xe1\x13\x85\xbfA\xa2\x9c\xc7\xe4F\xec\xbfZ\x11\x13\xee\xfb\xfd\xf7\xbf\x1b\x93M\xe2\x96T/?\x06\x0e\xea\xcd\xb1\xf0\xcf\xbf\t\xabN\xf2\xb7\xd3\xde\xbf\x15!\xec\xc62_\x86\xbf\xbcw\xf4\x97r\xcb\x84\xbfG\xbd[o\xdc\xfd\xd8\xbf\x9f\xc3\x19\xbd=\xe5\xf4\xbf5\x89Y\n*R\xf2\xbf\xd6BUR\x18\x99\x96\xbf\x04\xa2\xb7\x17\x03FC\xc0\x85\x90z\x93\xd2\r\xc2\xbf\xd7\xc9\xc4gZ\xc8\x86\xbf\xeab\xa1?\xc8\xad\xd1\xbf\xe51"|\x9bR\x80\xbf\n\xed\r\x1d\x11\xd7\xc4\xbf\x9c\x93\xc1\xed$\x80\xb4\xbf\xean\xc5%o\xba\x98\xbf\xcf\x9b\xa7\xab\xb4\x11\xc9\xbfz\x80\xa1+-\xb0\xc6\xbf8Y\x82\xcf\xfd\x10\x8d\xbf\xe4;\xad`\xa4\x8a\x01\xc0O\x10o\xaf\x14\x16\xa3?\xe0wj\xd3E\x84\xca\xbf\x91\x00\xc8r\x063\xc1?\x05\'\xc8\x89\xe4G\xb1\xbf\xc1Q\xe0z\xd3m\xa3\xbf\x1e\x8a\x86\xa9\xd8\x8d\xcb\xbfeWu\xe0\x98\x1f\x03\xc0T`\x9f\xe6E\x93{\xbfPI\xd9i\x021\xc5\xbf\xa6!>0\x0f\xb8\x92\xbf\xb4\xee_\xdd:\xc0\x98\xbf\xcc\x8a\x10\xaa\x10H\xbd\xbfy1e\xe3\xc8\xfb|\xbf\x1a>\x18\x9c\xf0p\xbf\xbfO\xfeA\xee\nh\x9a\xbf\xd7?\x89\xe5\xbfD\xc4?B\xde1\x0c\xbe\x9f\x83\xbf$\xba.\x0e\x8a\xfa\xc5\xbfnV\x16\x86\xcb\x13\x93\xbf(\xcb\x829\xa4\xcb\xc1?A\xc7\xb12\xbdS\xab?\x18\x1e\xb5\xf8\xe8\xb2\xc2?i\xf8\x0e\x11I/\x93\xbf\x01\xb5C\xdd\x1b"\xd1\xbf\xd0\x1b\xe8\xdbcs\xb2\xbf1?\\\x0cW\x9d\xb2\xbf\x05\xf0\xed{\x81c\xa4\xbfc\x18foz\xf9\xd0\xbf\xf6\xf1\xc7\x049\xc6\x93\xbfe\xbb\xb6-Q\x1b\xb6\xbf\xe8\xce(\x1f\xde\xbd\x86\xbf\x9cwc\xba\xa9v\xa8\xbf\xc6G\xef\x08\x0f\xab\x99\xbf\'\xdd\xa0\xdf\xc8V\xb4\xbf6\xb2\xb72\xde\xbc\xb2\xbffg\x88\xd3"\xe6\xa8?Z\xb1\x07\xc4\x10\xc5s\xbf?\xaa\x96\xdd\xfe\xc9\xa5\xbf<\xc2\xe6L\xc3\xf9\xcd\xbf\xfc8\xbe\xbdReq\xbf\x8e g\xb1k"\x92\xbf\xbc9.".\xaf\xc0\xbfW\xe3\x89\xc9B\xce\x92?\xa9\xc5\x16\x99w;\x84?\x93\x83D%\xe4\xb7\xa7?\xee\xe0mF\xde\x0f\x89\xbf\xc3\x90|\x94r\xed\xa3?\xb7m\x0c\x80\x057\xbb\xbf\xac\xb3\xf1\xfd\x1e\x01\xa3\xbf\xc7\x16] \xb5\xc0\x92\xbfE\xa6\x11\xa0\xc7\xd0\xbd\xbfwq;\xa00Z\xa3\xbf\x8f\xc6,\xfb\xe6Aj? x\xa6|\xbf\x84\xa2\xbf\xd2\xe3\xd6\xc3\xb3\xeb\xbf?\x87\x8dlV\xe1\xe8\x96\xbfM\x13b\xfan\x96y?\xd3{Q\x9e\x861\xc4?\x1din\xc5~L\xc6\xbf\xa7h\x1e\xec\x98\xa2\xcc\xbfj\x05\xf0}\xbaF\xd0\xbf\x0b\x80{,\xac\xaa\xb2\xbf\xe15I\x9fC\x11\xbb\xbf\xbc7\x86\xb1AU\x8c\xbf\x86\x8b\x8b\xe3\xd6\x87\xca\xbf\x88\xa2\xc5\x8eF\x9c\xc3\xbf\xfc\x89X\xd7\x97"\xc1\xbf\xa6|W\xc1\x02\x99\x84\xbfM\xa9Dm\\h\xc0?\xdc\xf9W"\'>\x94?y".*\xe7(T\xbf\xa4\xfd\x9a\xa3-\xdc\x99?\xada\xea~\x8cFT\xbfi\xdb\xaff\xc9?\xa1\xbf\'\xde=<\xd3\x11\xb4\xbf~\xd1#uL\xc8\xc0\xbfx\x03Y\xc7\xf2\xd4v\xbfF\xabj\xb4\xed\r\xb0\xbfy\x9aL\x16\xc5\x7f\xe6\xbf\xa8\xfbx\x1cG\x8b\xa2\xbf\xc2\x8cf*-\xf9\xa8\xbf^\xc6\x8cN\x8a:\xb1\xbf\xac\xe5\x0f\x17\xf0\x84\x8e??\xb7\xeb\xac\x11\x97E\xbfB\xe2\xf4\xc2\xaac\xa5\xbfm!\xa3 _\x1f\xb0\xbf\xe1\n\xd9a\xb9x\x8d\xbfo\x16\xb5\xd87e\x90\xbf-C\xa0-\xba\xa0\xcf\xbf\xcf-\xc6\xf5/\x9a\x9c?\xf5lo\xe1\xc6\x08\x91\xbfW\x13\xa5,\x0ey\x94?Hc\xf5u\xc0]~\xbf\xa4.tz\x8c\x90\xc2\xbf\x94\xf6!\x90\x8c\x11\xb0\xbf\xc1\x08\xf2\xbe\x8a\x18\x88\xbf6\xc6\x07P\xac\xe0\x97?\xf0y\xc1\xc0\x0cz\xad\xbf\x803{\x9d\xd4{\x8f\xbf\xdbQ\'\xed\xae~\xb7\xbf\xfa\x91-\x0c\xfb\x9au?\xc8\xb3+1\xf8:\xb1?\xebu\xfe\x16\x1c\x1e\xc2\xbfHs\xdb<\xa1_\xb1\xbf\xc5\x10\xc7W\x93Vz\xbf4\xc6q\'\x87\x1c\xc1\xbf&0tJ5*\xc6\xbf\xc7\xbakL\x9e\xb6\x8c\xbf\xc2\x02\x0f!\xdc\xf9\xa6\xbfF`Q\xce\xa5\xe2S?\x95Z_Q}e\x89??0\x16v3\x9d\xa3??\xba\xd3P\xef\xb9A?"\xca\x99_\xc0\x9a\x9f?\xb3\xa6\xf8_\n\xcaq\xbf\xba\xe6F\x97+\'\xbf?\x8a*\x06\xed\x9c\xc9\x8c?\xc0\xd7\x88\x8b\x13R\xa3\xbfw\xb6&`\xc5d\x94\xbf\x90\xc2g\xae\xa2\xd5\x82\xbfj\xe5\xf4FG\'\xb5\xbf\xa1MWEw(\xa9\xbfc"\x95\x12\\(w\xbf0\xb9\x9b\xcd\xf3]\xc0?\xc1{\xc6I\xe6A\xbb\xbf6p,\x9f\xd8R\xa2?\xf0\xfa\xf5R8\x9c\xa0\xbf\x97r\xd0\x82&\x12\xc0\xbf]\t\xee}2\xa5\x83?\xfe\xbc\x1e\x129+\xb0\xbf\x88\xf19\x00\xd1\xe7\x8b?dfs\xc8\x07\xed\x95\xbf\xa6\xe0\xe2x\x9e\xa7\xad?\xa8\x7f\xeeN\xb9\xc6\xa0\xbf\xa1\x94\xe3D&N\xa1?\x13\x8dj\x9d\x04_\xb8?\xe71C\x81\x11\xd7z?\xfcc@\xf3\xe0o|\xbfm\x88\x9b\xce\xbc\x93\x91?\xf2m\xd8\r\x9a\x1c\x83?$7\x8a\xcc\x1f\xfb\x81?0cD\xac\xeaq\xe0\xbfb+\xbf\xb7\xadO\xa4\xbf"\xb9$\x0f\xb3\x94y\xbf\xb8\xb7\xda\x08#\x84\x9a?\x97\x86\xa9Zb\xa3m?\xe3\'Zm$\x80u\xbf\x08.g\xd0\x00K\xb8\xbf\x14\xa9"&\x10z\x91?B\xb3\xd3\xc2plp\xbf\xcb\xa1\xa6c\xdf\x91\xad?\x11d\xa6\\\x9c\xad\x88\xbf9\xccy\xc50Sp?T\xe15K-/\x91?C\x8dA\x7f\xa1\x99\xd5\xbf\x13\x10\x9fE\x9bG\xc2\xbfo\xf5,\xf9Bj\xa0\xbf\x06pXS\xd6\x06\x8e?\xa4\x96\xbdI\xb6#n\xbfA\xc9yI 1\xad\xbf\x10d\x92P{\xd9\xe5?\x18j\xb3u\'w\x96\xbf\x87\xae\x08#\x9d\xdc\xc0\xbf\x13\xaf\xa7\xeeQXt?\x96HTk!\x08\xc4\xbf\x87\xa7?\xef3\xb7\xa6\xbf$\xc9Q\x13\xc0\xd9\xdd\xbf5\xd5\xec DZ\xca\xbf\xcd\xb8\x9c\xfa\xc6\xeb\xbe\xbf\xfeI\x00\xfdS\xb1\xa1?#\xb9\xb7\xa7\xe5([\xbf\tq\x08f\xd8j\x83\xbf\xb8a\x06\x9f\x1b\xf7\x85?\x8f\xc8\x9a\xd0}5\x9e?\xe9~\x18\x19\x8e\xf9t?.\x07\xdd\xbfY\xff\xa9? \x8c5x\x01A\x91\xbf\x0f\x1b&0\xf7\xff\xb5\xbf\xfc\xce^\xbd\xcd>\xdd\xbf\xafWwr\x97&_?7\xbfx\x9f\x80O\x88\xbf\xaa`\xbb\x17\xd75\xa2\xbf\x80,\x0b\xdf\x01\xecf\xbfS0\x99\x1aER\x8a\xbf\x86\xde\xa5\xb5Ysc\xbf\xf7\xf2E\xc1u\xa4\xda?\x153\xd5]}uC\xbf\xe5eE\xafQ\x91\xa4\xbf\xc5\x8cZ\xf7&\xe8\x89?0B}\xb7eM\xc3\xbf\xa0\xfc9\x90&\x99\x82\xbf6d\x14\xc3\x13!\x95?\xd2\xe5"Y\x94\xda\x7f\xbf\xa8\rJq\xd3y\xb7\xbfG\xd53\xda\xf7\xc3\xae?`n\xd7\xc0*\xc1\x95\xbfi\x10\xe0\xeaZ\xf7\x99\xbfmx\xa0X-O\xae\xbf\xaa\n\x12FU1v\xbf\xc2\xb1J@\x037\xab\xbfx\xb2\xd9\x14|Q\xb1\xbf\x89\xfb\xa0\xa9\x9f\xd9\x9c\xbf\x18\xd4_a\x1e\xdd\xb5\xbf(\x0c}\x8a\x80\xfd\x9f?\xc2\x10\x01\x8b\xee\xc7\x83\xbf6\xf0Uhq\xea\xa1\xbf]\x91\'Y\xe3v\xbd?Zw\xf8X\xec\xb9W\xbf\xfbvVOv\xfa\xc2\xbf\xe8|\xc5\x11+\xf0\x85\xbf\x80\r\xcb~u\x16W\xbft \xc5v\xb9w\xcd?0\x01\xa4\x90\x98Ta\xbfA\xd5\x99IH\xd2\xea\xbf\xdf\xd1\x01Uekr\xbf&\xc1\x08:7y\xc2?\xcb\xb0|i]A\x8e\xbf\x1bb\x93\xd6W\xab\x9e\xbf\xf5&u;x\xe2\xab?Ui\xcc3a\x9f\x88\xbf\xb5\xad,\xf3\xbe\x9e\xa7\xbf>y\x8d\xddp\xf5w?E\xd6rwP`\xe7\xbf\xc3%\xd8\x06[\xc0\x86?\x99s\xc4b\x9dR\xbc\xbf\x86fG\x9a\xe6\x17\xcd\xbf\x1c\x8f\x98\xf3q\x81\xa7\xbf\x9e\xeb\xb7\xf4\xc61\xc1?\xd3\xceP\xe8<\n}\xbf\x04&\x80\x18]\xa7\x91\xbf\xe8\xb2$\xca\x99Fy\xbf|\x0f.\xce\xd8Ur?:0\xc0\x0e\x00)\x95?@\x13M\x9b\xaa_H?\x83M\xc5\xc3\xe1\xc6r?\x1e/w\x17\xe4[\x7f?\x06\x8f\x88\xc2\x97\x10\x95\xbf\x0ce\xb4\xe6\x00jd\xbf!\xdb^5 \x93\xbb?\x96R:A~\x9d{\xbfZ\xf3\x0c\x04xB\x96\xbf\x06\xde\x1a\xee\xef\x9d\xb7\xbf1\xeao\xe4\xd5\xf8D? \xc6\xc4\x93\xed\x00\x88\xbf4\x11S\x1d\x1b\x15\xa2\xbfH\x1c\xc1\xcf\xd5L\xa1?\xf9\x00\xf5\xdd\xed\xdd\x9c?D\xf1\xe9p\x9a\xcd\xc7\xbf\x9a|$\xcf$G\x80?c\xa2 \xdc\xfeOf?\xc6\xbc\xa7)\xd5\\\x81\xbf\x84\xab\xa9\x7f\x1c{\xa5\xbfyOP\xe7+\xd9h\xbf{\xa6\x1c\x10eI\x8c\xbf\xaf\xce\x1d|:E\xc2\xbf!~{.\xf1\xc9\xc3\xbf2\xec>\x11Vz\xb0?nUO|g\x05\x99\xbf\x8f\x0b\xe4j\x96-\xb4\xbf\xaf\xdb\n\xa9\xf8\xcb\xce?\x8e\x1d\x86\xae>\x85\xb9?\x13s\x0e\xc4\xa8\xee\xdb\xbf\xb6\x8e\x96\xb8\x81\xfd\xd5?y\xf1\x9a\x8a\x16\xd3p?\xd1\xe4\xc8\xde\xe4\x11\xab\xbf/\x1d$\xe0\xa5\xb0\xad\xbfx\xef\xd1\x19\xa9\xad\xbf\xbf&\xf5\x003\xfcc\xc1\xbf\x0f\x14\x93\xc8Sx\xb5?K\xe7\'d{\xab\xf1\xbf\x1e,\xf6/\x05$\x92\xbf\xb0\x8c\xa4\xfc~\xfd\xa9\xbf_\xa0\x8c\x87\xa7\x06\x7f\xbfrq\x02\x04\xcc\xe0{?>y\xa1\x01\x08%\x84\xbf\xa3\xc5\x8fiAd\xb8?\xa3\xe6\xbc\xb6\xb6\x88\x95\xbf\x02\xc6\x99"\x85\x1a\xc4?9\xf0f\xcc\xa3\xbe\xd0\xbf\x89DP{\x13\xf5\x84\xbf_1Q\x81\x90\xea\x80?%,\x9eE]\xbc\xae?:\xccP\x16\xc1\x9ey\xbfL)\x076y\x10\x89\xbfF\x1c\xb6\xaf\xa0\xfc\x9c?\x8f\x93\xa1\xd9b\x0c\x82?\xdb\xa7\x83\xef\xc0\xe0\xb3?\xb0g\x9b\xcc\xc6\xf2p?x\xbc\x02V\x91J\x9e?\x1e \xce\x0fl\x18\xac\xbf\xc8i\x00Y\x12n\x86\xbf\xa6\x822a\xbdx\xac\xbf\xed^G*\xad\xc9\x83\xbfGy\x97w\xf6\x1c\xd2?)\xeb\xa3\x15\xf7\x82~?\x84A\xe9\x13\xaaRh\xbf\xa5i\xc0)p/\x81\xbf\xa9C\xc0D~\xc1\xae?\xbfm>\x18\xfbVx?\r7.\xbfh\xdb\xac\xbf\xe2I\x890g\xec\x9c\xbf\x04\xc1\xbf\x0f\xd9\x84\x96?f?\xca\xe5\t^\xe3?`\x86J\xed\x89\xe3\x8d?\xdev\xaf?\x92\xc4\x88?\x9e\xda\xd52\xa8(z\xbf\xc9\xfdMlCl\xbb\xbfx\xf3\x94v\x92\xd6x\xbfTG\xb7\x01\xd9\t\x96\xbf{\xd8\xff\xb3""\x91?\x17\xfd6\xc7g\x13a?k0\x9d:qz\x8d?\x00\x00\x00@\x90^\x90?\x99\xd0\x8fq}=n?\xf2\xb2)\xa5\x1cwx?a8\xf0\xda\x93pa\xbf\xc8\x99\xd3\xaf\xe8\x80n\xbf\xe8\x07\x17w8|}\xbfg\x07\x1f\xa2o\xb5w\xbf\x88\x8fOO\x85(\x83?\xe3v\xcd"Bf\x8d\xbf\xa0\xff\xb4s<\xdf\x84?3\x1aqGcg}?\xa5\xd6\xb4\xe5\xf0\xe7\x84\xbf\x86#\x8c\xac\x0bDp\xbf\xe2xF\xda\xb4Z\x8c\xbf\x896\x8d\x95\xc4[k\xbf\xb6i\'N&>R\xbf\x8ftJjkv\x83\xbf>u=@\xb81q\xbf\xf5\x96\xa0\xf3\\\x84\x80?>\xe8i\xb0\xb9\xd0j?\xd8\xd0\x85<\xc0\xf8\x83\xbf\xed\xcb\xaa\xcc\x8b\xb0q\xbf\xae\xb4\x86\xdd\xc9\xa5\x97\xbf\xd9~{\xe9\xb8_v?DDx\r\xefN\x99?\x96\xbe\xc1\xd9\xa1\xa1\x92?|\xd1lH]\xf7\x8a?y\xf1D\x11\xf7\xe4\x87?\x00\x00\x00\xc0?]\x97?\xc2\xa3\xb8X\xc7\x10\x91\xbf\x04\x9c\xe3Ho\xe6\x86?Vg\xf4\xdcx%\x8f?\xa1\x0c\x11nD\xf2\xf9>\x10\xcf)\xad\xb0(w?P\xe0\'\xb14\xb1\x84\xbf\xce\x0b\x92y\xddO@\xbf\xa7\xda\xfc(\x87\x02v?m-`\x0e\x9f\x9d\x98?H>\x9f\xcf\xbd\xf0\x82\xbf\xee\x99\x87\x91\xc7\x15\x98?3\x98\xcf1\x9d!\x84?\x08\xf7M\xd6\x03<\x89?\xbd\xc5\x8d\x83\xfb\x12L\xbfnWx\xec1\x8ch\xbf\xba\xed\xfcPF\xed\x84?\xec\xca\x052\xc4G\x86?j\xb8W_t\x15n\xbf\xa4\xe0\xc6\xf7\x86g\x8d??\xe7TX,ZB\xbf&E\x85[.\xbf\x91?IM\xb7I\xc8\rd\xbf\xe5zrh o\x80\xbf_D\xc5\xee\x1d\x86M?[E\xc5/mq\x8f\xbf\x89\xf2\x14\xed\x99\x0c\x84\xbf\xb4\x0c\x96i\xedh=\xbfchQ\x97\xafM\x97\xbf\x90\\\x07\x07\xbf1\x8e\xbf\x1b\x9e!\xc8\x1ch\x7f?x\xa5\xeb\x8f\xa2\xe1\x8e?\xbd\xc7 7\xce`\x7f\xbf\xec%\xac\x89s\xcbq\xbf\xdf\xf4<\xf0\xbaZ\x8c?\x15Z`\xbd\x17\xcdz?\x9e\x960\r\x056\x8b?\rrnj/\xe1??\xa5\x06I\xb2)\xa1\x8d?\xaa]\xa4|2K\x93\xbf\xe7\xa4\xed\xe8\xff\x82\x8d\xbfJ6\x1a\xca\xf6Ht\xbfh\xfb\x9e\xa7i]\x87\xbfh7\xdc\xd3q\x82\x88?\x00\x00\x00\xe0\x93\x1dg\xbf\n"\x19\x0cf\x87\x80?\xc2N\xe6\x86\x86\xcc\x90?\x00\x00\x00\xc0<^\x81\xbf\x95\xc5"\x1b\xfc\xd8h?|hu#\xa0\x14\x81\xbf\x00\x00\x00\xe0\x13\x7f\x9b?\\uM\xf6\x91\xff\x7f\xbfkH{-\xf6\xe4z?\xbcp\xcfY\xe0I|\xbf\x8a{\xef\x8b\xfb\xc4u\xbf\x00\x00\x00`\x13\x98e\xbf\x92\xeb%\xd4\x1f[\x97?x\xec\xe8\x9fv\x8c\x8a\xbfU\xfa\xc3\xfd\x04\xdc\x93\xbf\xe2\xfa\xf8\xff\xbf(\x8d?\xfb@\xbe\xf9\xb1@v\xbf\xfb%|\x99\x91\xa8l\xbf\xa0yf`\xc6G\xf6\xbeq\xa07PD\xf3j?\xbf0o\xe9s\x03\x81?Dtn\x97$3\x97\xbf\xdb\xfd\x96\x83d\x9f\x83?\x00\x00\x00\x80<\x80\x91\xbfW\x0f\xbf\xff\xa9\x9eu?p\xa6\xb6\xe2\x00\xc9\xb0\xbf\x0fI4\xfe\xcc\x93\x90?\x060\xe1\x92"?\xd4\xbf\x00\x00\x00\xc0ZW\x8c\xbf\xed\x0e\xa5\xb4\xdeh\xaa?\x86Ve\xf6\x9cO\x91\xbf\x140\xd0yI\xb9\xd7\xbf\xad#\xca\x93\x8f\x88\xcb\xbfi\x8a*\xcd\x00\xf4\xbf\xbfY\xee\xf1\x19L2\xbd\xbf\x11\x11\xfc\x19\xe4\xc0\xd6\xbf\x97\'7\x02\x94\xf2\xb4\xbf[\x80$0\x92\'\xe4\xbf3\xb1\xf5\xb9-v\xad\xbf\xf1\xcb\xe7<\xb92\xb3?\x0b\xe0\x86\x04\rR\xb4\xbf\xca\x98x\xfd\x12\x82\xad?\x9d\x7f\xe4\xa7F1\xb9?\x1f-\xa4\xf9\xd7\x9a\x9a\xbf\x1c\xbar\xf1\xc2k\x18\xbfv-\n\xac\xca\x90\xbb\xbfP\xcePNK95?2\x9d\x82\xcc\xd6\x17\x9b\xbf"\xa7\x86\xe2\xc3\xeb\xb7\xbf\xc4\x9f)\xf0g2\xc7\xbf\x16\xd9Z\x9dyw\xcc\xbfz\x029\xfa\xf6\x10\xe1\xbf\xe4\x950\xed\x01\x90\xc5\xbf\xd9\xedE\x8fGd\x8d\xbf\xe8\xf7\x94ee[\x9d\xbf\x9c\xdd\xd6\xf5?ux\xbf\xaa\x01]\x98y(\x9e\xbf\x02\xaf\xfc\xd4@\xe4\xb2?\xf2\xc7\xc2(\x1f\xc1\xb1\xbf\x19 \xe7=\x170w\xbf*\x04<k\xf0\xd6\xb8\xbfo\xd3F\x7f\xf6\x1ax\xbf\xf5z\x02\x12\x0b\x91\xa1?P.1\x9fJ\xeb\xb3\xbf2\xe9\xd5\xf7\n;\xd6\xbf\xae\x94\xe3\xb5Dl{?iJ\x8d\xecR\xef\xe1\xbf\x1f\x01\x1c\xfd\xbf[\xa0\xbf\xb7HK>\xd4\xc4\x9b\xbf\xbd\xe9\x14\x10K\xa5\x8e?!\xb9\x93\xdc\x87\x0e\xc9\xbfm\xfa\x11?[\xe1\xe7\xbfJ\x93\xd2aN"\xa7\xbf\xd8|-\x9bCI\xd9\xbf\xdfvG\x14\x8c\x15\x9c?\x9c\xa7\xee\xdf\x17\xa5\xd6\xbf\xc9\xa3zw\xaa\x16\xc8\xbfr\x96\x10\x82\xb5\xb8u\xbf\xa9X\x8a5\x07\x89\xd7\xbf~\xf8\xe7\xc6t~}\xbfk\x97wj\xe8|\xc0\xbf\x89\xe0\x04\x0c\xd0\x97\xa6\xbf\x8b0\x0bN\xa0\xba\xb5\xbf#\x0c\xea\xdcs\xc5\xa1?\xbf\xf5\x07\xf00m\xd0?\xadd{:{!\xb9\xbf\xf2\xb5\xfd\x1c\xa7\xeb\x84\xbf\x94\x138\xe2\xe3\xf4\xd4\xbfw\x95\xc8\xfax\xe3l\xbf\x1b!\x19ALE\xd0\xbf\x03=\xd3`\xe9\xb2\xae\xbf\x04\x9fb\r\xf3\xed\xeb\xbf\xfc\xbb$\x8b\x98z\x88\xbf\\\xe8\'\x07\xcf\xce\xd3\xbf\xbera]_d\xbd\xbf\xc9cnp:u\x86\xbfk?\xc7\xc6\x1d\xb3\xa4\xbf\xbd\x0eC[\xfc\x1a\xc7\xbf)\x87m\x17\x13&z?\x9b`)\xa9\xd4\xc4\x7f\xbf|E\\/\xdfa\x90\xbf\xae>\xe5\x02\x91y\x9f?4\x04{\x1f>\xb5\x8b\xbf\xd3\xbe7\x06\x0bNx\xbf7\x92p\xfe5\x03\xb1?w\xe0\xff\x11h\x94\xb2\xbf\xac\xdc\x9c:\x7fI\x8c?\xaeX\x95\x11\\\'\xb7?\x8f\x17\x9f\xd7\x84\xcac\xbf?\x01\x9e\r\x92\xd3\xc2\xbf\xe2\xb4y\x7f\xba\xb0\x99\xbf^\xe4Ht\x95\xc7\x92\xbf\xba;\xa2\xe1\xd5\xd5\xc0?\xb9\xcc\xce\x80\xd7\xfd\xb4\xbf\xa8\x0f\xc2~\x8a/n\xbf(\xff\x9d^\xcb\x84\xbf\xbfk\x89\x16\x84\x8a+\xab\xbf/\xe5,j\xc2\x1b\xb3\xbf\xd1A\x15\x96-\xbb\xd8\xbf\xa7\xf3\xb1\x8e\xc2v\xa1\xbf\x8e\xc6\x8bz\'o\x83\xbf\xe7\xe3!\xb5w\x97\xbd\xbf<\x9fL\x0c,\xcb\xbf\xbf\xae\x96f}\x10}\x83\xbf\xd7!\xdb\x1a\x01h\xc0\xbf\x08#\xa7L\xde\xbc\x81\xbfn\xc0W\x8c\x04\xf2g\xbfoi\xc6\xd3g\x9c\xb8?x\x1c\x9co]\xe2\x82\xbf*\xd7\xc3\xd94l\xb4?#\x85\xa54\xca\xbb\x85?\xdc`1\xfd\xda0\xb8?\xd7_:\x1d\x88\xcb\x90\xbf\x8bH\xd1jL\xbb\xb8\xbf7AB\x8d\x9c\xec\x9c?\x7f\x98\x81a?\x8b\xaa\xbfR5\xca\x88\xc5:\xbc\xbf\x1d\x93\x0e[\x1e\x02\x9b\xbf\xdb8;\xd8\x04z\xa8?\xf7\x9dh\x93\xaat\xc6\xbfE>\x15W\xaaJ\xc7\xbfM\xb9\xe2g\x1b\xc5\xb9\xbf\xd8\x1b\xd1\xdd\xac~\xce\xbf\xb8Tj\x81\xfbl\xb8\xbf1|+\x98\xcb\xe6\x90\xbf\xf5*Pb\xe0wt\xbffI%\xa3\xdaB\x8c\xbf\x9d\x9c-\xd6qL\x89?\xe5\xfa\x9dng\xc7\x90?\xb1\x15G\xbd\xeb\xb9\xa9\xbfG\xa5\xf2\xb0d$\xa1?\xbc.\xc7\xa3\\\x90\x82?U\xbb\xc6\xf1L\xef\x97?\x85~x}\x84\xa8r\xbf9\xa3\xc8\xc3\x95l\xcb?\x82Q\xc1F*\xaa\x92\xbfH\x06\x00d]\xf5T\xbf\x8f\xff\x95\x92\x1am\x8b?\x86m\xdb\xddR\xbc\x9c?\xec\xae%J\x02 \x81?\xd7\x9cm7\x98z\xc3\xbf\x7fC\xea\x88\xe0\x80\xa3\xbf\xdb\xc3N\r\xa8T\xa3\xbf\xf6\xbd\x0bO\xd4\n\xb5\xbf\xcb\x8b\x0f\x96T@v\xbf\xcf\x93\x90\x1cgge\xbf\xc5\xc1FYe\xb5\x95?\x9b\x8e\x83\x9c\x03J\x8a\xbf0}7\xa7\x00\\\xc7\xbf,\x00\xbd&\x1dr\x87\xbf|^A\x0b|0\xd6\xbf\xc1|o\xf9\xd9-\xc4\xbf\xb1V\x90\xa8q)\x92\xbf\x10\rJ\xd9\xe3\xf6\xba\xbf\xa5\xda\xb6Xb_\x97\xbf\x8a\x89\x84\xa7\xa3\x07\xac\xbf\xaf\\6\x90c\xc0\xe2?\x19\xf4J\xe1.,\xb8\xbf\xb8\xf2#<D\xd8\xac\xbf,\xf0\xa1a\t\xc1m\xbfS\xb4)\tG\'\xce\xbf\x13\xa2Y}\xc8\x15\xc3\xbf\x7f\x94\xe0F\xc1\x90\xcd\xbf4=\x19\xb9,9\xb8\xbf\x8c>\xa7C\xa3E\xd0\xbfA\x91\xa9S\r\xc4\xb1\xbf\x8d\x94kL\xc4\xa7\x86\xbf\xda\x99\xfb\xc6\x08\xda\xb4\xbf\x7f\xb9!\xeb\x83+|\xbf\xf1\xac\xf5\x97\x82:\xd2\xbf\xb6{r\xdb\xf0\xbc\x8d?}\x92#\x1e\xe1{\x97\xbff\xb4z.:\xc9\x81\xbfv\xdb\x8f\x92yg\xd1\xbf\x12\xea3\xe4Y\x0b\x9e?\x1bI\xedM_\x85d\xbfd\x84\xa1\xff9\xd7\x90?\x08e\xfa\\\xdb\xd9\x92\xbf\xbb6z\xd5E\x01{\xbf\xf3\x84)\xf4\xee\xf5\x0c?\xbe\xa9\x95\xd5\x809p?\xd9"8-\x1dy\xa3?\x8fM\xdf\xc3O\xce\xa2\xbfH?\xb0\xc6#Q^\xbf{\x17\xd1\xad\xf1Q\xb3\xbf>\'i!\xd5|\xca\xbf\x93D\xbc\x16\xce\x80\x8e\xbf:K\xe5\xa2\xdb\xec\xbb\xbf\xdf|\x8c\tCUu\xbfC\x01\x8e\x06\x10\x16\xb1?\x0f;\xb7\x97U\xc9U?\xa7\xb0\x1ftH/Q\xbf\x10\xf5q\xe7R$\xb1\xbfI\x0c\xcd\xd8c#\xa3?|"\xb8\x1dh[\x97\xbf\xb3\xe6=qTh\xc3\xbf\x1cAd\xbf\xa4O\xc4\xbf\x0c\xf0\xdd\xd8\x11Q\xa6\xbf\xd7k\x1d~!\x81\xb8\xbf\xdd\x8e\x07\xb6},\x8d?s\xca>\xb4\x0ea\x10?\xab<\x81\xec=6\xa9\xbf\xdc\xa1\x9f\xfa\xe7\xa3\xb0?|\xe0\xa3B\x86\xe6\x8b\xbfTe\x8b;\'\xf7\xc0\xbf\xd0\x1aU\x0e\x83\x14\x86?^\xa6\x1c\nG\xafb?\xb9!\xe3\x95\xe1\xfa\x92?\x00\x00\x00@\xf0\\a?\xe7\xab\xd2\x93V\x96y?\x00\x00\x00\xe0n\x1c\x87\xbf|m\x89_\xde\xa4u\xbf\xf2\x18;\xca\\\x06\x85?j\xa2%%\x8e\x9f\x85\xbf\x05N\xe5\xdao\xac\x80?0\x88\xa9\x8b\xca\xb0n?\x05\x89\xe6\xf4Z\x98A\xbfx\xa04w\x15F{\xbf|\x96\xb6\x9fP\xb4\x86?_\x9c\xcbt\xd2\xd5g?\x00\x00\x00`\xd7\xebp\xbf\x1c\x0b\x1d")L\x81?\x9459\xd5\x19\xd7y?\xb3\xcb\x05\xdf[\x83o\xbf\x00\x00\x00\xa0\xfc\xa8p\xbf\x98\x0e\xcb_\xc9\x82\x94?\x00\x00\x00\xa0S6w?\x97f\xa1I\x12\xa5\x91\xbf\xcc7\xee\x00\x8a\xbfy\xbfX \xd9\xc9\xce*-?\r\x83\xaa\x97\xbe\x12\x91?4\x14M\xc4\xf1\x8c\x9a?\x00\x00\x00\xc0\x94\xdbN?\x00\x00\x00\xe0\x80\xca@?\x95\x8a\r\xb1l#\x90\xbf\x00\x00\x00\xc0\xdfE{\xbf\x00\x00\x00\xc0<8\x8d?\xe2\xd7\x88u9\x9a\x82\xbf\x00\x00\x00`\x9d\nX\xbf\xb4\xd5F\x1b\x9d\x9c\x81?\x00\x00\x00\x80]\xbb\x93\xbf\x0f\x01\xa8\x89!\x82\x8c\xbf\x9f\xf8\xd9\xe0\x1d\xe3}\xbf2\xccl\x81\'#\x8f?\xb9\xdf^\xc9w\xa5v\xbf\x00\x00\x00 \xe3\x12_?\x1c\xa4\x90P.\x0b\x98?x3~\xc1\x10*;?\x00\x00\x00`\x08\x90\x89\xbf\x00\x00\x00@A)\x94\xbf8\xa9\x1f\x0b\x0fob?of\xd2\xd3\x9c7\x8f\xbf\x00\x00\x00\xe0\x1e\x9a^\xbf\xf1\xf6/\x9f\x96\x01J?\xe8A\xe06\xc5\xa8\x80?p\xc1?\x06l\x1cm\xbf\xa1\xce\xc3b-T\x87?c\xf8\x0c&\xc0\xa6\x82\xbff\xa7\x19\xf0\xe5\xc2\x9c\xbf\x00\x00\x00\xa0\xc4v\x89\xbfG\x9f\x13\xc9\xb0Mt\xbf\xfb\xfd3\x97\xa26\x7f?\xa6\x96\xbac\xbb\x88\x8b?|\x03\\x\xde\x94z?\xbf\xf4e\xac\xb3\xb9t?\x0f\xd7\x02}a\x03\x8c?\x00\x00\x00`9*u?\x11\xbb\xd1>\xd5\xa4u\xbf\x00\x00\x00\x80/lh?\x00\x00\x00 }\xe9\x84\xbf{\xbbr\x87\xd2\xc3o?\xce\xb7\xe6\xba\xf1\x04+\xbf[\x05\x88\x055E\x87?\x12\x8cy\xaan\xcc\x95\xbf\x8f\\\xe2?4xr?\x00\x00\x00@\xfe\xc8\x99?\xf4Q\x8fW:\xc2\x93?_a\x19\xe7\x9d\x03\x97\xbf\x00\x00\x00`me~?\x00\x00\x00\xa0~\x07\x90\xbf\x00\x00\x00\x80\xe5\xd3x?~\x93\x1a5\xee\x8al\xbf\x00\x00\x00@\x0frd?\x00\x00\x00\x80\x9f&w?{;~\xe0[\x18r\xbf2Ps0\x9a{\x83\xbf\x00\x00\x00 \xb4\x82\x84\xbf\x11,\x8a\rL\x97u?\x00\x00\x00 \x8e s?\xbe\x1c\x8c\xb1\xac\xbc[\xbfN\xf8"\xa8E\xba\x91?\x00\x00\x00 Ab|\xbf\x11od\x84\xa4\x18p?;\xe5\x99>-\xe7\x93\xbf\x00\x00\x00\xa02r\x8b?\x04\xf8\x02>\x1d\xa7m?\xcaH\xca\x91\xd7\x8fy?VT\x00\xc9v;q\xbf)\xd9\x86\t*\x83u\xbf\x97s\xe4\xd6E`i\xbf\x00\x00\x00\xa0\x8b\xa6|\xbff\xa8 \x11\xcd\xe2X\xbf\xc5\x001\x85i\x1e|\xbf\x00\x00\x00\x80\xc8\xe5y\xbf\xe0\xcb~Y-7i\xbfw,A\xb0\xf5\x8ct\xbf\xac\x9a\xac\xea\xbd\xbfW?\xa5\xd8\xe2\xe0\xf4\xee\x8f\xbf\x00\x00\x00\x001=k?\xad\x11S\x8c\x18\'o?\x00\x00\x00\xc0ItY?\xce\xe73\xd1\x0b#w?\x98\xca\xd8\xbc4\x97X?\xb2\x01\x89e^J\x8d?\xcd\xd8`\xcb1,|? j8\xbf\xc5\x03\x80\xbf\xc4}d\xe1\xc7\x82u?\x0e\xe4\xab\xfaT\x88\x85\xbf\xd6#+v\xe5\xc6\x86?\x00\xe6K\xf11\x03R?\x00\x00\x00\xa0\xcd\xf6q?\x81\xb1X\xf30bv?(Nk\xa4\xda\xb6b?,\xac\x1d\xf9\x1b\xb2~?\x00\x00\x00\x80E\x87\x8c\xbf\x0f1\x90Z\x14Y\x9c\xbf\x00\x00\x00\xa0\xef;a?\xa75`s\x10\xe2p\xbf\x8ba\xac\xe6\xeb\xf2\x92\xbf\xa5.\x7f`\x91\x82\x85\xbf\x93\x84K\x0e&\x9b{?\xc7d\xac\x12\xd2\x14j\xbf\xbd\xcf\xa2I\x0co\x95\xbf\x00\x00\x00\xe0h\rc?"*,\x80\xa1D|\xbf,p\x01@}\xb8p?\x00\x00\x00\xa0&4\x97?r1P\xee\xa0\xd4s\xbf\xee)\x11\x87w\x04{?p|{\xe0\x11D\x85?T\xbff\xef\xf2\xf4f?\xcaJ\xbb\xfa\xab\xc6\x96\xbf\xa3^\xa3k\xbdeO\xbfX,\xe4\x12\xa6\xc2S?\xf9o\x9b1\x0eE\x88\xbf\x00\x00\x00\xc0\xdd\xe8\x80\xbf\xbd\x03\xd9\xb8\xb6K\xea\xbe\xc6N\x96\xf0\r\xfb\x91\xbf\x00\x00\x00\xe0\xfe\xe9\x86\xbf\x00\x00\x00\x00\xd2\x01i\xbfh\xd7"\xd6\xaa\xe5\x8a?\xbbVc\x17\xc4\xe7\x96\xbfu\xabaw\xa2\xd9M\xbf\xeaE\xa2\x1e\xc8\xe0\x8a\xbf\xea\xa1\xd7\xdc\x89Q\x99?\xb1\xe2:\x99\x01,a?\x1a\xa3\xad\xa4\xc5c\x8e\xbf\x90\x11\xd5\xb7\x0ed\x86?\x9c\x9d9\x84`V\\\xbf\x00\x00\x00`b\x12\x89?\xa5t5A\xc0\xfe~\xbf\x82\x0f\xf6\x1d\xcf\xfe\x90\xbf\xee\x0e\x90\xf0\x03\x8e\x95?\xe0(\xde\xa0F:t?\x80\x8a\x16\xe46m\x81?\x97[\x80\x1b>g\r?\x00\x00\x00\x80\t\xfd{\xbfP\x1e\xf5\xfe\xea\xd0m?\x00\x00\x00@\x83\xd4p\xbf\x01%\x82\xa0\xd5\xd1U?j\x19T[\x1c\x82~\xbf\xab\xe7i\xfc}\x9b;?\xa9\x97\xcc\xec\x7f3\x8c\xbfk\x02\xfd;\xb0\x07y\xbf\xb1.\xcf\xf2C\xc2\x8b?\x00\x00\x00\x00W\x1d|?\xe4\xf2\xbd\xb6\x81\xcd\x8d\xbf\x1f(G\x7f\xbf\xbcv\xbf\x00\x00\x00\xa0\xf0\x00q?\x00\x00\x00@\xa4l\x7f?\x00\x00\x00`\x87\xa8}\xbf\xa3{UEXZl\xbf\xf5\xda\xe3?\xb4xz?\x00\x00\x00 \r\x96i?a\x95bct\xb8\x81?\x8c?[}Q\xa44\xbf\x00\x00\x00\x80\x11Q[\xbf\x17/\xd2\xe9\xd9W8?\x00\x00\x00\x809\xfeo?(@t4\xc0\xe4s?\x17\x0e\xe7\x119\x00z\xbf\x00\x00\x00\x80\x8a\x82\x93?\x13\x1ar\x1f\xeeDw\xbfZz\xe5\xfb\xad\xe5{?\xdb2l\x9b3\xb2h?@\x88\xdeb\xf0\x10\x89?\r\x08\xf2\x8f\xff\xbb\x80\xbf0\xc0\xf0l\xd2gl?\x00\xb2\xb1\r2\xacv\xbf`\xde?\x1bN\r\x8d?\x00\x00\x00\xa0j\x01\x86\xbf\x12\xfbG\x17v\xf7x\xbf\xa7\xecXT\xcd\xf5\x88?\x00\x00\x00@\x0b.\x80?\xa7\x19\x93=A)\x88?\x00\x00\x00\xe0\xdf\xaf\x84?\x00\x00\x00\xe0\xf7Oo\xbfj\x07J\xf5\xa6Eo\xbf\x00\x00\x00\xa0\xf1`\x82?\x00\x00\x00\xe0\xfeD\x83\xbf\x00\x00\x00\xe0\xb5\xd8\x8a?|x\xb3\x0c\xe7\x0e|?\x00\x00\x00@\xc8C\x86\xbf\x00\x00\x00`\nT\x87?\x00\x00\x00\xc0C\xeb\x82\xbf\x00\x00\x00\x00\x9d\x81\x92\xbf\xea\xfd\xd1\\r\t{\xbf\x00\x00\x00@\xbb\xe7\x9a?\x00\x00\x00\xa0\x8e!\x94?\xd7/\xaeV\xaag\x93?\x00\x00\x00 \xbc\x99b?\xc3OR\xf5\xa7-u\xbf\x00\x00\x00\x00a\xecn?\x00\x00\x00 \x80bx?\x00\x00\x00@\xc7h\x85\xbf\x00\x00\x00\x00\x1f^f\xbf\x00\x00\x00\xa0\xe1\x8dP?\x00\x00\x00 6\x87\xa0\xbfVX\n\xdf\xe0\xdb~\xbf\x00\x00\x00\x00X\xc1\x8e\xbf\x00\x00\x00\xa0\xc0Cu\xbf\x00\x00\x00\x80`\xcdc?\x00\x00\x00\xa0\xf1\xc0\x8c?\x00\x00\x00\xe0\x00es?EC\x1f\x7fP0\x95?\x00\x00\x00\xa0;4\x81\xbf\x00\x00\x00 V1p\xbf\x00\x00\x00\xc0\xa5,\x82\xbf\x00\x00\x00\x001\x0fo\xbf\x00\x00\x00\x00\xac\x03\x86?\x00\x00\x00 \xab\x96\x8a\xbf\x00\x00\x00\x00\x95\x9e\x82\xbfCQ\xfe\x17n\xad`\xbf\x00\x00\x00\x0056\x87\xbf\x00\x00\x00`\xfc$\x90\xbf\x00\x00\x00 \xb1\t\x7f?\x00\x00\x00\x80\r\xbd\x91\xbf\x00\x00\x00\xa0\xe0\xef\x96\xbf\x00\x00\x00\xe0\xd5Z\x19?\x00\x00\x00\x00\x80\xd0q?\x84\xc1\xe5\x1b\x9f\x93a\xbf\x00\x00\x00 \x80\x91W\xbf\x00\x00\x00\xa0]K\x8c\xbf\x00\x00\x00\xc0\xe9\xd2\x8d?\x00\x00\x00\x00\xdc$r\xbf\xfa\\\x116\x96\x99\x88\xbf\x00\x00\x00`\x9a\x7fq?\x00\x00\x00\xa0\xe1\x02"?\x93\x0c\xfa+EK4\xbf\x00\x00\x00\xe0gUf\xbf\x15\xa0\x1e\xd9E\xb8\x0b?b\x9a\xa4\xb4\x01\xd8\x92\xbf\x00\x00\x00\x00u\xfdk?\x00\x00\x00`y\xcfU\xbf#\xa9\xb3\xa5\xe1<\x97\xbf\x00\x00\x00\xc00L\x8a?\x00\x00\x00\x80\xd8\xc9l?\x00\x00\x00\x80\xfa\x9b\x8c?\x00\x00\x00\x00~\x8bD?\x00\x00\x00\x80udx?\x00\x00\x00\xc0\x05\xa0\x87\xbf\x00\x00\x00\xe0l\xbfM?\x00\x00\x00\x80]\xef`\xbf\x0b\xa7`1\x8b\xaa\x81\xbf\xe8\x00IzW\xfb\x92\xbf\x00\x00\x00\xc0^\x89\x8a\xbf\x00\x00\x00 \x87\xafe?\xe3\xf5\x9a\x1b>g\x85\xbf\x00\x00\x00\xe0\xff$\x93\xbf\x00\x00\x00\xe0b#r?\x00\x00\x00\xc0\xf0uO?\x00\x00\x00\xe0*\x83c?\x00\x00\x00`\x93lz?\x00\x00\x00`87q?\x00\x00\x00\xc0\xc6\x9fh\xbf\x00\x00\x00@<\x12\x81?\x00\x00\x00\xe0\xf5\xf1\x10\xbf\x00\x00\x00\x00%\xec\x9a\xbf\x00\x00\x00 \xe5\xeck\xbf\x00\x00\x00\xc0\xbe\x99!?\x00\x00\x00@\xc7\xf7Q?\x00\x00\x00 \xc4x\x8e\xbf$\xaf\xf0J\xe1.\x90?\xc9\xc3\x06\x8a\xd9\t~?\x00\x00\x00`\x1fo\x8b\xbfdV\xc6\xee-\xa4S\xbf\x00\x00\x00\x80^\r\x87\xbf\x00\x00\x00@\x82\xf7s\xbf-\xbf\x7f\x14\xbd\xear\xbf\x00\x00\x00\xa0\x0czh\xbf\x00\x00\x00 \xb0#d?\x00\x00\x00\xe0\xfez\x8b\xbf\rb\x10\xe0\xcc\x9c\x84\xbf\x00\x00\x00\xc0\x074\x7f?\x00\x00\x00 \xa9\x18{?\x10[\x97\xd7M\xdc\x8c?-Q\xf5\xcd\xd5y?\xbf\x01\xb7\xa3\xcf\xc6H\xc3?6bb\xfbV\xa0\x94?tRP\xcd\xb2\x82\xa8\xbfi\xa4\xf5\xa5\xf1zM\xbf\x9a\xc8F\x0c\xb8\x96\xb7\xbf\xe0m\x85\x1a\xfa\xad\xa3?d\x02ZTwu\xa1?\x0e:\xc0S\\\xc8\x97?s\xcbT\x1f\xa3\x0b\x84\xbfw\x15\\O\r}\xaa\xbfq\xef\x9f\x0e\x85\xe0\xa4?L\xeb\xca\x1f\x00\xda\x83?.\xd7\xbaNu=\x9b\xbf\xb5\xf3>\xc43\xbb\xd7\xbf\xb9\xf2\x8f\x13=4\x83?uqtI\x9eD\xb1\xbf\x8d\x8c\x87Ly]\xc3?\x1et\x1b:t\xcbn?g\xce"K\xa6\x8f\x91?0\x15J\xc4\xfcry\xbf\x1c\x1c)\xc5n/q?\x0f\x15$t\x18mt?Bs<S\x03\x83\x96?\xda\xb3\xa9\xdf\x1e\x16u?=\xdb\x07/9v\x92?\x80x\x18\x92\xd9\xe2|\xbf$\\\x93;\x00\xbd\x7f\xbf\xd8\xb7\xff\xfb\xfa\t\xc0?\x03v3\x91\x13N\x8f\xbf\xdd[\xdfI\xd1\x167?dg\x89n\'n\xc5\xbf\x9acDp\x05a\xa3?\xd8\x18v\'R2q?\xb9\xca-\xea$\xfb\xab\xbf\to\xc3\xe8\xf3\x19\x97?\x9fr\'\x17\x1c\xea\x7f\xbf~\xb0\xaf3\x8a\xe2\xc5\xbf\xcc\xd0m\xd1\x89Ps?\xad\x83\xc0\xe1\xb6\xfe\x83?\x86D(\x88ri~?B\xd0\x86\xd4(\x89q\xbf_\xd4\x0f)\x06$\x8c\xbf\xad\xb1\xc7\xa3$\x12{\xbf%\x92\x15\xdc\xc6Q\xb7?\xbe\xfb\x11~\x1a~\xcf\xbf\xd04\x8bY\x9dH\xa2?\xa0+\xaeI\xc0\x1b\xd1\xbf\xddP\xe5\x1bbA\xb3\xbf\xd7\xad\xb7\xe6\xd1\xe8\xa8?\x1b\xbd\x9f:|Q\xc2\xbfb\x15\x8a\xb5\x02\xf7g\xbfP\xd7\xaf1\xa7\x19\xc6?\xfdXy&p\x06\x87\xbf3\x8a\xe6\xa4f\x18\x86?\xe4\x16\xbd\x8dl\x17@\xbfW(\x11\x9db\x86\x90\xbf\x06\xfb]l\xf9\xb4\xbf\xbf\xa1+\xcf}\x10\x1c\xac\xbf\xd1\x05\xd1\x9c\x15H\xb9\xbfX\xce\tR\xe5\xb6w\xbf\xb5\xf8\xad\xf3\xbb\x15\xb2\xbf\xc1\x9e\xbc\x82\xb3\xb5P\xbf\xac\n\x8f\xa81d\xb1\xbf\x9fp\x96\t\xeb\xdc\xa4\xbfZ=a\x8dh\x90\xa7?\xff\xb6\x13t`\x03\x82\xbf\x9b\xd5\x91mE\xdf\xab?{\xd3#\x96\x10\xb4\xcf\xbf\xc5\xd05\xf1\x7f\xc3i\xbfg\xa4.\xb7y\xb3\x83?\xec\x92u^z|\xa3?\xd8.e\xd6\x07\xcdA?u)\xee\xed\xcb&r?8\xe8\xa6!\xbe\xc8\x8d??d:C\xbdq\x94\xbfM\xfc\xb0\xfc\x8e\xf5\x97?D{\xa8\xd2\xfe\x13m?\xb4Nn\x15Y\x90\xcd\xbf\xbc\x07f\n\xbd%\xb6\xbf\x059I\x99u\xdaX?\x1fp\x10\xf8v\x9a\xa2\xbf\x99\x9b:\xca\xf2\xf0r\xbf\x02\xa7\xa7\rd\xb1\xc4?0\xf6\xf2\xe0k\xdb\x9e\xbf\xe6V\x94\x8b\x03\xaaS?$L\xf2\x9d~\xfb\xa1?\x9d"\x87R\xf1a\x85?\xc3$\xfaT\x8c\xady\xbfH\xee\xcc\xa6\x84\xef\xac?jc\xa3$}\xb8\xd8\xbf`r"\x9b6\xfd\x82?\x06iT\x84E$\xd6?^\xd8\x07h\x0eu\x8c?\x97\xce\xba\x14\x98\x86n\xbf\xaf\xdao\xbc\xe8s\xa6\xbf\x90\xb8)a\x8c\x8b\xb0?\xceA\xb5Jaf\x90?sEwq\x05\xd0\x88?\xc1\x05a\xd9\xed\xda\xbd\xbf\xf9\xac"\xa1G\xf5T\xbf\x0fQ\xa3\xa8^\xc8\xcc\xbf\x04$\xb03\x9aAy\xbf\xf9<.\x8f\x00\x0e\x01\xc0$\xc8\xf2\xdf"\x17\x85\xbf\xc4\xf5\x07\xa5\xffx\xd3\xbf\xe1h\x94\xaf&f\xc8\xbf\tB\xe3\xc2g\xc9\xcb\xbf\xdf\xff8\xa4r\xc6\xc9\xbf3n\xf7\x90%\x1f\xb4\xbf\x8e\xd3\x97jB\t\xed\xbf\xcb\xa9;\x1a\rF\xca\xbf\x8e\xefrcp\x11\x01\xc0K\x967\xe3o+\xd2\xbf\xd5+"\x0c\xae\xe5\xc2\xbf\xefp\x81\x99\xd1\xfd\xe0\xbf\xd2%z/N\x1f\x88?\xd5\xf0^\xd4\xed\xcb\xbd\xbf\x10\x8f\xfc\xd7%o\x95\xbf+\x85\xa2\xb1\x8dl\xc1\xbf\xd6\xa0\xf9\x9d$\x0b\x90\xbf\xbbi\xfe[9\xd7\xb8\xbf\xeb\xab\x1d~\xe5h\xc2\xbf\xd1W4\xf5~\x83\xa0\xbfY\xef\xdc\xe2F\\\x90?\xe4\x02\xe3\xaf\xd7g\xb5\xbfzr\xdd\x1b\xc7\xe1\xa7\xbf^[\x0c\x18\'$\x91\xbf\xa5\x91\xf1\x8e\x89V\xea\xbf\x9bC\xcaib\xae\x92\xbfb\x80\xff\xeb{\xe5\xa1\xbf\xe0z\x0bo(\n\xc4?\x0b\xdd\\\xeb\xc3\x98\xc7\xbfX\xb1\x01\xcdD\x93z?_:\x96\xf7\xf3\xbd\xc9\xbf@@\xcb\xa3w\xb0\xcc\xbf\xbfT+\x90;\x11\xb5\xbfM\xd6R\xab\x9a\xfe\xc2\xbf\x81\xbe\x10\x8a\xc2W\x89?\x06\x0efJ\xa3\xc5\x8c\xbf\x1d\x8du\xda\xc7\xa2\xc8\xbf_O\x14\xe5\xd5\x00\xbc\xbf\xb2\xfb\xca\xbdG.\x8b?&/H1\xb6\x0c\x8a\xbf\xa2\xd0\xf9\x01\xf1A\xd6\xbf`\x9eR\x16\xe3N\x19\xc0mX\x88\x9dy\x12\x8a\xbf\xe1*N\xa9\xc3\'\xd5\xbft\xd4\xd13\xabA\xcb\xbf~F0\xb0\x14\xc9\xe8\xbf\xc9\x19\xcd\xbe\x08\xbc\xb2\xbf\x95\x00+8\xb1\x9c\xf2\xbfm=3O\xe5t\xa0\xbf\x89\xc6\xc0\x8dDh\x8d\xbf\x08\xc1\x1b\xea\x88\xb8\xa2?\x89\x81NFN%\x88\xbf\xbd\xef\x88\xad\xb5\xe6\xcd\xbf\xbc7\x04\xd5\x8c\xb4\xc5\xbf\xc0\xac=\xadB.\x00@\x87\xbe\xf9\xcc\n\xa5\x06\xc0\xd7fA\t#\x0ef\xbf\xbe\x1as\xaf\xf4\xc8\x00\xc0\xe4\x11\xcc\x92IW<?\xbeh.\xf8Xs\x02\xc0\xacR\xae\x14WP\xb2?\'\xf5t\xa7Om\x95\xbfq\xc5\x17}\xe1\xeb\x90\xbf\xd5\x9aL\xd0\xfad\x00\xc0\xb4\xf9V{\x85\x1f\xc3\xbfj\xf0\x05\xfb\xf2~\x91\xbfL\xcc\x97;x%\xb5\xbf\x82\x8eR6\x9d\xb1\xd1\xbfy\x83\x90\xa5\x9d\xac\x8e\xbfF\xa0w\xb9\x99\x08\x88\xbf\xe7\xdf\xa02\xe3\x03\x82\xbfb\xbf\xf0\x8f\x91\xc7\xbb\xbf.F\x7f\nYB\xbe?\x12\x12\xf1_\xef \x95\xbfrQ\xf3\x7f2\x04\xf3\xbfP\x00}\xadH-^?M^\xbaa\x10q>?t1i\xc7\x15\x98\xe8?\xf3buhk\x13\x90\xbf\xa0\x9b\x82\x95\x9cg\xd0\xbf\x83\xb5\xff\xbd\xa9\xfa\xaa?[\r\x93\xccu\x8b\x88\xbfT\x97\x9b\xa1\x07\xb5\xc5\xbfd\xaed\x87\x82\x90\xda\xbf\x167\xcb\xb6\xb8\x81\x86\xbf#\x80Tv\xdb\x0f\xc3\xbf\xbf\xd6xD2\x91\xbe\xbfs\xd8f\xb5zJ\xa5?4\xda\xa5;|]\xc0\xbf\xb7\xceT4\x14\x89\xb6\xbf\xf0\t7\xb2)\xb3\xa6\xbf\xb1\xab\xbe-#\x92\xac?\xe4{[\x94\xfc\x93\xd5?y\x97\n \x84R\x91\xbf\xc5\x07H\x1dh\x99\xb0\xbf\x1f\x02\xe6ho\xcb\x91\xbfZ\x8e\x00c\xd1s\xa7\xbf\xae\xf3\x05\xc8\xc7\x04\xae\xbf\xe5q\x82\xbe>\xa9\x87?\xc29+\xa7x\xca\x93?\xcaU\x8f\xb6\x9f\xeb\x81\xbf?\x10\xa5[\xfd;\xb9\xbf^\xa2\xd2\xef\x9cF\xb4\xbf\xcc\x16HG(\xa3\xbe\xbf\x1c\x05\xc7+\xbc\x03\x94\xbf\x1f\r\x88Q\xdb@\x9d\xbf\xfb\xea\x14\xcf\x11l\x11\xc0\xc8\x9a\x96\x86\xad \xbc\xbf\xed\xba\xcdl\x94\xde\x89\xbfYp6\xf2\xf0\x9e\xd4\xbf\n\t\x9a"R{\xa0?F\xb3\x04/\x88\x9f\xa6\xbf\x1d\xc5\'*~\xe7\xf1\xbfZ\xd0\x97 \xdc\xaa\xc0\xbf\x03\xc5d\xae\xbe\xb9q\xbfA`j\x93\x0b\xaa\xa1\xbf\xb1Eb\xa2\xea\x04w\xbfy\x1f\xbf+\x83q\x9c\xbf\x82\xadx\xe9\xa8\xffk\xbfVo]\x93L\x1a\xb3\xbf\xfd\x17\x92\xdb c\xd7\xbfTP\x8a\x1a\x15\x7f\xad\xbf\xb4$\xa2xW)\x82?)\xed\x1a\x18\n\xfbu\xbf-hy*\xd2\xc1;\xc0VP\xde\x1e\\0\x85\xbf\xec\x00{\x18\xc4Eg?N\xd6\x95d\\\xf3\xf5\xbfT\x9a\xbf\xe8\x95\x82\xc5\xbfd)\x9f\x1f(A\xa5\xbf{\xe8\xe7O\xff\xcf\xc2\xbf\x19\xa5)I \x9a\x9e?\xb7\xd1}\xd6`"\xcc\xbf\xf8\x97\xd4\x8b\x0c*\xc2\xbf4\xb4\xd2\xd3]S\xa1\xbf\r\x86\xe5\xbfJv\x8b\xbf\xd5\x98Z\xc4\xcdM\xb4\xbf\xbe%*\xb5Q\xec\xa8\xbf\x81R\xba\xc4\xf9\xea_\xbf\xdb-\xd3W\xd6\xf9t?\x80\xc4\xe8\x90/\x17\xc2\xbfz~\xee\xac7\xaf\xb2?\x08\xba\x03\x0e(}\xa4\xbf\x1e\xba\x95\x16\x87\xc3\xbe\xbf\x84Z\xf5\xac\xe3\xeb\xb1\xbf)Ck \xb71\xb3\xbf\x18\xebM@\xd1C\xc1\xbfK\xfe\x00\xd3Nf\xc2\xbf[\x05\x86\xb3\x04p\xa1\xbf\xd8\xa8\x8b\xb3`\x9b`?E\xa4q<d\xf1\x06\xc0\x98S#\x05\xdeD\xf8\xbf\x84\xb4i8i\x98\xc2\xbfc\xb9\x8b\xf5FV\xc4\xbf\xcdyO\\\xfb\x01\xb0\xbf\xd8NLE9\xfc\xc7\xbf\xcdxc\xa3x\xb5\x83\xbf\xa7\xfd\xa5r)\xa1\xa3\xbf\x03\xdd\'\x17\xa9\xf8\x91\xbf&\xf0t\xdd\x99\'\xa9?\xc9\xf8\x89\x9do\xd7\x94\xbfK\xc10#(?\xbd\xbfi%$\x95\xcbi\x88\xbf\xc1w5\xc21\x05\xb1\xbf\x9c\x0b8\xc0\x0c3\xda\xbf\xd6\x97\'\xe8\xfc\xd4\x82?aI\x0bJ\xa7\xa0\x9f\xbf\t8\xa1\x00u\x99\xda\xbfkU\x00TA\xf8w\xbf\xa7:\r@\xc2\x1d\x93\xbfV\x88\x1b\xd1_G\xb1\xbf0\xaef\xe8\x92\x83\xfb\xbf\x19\xae\xa6\xe2B\xcd\x97\xbf\xde9\x01\x93\x1c\xfds\xbf\xbd\x9f\t\x8f\x8f:?\xc0/M\xb8\xf5\r\xc4\xc9\xbf\xc4g\x8b\xd0\xdfq{\xbf\xe4\x02\xc3y[\'\xb2\xbf\x92\xea0\xa7\xc1\x10}?wn\xb4\x9e\xfcu\xa9\xbf\x8f\x8a\xb5@\x9etv?\x08\xf1a\x8c\x01\x8aY\xbfO\xc3\xd2\xee\x83\xdf\x9a\xbfX|<\x13\xef\xc2\x8f?\xca\x81\xaa\xa7f\x88V?Q\xdd\x18\xd5P\xa8\x05\xc0\x14\xac\r\x8a9\xa4\xb9\xbfD\x0fB"\x18\xcd\xaa\xbf\xe4[E\xd1\x91\xd9\xcb?}\xf5\xc5\x7f\xe8\xc8\xaa\xbf<\x98\x1c"\x8bI\x91\xbf\x90}\xa3\x0e\x1f\xf6\x85\xbf\xa0\xc4y\x05T\xa4\xf5\xbfV\xca\x95\xcc5Z\x94\xbf3\xf8HU=6\xbd\xbf\x99\x9b\x95\xa6\xa5t\xb0\xbf2\x19D+\xdd\xd1\x91\xbf\x81\xfc\x83\xcc$)\xd0\xbf\x03\x9e\x82\\[b\x84\xbf\xc21\x984\xaf\x06\xf4\xbf\xef\x87<\xceVMj\xbf\xbd\xca\xf4\xbc\xb6g\xb3\xbf\'\xff\xa0\x7f\x1c.\xcd\xbf\x95\x1e8\x87XG\xc6\xbf\xf3\xd6&)\x88K\xcf\xbfe,\x87\x18y\'\xa0\xbf?\xea\x07e\'\xa9\xd3\xbfx\\\r\xe8m\x1d\xca\xbfhh{\xda\xce\x94\xf0\xbf\x0b$U\xde\'@\xd2\xbf\x1c\xed\x10A\xcf\x08\xb4\xbf\x02\x1b\xf8\xee\xf8\xc3\xd8\xbfE9\x84%\xdb\x08\xad\xbf.x;\x90p\x99\xd3\xbf\x80\xf9\x0e\xaf\xa8\xc9\x80\xbf\xb5\x95\xff\x11;\xc0\xc0\xbfL\xca\xef\x9fU\x83\x89\xbf\x87\x95\xa1\x83\x8d\x04\xb1\xbf\x0b\x1f\xaf`o\x98\xc8\xbf\xf7\x86|\xff\xcd&\xa4\xbf+Q\xdb\xa5\xc2+\x9b\xbf\xb0\xebq\xccS\x8e\xb0\xbfn\xee\xa7\x86y\xccD?\xed_\x99f\xb7?\x96\xbf\xf1\xda\x84twr\xb8\xbf\x0bUW\xd9\xdd;>\xbfe\xdaHT\xa9\x14\x80\xbf\x04\xe7]>\x08\xeb\xe1\xbf\x87\xdd\x0c7\x8cn\xbb?&\xf5\xf5p\x90c\x9b\xbf\xad\x8d\x0f\xb3k\x9b\xcb\xbfj\xe8h\xec\xe0}\xd3\xbf\xb6\x9f\xda\x96\x80\xed\xaa\xbf\xf7\x7f\xcc|\xbeU\xdb\xbf\x85d\xac\x1eN~z\xbff\x1fM\xc6\x1a\x8d\x80\xbf\xd3\xfc\xb6z\xf5\xda\xba\xbf\xd5\xe1\xd0\x97\xb5\x1b\xa8\xbf\x7fy\x92Y-\xfay\xbfD"f\x86p&i\xbf\xb9X"\xe5*\xfd\xd0\xbf_}V\x92\x8a\xdf\x15\xc03\x8aW \xac\xf1\xa7?\x0b\x18\xadU\x96T\xc7\xbf8\xd0\xfeg\xd8a\xb8\xbf\xd6\xdc\x15\xec*\xa9\xd7\xbf\x05\xa4\x89\x1b6\xa7\xa1?\x96\x07\x95\nF\x08\xe5\xbfz\xa4l~#\x14\xc0\xbf\xd2^D\xe3q\xab\x9f\xbfx\xe0\x1cv\xf8\x98\xc7\xbf4\xad@\xcc\r\x1c\xbf\xbf\xbd\xbd\xec\x9eJ2\xd8\xbf9\x8fH\xa8$\xc3\xb0\xbf\xe8<P69\xcc\xf0?\xfc\x1f\xf1\xb0\xc6\x92\xf7\xbfM\xc6\x17\xf1\x98v\x8f\xbfL\x04<(\xd0,\xf6\xbf\xf4,YU\xfb\x89\x91\xbf\xe4\xc9\x99\x85\xfa\x99\xf5\xbf\xf2t\xc7\x9d\xf3\xf9\xb0\xbf\xd6[_5k\xfe\xbc\xbf\xf1\x0fXO\xc8q\x96\xbf\xe3\x93<>\xb6\xc5\xfb\xbfZ\x0e\x90\xeb2|\xcf\xbfEGjA\xd4*\x86\xbf\x95\x1e\xab\xe2\x08\xb1\x8b\xbf\x08\x94\xe0jM\x08\xc5\xbf\x12,1eR\xec=\xbfA\xa3\xa27|o\x93\xbf\xd4\x15$j\xddu\xa5\xbf\x9f\x1bUox\xee\xc7\xbf\x13\xeb\x93\xf8&Q\x92\xbf\xfa=8\n\xa4\xb6\x98\xbf\xe2\x89)N\xec\xa7\xd3\xbf\x14q\x84`\xa9y\x9b?\x8e\xed\xedh\x05|\x8c\xbfe\xa6<\x8e\xe1\x15\xd4?\xc4\xed\xe9\xc8N\x03\x95\xbf&\xda\x90N\xf0\xa7\xc1\xbf\x91f2\x1d:R\x9f\xbf9\xd7\xdb\xc3\x04\x9c\x81\xbf\x10\xc3\xc4\xac\x90\xae\xb7\xbf\xfa\xbddV\x1cF\xd4\xbfp\xee\x19\x7f\xb0v~?\xaa \xc5\xa8\xcb)\xcd\xbf\xee\x7f\x9c\xdf\x05\x85\xbf\xbf\xea\xd1\x91\xd6)\xae\xb8\xbf\xf4\x98\xca>\x1c\x1d\xe2\xbf}s\x96x\xbe\r\xa1\xbfHn\xe2\x0bG\x15\x9c\xbf\x17/\xd7_a\r\xb5\xbf\xed6\x9eg\xfd\xa3\xd4\xbfI\x83W\x82K\xb1\x93\xbf?\x94\xf7b\xd2\xc4\xc4\xbfN\x85~\xb9j\x9dd?\xa4\xb1\xac\x81\x98\xe1\x80?(Rv\xef\xb4ow\xbf9\xce\xd0\xe7\x18\xf2\x8f?}0\xc8\xc9\xab\x97D?#\x82\x9e\\\x01k\x85?x\xff\x03?[c5\xbf\x8c\xb6L`g\xf3\x81?\xe1])\xb8\x8a3u\xbf\x1eY\xf3US[\x86?\x8cQ\xca\xc6\xf0\xc0F?\xfb\xa2\x03J\x11\xe0N?;h3\x88M\x98\x85?Za\xca\xa4\xd8D\x89\xbf\xf5\xaf\xa7\xf5[\xfdw\xbf\x11}tG:v\xa4\xbf;\xf3]\x8f\xa6\xd9}?\xca\x0b\xf6\xa8l\xb0~\xbf\xc4h\xf3:7\xe5\xa9?\x8b\xec\x06nb\xdco?\xa4\x1d1\x1e\xf1\n\x92?a\x02\xfbj\x0f\xadg?\x12q\x10\xb2\'+\x85?X? \xf1yJG?a\xd4\xc9\x05\x01\xf4y\xbf\xf2\xab\xc5\x89H\xb4[?\x7fAs\xc8\xcb\x8dd\xbf\x08\xf0\xaa\'\xf2\x95x?\xf3\xf0ze \xd9\x91? \x1d\x97A\xc4\x94\x89?\xae\x82\x98#\xc0\xe4\x8e\xbfO\xefd\xab\xd9p\x85?\x15\xed28\xc9~t\xbf-5p\x9d\xaao\x8a\xbf\t,70\xc1a|\xbft\xf7b\xdb\xce\xcd\x97?\xd5\x83[\xf1\xfa\x1f\x90?\x85\xe3E\xc9\xdc\xecF?\xfc$c\x9f\xb5\xed\x9b\xbf\xefy\xa7S\x98`f?\xd9\xb5~\xd4K \x87?]\x9b\xda|Kj\x92?ux\x96IJ\x98\xa1\xbf\xa6\xd6udW7\x94\xbf\x00\x00\x00\x80\xb3\xe5V\xbf[\x02N\x84\xb1\x9a\xa1\xbf\xfc\xa7\x9e\x13\x85\r\x87\xbf\xa2z\xb5\xa7\xb3\x08h\xbf\xda\xe8\xf2\x90\xad\xaah?#\x8ez\xad\xeap\x87?\x8d\x97\x00p\xe4\xe5\x84\xbf-\x93p%;\x99\x85?\xab$\x19\x1f\xf7/r?qN\x02\xaf\xe4\xaeu?\x00\x00\x00\xe0H\xc2f?\xbf\x08u\xcf\x14\x93\x80\xbfP\xd8\x04[N\xe9X\xbf2UPX8<V\xbf}\x0e2\xe1\xb8\x03\x85?H\x17\xe1Sii\x8e?\xacE9n\x89\x17_\xbfo\x95Bd\x07\xc6s\xbf $\xbdC\xd0\xa8\x9f\xbf\x1c\x95\xf0\xb6\x8aG\x80?\xe2NW\xc2\xd4"w?h9\x83\x85%\xb5c?G\x0c\x8d}]au\xbf\xa9\\\x0e\x91\xd8Gt?\xfd\xa0\xd0O\xce\xc2w?n\xf0K\x02\x8fD\x86?\x00\x00\x00 ;\xedJ?\xe6\xdb\xbc\xec\x0fh\x88\xbf\x10\x8e\x1b5\x08\x82m\xbf\xfa\xb0z\xfd\xfc/h\xbf\x00\x00\x00\x80q\x0c\xf4\xbe\x16\x1d\x01j\xfa\xbcy\xbf\x8d\x82E\x07\xe3\xb9d?\xd7\xf36\x92E\xe5u?\x00\x00\x00\x00\x8f\xdey?\xa2\xc0]\x9e\xd5\x8a\x93?\x96\x15\x0eJ\xb7\xf7z\xbf\x00\x00\x00@\xbf\x81O?g\xff\x1a\x07<]g?\xa6n\x93\xcbq.}\xbf\xc3\\a%\x1bS\xa8\xbf\x03D\x03a\x84\xef\x86?\x00\x00\x00 q(y?~\xc3\x11uV\xe8\x90?\x81\xfaZL\x96\x08}?fv\\\x80\x9c)\x96?\xa6u\xcd\xe9\xec%\x82?\x83\xe8\xf0\xb29\xe1\x86?mt\xc6\xe7\x0f\xa1\x93\xbf@\xe5\xae\xcbO\xd4\xca?\xeb{\xf5\xeau#\x86?[\xe9\xa1\x1c\xdb\xac\x8f\xbf\xf6\xa3>\xb33\x9dj?\xc7\x9c\xb3h\x0b\xc2\xb0?\x00\x00\x00\x00\x14\x18z\xbf\x8d\xa1\xfb+\x18wR?\x00\x00\x00\x80\x92\x07P\xbf\x00\x00\x00\xe0\x16Ln\xbf\xb6\xce\xdeDw>q?\x00\x00\x00`L\xe2S?\x1a=Z\xe6C\xe2\x99?\x00\x00\x00@\x1d\xe8o\xbf\x84\xf5L\xa3\x12Hg\xbf$k\xdc\xd4x\xdeX\xbf\xfb8\xbf\xbd\x97\x89\x84?\xb2\x91t:#U\x8e?}\xe0\x92\xe8\x9f\xe1n?\xa1\xe4\x13jE\xf2\x82\xbf}O\x16\xb15\x84\x85\xbf\xe3\x0e\xf6E\xfavk\xbf\x1a\xd4\xb6\xed\x92\xf1h?\x00\x00\x00`\xb4a\x85?\x00\x00\x00\xc0\xebrn?\x00\x00\x00`\x159\x8e?Q\xb9\x16Q\x11\xdc\x85?\x00\x00\x00@\x1b\x94\x7f?}\x0e\xd4\xf3\x13\x84\x8c?\x00\x00\x00\xc0\x8dU\x80\xbf\x00\x00\x00\xa0\xb8;u\xbfc\xffK\xf5\xb9\xf4\x8c?,\xeb\x8c4\xb4&\x87?\xa6\xbc\x1e\xa2",\x92\xbf\x17a\xf5\xe0\xb0_\x8c\xbf5}c\xe7\x8c\xbe\x8b?\x00\x00\x00\xe0\xcb\x98\x91\xbf\xc4\xf4\xeb\xe4&\xf03\xbf\x00\x00\x00\xa0d\x10\x88?\x00\x00\x00\xa0\x12lw?\x00\x00\x00\xa0\xe5f\x87?K\xac\xda\x97\xe5Np?\x00\x00\x00\xe0\xd5\x98\x81\xbf\xb9D\xd9\x94R"o?\xb9C\x89\x86\x07\x06g?\x9e\x14\xcaoM\xd1l?F7O\xa0iQ)\xbfy\xaa\xac\xcf\x02.B?\x00\x00\x00`\xab\xdfE\xbf\x01\xf9\xb5\xafK\x8d}?\x00\x00\x00\xc0\xca\x98i?\x00\x00\x00 L\xd7\x82?\x00\x00\x00 \xe5\xea\x10?.\xcc\x13\xf2\xb9\x8cu?\x00\x00\x00\xa0\xc6\n\x83\xbfV\xf9\xd8\x9b\xf4\xcc\x89\xbf.\x17i\xe3\xe4\x9fr?\x19\xc7C\xc7Y\x93\x8e\xbfw\xa5\xaa\xf73\x16\x88?k\xdd\xbf\x01\xf6Dr\xbf\x00\x00\x00\xa0 \x05r? Ld\xcd[|{\xbf\x00\x00\x00\x00\xbc\x01\x87\xbf\xe3u\xfc\xe54\xde\x82\xbf\x00\x00\x00`P\x9c\x90\xbfF\xa8\xb8\xfa1%\x82\xbf)\xbd\x1f#\x9f\x83\x93\xbfF \x06 \xe99L\xbf\x00\x00\x00`9\x1d\x82?\x00\x00\x00\xa0\xbf\x1bv\xbf\x00\x00\x00 1<\x8d?\x00\x00\x00\x80\xa46a?\xc7\xd8\x7f\x0f\x93\x04\x8b\xbf\x00\x00\x00\xe0\xc7\x15\x85\xbfc\xcc\x9b~\xc8\xac\x88\xbf\x9b\x0e-\xb6\xa5\x86\x91\xbf\x00\x00\x00 \xf4Hy\xbf\xae\xa1K(\xb3\x1bx\xbf\x00\x00\x00@\xb1or?\x9d\xc6\x8ae5\xe4\x81?o\xf3\x16F5vw\xbf\x00\x00\x00\xe0\x8e.l?\x00\x00\x00\x80\xfc]}?\x00\x00\x00\x00\xbe\x07q?`x\x80M\xa9\x80P\xbf\x00\x00\x00\xa0[y{\xbf\x00\x00\x00\xe0x\xd0\x86?\x00\x00\x00`\x8d\x0c\x82\xbfUF\x17\xd5n\x1f\x84\xbf\x00\x00\x00\xe0\xa4\xc8\x91?\x17\x1d\x11W\x12\x85\x80\xbf\x00\x00\x00\xe0O\x06\x84\xbf\xd5g\x10\x02X\x05q?\x00\x00\x00\xa0\xb2\xe3H?\x00\x00\x00\x00]\xa2/?5\x8a>V\x15\xb0o\xbf\xc5\x83\xbb\x96\x94h\x84?kC?\xa8\xf25H?\x00\x00\x00\x00\xa74\x99\xbf\xdf:\xa8e\x81\xab\x85?\x00\x00\x00\xc0\x13\xc1`\xbf\x08r\x9a^\x8b\x83w\xbf\xdd\xc5+(}\xcdu?\x00\x00\x00\xa0\x93\x0b\x94\xbf\x00\x00\x00\x00\x17ri?\x11!c\x8d\x0f\xb3i?\x00\x00\x00\xe0\xde\xf4f?~\xc1\x15\x01~kq\xbf\xa1\xe8\x9d\xbe\xfc\xd6\xbd\xbf;a\x12k\x9b\x9f\x85\xbf\x18H\xc5UK\xe7\xd1\xbf\xac\'5\xae\xa3\xd7~\xbf\xc9x\xe7g\xbfm\xd2\xbf\xa9\x14\xfc.\xae\x8a\x9e\xbf\xe7RZ\xc3\x16k\xdd\xbf\xb6zj\xb9.4\xe1\xbf\x06\x0e\xb8\x7f\xe2\xcd\xd2\xbf\xed-\xf8y\xd3\xa6\xde\xbf\xb5%\xf8G\x18\xa1\xf4\xbfn\xb8f-U\xee\x90\xbf8`\xb8uZC\x01\xc0+\xd7\xfc\x80\xcc\x03\xb4\xbf\xa4\x91\xc5\x0f\xf4\n\x93?5\xf0ntq\xe4\xa5\xbf\xc4\xe9(\x7f\xa0\xd1\xd1\xbf1\xe2\x11\xdbG3\xa0\xbf\x88c\x917\xbdc\xb8\xbf\xfd\x02\xb8gi\xc7\xa2\xbf\xea\x93\xe9\xe7\x0e\xeb\xc3\xbfV\x1e\xdb)#K\x84\xbf|\xa8i!\xdb\x1a\xb3\xbf>\xa0X\xac\xb8\xf6\xac\xbfR\xb7\x06\x81\x87\xc3\xe6\xbf\x87W\x19\xf0\xe0\xfc\xec\xbf\xbf\xec\x1b\xf8\xd4\xee\xfb\xbfSJJ\xd8\r\xe9\xe6\xbf9\xc5\xad\x952\xc7\xc0\xbff\xc7\xca\xe0~?*?\xcbN\xd7\x18\xff[\x97\xbf}\t5\xe5\xa8[\x8a?\xef\xac0\xb7sr\xcd\xbf\xd6\xe2V\x04Z\xf7\xc9\xbf;\'d5\x1b9\x82\xbfl\x1cW\x17\x8al\xd7\xbf\xa1\\l\x0bl\x94\xb5\xbfR\xd3\xe9\x9eY\xda\x9d\xbf[0\xc7\xa9\x18\xd6\x92?\x9bf\xdf\xf9}\x11\xf3\xbfr~\xce\x05\x13+\xad\xbf \x99\xa2t\x8c\xb1\x05\xc0\xdcf\xf9\xe5\xbbF\xb9\xbf4w\xff{O\xb7\xa5\xbf\x18\xe9\x10\xf2+\x97\xbb\xbf\x1b\x82\x07h@u\xb2?\xf6S\x87\xdb\x7f\xb3\xca\xbf\xeb\xedo\xa1v+\xda\xbf:\xd5I\xe7ig\xed\xbf\x87RF\x97\xa8<\xd5\xbf\x97\x07<"\xb5\x91\xe2\xbfJ\xcad\xfcS;\xf4\xbf\n\x85ba\xaa\'\xd4\xbf*/ea\xed@\xe2\xbfX\x8f\xdc\x1e$q\x93\xbf\x01\xa0q=k\xaf\xc8?\xa0\x16\t#\x87d\xc1\xbf\xbd\xdd\x13\xf1l\xec\xb2\xbf&\xa0R\xd9R)\xca\xbf\xef=n\xc6\xed\xfe\xd6\xbf\\\xe2\xa3\x02`\x0f\xdd\xbf[\xebP\xccC\xb5\xb0\xbf\xcbJE.\'N\xce\xbf\x1a\xac\x18\x11V\xea\x83\xbf7//\xe9\tF\xc3\xbf\xdbP\xa0\x12pj\xc9\xbf\xd2.\xcaG\xc6\xe8\x04\xc0\x19l\xc1\xd5Tc\xb1\xbf\x0e\x12~K\x10\xe5\xed\xbf\xca\xb6\xff#)m\x97?\xa1t\xb3@\x87\xf4\xaa\xbf\x98\x1c\x82\xbd$*\xac\xbf\xdc\xc2\xa7\xb3I\xec\xc6\xbf\x10(\xfa\xd7\xac\x95\x93\xbf\xa95lk/*|\xbf\x0e\x80\xfb\xf2\x11#\x96\xbf\xdb\x0c\x07\xd9\xb8\xcf\xd2\xbf\xf6\x08\x08\xaax\xbc\xbe\xbf\x8fy\x94<p\xc1\x7f\xbf\xfd-\xf2\x03N\xa5\xd3\xbf\x0c!\xff_zs\xc5\xbf^\xcc\xa8\xb0Q#\x92\xbf\x987\xc7J\x18\x1c\xc7\xbf\xc0\xac\xeb\xa8\x013\x99\xbf\x7fe\x9c\xb9\x91\xcf\xc8?\xd2\xd1b&\xf51\xc3\xbf\xac\xd1=\xedWO\x8e\xbfe\xde\x86\xccD-\xc5\xbf\'\xf3\xb6\xd6\x90a\xc3\xbf\xd7\xb3\xef\x13v\xeb\x8e\xbf\xa6\xd3Mwq}\xb4\xbf\xf6\xe0y\x0fa\x10\xd8\xbfx\xc7\xaeld\xa2\xc1\xbf\xba\xc9\x9c\xe2S\xa2\xac?\xb5A\xae7\x1bz\xb9\xbf\xb0i \xd5N\xc5\x95\xbf\xa6\xe5\xbf\xe2=K\x9e\xbf\x02\x90Cp^\xe7\xab?Y\\\xdd\x8a\xf8\x84}\xbf\xe7\xb0X\xdf\x1f\xe2\xd6\xbf3;\x9f\xec\xff\x84\x92\xbf\xc3\xf3-8\x967:?\xb8\xeb\xbd!\r\x17\xc6?\xf1\x86\x18\x94\xe6>y\xbf)2\xeb\x13Z_\xe6\xbfh5\x9c\x909\x92\x95\xbf\xaaWg\xfa\x03\xaf\xb8\xbfe\xb4TJWo\xbe\xbf\xc1\xa8\x01[F\xcb\xbe\xbf\xa9\xf8=\xb8G\xa8\xb9\xbf[\xcb\xe1\x8b\xc4H\x8d\xbfT\x84\xcb\xdf\xcf\xb4\xd1\xbf\xae\x17\xe0\x10\x1a|\x91\xbf\x1d\x81\x98\x0c\xceH\xe7\xbf\xf01\xb3\xb2d\xc7\xb1?\xc0\xcd\x1e\x8bB\xc6\x88?f\x94\xe8\xa9\xb3\x8c\xcd\xbfH\x9f\x11l\x8a\xa2\xa5\xbf\xd1\\:\xea\x17B\xbe?\x12\xd8Z#5\x12\x93\xbf\xd5A\xd4\xe3y7\xb8\xbf8i2e\xa4\x04\x84\xbf\xbf\x8dn\xf16Y\x99\xbfE\'\x00\xcc\xff\xd4\x91\xbf\xae\xb0\xc5\xd6\rm\x97\xbf\x02Z\x92t\t\x1bs\xbf\xac\x85\x9a\xbc\x98\x98\x90?\n"\xaej\x05\xf2T\xbfe\x1f\xc8J\x07\xea{\xbf\x82\xf1\x16,\x10w\xc6?y\xc9&\xcf\x81i\x94?3T\x19\x9cJ\xab\x8f\xbfO[\xdf\x9d\xb5\x8a\x91\xbf\xad\x973\x80\xf3\xd9\xbb\xbf\xc9\xe6\xc5\'\xc2\x8em\xbf\xec.(\x08\xdd\x89\xb5?\xed\xe5,hc$\xc0\xbf\xc2R\xfbJb\x1c\x96\xbfH\xa40\x13\xe6\x83\xb5?\n\x951\xbb\x10\xcb`\xbf\x99>\x98\x07\xa9X\x89?\x11\xa0\xe8F%X\x89?^\x81\xf6\xd4\xf4\x06\xa2\xbfA/R\xb2\xfa\x9c\x90\xbf,TK\x0bdTs\xbfj\x86ei\xac0\x93\xbf\x9d\x9d)\xbf\x89\xb7\xb8\xbf\xfa\xd6\x966\x01&\xb8\xbf\xd6\x88\x0e\xca\xaa\xb3\xb2\xbf\x1d\xc5~\x849\xb7\x94\xbf\xbe\x83u\xb9\xe6\x93\xc3\xbf\xc5\xc8\xfcj\xac\t\xe4\xbf\xbd\xa8\x13/\x04f\xda\xbf\xb3\x85\xb0\xfd\xa2\x82\x86\xbf\xa6\xacP>\x18\x9c|\xbf\xd5Kw\x8a\xea\x0c\xb2\xbf\x03\xae\xd7y(\x95\xa4\xbf\x1akm\xd6\xd0\xed\xc9\xbf\x12u\xa5\x9d\xa9D\xb2\xbf\xa2\x9b\x12\xbb\x9c\x0b\xb0\xbf\xaa\xfc\xbc\xd3A\x9d\xec\xbf4\xab\xdf|\xa0\xe6\x1e?7}l\x91\xe9,~\xbf\x0f\xb0\xe4\xe9\xf6\xb2\x86?]\x8b\x07\xcb\xef\x05\x96\xbf\x90X\xc0r\xe5dp\xbf\x0e"m)\xaf\xd2\x99\xbfs\x9dT\xd3&_\x8c?\xf1*0\xc0\x12K\xcb\xbfO\xde\xd3B\xd5Z\xe9\xbfbr\xaa{jMy\xbfc\xff@Ka=i\xbfV`c\x95\x9d\x12\xa5\xbf\x94\xf4}p\xf3\x0f\x92\xbf\xeb\xf4\x0eB\xfc\xe8]\xbf\xb89\x88\xe1\xe7\xc8\x91\xbfso\xfap\xa7\xcd\xb1?`\xfe\x1f\x0f\xb6\xf9\xb8\xbf\tU\x19\x7f\xc0tW?\xd4\x0b\xce\xfdB\x7f\xb0?Y\xb1m%b\xcd\xc8\xbf\xd7SL|\x0cp\x83\xbf\x83\xa8\x14\xc6\x0e\x9f\xc3\xbf\x12/\xe96\rv\x95\xbfF\x92\x85\xd0\xbe\x08\xb1\xbf\xef\xfay0\x03Y\x83\xbf=*&.\xc3\x9aW?,s\'\xb61,\xb3\xbf\xea\xc1=\xa4\x87d\xa9\xbf\xb7\x86\xe2\xbdH\xcb\x97\xbf;\xf1<\xf0Te\xc2\xbf\x1f\xfd\xffA\xc2\xe3\xc8?\xd0P\xe0\x91\xa7\x94\x93?\x8a\xb9\x93\xce\xc9\xfev?H\x009\x12\xd0\x8f\x8e\xbf\x1cmH\x10U\x06\x97\xbfIz\xe2\xbcF\xd4\xb0\xbf\x9b}9\xdf\xfa\xd3\xb8?\xb7h[\xf9\xc5\xa8s\xbf3vTE\xa04\xd7\xbft6\xf1\x84.F>\xbf^\xad-iR\xa6\xf2\xbfM0lD];\xcf\xbf\x16\xd4<\x97\x14-l\xbfd\xfe\xcc.!m\xda\xbf\x15\xcd\xf4584|\xbfl\xd4\x7fU> \xa6\xbf\x04\xeas_\xb5\xaf\xb1\xbfB\x92\x81\xff{I\x9a\xbf\xa1\x9c\xccjx+\xc4\xbf\x9eT\xb1p.\x12\x94\xbf\xf7\x11\x17\xab\xf8V\xdd\xbf\nd \xa8\x1f\xfe\xb9\xbf\x15\xed*\x9bn2\xcb\xbf\xf0\xb3\xc9\xa4\x80\x82\xde\xbf\xf1{Ip\xf8w\xcd\xbf\x87\xfe\xc3\xdf\x83\xe6\xa3\xbf\xf3\xefi\xdf\xcbm\xc1\xbfF\x1d\xd2m\xeec\xc3\xbf\xe2\x85\xfbN\xachs\xbf/\x0f\xb1\xed\x9fZ\x9a\xbf\x7f\\\xbb,\xd3J~\xbf\xb7\x90t\xd9\x9a\xcc\x86\xbf\xf1\xa9\x885}\xfc\xb2\xbf\xb2\xd0\x87\xe3\xe5{\x9f\xbf\x9c\xc2m\xbd\xa4X\xa3\xbf\x8b\x8a\xf2\x02.\x9bq\xbf\xd5+\x1d\xc2\x1a\x14\xa7\xbf*\xae\xd9\x1c\x01T\x8d\xbf\xcd\x94\xbe\x93N\x97\x0e\xc0\xf1\xdc\x92\x18\xdc\xb7\x83\xbf\x8c\x11\xe7\x99\x0b\xf6\x82\xbfzB\x96\x8cZ\xfc\xa5?\xcf\xac\xd0B\x1e\xe2\x9e\xbf\xad\x1a)\xefk\x88\x94\xbf\x9d\xc8\x00l\xe0\x12\xca\xbf\xd0K\xc3e\xe80\xc9\xbf\x1d\x16\x0b\xec\x93\n\xa1\xbf\x84\xea\xd6\x97A3\xf0\xbf\x00\x7f\x9f\xc9\xd8{\x94\xbf\xa4b\xff\'K\xf0\x80\xbfe\x99\x90\x9e&1\xb4\xbf\xbd\x8dg\xc7[\xc9\x93\xbf.\x0e/E`\x8a\xe3\xbf{%\x8c\xfdLN\x80\xbfU\x84\xa4\xb1a\xdb\xd0\xbf\x19\xdf\xcd\xf0Z\xdf\x1c\xc0cni\xdd>\x8b\xa9\xbfs\x12\x99(\r\xa4\xbd\xbf\x0c\x0f\xaa\xb2U\x06\xa7\xbf8\xbeM\xe4\xd0/\xc9\xbf7,\xcf\x9f\xd2#\xcb\xbf\xb9\x86\x03\x92\xca\xf3\xb4\xbf:\x7f\x18Y!\xca\x98?/\x14\xb9\xff3"v?T\xcf\x9aA\x05\xcc\xd3\xbf\xc4\xfb\x89\xbb\x15\x13\xbc\xbf\xb1\xce\xe0>E\xbb\xc8\xbf\xba\x8f\xd9\xcd|\xc6\xab\xbf\'\x0e \x1f\xb8l\x02@G\x8f\xed \x9a%\xde\xbft\xff\x11+\xa3\xc80\xbf\xc6S\x11\xf7\x8b\x82\x00\xc0\x01\xf7\x8d\xa8\x1c\xd4n?\xf5\xd7\xc1\xb7\x81o\x07\xc0\x1e\xd9\xf5\xf8\x13\xd3~\xbf\x8d\xac\x89\xc7\x99%\xb0\xbf\x86\xbfS\x88\xa2\x11z\xbf\xd8\xe4\xd3R\x97O\x00\xc0\x17\xd9\x81\xf3\xde\xe5\xea\xbf\xaf\x98\x8a\xf5\x00(\x90\xbf\xb4\x8d7D\r\xd3\x98\xbf\x01%\xb4\xb7Ma\x81\xbf\'B\x9fc\xfd\x12\x95\xbf\xba\xae\x13h\xee\xc4`?\x16N\xac\x18(\xea\xb9\xbf\x05\xbeg]\xd0#\xc5\xbf(\x90\x182\xfbH\xd3\xbf\x93\xe1\xdd\xa2\x9c\xd9\x7f\xbf\xaa\xce\xad\xc1\xe5\xf8\x0e\xc0\x90\xb1c\xb8\\\xeb\xd4\xbf=\xc2\xc9\xf9\x8b\xeds\xbf\x02\x00;j\xc1\xdc\xef?)?\xec\x03K\xbe\x92\xbf\xee\x15\x0f\x8c\x97u\xd1\xbfU|2\xd8\x9c^\x80\xbf\xc7\xa4sY\x90\xfaX\xbf\xcdC\xc5\xafT\xb1\xb4\xbf\x07\x10\xb1\'\xd8\xab\xc3\xbf\x9b\xab\x88\xf9,\x05o\xbf\x9e\xd9L\xcb\xce7}?\xd8\x96a#M6\xae\xbf\xbf\x90\td?!\xb1\xbf>J\xc9u\x0bV\xf6\xbf\r~{|\xe7\xe2^?4\xb1_\x03~\xca\x90\xbfD\x95\xa4>\x0f\xa9\xaa\xbf\xf5\x05\xde@)X\xc7\xbf\xdaL\xfdN=A\x90\xbf\x1d\x1e\xe9\x93\xe5\xcf\xa0?\x00\x00\x00\x80v\x1c~\xbf\x00\x00\x00@E\xa6\x80\xbf\xc91Z\xae\xaf\t\x87\xbf\x00\x00\x00\xa0\x15\x01h?"\xea\xe4>\x08\xb8s\xbf\x00\x00\x00\x80@\n\x83?c\xd7\x9aZ\x13\xa1\x8b\xbf\xebZ\xd8\xd5oS\x94?\x00\x00\x00\xe0\xe6\xccQ?\x1b\xe2W:\xe3\x17\x81?\\{\x93n\xe1i\x85\xbf\x00\x00\x00\xc0\r6\x92?\x00\x00\x00\x80\x02\x99t\xbf\x00\x00\x00\xe0A\x0b\x92?\x88\xcdX\xfe\xd4A[\xbf\xfa\x0b\xd6>oj_?\x00\x00\x00\x80F\nu?\x00\x00\x00\xe0\xfeF\x88\xbf\x9ac:\xea\xbbL\x83\xbf\x00\x00\x00@\x84T\x80\xbf\x00\x00\x00\xe0\x88\xcb\x86\xbf\x00\x00\x00\xa0\xe14`?\x00\x00\x00\xc0\x14\xd5\x86\xbf\xc2\x15\x84@\x0c~}?-\xa0\x806\xf8\xc4\x8a\xbf\xb1\xae\xad\xd5=\x14S?\x88?\xbdYW\x88\x86?D\x83\xc5O4\xd0\x82?\x00\x00\x00@\xbbh\x89\xbf\xb4\xc7\xb1\x124\xfd\x8c?\x00\x00\x00@>\x94\x87?\x00\x00\x00`g\x07t\xbf\xd9\x0e\x17\xe2\xb1\x04m\xbfG\x9d\x89iT\xb8\x8c\xbf\x00\x00\x00 8\xda\x84\xbf\xe9\xe1/\xea\x9f_i?\xa3\x04\xe3S@\xaaF?\x00\x00\x00\x00\xf57\x80?\x99\x9eAR*\xe3q?_\xf4\x7f\xf52L\x91?\x00\x00\x00\xe0\xe57\x8e\xbf\x03\xde\xc7\xbdaFR\xbf\x00\x00\x00\x80\xc2\x9c\x9b?\x00\x00\x00\xa0{sp\xbf\x00\x00\x00\x00\x87\x87\x92\xbf\xdbJ\'\x03*\x1a\x82\xbf\xea\xe3\xe8\x92\xd7h`?\x00\x00\x00\x00?\xa3{?\x1f\xe6\xf0A0x\x84\xbf\xc4\xa3\xf4DiD\xa3?\xa6\x95\xcfm\x93\xf9\x8d?\xbc=\x01\xc9\xf8\xcb\x98?\x00\x00\x00\xa0\xad\x06s\xbf\x00\x00\x00\xc0\x01\xf1\x8f\xbf\x00\x00\x00\x80\xe4\x1c\x8e\xbf\x00\x00\x00`/\xb3X\xbf\x00\x00\x00@es\x8b?\x00\x00\x00\xe0\xc3k\x80?\xa2\xeeKa\xab\x15|?\x9e\x90\x8d\xc4\xd0\x92m?%\xbc\xaf\'\x05\x94\x94\xbf\x00\x00\x00`\x19No\xbf\x0b\xeej!\x0c\xf3@\xbf\x00\x00\x00 \xee\x11\x89?\x13-\x86\xe3\x87>\x00\xbf\x00\x00\x00`\xe8\xf9r\xbf\xf9\xa2\xc8\xfc\xd1sd\xbf\x00\x00\x00\xc0\xbci\x91?\x00\x00\x00@~\x11t\xbf^j\xe8\x82k\x9d\\?\x00\x00\x00\xe0\r\xd9\x8a\xbf\x00\x00\x00\xc065a\xbf\x00\x00\x00\xe0\xb3C\x84?\x00\x00\x00\xa0\x05\xf4\x81\xbf\x00\x00\x00\x80O\ns?\x00\x00\x00\xc0\xb1\x11\x8e\xbfMA\xbd\xd0\xf7#|\xbf\x00\x00\x00\x00\xf3z{\xbf\x00\x00\x00\xe0\x86\xd2R?\xf9F\xfb\'.\xe2X?c\x1d\x8d\xe7\xcaBy?\x00\x00\x00@\x00\xe1\x85?\x00\x00\x00\xa0Q\x80d\xbf\x00\x00\x00\x80v\x1fr?8~\xc7v\xc0\x1dU?\x00\x00\x00\xe0\x96\xcbh\xbf\x00\x00\x00\xe0|\x93\x82\xbf\x00\x00\x00\x80\xafee\xbf99\xae\x14\xbc5V\xbf\x00\x00\x00\xa0\x8dfn\xbf\x00\x00\x00@\xcc\xe3d\xbf\x13\x8dc\xc8A\x1cp?\xf6R\xabr&+\x81?\xad<\xf7\x04\xc8\xc5z?\x00\x00\x00 \xe8P\x85\xbf\x00\x00\x00\x00 \'\x84?\x00\x00\x00\x80\x8a\xe8~?J&\xbcR\xb2\xa6D\xbf\x00\x00\x00\xa0\xf3\xdc\x90?\x00\x00\x00@\xdd\xb2\x95\xbf\xcb\x01\xba\xf9Zg\x16\xbf_q\xeak\xa6\xaf\x89?\n\x99\xf5yr\'\xb0?\xb5\xe1\x85\x8d*\x84Q\xbfh\xc2\x98\xf7+`\x95?\xc7og\xca\xfb\x80^\xbf\xf9\x01[\x02\xc1\xfb\xa5?T\xfdF\xd8\x196v\xbf^\x94\xd2FxF\xa1\xbfVU-\xdc\xd6\xe7\x80\xbf*\xe8.\x9eo\x18\x81?\xb729\n\x90\xb6\x90\xbf\xc2\x1f\x9f\xc9\x88Q\x86\xbfS\x14\x00\xa6;;\x8a?N\xb9\xb9\x8f"\xa4\xbc?~\xfc\xec\xa7\xc9\xd8\xa5\xbfL\xd2\xe1c.s\x97?\x18f\x1c\xdd\xb9\xdbe\xbfu\x9bd-f\xb7\x94?\x85\xbb\x0c\x8du\x17\x94?\xeb\xe9\x9d\x08q_\x91\xbf\xbfB\xce\xf2\x95\x1d\x82\xbf\xfb{\xa0S^.\x95?\x10\xe3\x96\xf8K\xb8\x9d?{\xecU\xa8v\xacv\xbf\xb7z\x0f\xc81\x86\x82?\x1a\x86\x96\xfb\xa9^\xa1?\x0c\x86TS\xbfI:?\xbe)\xa0\xae\x8a:\x80?>6\'\xdb\xcfb\xb0?x$\xdf(*X~?iz\xb9\xa0\xbc\x80\x96\xbf\x8c\x11\x9f\x98\x9co\xaa?\x91\x9c\xa3\xa8V\x06\x9c\xbf\xe8\xe9\xc7k\xb1E\x93?~\xf9\x90\x07cZ\x9a\xbf\xeb\xd1\xab\xa1\x05\xd4w\xbf\xc2>\xca\x04U\xdb\x81\xbf\x9a\xddt"[\xad\x8b?A\xaf\xfdol\xee\x88?>1\xf6\xda1\xed\x86?{\xd1\xe8\xeb\x91\t\xac?o\x87\x9fIL\x99\x83?G\x80\xb8!\xb7\xb9\x88?]\xd2\x9a\x08=\xde`?bG\xd4\xaeJ\xce\xb0\xbfE\xd0\xae\'cf\x04\xc0\x10\x97\x11\x9c\xbbm\xaf?\x8c\xe7\x8d\xc7\xe9X\x86?:\xdaq\xc7PsX\xbf\xdb\xdc\xcb\xc1\xdd\x95x\xbf\xd6Wx\xaf\x85x\xa2?\xa3\x9e\xb2\xc1\xf1\x0cj?\xac\xeb~\xc5\xfc\xf7\x94\xbf\x98\x8a\x1f\xd4\xf9)O?c\x8a\x18\x11\x92\x13\xba\xbf\x1d\x86\xe7q\x89\xaf\xa9\xbf\x7f\xb0V\x0c\x06\x94\xb5\xbf\xc85\x01\xbc\xc9t\xaa\xbf\x8b\x80P\xd9g\xfa\xef?i\x13hto|\x96?\xa8z\x87\xc1\x16\xb0e\xbf\xb2\x88 p\xe3\xd2\xec\xbf\x1c\x08P\x8f\xf51v?\xcaGl!\x03\xab\xed\xbf\xd2\x89\x80\xd47_\x88?\x9a7\x10h\xfe\\c\xbfo79\xaf/\xf1\x8c?\xa5\xaf\xafR\xab)\xd5\xbf\xae>+\xff\xb0\xe9\xa8\xbf\xb8\n\xc0\xb7\x11^Z\xbf\x15\xbe\xdb\xccvlp\xbfY\x03\xf8\xfa\x8b"\x99\xbfq;Rx<%W?5\xda\xba\xc7\xd0\x02\x82?\xfck\xde\xe7Z]`?\xd0Y\x83\xc6Z\xd1\xb9?\xa1\xe8\xc0\x1c\x1d\xa2\x99\xbf\x16\x91\xd9\xdf\x97\x08\x8b?\xd4\xe4\xea\x80\xaa\x0f\xa1?\xafS\x8a\x03\x1b0\xb0\xbf\xb2;\xa1\x9f\x8caD?q\xd5\xc5df\x94\xda?\x91\xc8\xa6\xe4\xc9\x7fR?\\<\xc4\x827\x0f\xbd\xbfs\x9d\x9c`\xd0\xd1~?\xa5\t\xde\xe4\xee\x98o\xbf\xe7\xf3Z\x1955^\xbf@<\x14\xb08\xc4d? \xf1Q`]f\x85?\x1f\xe6\xf4\xac\x87\x96\xb9\xbf\x90\xb0B\x91\x1b0\x82?\xc9\x97HA\x94\x85o\xbf\xfb\xa4\x1e\xa4\'\x82\x9e\xbf\xa7\xa5T\x16[\x0f\x8b?\x9d\x9b)\xe9\x18\xbe\x80\xbf1\x84\xdb\xbf\xae\xbdo\xbf\xcbM)>\xbf\xb9\xca?\xb1F\xe5\xe8tc\x91\xbf!\xa67;\xa7c\xb6\xbfq\x88Q\x90\xff\xfd~\xbfX\x81\'\xd3,\xc6\x8d\xbf\xdf^Cx\xd4\x1bk\xbfI\xf5\x82-Uta?\xc0\x1fH\xd7\xc2a\xa3\xbf\xe3\x8b\xc6\xd4\xb9>y\xbf\xfa\xf5Z\x822\xf8\xa9\xbf\xa95Ki\x1f\x0f\xb7?\xe8\xd9\xd1\xff\xce\xc8\x9b\xbf^f\x94\n\x16M\xa3?\xad\xa0\x05\x8e\x9a\x1d\xc0\xbf\'\xde\xa6\x86 \xc6\xca?\xf4(K\x89\x8c\xb7\xa2?0\xebk-sK\x94?\x19\xd7]\x05\xc38\xcb\xbf\xf6;0\xb6\xf6{\xa3\xbf\xa2\xf5\xf4\xfc\xa2\xbc\x9a?\x86\xf7\xe3\xedk\xce\xf0\xbfO*\'4\x8de\xc1\xbfS\x92\x8f\xb8\xc1\xda\x84\xbf_\x8fR\xd6\x9c\xa7e?\x16\xe5\xddau\x07r?H\xb6\x15\xeb\xe0\xe3\xa3\xbf\x9a}8Zp\xa9\x87\xbf\xf5PSH\x9a\xfa\xaf?\\p\x1a\xb8\x7f\xa5\x9c?p`\xaa\xce+\xb1\xb0\xbf\x80\xaa.\x06\xa3\xebs\xbf\xd0W\xben\x8c|\x95\xbf7\x07\xdf/\xc2\x16\xcb?!\x96J\xce\xccy\x8c?C.\x8f"xv\x81\xbf\x9e\xd9\xe7iP\xff\xc7\xbfMl\x98\xb5P\xc7\xc2\xbf\x05\xab\xeevje\xa6\xbf=\xde\xb7\xc3\xd0\x9b\xc6\xbf\xa9-\xce\x0c\xd1\xce\xa2?\xe8L\xb0o\xa4`\xa0\xbf@\x83AK&\xce\xb8?\xc2Q\x1a%\xees\x9c?-\x97\x86\xfc?\n\x8e\xbf\x9b\xa9T\x15ly\xa2\xbf\xc1b=\x115\x02\x91\xbf\x8e\x82&\x10\xad\x19\x84\xbf\xcc\x03\xdf\xf0]\x9b\x87\xbf$\xc1\x9b\x08\xf66\xa4?\xfdIi\xd9\xb6\x81\x9a\xbf\x8fz\x0f\x05\x10\xb1\xe0?\xb8\xc1r\xd5e<\xad?\x14\x81y\xa4\x9d\x1f\xbd\xbf\x8fU\xa3K\xf7%\x88\xbf\xb0\x13d\x10\xba \xd3\xbf\xbd\xef\xcd\xff\x06O\xb9?H{Db\xfe\xf1\xba?\x8d\x88n\x9f\x8c\xe8\x91\xbf\x8c<~\xbbW_\x03\xc0\xc2\xb4J9\xbd\xf3\xf4\xbf\xb1\x82\x82o\x90\x11\xc3\xbf\xe5\xda\xa5\xa0\xe3\x89\xd0\xbf\xea\x84)3\x88\n\xd4?\xcc\x11\x9b\xd4=T\xbc\xbf\xc8\xe7\xb6\xe3 \xb2\x85\xbfY\x82\xa3\x07*j\xc1\xbf\xbf\xa0\x11\xef~\xa4\x88?K\xaf]s<\xef\xcb\xbf\xc7\x88\xee\xden\xd1P?\x94Y;uL\xf3\xb7?\xc4oc\x80IC\x83\xbf\xee\x12\xb3\xea*\x89\xfd?\x87==\xa5\xe6y\xa8?\xa7\xc80e\xa4\xb6r?8\x9dpJ\xf8Kh?\xd4E]\x8a\xc7s\xbe\xbf1\xd5*\x92A0u?}\r\xadV2\xa8\x93\xbfR\xa7+\x9e\x1a\xf8q?Um\\\x91\xd9G\xfc\xbfh\xab\xd2N\xda\x84\x80\xbf\xeb\x7f-IK\x98\x9e\xbf^\x840/Y^\xb8\xbf\x95\x85\xee\xb5\xa7(\xc5\xbfE\xc8\xf0=Z\xd77?y\x19\xfd\xd7@\xe3\xc3?\xfa\xb7\x17\xe2"e\x8b\xbf\xd0\x1d\x07\xc9\x91\xe8\xc3\xbfl^~\xcf\x91Nt\xbfP\\\x01\xca\xd5\xdb\x84\xbfU\x8eq\xc1\r\x9f\xaf\xbfK\xc0v\xb8\x0e\x9e\xa5?"\xcd\x82\xfb\x18[\x86\xbf\xf2\xe9\x8b\xddm\xf0\x00\xc0X\xd9\x9b/9\xff\xa4?_0\x01\xd2\xa42\x9f\xbfvVM$q\x89\xca\xbf\x81d\xdc\xf1v\xab\x8c?\xd8];)?7]?P_\x1d/\x8f\x1c\x9a?\'\xd3\xdd9\xe4W4?\xc4\xe8\xd9\xbf\x8e\xca\x87\xbfO\xcb\x8agS\x16\xb9\xbf\x19N:w|~y?\x89\xe7-\x9c0#{?\xe3\xf5>`\xc8\xf7\x80\xbf\xa4\x8e\xec\xc13 \x82\xbf2\xe9\xba\x9b\xe7\x15\x8b\xbf\xdc\xb9\x89\x1a\xb6nb\xbf\xd7\xf5\x89\x1b\xc556?\x1d\x14\x1f\xccq\x04\x87\xbf\xce:P\xc1\xefZ~?[\xc2\xc8-&\xd1\x91\xbf\xee\xcaN\x8cy\x0f\x84?\x02BT\xa9\x16\xc0\xc6\xbf\xf2\xa3\x97{\xe1J)\xbf[\x1fc\x13\x95\xa6\x86?\xe5\xfav\x06a\xa8\x95\xbf\xd1\xb9a\xb6\r\x02\xa2\xbf\x13\\\xd5\xba\x9c\xf3\x87?\x1eS\xe01\xd9m\xbf\xbf\x19i\x8d\xdb\\q\xb0?\x8d\xba6\xc7-\xb9x\xbfN\xd3\x02\xdf\xa5\x08\x84\xbf\x93l\x90\xf0\x1dUk\xbf1\xf8\xeb\xdc~\xe7\x84?\x83\xcf&m\xb1\x86d\xbf \xe42Vm~s?\tY\xd5\xccc\xcf\x85\xbfA|\xbavXXy?p.\xb3n\xaajp?%P\xea|\xbd\xe8F?\xcb?\x0b(e&\xed\xbf\xb5\xc3S\x17Ws\x99?E\xab\xc5E\x83d}\xbf\x99\xdb\xe8\xafaL\xac\xbf6\x9d\xa8tM\x0f\xa3\xbf\xab\x97G\xfc\xbb\xcf\x80\xbf\xe6\xd8,\xff"\xf3\x84\xbf\xc3\x80e-\xe1:\xa7?\x83\xd1\xf3\xa0\xb8\x89\x99\xbf\xf8\x0e\x9emU\xd9\xb7?\x0c\tdak,v?\xb7x\x8c\xfd\x03\xff]?A\x9cU?s\x8a\x8e?C\x06\xb3\x0e\x11\x83\x96\xbfp\xd0\'\x95(\xc5\x82?\x7f1\xcf\xe9\xe2Ml?\xc1\x1bo\x1cA\xab\xb9\xbf\x0bP\x08;\xff\xce\xac\xbf\x1d+\xcc\xd3\xea4j?\xa6\x1b\xdf\x18\x08\xf1\x97?S\xc2\xc3\xe0w\x02\x89?\x93\xa7\x11\xf9M\xa7O\xbf\xa9\xdd\xf390\xdc\xb4\xbf\x0c\x9d\xdd\xeax\x96\x89?\xa6\x81{Doo\x93\xbf\xdd\x84\xfa\xee\x9a+\x92\xbfQ\xc1\xd5\xef`\xd9\xd0\xbf\xf0\x9e\xe4\xaap\xee\xbf\xbf\x9b\xe2\xfa\x90\x058\xad\xbf\xf0#\x11\xd9\xd3\x0cd?v\xe1\x0b\xae\xc1)a\xbf]\x88\x05F\x8c\x91\x92\xbf\x83\xaa9\x01\x82ka?9\xf8\xed4\x94~\xb2\xbfj\xd2\x00\x9d|\xdd\x83?\x99S\x15_\xb4\x14\xb5\xbf\xb94L\x9b]\xc2\x81?]s>I\x1c\x9b\xab?75B\xc3i\xf7r\xbf\xe4G[P\x0b\xe6\xc1?\xfd\xb5\xf3W\x8aA\xb6\xbf^\xd4\xe6*&+\x84\xbfm~b5\xe0\xcd\x91\xbfiCY5\xdb\x93\x8b\xbfy\x9d\xa5hE3p?U|\xe0\x7f\xb6\x9d\x93\xbf\xb3V\xe3\xbf\x95\xc8\x91\xbfc#\xbd\xe8:\xf1\xc2\xbfU\x99\xc9\x8d\x93\x88\x81\xbfi`R\xe4fm\x89?\x134\xf4\xd5\x96\xb1\xf0\xbf\x14D\x83\xb1\x1c+\x80\xbf\x94\xdcZ\x0b\t\xb6h\xbf\xea:V\xe1`f6\xbf+\x1b\x84n\x15\x0er?\xe8\xcb\x83\x9a\x89-\xd4?X\xa7\xf3!\x9e\xc7{\xbf=\x81\x94X\xf6!q\xbf\x1at\x84:f\x94\x9e\xbf\xee\xcb`\xa0\xf06&?\x13\x9a\xbf\xb0\x14D_\xbf_\xb5\xa9\x8f\xab\x87\xcf\xbf\xa7o(\x1f\x0cr\xb1?f\\jI\xa7y\x84\xbf\xdbH\xbet\xd0\'\xcd?\x99{\xb7{W\x84\x94?\x9d\x18D\xef\x8a\xbcp\xbf\x8e\x8b\x97\x1cTx|?dQ\xd5]L1\xda\xbf[\x87\xae\xd8<\xde\x96\xbf\xa4\x07\x89\x80;\xfe\x94\xbfg\xa6\xcc\x84\x0c\xaf\x81\xbf\x92o.d\xb1N}?\x0b\xe7\xd7\xe7?"\xb3\xbf\xe4\x18\xb8\x87Y\xe0\x12?\x1e\x91\xc7\x17E\xd9\xf0\xbfI\xd0\xee\xe8\x1fM,?\xf8\x1e@\x93k\xb9\xa4\xbf\x95.\xe4\xd4\x1c!\xab\xbf\x1e\xc0s\xa1.\xe7\xa0\xbfR\r\xca\xcd\xb4h\xab?\xfbm\xc9b\xf0\xd3\xb0\xbf\xbb\xdbz\'\xbad\xa6\xbf\x12\x8c\x93E\x9bw\xba\xbf\xb2\xc2\x82\xa3B\xd9\xf0\xbf\x00L\xf7L\xe8\xef\xb6\xbf\xf1\xefP\x15\x11\xb4\xb2?\xc7\xf9\xd3\x9a\xd0\xa9\xbf\xbf^a\xd5O\x81\xaa\x97?J\xba\xc2\x1e\xbe\xe7\xcc\xbfd\xd2\x9bF\x8b"\x92\xbfQr\xbd\xee\x8e\xbe\x83?\xc7yYpp\x1cC?\xfa\xab#\xach\xd8\x80?\xc0c(\x83>\xd6r\xbf\xd5\x9c\xcf\x102\xc4\x92\xbfx\x906\x9a_\xb8\xa4\xbf\xb5\x8f5Bz>\xa1\xbf\x9a\x9d\xf901\xbc\xa0\xbf\xe3,\xb0\xbf\x85\xd0x\xbf\xd9\xefv\r\'\x86\xb2\xbf\xd0\xa6\xb1\x9c\xbcHa\xbf\xe3\xedxB\xb4\xbbm?\xbf\xcd\xd1\x81*\x08\x9a?\xf8N\xdbo\xd5\xe5\x8f\xbf\xc8\xca\xc5\xa2\x16\xb3{\xbfw=\xb5\xba\xf45\xd6\xbeou?\xeb\xc5c\xa9?\x1a\x18\x89X4O\x83\xbf\xd3\xf7\xe7\xaau\x87\xc5?\xa7\xa4\xa9r\xf2\x91\x89?\xe0\x18\x03\xe9\xb4X\x8b\xbf\x0c=k\x1d\x06\xb0\xb5\xbf\xdb\xf0+\x1b\x89\x8a\xa0\xbf\x0c"\xa6wF6\xb1\xbf\xa4s\xb5!\x85,z?\x95\xf4\x14\x88\'\x02\xc1\xbf\xe9;\xdb-s\x9d\xba?\x0e_\xa7\x03\x03\x9b\xb7\xbf\xb1\x04\xfa\xd1\xfa\xd5\xba\xbf\xfc\x01e\x9b\xb0\xdc\xa0\xbf\xc7\x88\xdf\x15\x86\x02\xaf?o\xa9/\xde\x97\x07\xbc\xbf6\xd5"\x881]\xd9\xbf\x03j$#W;\xba\xbf\x82Up\xcc\xc3\xee\x85?D\xffd\x1e\x18C\xb9?\x92\x0e4\x93\xf3\x88\xa7?\xc6\xe5$\xcb~\x80\xd6\xbf\xb3\xaf`\xd5QL{?\xf8H\x86\xb65T\xa0\xbf\rGE\xc2f\x15\xf7\xbfjo\xb6\xbb]\x14\x7f\xbfS\xc1_\x19\xc0\xe3\xb1\xbfI\x91.\xd1O\xeab\xbf\x07g\x03\x90\x1e\xbf\xb1\xbf\x88\xef.\x18\x1aw\x91?\xd9\xc0\x16\xefc\xe3\x84\xbfCE\x9f\xe0\x1b\x98|?\xfe+\xfcL\xf8f\xd0?\xed\x8b\xa3\x8c\xf7W\xb1?\xe0)>v\xaf\xb9Q\xbf\xd6#\xcc\xd2\xc8X\x8c\xbf\x94&\xbc5\xf1=\x88\xbf\x15\xc3I\x97\x13\x14\n\xbf\xd4\x14\xe4f\xe6Uy\xbfR\xba\xea^\x11\xdcx?\xebb\xd8\xc3cj\x90?\xea\xa0\x90\xa9\xa5F\xb1?\xd9\xb3k\xf9\xd9{\x8f\xbfgyK@\xaf\xcf\xba\xbfS\xab.\x0f\xeeR\xb2\xbfn;-\x87W\xcd\x86?@\x01L\xcc\x7fG\xaa\xbf\xc6e\x87\xaa\xb8b\x88\xbf\xaa\xe8X+\xb2<\xc8\xbf:\x05HWPiN?\xab\x99\xfb\xdfn\x9d\x92\xbfA\xfb\xb6w\xa6Os\xbf\xf5w\xa2-\x93\xeb\xb6?\xbf\xcf\x9a\xdb\x93\x02X\xbf@t\xcf\xf7\x84\xa7\xcb\xbf\xc7\x01_\x11\xcd\xed\xd1\xbf.\x044U\x97\x01\xae?\xf9\xf06\\\xe3\xa8\xbd\xbfZ\x8f\x88XN:\x82\xbf#\x94\xcc\xd7\xe5\x16\x95\xbf2\xc4n\x9cz\xee\xa6?\xb9\x88\n\xf8\xfb\xcb\xd1?\x1f\xa1\x8d\r7\x11\x8e\xbfN\xf59\x9fL\x98\xb3\xbf.\x9a\xe4\xa9\xaf\x90v\xbfB\xad\x8aV;\x80p\xbf^q\x8a\x05\xb0\xb3\x97\xbfNH\xbc\x8cwm\x8a\xbf\x86\xbc\x98\x1aN,\xca\xbf\x17\xd1o\xba\xc9\x18<?P\xfd\xc2\xbb\x1d\x07x\xbf\xc7_l\xc5\xbdvb\xbf\xe4\xf6\xa9U\xb0\xe1D?9\x825.\xfe\xa2b?@N\x88#\xa3 C\xbf\x9c=F\xa9\x81\x00y\xbfyT\x10/\xa0\xcdQ\xbf\xc0\xd6r\\\x1f\x90\xc5\xbfV\xd9c=\x90\x16G?Z\xeb\x83nxeq\xbf\xf7\xf6.\x87\xd0\xd7\x9f\xbf\xa0rkfz:\x80?\xb9\xfe\'!\xe4\x89\xab\xbf>\x8c\x97\x9e\xb1\xd0\x87?\x11\x1dDl(\xe5\x85\xbf\x80\xe3\x83\xd9\xc1\x8b`?\x92\x07\\"\x18\xb0T\xbf#\x10\x18\x19\xc6\x89\x8d\xbf\xd1\xf6\\\xdc\xeb6\x87\xbfQ\x03=\xfc \xf1{?\xdcb/L\xfb\x13\x91?+\xec\xb1LW,\x8e?\xef\xbe\xce\xab\x9a\x8b\x8e\xbf\x13*\xf9\x8cB@z?\x89"BW\xfc\x16A\xbfgW\xd3\x14Z\xf0\x8a?bU\xado)5\xa2\xbfz\xe7\xec^6\x80\x96\xbf\xc4\xa1\xfc#V\xf7\x97?#*7f\x8e\t\x8c\xbf\xdcnP\x1c\x8f\xdc\x97?=i+\xca\x96\xeal?\xc4NG\x9c\xd3$\xb0\xbf:x\x9b\xb2\xfb\xcd~?\xd2\xe2\xc6/\xee>d?\xdc\x0fB\x80\xa3l\x8d\xbfN*H\xa5m\x1aI?\xeb\xd8(o\xeb\xbb\x8e?\'\xc7\x16\x85T(\x87?l\xa6)\x16\xc8\x1fq\xbf\x95\x15ES\xd9]\x8e\xbf\xf2\xd6\rF{\xdb\x96?i\xfd\xfd\x1d~\xeah?O\\\\\xbcqv\x92\xbfDz\x82\xc3\x0bU\xa5?}7Z\xe3\xde\xba\xa2\xbf\xdd\xe6\xa3\xb5\xd9\x94\xb1\xbftN5\xbc78\x97\xbf\x8ai\xae\xeb9\xc3\x89\xbf`8\x0c\x01E\x80\x8e\xbfk\x8e\xec\xb1\xd2\x10\x93\xbf\x83\x00Q\xd3K\xbd\x82?\x11\xf0\xc6f\\B\x93\xbf\xc1\x8a}\xec\xe7\x11\x97\xbf\x145\x17\x08\xfc\xf5\xd3\xbf\x0e%\xa32\x17\xf0\x84?\x8e\xca\xeaV\x0c*\x99\xbfaI\x9f\xb7T4\x7f?\xfd\x0c\xb2`2\xc6\x87\xbf~\x9c\xc8\x9a\xa9v\x85\xbf\xfcwV\x8a\xb4\xecr?"\xdd5\xc8\x95\xacT\xbfG\xbd\xe8\xcb\xde\xf8\x98?\n*\x01\xa6\xf3\xe7f?,\xb8\xcf\xafiZ{\xbfQz\xf6\x8c,\xc0u\xbf\'J\x18\x11\'\x87\x94\xbf\x19a}\xbd7\xd8\x85\xbf+;\x0c\xfbG\xc1`??hKW\x07N\x8e\xbfbC\xbe\x92\x97!f\xbf9_\x13\xe8G\xc8\x80?\x83\x97\xdev\x93\xd2\x85\xbf\x1e\x89|!\x05\xa7\x8f\xbfNX\x83\x98\xb7\x8e\x81?\x0c\x06\xc4t\xfaF\x86\xbf\x01\xcb\xfd\x87\xbb=\x86\xbf\xd5@\x1f\xdc\x811\x89\xbf\xdb\xadW\x98j\xf5\x8e\xbf:\xf6\x9c\xe3\xc0\x81`\xbf\x00\x00\x00`\x17\x1fp\xbf\x98\xb1\x02\xb8\xa4\xdca?\xdc\xf1\xfc\xea\xfd\x95|\xbf\t\xc55^y\xf9\x82?\x93LC8A\xd6\x8e?\x87X\xb8\xe3\x9f\xf5\x87\xbfa\xb8\x0f\x8f\xa6\xb8\x89?uu\x92\xcb\xfax\xb4\xbf\x9d\xbd\xb7\xb3\x18\xb0a?\x97\xf3\xa0\xdaY\xe1\x87?\x93\x02\xe9\xd1b\xd7\xa7\xbfA\xa7\x7f\xcd\x11\xbd\x8b\xbf\x8c\x16\xf5\xc8[<:??\x8d\xd9.\xb8qT?\x00\x00\x00\x00\xb0\xa2_\xbf\x00\x00\x00 \x02\x8e\x88?\x00\x00\x00`\xf7\x95\x8c\xbf\x00\x00\x00\xe0v\x89\x99?\x00\x00\x00\x807`\x7f\xbf\x00\x00\x00@\x15\xb7\x88\xbf\x00\x00\x00\x80\x08\x9d\x86?\x00\x00\x00\xc0_\xa9c?\x00\x00\x00`\xfeU\x97?\x00\x00\x00`\xce\xe2|?\x00\x00\x00\xc0\x97\x99\x80\xbf\x00\x00\x00\xc0\xed\xd2|?\x00\x00\x00@q\xce\x91\xbf\x00\x00\x00 \xbe\xa7\x95?\x00\x00\x00`\x1f\xdc7?\x00\x00\x00\xe0N\x7f\x93\xbf\x00\x00\x00\xe0\xbbW\x87\xbf\x00\x00\x00\xc0\x1c\xdd\x83\xbf\x00\x00\x00\x001\x0cX?\x00\x00\x00\x80\xf8V\x86?\x00\x00\x00\xa0\xe4\xbf_\xbf\x00\x00\x00\xe0\x9e\xf4t?\x00\x00\x00`*\xf2\x82\xbf\x00\x00\x00\xc0\xf4^g\xbf\x00\x00\x00\x00\xdd_u\xbf\x00\x00\x00 \xa0\x85s\xbf\x00\x00\x00\x00\xb8`\x8d\xbf\x00\x00\x00@\x9a@Z?\x00\x00\x00 zVb?\x00\x00\x00 \xb1a\x83?\x00\x00\x00@5\xb4p?\x00\x00\x00\x00C\xd3\x9a\xbf\x00\x00\x00\xe0\xbasH\xbf\x00\x00\x00\xc0\x98\xdd\x8c\xbf\x00\x00\x00\xe0\x8e\x10o?\x00\x00\x00 1ab\xbf\x00\x00\x00 \xb1Y|\xbf\x00\x00\x00`\xb5\xf0d?\x00\x00\x00 \xec\xf57?\x00\x00\x00\xe0\x02\x89\x85?\x00\x00\x00\xc0l\xc0\x89\xbf\x00\x00\x00`\x94oY\xbf\x00\x00\x00\xe0\x9f\x10h\xbf\x00\x00\x00`b\x99a?\x00\x00\x00\xc0\x8c\xa9i\xbf\x00\x00\x00\x80\xf7=j?\x00\x00\x00\x00\'\xf8\x10?\x00\x00\x00\xe0\xe7\xafz\xbf\x00\x00\x00@\x86\x01t\xbf\x00\x00\x00@\x1a\xbaW?\x00\x00\x00`\xaay|\xbf\x00\x00\x00\xe0-\x18\x88?\x00\x00\x00\xe0\xc9\x0b\x83\xbf\x00\x00\x00@\xcd\xe4x?\x00\x00\x00\x80\x13@|\xbf\x00\x00\x00\x80\x1a!!\xbf\x00\x00\x00\x00P\xc3g\xbf\x00\x00\x00\x80j\xf6w?\x00\x00\x00\xa0{\x8ff?\x00\x00\x00@^\xf3\x89?\x00\x00\x00\x008\xdcp\xbf\x00\x00\x00 \xdc\x9aW?\x00\x00\x00\xa0%\x7fC?\x00\x00\x00\xe0\x0e\xa9h?\x00\x00\x00\x80\x05bk\xbf\x00\x00\x00\x80\xa9\xd5~\xbf\x00\x00\x00 \t\'\x84\xbf\x00\x00\x00@C\xfe\x8e?\x00\x00\x00@+\x94\x8a?\x00\x00\x00\xa0\xc1(\x9d\xbf\x00\x00\x00\x80\x1e\x03\x1e?\x00\x00\x00`5g\x90?\x00\x00\x00\xe0\xa1\xa5u?\x00\x00\x00`O*u?\x00\x00\x00@\x91\x15\x93?\x00\x00\x00\x80\xba\x8c\x93?\x00\x00\x00`%\xef\x90?\x00\x00\x00\xa0A\xban\xbf\x00\x00\x00\xe0\xeb\x99\x8b?\x00\x00\x00`N\x9dr\xbf\x00\x00\x00\x80?\xdc\x80\xbf\x00\x00\x00\x00H-g\xbf\x00\x00\x00\x80\xc4\xcbN?\x00\x00\x00@9\xdb\x83?\x00\x00\x00\xe0\xeb\xe7t?\x00\x00\x00\x80\xbf\xe8u\xbf\x00\x00\x00`Z\xb9\x85\xbf\x00\x00\x00@\xb2\xfc\x8e?\x00\x00\x00\xc0\xdb\xe2\x82\xbf\x00\x00\x00@s\xeec?\x00\x00\x00\xe0\xc0\x14a?\x00\x00\x00@\xdfn\x98\xbf\x00\x00\x00\xa07\x96{?\x00\x00\x00\xa0T\xf2p?\x00\x00\x00\x80\xfa\x00\x89\xbf\x00\x00\x00\x80\x9d|\x84?\x00\x00\x00\x80\xd9Ai?\x00\x00\x00@\x03\xa2\x85?\x00\x00\x00\x00K\x03q\xbf\x00\x00\x00\xe0\xda\x9f\x94?\x00\x00\x00\x80\xb4\x1a\x83?\x00\x00\x00 \x0c\xa7}\xbf\x00\x00\x00\x80\xb5\x19\x89?\x00\x00\x00\x80\xd8\x8fc\xbf\x00\x00\x00 \x1e\x06W\xbf\x00\x00\x00\xa0\xc2\xd7\x81\xbf\x00\x00\x00\xa0\xc5\xc0\x82\xbf\x00\x00\x00\x00V:}?\x00\x00\x00\xc0\x0e\x14l?\x00\x00\x00\x80\x13>\x84\xbf\x00\x00\x00`\x97\xa1\x91?\x00\x00\x00\xc0\x9d\x82o\xbf\x00\x00\x00@;v\x8b\xbf\x00\x00\x00\x00\x81\xff~\xbf\x00\x00\x00\x80\x9b2`\xbf\x00\x00\x00\xc0=;o?\x00\x00\x00\xc0\xe5)`?\x00\x00\x00\xc0\x93/\x8e?\x00\x00\x00@;Jr?\x00\x00\x00\x80\xd5\xdd\x8b?\x00\x00\x00`_bZ\xbf\x00\x00\x00@\xc0\xc9]\xbf\x00\x00\x00\xe0\xd5\x1aC\xbf\x00\x00\x00\x00\xee\xeet?\x00\x00\x00@mjr?\x00\x00\x00\xe0\x1b.\x87?\x00\x00\x00 \xf8H\x92\xbf\x00\x00\x00\xa0\xb4\xe5\x95?\x00\x00\x00`_\x0bU?\x00\x00\x00\x80\x1e\x05t?\x00\x00\x00@\x1e8\x85\xbf\x00\x00\x00\xc0\xcf$\x93?\x00\x00\x00\x80\xd6F\x83?\x00\x00\x00\xc0\xdbt\x96\xbf\x00\x00\x00\xe0`\x81\x90\xbf\x00\x00\x00\xa0\xc4\x94<?\x00\x00\x00\xe0{\x88a?\x00\x00\x00\x80d\x14s?\x00\x00\x00\xa0\x15T\x8f?\x00\x00\x00\x80\xda\xcdu?\x00\x00\x00\x80\xfdH9\xbf\x00\x00\x00\x00\x7fVo\xbf\x00\x00\x00\xc0\n\xdb\x84?\x00\x00\x00\xa0\x98!`?\x00\x00\x00\x80w6D\xbf\x00\x00\x00`\x03\xeb\x91\xbf\x00\x00\x00\xc07\xe7\x8f?\x00\x00\x00\x80\xa3B\x8d\xbf\x00\x00\x00\xc0\x1e4T\xbf\x00\x00\x00@K\xc2\x86\xbf\x00\x00\x00\x00\xd2P\x82\xbf\x00\x00\x00\xe0\xb6Jl?\x00\x00\x00\xa0[x\x99\xbf\x00\x00\x00\xe0\x98Ju\xbf\x00\x00\x00 \x00\xb9z\xbf\x00\x00\x00\xc0\xdc\x0fx\xbf\x00\x00\x00\xa0{\xecs?\x00\x00\x00\x80\x9b\rQ\xbf\x00\x00\x00\xa0\x1b\x9f|\xbf\x00\x00\x00\xc0p$\x90?\x00\x00\x00 \xbfu\x83\xbf\x00\x00\x00\x00\xeaps\xbf\x00\x00\x00\x80{Y~\xbf\x00\x00\x00\x00\xf2\xac[?\x00\x00\x00 \xea+\x8a?\x00\x00\x00 \xffVh\xbf\x00\x00\x00@\x10\xced\xbf\x00\x00\x00\xe0\x87\x87}\xbf\x00\x00\x00\xc0\x1dxp?\x00\x00\x00\xe0H\xaa\x89\xbf\x00\x00\x00 N\xff\x81\xbf\x00\x00\x00`\xdd\x15\x90\xbf\x00\x00\x00\xa0\x9aC\x83?\x00\x00\x00\xc0\xe6\xe4\x80?\x00\x00\x00\x80\xaeW\x9f?\x00\x00\x00`\x179}\xbf\x00\x00\x00\xa0%?"?\x00\x00\x00\x80\xc0w\x84?\x00\x00\x00\xe0\x1dQh?\x00\x00\x00@\x9a\x86z\xbf\x00\x00\x00@+\xdbu?\x00\x00\x00\x00EV\x86?\x00\x00\x00\x80\'\x02h\xbf\x00\x00\x00\x80W\xc3w?\x00\x00\x00@n \x85\xbf\x00\x00\x00 \xcc\x899\xbf\x00\x00\x00\xc0\x8c\xa1\x80\xbf\x00\x00\x00@{\xf8k?\x00\x00\x00\x00\xd9D*?\x00\x00\x00`((\x7f\xbf\x00\x00\x00`\x8e\x1a\x91?\x00\x00\x00`8\x9ft\xbf\x00\x00\x00\x80\xdb\xe1d\xbf\x00\x00\x00\x00\xdfw\x9a\xbf\x00\x00\x00`\xbb\xb9}\xbf\x00\x00\x00 \xfa\xf9\x8b?\x00\x00\x00 #\x050\xbf\x00\x00\x00\xc0\xfb\x83r\xbf\x00\x00\x00\xe06<\x8c?\x00\x00\x00\xe0\x92\xe6z\xbf\x00\x00\x00@J\x83l\xbf\x00\x00\x00\x80\x8a\xdb\x87\xbf\x00\x00\x00\x80\x8e\x01\x84?\x00\x00\x00\xc06\xbd\x91?\x00\x00\x00\x80F\x8c]?\x00\x00\x00@\x9de\x91?\x00\x00\x00\xe0\xc6\xedp?\x00\x00\x00@\xcf\xf8\x80\xbf\x00\x00\x00@\xfaUl\xbf\x00\x00\x00\xc0\x05\xb9e\xbf\x00\x00\x00\x80l\xa6\x84?\x00\x00\x00`\x9cC\\?\x00\x00\x00\xe0 k\x85\xbf\x00\x00\x00\xa0V\xbc\x84?\x00\x00\x00 \xc1gt?\x00\x00\x00\xa0"\x1at\xbf\x00\x00\x00\x80-\xb8c\xbf\x00\x00\x00\x00M\x85\x89\xbf\x00\x00\x00\xc0\xb9Bu\xbf\x00\x00\x00\x80\xce\xa7q?\x00\x00\x00\x00<+\x85\xbf\x00\x00\x00`\x1b\xe9W?\x00\x00\x00\xa0*\xad`\xbf\x00\x00\x00\x00\xbb\xac\x8e\xbf\x00\x00\x00\x80\xe8M\x84?\x00\x00\x00`4\xbcr\xbf\x00\x00\x00\x80\x14\xac\x84\xbf\x00\x00\x00 D6\x89\xbf\x00\x00\x00\xc0\xf7?\x8f\xbf\x00\x00\x00\xc0\x9au|\xbf\x00\x00\x00@\xdb\x8c\\\xbf\x00\x00\x00\x80v\xf8\x83\xbf\x00\x00\x00 \x04\xbb\x86?\x00\x00\x00\xc0R\xaam\xbf\x00\x00\x00\x00\xd8\x9a\x8d?\x00\x00\x00\xe0\xe6\xd8\x92\xbf\x00\x00\x00\xa0\x935\x8b?\x00\x00\x00\xc0\x96\xa8b?\x00\x00\x00\xe0#P\x92?\x00\x00\x00\x80D\x10h\xbf\x00\x00\x00\x00\xdfbw?\x00\x00\x00\x80\xbc\x0ft?\x00\x00\x00 \xdd\xf7\'\xbf\x00\x00\x00\xa0\xa4\x0f\x91?\x00\x00\x00`w\x8cw\xbf\x00\x00\x00 \xf70\x90?\x00\x00\x00\xe0\xc6\xbf\x96\xbf\x00\x00\x00\xc0J\xb6p\xbf\x00\x00\x00@^}p?\x00\x00\x00@*\x86c\xbf\x00\x00\x00\xc0=\xd1u\xbf\x00\x00\x00\xe0\x9cz~?\x00\x00\x00 L\x03\x8f\xbf\x00\x00\x00`?\xc4\x97?\x00\x00\x00\xe0\n\xa5w?\x00\x00\x00\x00#\xc9\x8e\xbf\x00\x00\x00 \xea\x05\x8a\xbf\x00\x00\x00\x80%\xc7\x80\xbf\x00\x00\x00\xc0\x1a\xfc\x98?\x00\x00\x00\xe0{\xe5Y\xbf\x00\x00\x00`iTa\xbf\x00\x00\x00`\xd3\x01j?\x00\x00\x00\xc0\x84\x88\x84?\x00\x00\x00 h\xa2v\xbf\x00\x00\x00\xc0W\xe0\x8a?\x00\x00\x00\xc0S\x9dF\xbf\x00\x00\x00@\x18\x0c\x82?\x00\x00\x00 \x87*\x82\xbf\x00\x00\x00\x80$\x0b\x95\xbf\x00\x00\x00\x00\x0bQ\x8d?\x00\x00\x00 \xae\xa8g\xbf\x00\x00\x00`\x8c\xbb\x82?\x00\x00\x00\xc0g\x1d\x86\xbf\x00\x00\x00\xa0\xcd\xa9s?\x00\x00\x00\x00\xac]6?\x00\x00\x00\x00v\xab\x91\xbf\x00\x00\x00 \x9bG\x83\xbf\x00\x00\x00`\x92\xdeo?\x00\x00\x00@\xeb\xb0U?\x00\x00\x00\xe0\xb75q\xbf\x00\x00\x00\x00;^{\xbf\x00\x00\x00 1\xff\x87?\x00\x00\x00\xa0N\x18\x83?\x00\x00\x00\xe0\x1b\xda\x81?\x00\x00\x00\xe0\x7fr\x89?\x00\x00\x00\xa0+\x19<\xbf\x00\x00\x00\xc0\x92\xc3i\xbf\x00\x00\x00\x80\xf0\xda\x82?\x00\x00\x00\xa0\x00\xd8\x8d\xbf\x00\x00\x00 /e\x8c\xbf\x00\x00\x00@f19\xbf\x00\x00\x00\xe0\xaf\xdbZ?\x00\x00\x00\x80\xc4\xf3x?\x00\x00\x00`\xea>X\xbf\x00\x00\x00\x00\xbeBy\xbf\x00\x00\x00 \'\x81L\xbf\x00\x00\x00\xa0\x0f\xd0\x90?\x00\x00\x00\x80v\xfcx?\x00\x00\x00\xe0\xaf\xb9\x96\xbf\x00\x00\x00@\x91\xb3o\xbf\x00\x00\x00@\xf6\xe3\x89\xbf\x00\x00\x00 \xed\xf9\x90\xbf\x00\x00\x00\xc0o\xd4\x87\xbf\x00\x00\x00\x80\xf2P\x84\xbf\x00\x00\x00`\x80\xceu\xbf\x00\x00\x00\x80\x04\x9f6?\x00\x00\x00`-\x16l?\x00\x00\x00\xe0\xe3\x8f\x85\xbf\x00\x00\x00\xc0\x1bgi\xbf\x00\x00\x00\x80\xd9Jc?\x00\x00\x00\xe0N\xc8\x81?\x00\x00\x00\xc07\x1f]?\x00\x00\x00 \x86\x18\x93\xbf\x00\x00\x00\x80k\xf6~\xbf\x00\x00\x00\xa0oA\x90?\x00\x00\x00\x80\x08\x92\x83?\x00\x00\x00\x00\xed*w\xbf\x00\x00\x00\xe04ps\xbf\x00\x00\x00\x801r\x8e?\x00\x00\x00 \xa9\x9c\x8e?\x00\x00\x00\x00\x8f_}?\x00\x00\x00\x00\x99\x91`\xbf\x00\x00\x00\xe0\x01\x0b\x90\xbf\x00\x00\x00`h\xf5i?\x00\x00\x00\xc0\x19r{\xbf\x00\x00\x00`#*~?\x00\x00\x00\x80\x16xa\xbf\x00\x00\x00\xc0\xab+h?\x00\x00\x00\x80E&T\xbf\x00\x00\x00\x80#\xed{\xbf\x00\x00\x00\xa08\xf5i?\x00\x00\x00\x002\xbb_?\x00\x00\x00@\xee\xff\x92\xbf\x00\x00\x00\xa0BkI?\x00\x00\x00\xe0Q4-?\x00\x00\x00\xe0\'z\x7f\xbf\x00\x00\x00\xc0\x1f\x89x?\x00\x00\x00\x80\xcf\xe2\x86?\x00\x00\x00\xe0!\xce\x81?\x00\x00\x00@\x7f\t\x80?\x00\x00\x00 \x8c\xcf\x82\xbf\x00\x00\x00\xe0_@v\xbf\x00\x00\x00\xa0\xcce\x80?\x00\x00\x00@r\x1ai?\x00\x00\x00\x00\xc77p\xbf\x00\x00\x00\x809H\x84?\x00\x00\x00 f\x96\x82?\x00\x00\x00\x00\xd8\x0f\x84\xbf\x00\x00\x00\x80\xe3\x13\x8c\xbf\x00\x00\x00\xa0\xe0\xbbz\xbf\x00\x00\x00 \xfb\xa0u?\x00\x00\x00\x00\\\xfe\x7f\xbf\x00\x00\x00\xe0:\xfd<\xbf\x00\x00\x00\x80E\x15l\xbf\x00\x00\x00\xc0V\xd0\x83\xbf\x00\x00\x00\xa0nW\x8a\xbf\x00\x00\x00\xe0\xb6He?\x00\x00\x00 \xcf}Y\xbf\x00\x00\x00\xa0=\xa8\x86\xbf\x00\x00\x00\xe0\xd8]\x89?\x00\x00\x00\xa0\x19v\x87\xbf\x00\x00\x00\xc0\xb99^\xbf\x00\x00\x00@\xb3Q\x99\xbf\x00\x00\x00 \x89(r?\x00\x00\x00 \x02\x94q\xbf\x00\x00\x00\x80\x88\x99q?\x00\x00\x00\xa0\xec\xe4v?\x00\x00\x00`\xa2\x10\x82\xbf\x00\x00\x00\xc0\xd9\xa9^\xbf\x00\x00\x00\xe0C\x00r?\x00\x00\x00\x00bF_\xbf\x00\x00\x00 \xca8g?\x00\x00\x00`\xc3\xc2Q\xbf\x00\x00\x00`GJa?\x00\x00\x00\xe06\x91h?\x00\x00\x00@q\xdb\x83\xbf\x00\x00\x00@\x05\xe0h\xbf\x00\x00\x00\xc0\x83\xd2\x8b?\x00\x00\x00\x80\xf3\xacq?\x00\x00\x00\xa0\x90\x16\x90\xbf\x00\x00\x00 j\x16q\xbf\x00\x00\x00 \xc3\xd7\x9f\xbf\x00\x00\x00\x00\xcf\xbd|\xbf\x00\x00\x00\xa0\xb1~\x83?\x00\x00\x00\x80\x92-w?\x00\x00\x00\x80\x80f\x82\xbf\x00\x00\x00\x80s\x9c\x84\xbf\x00\x00\x00 K&\x84?\x00\x00\x00\xa0\x810S\xbf\x00\x00\x00\xa0&\xb2[?\x00\x00\x00\xa0\xa9\x11\x85?\x00\x00\x00\xe0f\x97~?\x00\x00\x00`M\x03\x81\xbf\x00\x00\x00`\xf4\x9b\x92?\x00\x00\x00\x80q\xc9\x88?\x00\x00\x00\xa0\x05\xf1K\xbf\x00\x00\x00\xe0\x02\xd6E?\x00\x00\x00\x00\xcak\\\xbf\x00\x00\x00 p\x7f\x80\xbf\x00\x00\x00\xe0p}q?\x00\x00\x00\xc0k\x86w?\x00\x00\x00\x00\x1cL\\?\x00\x00\x00\xe0\x06\x8bi?\x00\x00\x00\xe0\x19cv\xbf\x00\x00\x00\x00\x05\xefp?\x00\x00\x00@\xd4\xa6\x83?\x00\x00\x00\xc0\x95\xd8\x82?\x00\x00\x00@x\xcd\x94\xbf\x00\x00\x00\xe0R\x0b\x7f?\x00\x00\x00\xa0\x00-\x89?\x00\x00\x00\xe0\xd5\xc3\x89?\x00\x00\x00\xa0c\xc4\x87\xbf\x00\x00\x00\xe00\xdbI\xbf\x00\x00\x00\x80\xb0\xe6\x87\xbf\x00\x00\x00\xa0\xb2\xdd\x88\xbf\x00\x00\x00`\xd5\x96y?\x00\x00\x00\xe0\xe5\x80\x85\xbf\x00\x00\x00\xa0P\xac\x95\xbf\x00\x00\x00\xc0u\xe7v?\x00\x00\x00\xa0\xe7mh\xbf\x00\x00\x00\xc0\x96^\x97\xbf\x00\x00\x00\xe0\x9c\xd1r?\x00\x00\x00@\xc0\x06\x7f\xbf\x00\x00\x00\x00(\xf6f?\x00\x00\x00@]\xa0\x90\xbf\x00\x00\x00\x80\x94\x8am\xbf\x00\x00\x00@\xdf\xbbm?\x00\x00\x00\xc0\xeek\x87\xbf\x00\x00\x00@\xc1\xc7\x80\xbf\x00\x00\x00@\x93-g\xbf\x00\x00\x00`z\x8dg\xbf\x00\x00\x00\xa0\xd7\x87r?\x00\x00\x00`C\xc7`\xbf\x00\x00\x00\xc0X\x0f\x80\xbf\x00\x00\x00\xe0z\xbaF\xbf\x00\x00\x00\xa0\x90E\x82?\x00\x00\x00\xa0\xe9tr\xbf\x00\x00\x00\xa0\xc5:\x00\xbf\x00\x00\x00\x0007\x8a?\x00\x00\x00\xc0\x87Pi?\x00\x00\x00`\x86\x15~\xbf\x00\x00\x00`\xad\xe0g?\x00\x00\x00\xa08\xa0}?\x00\x00\x00\x00\x82\xaa<?\x00\x00\x00@\x16\xf4\x91?\x00\x00\x00\x008\x81`?\x00\x00\x00\xc0\xc6\x0bl?\x00\x00\x00\x80\xdc\x9bt\xbf\x00\x00\x00\xe0%\xefx?\x00\x00\x00 \xd5\x0fy?\x00\x00\x00\xe0\xb3=o?\x00\x00\x00\x801V[?\x00\x00\x00 9\x80]?\x00\x00\x00\x80\x8d4\x85?\x00\x00\x00\xa0`\x98\x91?\x00\x00\x00\x80\xfegy?\x00\x00\x00\xe0&\xa6P\xbf\x00\x00\x00\x00\xee*\x85\xbf\x00\x00\x00 \x0f\x08\x8b\xbf\x00\x00\x00`\xd7Bu\xbf\x00\x00\x00\x80\xf0\xbf\x84?\x00\x00\x00\x00Vjn?\x00\x00\x00\x002\xad\x96?\x00\x00\x00\x00\x10\xb7\x8e?\x00\x00\x00@\xabX\x87\xbf\x00\x00\x00\xc01\xbbh?\x00\x00\x00\x80&\xb4w\xbf\x00\x00\x00\xc09\x0e~\xbf\x00\x00\x00\x00\x1a\xc5E\xbf\x00\x00\x00\x80=\x00\x85?\x00\x00\x00 \x7f\x9dd?\x00\x00\x00\xc0\x14Re?\x00\x00\x00\xa0\xc2\x1d\x83?\x00\x00\x00\x00?\x8eZ\xbf\x00\x00\x00\xa0\x90\x86Z\xbf\x00\x00\x00\x80\xca\xf6\x8b\xbf\x00\x00\x00\xc0\xe5`\x93\xbf\x00\x00\x00 \xe7\xdbr\xbf\x00\x00\x00\x80\x00\xc0\x95\xbf\x00\x00\x00@\xac\x1e\x91\xbf\x00\x00\x00\xc0y\x7f\x10\xbf\x00\x00\x00 3-\x82?\x00\x00\x00\x00\xfc\xad\x99?\x00\x00\x00\xc0+Gr?\x00\x00\x00 \xa4)f\xbf\x00\x00\x00 2!\x97?\x00\x00\x00`\x16\xaf\x92\xbf\x00\x00\x00\x00\xbd\xca\x82\xbf\x00\x00\x00\x00\x15*y?\x00\x00\x00\xc0\xda]{\xbf\x00\x00\x00\x80\x17\xb6P\xbf\x00\x00\x00`s\x03v\xbf\x00\x00\x00`\xdc0\x80\xbf\x00\x00\x00 \xd6\xf5\x8c?\x00\x00\x00`\x11\xff{\xbf\x00\x00\x00\xc0\xa3?}\xbf\x00\x00\x00 \xf0,\x89\xbf\x00\x00\x00\xa0\xff\xe3\x81?\x00\x00\x00\x00\x95\xb7y?\x00\x00\x00 \xde\x98\x9f?\x00\x00\x00`\xd5\xe9F\xbf\x00\x00\x00\xe0\\{\x97?\x00\x00\x00\x00\xf1\xe4y?\x00\x00\x00\x00\xc7\x84X?\x00\x00\x00\x00\x19\x18p?\x00\x00\x00\x80\xd4\x81\x9d?\x00\x00\x00`\x96tz\xbf\x00\x00\x00 \xb7\xceI\xbf\x00\x00\x00 \xb1\xfcc\xbf\x00\x00\x00\x80S\x83A\xbf\x00\x00\x00\xc0\x9d\xa3\x93\xbf\x00\x00\x00\x00j^n?\x00\x00\x00`sJC\xbf\x00\x00\x00\x00\xb2\xcb\x84\xbf\x00\x00\x00@\xb1\x9b\x83?\x00\x00\x00\x80\xea\x01v\xbf\x00\x00\x00\x00\xb7\xd6\x84\xbf\x00\x00\x00\x00\x15)H?\x00\x00\x00@\xdd\xd4D\xbf\x00\x00\x00\xc0U\x08e?\x00\x00\x00\xe0H\xfch\xbf\x00\x00\x00\x80+\xb6{\xbf\x00\x00\x00 [\xe4~\xbf\x00\x00\x00@\x1c\xd3T\xbf\x00\x00\x00\xc0\xb19n?\x00\x00\x00\xe0\xbcm\x7f\xbf\x00\x00\x00`\x01\xdb|\xbf\x00\x00\x00\xa0\xca\xe8\x80?\x00\x00\x00\x00r\xcdp\xbf\x00\x00\x00`\x91\xdb\x90\xbf\x00\x00\x00\x80\x8cx~\xbf\x00\x00\x00@@cf\xbf\x00\x00\x00\xe0{\x91b?\x00\x00\x00\xc0\x1a\xa9\x93?\x00\x00\x00\x00\xf3\x8c}?\x00\x00\x00`:\x92T?\x00\x00\x00`\xef\xe6h?\x00\x00\x00\xa0F!\x94?\x00\x00\x00\x80\x9c\xa8\x8f?\x00\x00\x00\xc0\xc1\xc6\x83?\x00\x00\x00\xc0\xaf`q\xbf\x00\x00\x00`\xd9\\~\xbf\x00\x00\x00\xe0\xa8kf?\x00\x00\x00 N\xd5x?\x00\x00\x00\x80\x076\x8d\xbf\x00\x00\x00\x00\x9a:X?\x00\x00\x00\xe0h\x05\x9c\xbf\x00\x00\x00\xe0\xae\xeb}\xbf\x00\x00\x00\xa0\xd93~\xbf\x00\x00\x00\xe0K\xbfd?\x00\x00\x00 \xa1\xeck\xbf\x00\x00\x00`}l\x85\xbf\x00\x00\x00 fz\x81\xbf\x00\x00\x00\xe0\x89#a?\x00\x00\x00\x00\xe7yg?\x00\x00\x00 \x88\x06`?\x00\x00\x00\xa0\xca\xfaq?\x00\x00\x00\x00\xf3\x03g?\x00\x00\x00\x00\x88O\x96\xbf\x00\x00\x00\xe0\x0f\xa4|\xbf\x00\x00\x00\xe0Q\xd6\x81?\x00\x00\x00\x00]\xcev\xbf\x00\x00\x00\xa0\'\xa1{\xbf\x00\x00\x00\xa0\xb5`\x8a\xbf\x00\x00\x00\xa0\xb7\xa2{\xbf\x00\x00\x00\x80\xce\xa5j?\x00\x00\x00\xc0\xf2\x02j?\x00\x00\x00\xc0\n\x00\x89\xbf\x00\x00\x00`+b\x99\xbf\x00\x00\x00\xe0\x0bHG?\x00\x00\x00\x00\xd4\xeb\x83\xbf\x00\x00\x00`\xae\x87m\xbf\x00\x00\x00@\xd8\x8a{\xbf\x00\x00\x00\xa0\xc7\x9d\x83?\x00\x00\x00\xc0\xfc\xf4p\xbf\x00\x00\x00\xc0\xbf\xb9\x81?\x00\x00\x00 \\\xa1\x97?\x00\x00\x00\x80\xc7\x04\x91?\x00\x00\x00@\x8c\xb2\x91?\x00\x00\x00 \xe2\xdd\x88?\x00\x00\x00\x00V_s?\x00\x00\x00\x80?J}?\x00\x00\x00\x00e\xe8\x91\xbf\x00\x00\x00\xe0/n\x94\xbf\x00\x00\x00 g\xaf\x85\xbf\x00\x00\x00\xa0\xdd\x12\x85\xbf\x00\x00\x00`,Yx?\x00\x00\x00\xe0x\x81z\xbf\x00\x00\x00\x80\x1e>z\xbf\x00\x00\x00\xe0\xfb\x06\x7f?\x00\x00\x00\xa0\xaf[\xa0?\x00\x00\x00\x00[\xb1\x88?\x00\x00\x00`>\xa6Y\xbf\x00\x00\x00\xe0\xbf$\x92\xbf\x00\x00\x00\x00R\xab\x80?\x00\x00\x00@\xe5$\x91?\x00\x00\x00 <\xe5s\xbf\x00\x00\x00\xa0\xcb{\x84?\x00\x00\x00\xc0\xf2>\x84?\x00\x00\x00\xa0\x00:{\xbf\x00\x00\x00\xa0\xcc\xc3]?\x00\x00\x00@y|\x86?\x00\x00\x00`\x0cKq\xbf\x00\x00\x00\x00\x97{p?\x00\x00\x00@\xe2\xf2h?\x00\x00\x00`\x84~f\xbf\x00\x00\x00@3\t\x92?\x00\x00\x00\xe0c.\x93\xbf\x00\x00\x00\xc0R\x19n?\x00\x00\x00\x00\xa8hS?\x00\x00\x00 \x13z\x9c\xbf\x00\x00\x00\xc00\xf5\x82\xbf\x00\x00\x00\xa0\xee\x11\x7f\xbf\x00\x00\x00\x00`\xb5\x8b\xbf\x00\x00\x00`\xfe\x9es\xbf\x00\x00\x00\xe0DYK\xbf\x00\x00\x00@\xaa\x9cl\xbf\x00\x00\x00 \xb6\x14]\xbf\x00\x00\x00\xe0\xa0{O\xbf\x00\x00\x00\xc0\xfeR}?\x00\x00\x00\x80\xfc\xefY?\x00\x00\x00 \xfdK{\xbf\x00\x00\x00\x804G`?\x00\x00\x00`cr\xa5\xbf\x00\x00\x00 fM\x8c?\x00\x00\x00\xc0\xe5\x06-\xbf\x00\x00\x00@\xbf\xde~?\x00\x00\x00 F\xf2r?\x00\x00\x00\xe0P\x13\x8c\xbf\x00\x00\x00\x80b\x04\x82\xbf\x00\x00\x00 kgz?\x00\x00\x00\x00 CV\xbf\x00\x00\x00\x00\xea\t\x90\xbf\x00\x00\x00 v0p?\x00\x00\x00\x80\x0e\\J\xbf\x00\x00\x00\x00\xb1\xc3y?\x00\x00\x00@\x88\x98\x90?\x00\x00\x00\xc0\xb4\xacc?\x00\x00\x00\x80\x06\xd5d?\x00\x00\x00\xa0?\x97G?\x00\x00\x00@8C\x13\xbf\x00\x00\x00 \xf5\x8de\xbf\x00\x00\x00\xa02(h?\x00\x00\x00@\x18\x99u\xbf\x00\x00\x00\x00\x84L\x82?\x00\x00\x00\x80\xb4\xd1\x93?\x00\x00\x00  \xcah?\x00\x00\x00  \x9fz?\x00\x00\x00`\xcbzE\xbf\x00\x00\x00\x80\x04\x9d\x8a\xbf\x00\x00\x00`\xd3\x0cm?\x00\x00\x00\x00\x9ay\x96?\x00\x00\x00@L\xeb\x96\xbf\x00\x00\x00\x80v\xe2U\xbf\x00\x00\x00\x80\x13\x1b\x9e?\x00\x00\x00\x80\xa0\x11v?\x00\x00\x00\x80\x99\xd1k\xbf\x00\x00\x00\xa0\xd6\x91~\xbf\x00\x00\x00\x00\xa3\xb2_\xbf\x00\x00\x00@\x90X\xa0\xbf\x00\x00\x00`\xb5\x0b\x90?\x00\x00\x00@\x1e\x04d\xbf\x00\x00\x00\xc0\x93\xbfG?\x00\x00\x00\xa0\xf3i\x87?\x00\x00\x00@\x1dLp?\x00\x00\x00\x00\x1b\xf8r?\x00\x00\x00\xa0c\xadd?\x00\x00\x00 \xc3\xde\x88\xbf\x00\x00\x00\xc0\xea\xb1\x83?\x00\x00\x00`\xf8\x89\x92?\x00\x00\x00 (]N\xbf\x00\x00\x00 P\xbe\x8b\xbf\x00\x00\x00\x80\rj\x8d?\x00\x00\x00\x80\x9aS\x89\xbf\x00\x00\x00\xe0`\x13a?\x00\x00\x00@\xeebo\xbf\x00\x00\x00 \xdcUM\xbf\x00\x00\x00 \x01iY\xbf\x00\x00\x00\xa0\xaa\xff\x87?\x00\x00\x00\xc0\xda\xbe\x87?\x00\x00\x00 M\xb4r?\x00\x00\x00\xa0\x1c\xc9]?\x00\x00\x00\xa0\xce}i\xbf\x00\x00\x00`\x8f\x89\x92\xbf\x00\x00\x00\xe0\xef\xb9}\xbf\x00\x00\x00\xa0\xf4m4?\x00\x00\x00@\x07\x97\x8a?\x00\x00\x00\x80\xc5\xe5\x95\xbf\x00\x00\x00\x80\xdb\xa9\x95?\x00\x00\x00\xa0\x02\xf9\x8b\xbf\x00\x00\x00\xc0\x19\x89\x90?\x00\x00\x00\xe0\xe9_p\xbf\x00\x00\x00\xa0\x13\xed\x85?\x00\x00\x00 \x14BB?\x00\x00\x00\xc07\xb0\x92?\x00\x00\x00@>\x0fr?\x00\x00\x00 p\xacy\xbf\x00\x00\x00\xe0\xb4\xb6\x8b?\x00\x00\x00@J4\x8c?\x00\x00\x00\xa0b\x15x\xbf\x00\x00\x00\xa0\xf8\x9a\x92\xbf\x00\x00\x00\xe0\xf3\x08\x88?\x00\x00\x00\x006K,?\x00\x00\x00\xa0\xff)\x82?\x00\x00\x00\xe0\xd5\xe02?\x00\x00\x00\xa0\xe1\xb7R\xbf\x00\x00\x00 \xfb\xfa\x80\xbf\x00\x00\x00\xa0k\xbd\x87\xbf\x00\x00\x00\xa0,\xd9y?\x00\x00\x00\xa0\x92Mz\xbf\x00\x00\x00\xc0\xc3_\x86\xbf\x00\x00\x00 )\x95z\xbf\x00\x00\x00\xe0\xdaI\x87?\x00\x00\x00\xc0\xa0\x90\x8f\xbf\x00\x00\x00`\xde\xe9|\xbf\x00\x00\x00\xa0I\xd8\x87?\x00\x00\x00\xa0\xef\xb6\x94?\x00\x00\x00\x00\xd6\x98\x81?\x00\x00\x00\xa01;h?\x00\x00\x00\x80\xf3A\x87\xbf\x00\x00\x00 \xe2/\x95\xbf\x00\x00\x00\x00/\xc8\x85?\x00\x00\x00\x80_*\x92?\x00\x00\x00\xa0cn}?\x00\x00\x00@\x02\xcau\xbf\x00\x00\x00\x80#\xfe\x98?\x00\x00\x00\x80j\xf1\x84\xbf\x00\x00\x00\xc0\x1a\x07q\xbf\x00\x00\x00\xa0\x8a#\x81?\x00\x00\x00`.\x89\x80?\x00\x00\x00\xe0\xc1Du?\x00\x00\x00`k\x9c\x86?\x00\x00\x00\xa0J4\\\xbf\x00\x00\x00\xe0\x11\xd0\x84\xbf\x00\x00\x00\xa0\x93\xe0\x8b\xbf\x00\x00\x00`\xc2\x87u?\x00\x00\x00@\x0b\xb0r\xbf\x00\x00\x00@k\xd1\x8b\xbf\x00\x00\x00`S\xc7\x80\xbf\x00\x00\x00`O9u\xbf\x00\x00\x00\x80\xf0Uw?\x00\x00\x00\x00\x8dy\x8b?\x00\x00\x00`w\xbc\x8f?\x00\x00\x00\x80\x07\x95j?\x00\x00\x00\x80\xe2+u\xbf\x00\x00\x00\x00\xbc\xd4}\xbf\x00\x00\x00`k\xe1\x89\xbf\x00\x00\x00\xa0\xfc\x87\x84\xbf\x00\x00\x00 \x18\x93\x86?\x00\x00\x00\x00\xb1\x13\x97?\x00\x00\x00\x000\x93\x93?\x00\x00\x00\xc0\xb5`d?\x00\x00\x00@\x8b\xa9\x8d\xbf\x00\x00\x00 m\xf6X\xbf\x00\x00\x00\xc0z\xd0`\xbf\x00\x00\x00\x80\x98D\x88?\x00\x00\x00\xc0\xbd\xda<\xbf\x00\x00\x00\x80\x008\x94\xbf\x00\x00\x00`\x18X\x7f\xbf\x00\x00\x00\xe0\xb9_g\xbf\x00\x00\x00\xc0`\x10p\xbf\x00\x00\x00\x00\xc4\xd5`\xbf\x00\x00\x00`R\xa2h?\x00\x00\x00\xc0O3s\xbf\x00\x00\x00`\xf58\x8a\xbf\x00\x00\x00\xa0@rm?\x00\x00\x00\x00\x83\xb8\x9e?\x00\x00\x00\xc0k\x88\x89?\x00\x00\x00@\xee\x8d\x96\xbf\x00\x00\x00\x80\xeb\x0cP\xbf\x00\x00\x00 6\xa4\x94\xbf\x00\x00\x00\x00:\xd1\x83\xbf\x00\x00\x00\xe0B\xf4_?\x00\x00\x00\xc0z:w\xbf\x00\x00\x00 \x0f\xf2p\xbf\x00\x00\x00`\xb5\xad\x94?\x00\x00\x00\xe0]o\x8b?\x00\x00\x00`\xaf\x9fp\xbf\x00\x00\x00`\r\x15\x7f?\x00\x00\x00 \x9a\xc8d?\x00\x00\x00\xa0<j\x8b\xbf\x00\x00\x00\xe0a\xa5u\xbf\x00\x00\x00\xc0\xd6\x8f\x8a\xbf\x00\x00\x00\xa0=\xdax\xbf\x00\x00\x00\xe0\xbe\xd4\x85?\x00\x00\x00\xe0\x8c\x12\x92\xbf\x00\x00\x00\xe0\xb12E\xbf\x00\x00\x00@0\xa0\x82\xbf\x00\x00\x00\xc0N\xe9\x91\xbf\x00\x00\x00`\xd6\xa5\x91?\x00\x00\x00`\xa9\xc0t?\x00\x00\x00`z]\x8e\xbf\x00\x00\x00\xe0<\xf9j\xbf\x00\x00\x00\xc0\xb9\x17\x85\xbf\x00\x00\x00 H\xe6u\xbf\x00\x00\x00`u>\x8b?\x00\x00\x00\xc0O\xef\x81\xbf\x00\x00\x00\x00I#=?\x00\x00\x00`\x92\xf0n\xbf\x00\x00\x00\x00\x1f\xd8a?\x00\x00\x00\xe0\x03\xa7\x87?\x00\x00\x00`\x83\xfda\xbf\x00\x00\x00\xc0\xc0\xc3}\xbf\x00\x00\x00\x80\xea\xbd\x90\xbf\x00\x00\x00\xa0d\x0cr?\x00\x00\x00 l{w?\x00\x00\x00`<\xd0y?\x00\x00\x00@aFc\xbf\x00\x00\x00\xa0\x0f\xd1j\xbf\x00\x00\x00@a\x0cx\xbf\x00\x00\x00@-\nJ?\x00\x00\x00\x80\xc1\x99m\xbf\x00\x00\x00\x80|I\x82?\x00\x00\x00\x80\xd2\xfeC?\x00\x00\x00\x00\xdd:C\xbf\x00\x00\x00\xa0\xa9\xe6|\xbf\x00\x00\x00\x80}\xa4\x8c\xbf\x00\x00\x00`6\xfc\x81\xbf\x00\x00\x00\xe0\xd6\x878?\x00\x00\x00\x80m\xc7\x8d\xbf\x00\x00\x00@\x82Wb\xbf\x00\x00\x00\xe0d\xf4s\xbf\x00\x00\x00\xa0\xc5\xda\x8e\xbf\x00\x00\x00\xe0_\xe7\x93\xbf\x00\x00\x00\xe0B\x01\x80?\x00\x00\x00`\x7f\x07j?\x00\x00\x00\xe0\xa3`{?\x00\x00\x00\x80Z.\x86?\x00\x00\x00@\xbeT\x80?\x00\x00\x00 \x8b\xedq\xbf\x00\x00\x00\x80\xad\x9bI\xbf\x00\x00\x00\x008\xd1o\xbf\x00\x00\x00\x00\xf5<b?\x00\x00\x00\x004\xaf{?\x00\x00\x00\x00~\xc4\x9c\xbf\x00\x00\x00\x80]>x?\x00\x00\x00\x80\x10\xbf\x85?\x00\x00\x00\x80\xf9\x17\x82?\x00\x00\x00\xe0p\x85m\xbf\x00\x00\x00 qa\x8c\xbf\x00\x00\x00@\xd8\xc7\x96?\x00\x00\x00\xa05lq?\x00\x00\x00\xc0\x1d\xa6\x17?\x00\x00\x00\xa0\xf87\x81\xbf\x00\x00\x00\x00\x86G\x80?\x00\x00\x00 \x19\x02e\xbf\x00\x00\x00\x00\x9c\xc6\x92?\x00\x00\x00\x00@\xb8~?\x00\x00\x00\xa0\xd1\xafu\xbf\x00\x00\x00 \xd8\x9e\x12?\x00\x00\x00\x00\x90\xf2\x80\xbf\x00\x00\x00 \xaaRP?\x00\x00\x00\x80\xe8\xde\x8e\xbf\x00\x00\x00`_C\x85?\x00\x00\x00@\xe7T\x86\xbf\x00\x00\x00\x80yxd\xbf\x00\x00\x00\x80\x88\x80\\\xbf\x00\x00\x00\xa0\x86G\x80?\x00\x00\x00\x00\xb6\x99c?\x00\x00\x00\x00\x94Pu?\x00\x00\x00\xc0\xe3\xf7w?\x00\x00\x00\xa0\xafVV?\x00\x00\x00\xa0\x0c;\x89?\x00\x00\x00\xa0\xb76\x93?\x00\x00\x00\xa0n\xa1\x80?\x00\x00\x00\x00\xb9\xfeD?\x00\x00\x00\xa0x#q\xbf\x00\x00\x00\xe0\x1e\xb3\x88?\x00\x00\x00 M\x89\x89\xbf\x00\x00\x00\xc0\xea<+\xbf\x00\x00\x00@L\x84h?\x00\x00\x00\xc0\xf9\x8a??\x00\x00\x00\xe0k\x8b\x8f\xbf\x00\x00\x00\x00D\xed\x91?\x00\x00\x00\xc0F\xff|?\x00\x00\x00\xa01?\x92\xbf\x00\x00\x00@\xba%\x88\xbf\x00\x00\x00\xe0{\x83\x81\xbf\x00\x00\x00\xe0\xc3^q?\x00\x00\x00@ \xfbT\xbf\x00\x00\x00`3\xdf=?\x00\x00\x00\xa0F\x85\x81?\x00\x00\x00 hiP?\x00\x00\x00 \xd2\x19N?\x00\x00\x00@\x0cF\x84?\x00\x00\x00\xa0\xbf\x96L\xbf\x00\x00\x00 \x8d&\x87\xbf\x00\x00\x00`0\x00a\xbf\x00\x00\x00\x00\xebX\x85?\x00\x00\x00`\x93\xf5\x83\xbf\x00\x00\x00\xa0\xed^\x8d\xbf\x00\x00\x00 4[x?\x00\x00\x00`d1t?\x00\x00\x00\x80\x11X\x7f\xbf\x00\x00\x00 \xdbb\x84\xbf\x00\x00\x00\xc0x\x8f4?\x00\x00\x00 \xf1\xd5\x90\xbf\x00\x00\x00@\x81t\x80\xbf\x00\x00\x00 w\xe6c\xbf\x00\x00\x00\x00C\xc0h\xbf\x00\x00\x00\xc0u\x9bU\xbf\x00\x00\x00 \xab<\x7f?\x00\x00\x00 r\x8bg\xbf\x00\x00\x00@\xc3\x92m\xbf\x00\x00\x00\x00\x8aW\x8b\xbf\x00\x00\x00\xa0TU9?\x00\x00\x00\xc0\x16\xa8\x81?\x00\x00\x00\x00-\xb2}\xbf\x00\x00\x00\xc0\x07\xddr?\x00\x00\x00\xa0j\x17\x8a?\x00\x00\x00@|\x07~\xbf\x00\x00\x00 m7\x91?\x00\x00\x00\x80\x91\x9b\x8d\xbf\x00\x00\x00\x00h\xbfs\xbf\x00\x00\x00`\x8d\xd5\x89?\x00\x00\x00`\xc4\xf5\x86?\x00\x00\x00`\x92\xd8x?\x00\x00\x00 \xae\xee\x8c\xbf\x00\x00\x00 \xca\x83Y?\x00\x00\x00\xc0\xd4\xd7|?\x00\x00\x00\xe0-\xea~?\x00\x00\x00\x00\x08eb?\x00\x00\x00\xa0\x92\x99\x98?\x00\x00\x00\x80\xc6m\x94?\x00\x00\x00 \xd7+s?\x00\x00\x00\xa0\x8e\xd7\x82\xbf\x00\x00\x00 p\x0b\x84?\x00\x00\x00\xe0]E\x8b\xbf\x00\x00\x00\x00]\x0e\x85?\x00\x00\x00`\xa5x\x91?\x00\x00\x00@v~\x8c\xbf\x00\x00\x00`.&\x80?\x00\x00\x00@\x13\xc9\x82?\x00\x00\x00\xe0\xa3c\x87\xbf\x00\x00\x00@}jp\xbf\x00\x00\x00\x80\xad\xf2\x97\xbf\x00\x00\x00\xa0\xcc\x15u?\x00\x00\x00\x00\xdf\xd2p\xbf\x00\x00\x00\xe0\x0c\xe9\x98\xbf\x00\x00\x00@\xf87\x84\xbf\x00\x00\x00`\x07z\x8c?\x00\x00\x00\xc0\xe2/7?\x00\x00\x00\x803\xc3\x92\xbf\x00\x00\x00\x00qGl\xbf\x00\x00\x00\x00\xb5\x06\x89\xbf\x00\x00\x00`\xb3\xa0\x8b\xbf\x00\x00\x00\xa0\xf23[\xbf\x00\x00\x00\xe0Ev\\\xbf\x00\x00\x00\xe0O\xa5\x90\xbf\x00\x00\x00 \x97\x11}?\x00\x00\x00`\xa4\xe4_\xbf\x00\x00\x00\xa0\x8da\x86?\x00\x00\x00\xe0_\x00r\xbf\x00\x00\x00`$\xbd:\xbf\x00\x00\x00\x80\x922C?\x00\x00\x00`\xac1L?\x00\x00\x00\x00}\x83\x91\xbf\x00\x00\x00\x801\xf4\x8a\xbf\x00\x00\x00`I\xaap\xbf\x00\x00\x00\xa0\x1e\xd9\x86?\x00\x00\x00\x00^\xd7\x94?\x00\x00\x00\xe0n\t\x87\xbf\x00\x00\x00\xc0\x05\xedx\xbf\x00\x00\x00 \x91&z\xbf\x00\x00\x00@\xaa\xd2w\xbf\x00\x00\x00`\xc3\x92w\xbf\x00\x00\x00`5\x12A?\x00\x00\x00 7\xec\x87\xbf\x00\x00\x00\xa0\xd7M\x8f\xbf\x00\x00\x00`\xc6u\x8a?\x00\x00\x00`~\xe9n\xbf\x00\x00\x00\x80\x16\xc7.?\x00\x00\x00\xe0\x8b\x93\x87?\x00\x00\x00` \x8c\x8b?\x00\x00\x00\xa0\xa8:~?\x00\x00\x00@\xa0\x9a\x90\xbf\x00\x00\x00\xe0\x14mq?\x00\x00\x00\xa0h7\x8e\xbf\x00\x00\x00\xe0\xeaWi\xbf\x00\x00\x00\x806\xf5|?\x00\x00\x00\xe0\xaaEI?\x00\x00\x00@\x012u\xbf\x00\x00\x00\xc0\xd1\xe8n\xbf\x00\x00\x00`t\x08`\xbf\x00\x00\x00@a\x0cu?\x00\x00\x00\x00~,\x88?\x00\x00\x00 $|y?\x00\x00\x00 \xa3.\x90\xbf\x00\x00\x00\xe07bi?\x00\x00\x00@\x8a\xa8-?\x00\x00\x00\xa0\x99Ls\xbf\x00\x00\x00\x00\xf2\xdat?\x00\x00\x00\x00\xe1H\x80?\x00\x00\x00`U\xedw\xbf\x00\x00\x00\x80\xdc\x7f\x83\xbf\x00\x00\x00\xc0\xbc\xdfZ?\x00\x00\x00@2@o?\x00\x00\x00\xc0\xec\xd3|?\x00\x00\x00 7+\x96\xbf\x00\x00\x00\xa0\x80\xddx\xbf\x00\x00\x00`\x81\x97`?\x00\x00\x00@\x01\xac\x84\xbf\x00\x00\x00\xe0\xa4%\x88?\x00\x00\x00\xa0\xfd\xa9\x83\xbf\x00\x00\x00\xc0\x19)y?\x00\x00\x00\x80\xf9\xef??\x00\x00\x00\x00\xab\xe9s?\x00\x00\x00\x80\x18KT?\x00\x00\x00\xc0\x81pu?\x00\x00\x00\xe0\xcb\x8a\x85?\x00\x00\x00\x80\xb3\x05\x7f?\x00\x00\x00\xc0t\xbc\x80?\x00\x00\x00\xc0\x1a\xe8\x7f?\x00\x00\x00\x00\xa1#X?\x00\x00\x00\xa0\x1c\xe61?\x00\x00\x00\xa0|\x94j\xbf\x00\x00\x00\xc0\xf5R\x9f?\x00\x00\x00\x00$\x11u\xbf\x00\x00\x00\xa0\x1a\x9d\x91?\x00\x00\x00\x80\x0b\xa8\x7f\xbf\x00\x00\x00\xa0?\xe1d\xbf\x00\x00\x00\x00+\x95l\xbf\x00\x00\x00@u\xc9b\xbf\x00\x00\x00`g\x97y?\x00\x00\x00\x80t\x90G\xbf\x00\x00\x00\xa0<)\x93\xbf\x00\x00\x00\x00\xe1\x1b\x86?\x00\x00\x00\x80\xe9}B\xbf\x00\x00\x00\xe0\x7fjp?\x00\x00\x00\xc0\xdf\x03\x8a\xbf\x00\x00\x00\xa0\x1a\xdc\x8d?\x00\x00\x00`>\x9cc\xbf\x00\x00\x00\x00\x14\xdc\x88?\x00\x00\x00\xa0D\xe2`?\x00\x00\x00\x80e[\x8a\xbf\x00\x00\x00 \xdb6\x84?\x00\x00\x00 |a`?\x00\x00\x00\xc04Eo\xbf\x00\x00\x00\x00\x05\xcaf\xbf\x00\x00\x00@)\x81\x80\xbf\x00\x00\x00`5\xd3\x85?\x00\x00\x00`\x1bkN\xbf\x00\x00\x00\xe0s\xd9e\xbf\x00\x00\x00\xe0j\xde\x8b?\x00\x00\x00\x80Ns\x80?\x00\x00\x00\xa0V\x91\x81\xbf\x00\x00\x00\x00>\x8fv\xbf\x00\x00\x00\xa0\xf8\xf2\x00\xbf\x00\x00\x00\xc0\x88l\x98?\x00\x00\x00\xa0\xebr7\xbf\x00\x00\x00 \x10\xe0\x82\xbf\x00\x00\x00\xe0]\x87c?\x00\x00\x00\xe0\x94Hq\xbf\x00\x00\x00 \xb0\xe8\x87\xbf\x00\x00\x00 ^\xad\x83\xbf\x00\x00\x00\x80\xc9\xee{\xbf\x00\x00\x00\xc0\x0f;\x98?\x00\x00\x00`\\\xefP\xbf\x00\x00\x00\x00\xc1"\x84\xbf\x00\x00\x00 6wk\xbf\x00\x00\x00\xe0\x17\xf8u?\x00\x00\x00\xc0\x99B\x90\xbf\x00\x00\x00\x80\xce\x14\x8f?\x00\x00\x00\xe0cx\x87?\x00\x00\x00`\xd8jE?\x00\x00\x00\x00\x1d#h\xbf\x00\x00\x00\xa0d<|?\x00\x00\x00\xa0\xa7\xe4p\xbf\x00\x00\x00@K1\x85\xbf\x00\x00\x00\x00\xd99\x87\xbf\x00\x00\x00\xe0\xe9Ga\xbf\x00\x00\x00@\xe04M?\x00\x00\x00\xc0\x19\x04m?\x00\x00\x00@r_\x90\xbf\x00\x00\x00\xa0{o\x8c?\x00\x00\x00\xe0\x81\xbfr?\x00\x00\x00 \xc0\xa1V?\x00\x00\x00\xa0\xca/w\xbf\x00\x00\x00\x80T\x19p\xbf\x00\x00\x00\xe0\xca\x10\x8d\xbf\x00\x00\x00\x80\x99\x8f\x00?\x00\x00\x00 \t.\x8e?\x00\x00\x00\xa0\xfd\xf7\x83?\x00\x00\x00\x80n\xcb\x86?\x00\x00\x00\x00\xce6D\xbf\x00\x00\x00\xc0\x9e\x8e\x94\xbf\x00\x00\x00@\xcdH\x97\xbf\x00\x00\x00`\x9c\xf0\x89\xbf\x00\x00\x00\xa0\x9d\x06n\xbf\x00\x00\x00\xe0K\xc5r\xbf\x00\x00\x00\x00"\xa2n\xbf\x00\x00\x00\x80\xbde\x8f?\x00\x00\x00\x00\xa3q\x8a\xbf\x00\x00\x00\xa0\x17WZ\xbf\x00\x00\x00\x80\x1f\x0b\x8f?\x00\x00\x00 \x17\xa9l?\x00\x00\x00\x00\xf2\x8a\x83?\x00\x00\x00\xe0\x06Fp?\x00\x00\x00\x00\x9bYc\xbf\x00\x00\x00\xa0\x90y\x90?\x00\x00\x00`\x8f\xec\x7f\xbf\x00\x00\x00\x80Vx\\?\x00\x00\x00\xa0^\x13p\xbf\x00\x00\x00\x80IY\x9a?\x00\x00\x00\xe0\xa6P\x8a?\x00\x00\x00\xa0\x0e>\x8d\xbf\x00\x00\x00\xe0\x882\x83?\x00\x00\x00\x80\x05}\x9a?\x00\x00\x00\xe0\x0bo\x93?\x00\x00\x00\x00{\x07h\xbf\x00\x00\x00\x002(z?\x00\x00\x00\x80,D\x80?\x00\x00\x00\xe0\xa6\x11\x8f\xbf\x00\x00\x00\xe0elZ?\x00\x00\x00\xa0\xf0\xc8\x82?\x00\x00\x00\xc0\x92\x17^?\x00\x00\x00\xa0\xdbE\x8b?\x00\x00\x00\xc0\xa5\xce\x89?\x00\x00\x00\x80\xcaas\xbf\x00\x00\x00`)3|\xbf\x00\x00\x00\x80\x90\xf9T\xbf\x00\x00\x00\xa0\x0b\x9bn\xbf\x00\x00\x00 g\xff_\xbf\x00\x00\x00 \xe6:\x84\xbf\x00\x00\x00`n\xe7g\xbf\x00\x00\x00\x80\x14UZ\xbf\x00\x00\x00\x80\x18\xa5\x88?\x00\x00\x00@\xaa\x94 ?\x00\x00\x00\xa0\xee\xaat?\x00\x00\x00\xa0^\x80~\xbf\x00\x00\x00\xa0\xb6Nb\xbf\x00\x00\x00\xe0UyB\xbf\x00\x00\x00\xe0}\xae\x97?\x00\x00\x00\xa0\x8a\x10/\xbf\x00\x00\x00@\xc0tO?\x00\x00\x00`\xf2)P?\x00\x00\x00 F!s\xbf\x00\x00\x00\xe0\xfdn0?\x00\x00\x00\x80\x97\x81\x99?\x00\x00\x00@\x9d\x00~\xbf\x00\x00\x00\x00&tx\xbf\x00\x00\x00`\x8e\xdc\x88\xbf\x00\x00\x00\x00Q\x13\x85?\x00\x00\x00`\xb5\x1f{?\x00\x00\x00`c\x87\x91?\x00\x00\x00\xc0\xff\x08t?\x00\x00\x00 \x1f\xe8\\?\x00\x00\x00\xc0\x9a\x8d\x86?\x00\x00\x00\x00vZ\x92\xbf\x00\x00\x00 \xf6\t`\xbf\x00\x00\x00 Q\xbe\x8d\xbf\x00\x00\x00\xa0\xaf\xc0\x84?\x00\x00\x00\xa0\xad\xed"?\x00\x00\x00 \xd3+&\xbf\x00\x00\x00`\xc5\xf5U?\x00\x00\x00@7U\x0c\xbf\x00\x00\x00\xc0\x05\xc0\x86\xbf\x00\x00\x00\xc07\x0ch\xbf\x00\x00\x00\x80\xd76Y?\x00\x00\x00@\x85\xa4w?\x00\x00\x00\xc0\xf3j\x89\xbf\x00\x00\x00`\x13\xf8r?\x00\x00\x00\x80\xe2\xb6x\xbf\x00\x00\x00\x80\x1c\xe2\xe1\xbe\x00\x00\x00\xa0u\xf6`?\x00\x00\x00\xc0\xa7\xb7\x92\xbf\x00\x00\x00\x00t\x1az?\x00\x00\x00\xa0\x1e\xe5\x8f\xbf\x00\x00\x00\xe0\x8f\x98\x8e\xbf\x00\x00\x00\xe0eS\x88?\x00\x00\x00\xe0\xe3I\x8b\xbf\x00\x00\x00\x80\xe5\xc2w\xbf\x00\x00\x00 \x82\x00P?\x00\x00\x00`j\xd9\x9c?\x00\x00\x00\xe0w\'{\xbf\x00\x00\x00\x00\x95\xb8\x88?\x00\x00\x00 j\xafw\xbf\x00\x00\x00 \x07\x1f\x82?\x00\x00\x00\x00\x8a\x9ck?\x00\x00\x00\x00\xec?\x90?\x00\x00\x00\xc0\xf9}k\xbf\x00\x00\x00`\x9e\xf2m?\x00\x00\x00\x80\x93<#\xbf\x00\x00\x00\xa0\xe5\xa7\x85?\x00\x00\x00`\x80\xc1w\xbf\x00\x00\x00\x80[\xf4U\xbf\x00\x00\x00@\xb2\xddr?\x00\x00\x00\xe0\x10\xe3p\xbf\x00\x00\x00@8J>?\x00\x00\x00\x00\xf7cz?\x00\x00\x00`.\xdbi\xbf\x00\x00\x00\xa0@d\x91\xbf\x00\x00\x00\xc0\x02\x1d}\xbf\x00\x00\x00`\xd7\x9d|\xbf\x00\x00\x00\x00&~x\xbf\x00\x00\x00\x80\x938n?\x00\x00\x00\xe0\x9b(z\xbf\x00\x00\x00\xe0\xed\x85z\xbf\x00\x00\x00\xe0 \xec5\xbf\x00\x00\x00\x00@N\x80?\x00\x00\x00\x80\xa6\xe3p\xbf\x00\x00\x00\xe0\x8a\xb8\x86\xbf\x00\x00\x00\x80\xd7\x0b\x99?\x00\x00\x00\xa03\xe4\x8d?\x00\x00\x00`r\xb1i?\x00\x00\x00\xa0\xa0\xc26?\x00\x00\x00@]\xda\x7f?\x00\x00\x00 \xac\xa0j\xbf\x00\x00\x00@\x8a\xae"\xbf\x00\x00\x00@Q3R?\x00\x00\x00 \xfc\xa4\x93\xbf\x00\x00\x00 \xbfcb\xbf\x00\x00\x00\x80\xa4}\x89\xbf\x00\x00\x00\x00iL\x84\xbf\x00\x00\x00@\xb1\xabt?\x00\x00\x00 ^\xa2K?\x00\x00\x00\x00\xf6.\x97\xbf\x00\x00\x00\xa0\xd4\xf1\x97?\x00\x00\x00\x80F\xf1\x8e?\x00\x00\x00\xe0\xab\x8c}?\x00\x00\x00\x808\xdb{?\x00\x00\x00 Q\xd9\x88?\x00\x00\x00\xa0\x93\xb6\x91\xbf\x00\x00\x00\xa0\x85\xd0i\xbf\x00\x00\x00\xe0\x1d\x04P?\x00\x00\x00\x00\xe0\x84|?\x00\x00\x00\x80<GJ\xbf\x00\x00\x00\xa0\x90\xa0s?\x00\x00\x00 \xd9\x17q\xbf\x00\x00\x00 \xc9i\x89\xbf\x00\x00\x00\x80J\xe6\x83\xbf\x00\x00\x00@\x0c\xd7\x92\xbf\x00\x00\x00\xe0u\x06x?\x00\x00\x00\xc0r\xc5]?\x00\x00\x00 yO\x81?\x00\x00\x00\xe0\xb8\x04r?\x00\x00\x00 \xfc\x8fX?\x00\x00\x00\x80\x80xx?\x00\x00\x00\xa0\xe90z\xbf\x00\x00\x00\xc0!=\x94\xbf\x00\x00\x00\xa0\xab\x95B\xbf\x00\x00\x00\xa0K\xb2\x85?\x00\x00\x00`\xe8JX?\x00\x00\x00\xe0\xad\xba\x81\xbf\x00\x00\x00\xe0\x17\x9b{\xbf\x00\x00\x00`\x16\x98\x80?\x00\x00\x00 \xd0?\x86?\x00\x00\x00`\xa5h\x85?\x00\x00\x00\xe0Z\x07\x8f\xbf\x00\x00\x00@\xfe\x87\x98\xbf\x00\x00\x00 \x1b\xe8q\xbf\x00\x00\x00 \xfev\x91?\x00\x00\x00@x(\x90\xbf\x00\x00\x00\x00} _\xbf\x00\x00\x00\x00h\xecU?\x00\x00\x00\xe0\xc6\\\x88?\x00\x00\x00 #\x1d\x83?\x00\x00\x00@\xd8\xc3Y?\x00\x00\x00@,\x96h\xbf\x00\x00\x00\xa0\xc5,6\xbf\x00\x00\x00`\\\xbeg\xbf\x00\x00\x00\xa0\x86\x8fe?\x00\x00\x00@\x12t\x7f?\x00\x00\x00\x00\xc4\xb6|\xbf\x00\x00\x00\xa0\xd6w\x83\xbf\x00\x00\x00 \x98\xad\x82?\x00\x00\x00\x00k\xa3\x97\xbf\x00\x00\x00\x00\x90\x07\x83?\x00\x00\x00@0\xe8\x89\xbf\x00\x00\x00\xc0\x80\xdem?\x00\x00\x00 \xd9\xd6s?\x00\x00\x00`\xa1_w\xbf\x00\x00\x00\xa0l\xd5e\xbf\x00\x00\x00\x00\x97\xdb\x8c\xbf\x00\x00\x00\xc0{\x02\x8a\xbf\x00\x00\x00 Rh\x94?\x00\x00\x00\x00?\xb1^?\x00\x00\x00\xa0\xaf\x12z\xbf\x00\x00\x00\xa0\xee\x9cs\xbf\x00\x00\x00@\x80\xc1\\\xbf\x00\x00\x00\x00=\xc0\x87?\x00\x00\x00@lej?\x00\x00\x00\xe0f\xa6r\xbf\x00\x00\x00 \xe1\xd6\x80\xbf\x00\x00\x00@]\n\x86\xbf\x00\x00\x00`\x13X\x8c\xbf\x00\x00\x00\x00\x7fe\x00?\x00\x00\x00\xe0\x93\x7f\x91?\x00\x00\x00\x80\xa0\xb5u\xbf\x00\x00\x00\xa0\xd4\x88u\xbf\x00\x00\x00`t\xfe\x83?\x00\x00\x00 \xe8Vi?\x00\x00\x00\xe0\x1b\r{?\x00\x00\x00\x80V;\x96\xbf\x00\x00\x00`\xadRq?\x00\x00\x00`\x1d\xab\x87?\x00\x00\x00\xa0Nhc?\x00\x00\x00\x00^\xd5\x86?\x00\x00\x00\xe0\xe0\xde\x83\xbf\x00\x00\x00\x00\x9c\xb5R?\x00\x00\x00\xa0\xbb\xc3q\xbf\x00\x00\x00\x00\x93<X\xbf\x00\x00\x00\xa0\xc9\x0ew?\x00\x00\x00\xe0\xb2\xe9S?\x00\x00\x00 \xe8|\x90\xbf\x00\x00\x00\xc0\x98:C\xbf\x00\x00\x00\xc0\xb1@\x81\xbf\x00\x00\x00`\x0e\x81\x81?\x00\x00\x00\x80V:\x96\xbf\x00\x00\x00\x803Sq\xbf\x00\x00\x00\x80*\xebp?\x00\x00\x00 \xbb\x1f\x91?\x00\x00\x00@)\xf0j\xbf\x00\x00\x00`hZ\x81?\x00\x00\x00\x009l\x8d?\x00\x00\x00\x00\x99\xd8`\xbf\x00\x00\x00@h\xa1\x88\xbf\x00\x00\x00`\xb9)\x8f\xbf\x00\x00\x00 O+g\xbf\x00\x00\x00\x00A\xd5G\xbf\x00\x00\x00`x\xd7\xd3>\x00\x00\x00\xc0\xfbr\x82?\x00\x00\x00@k7\x86\xbf\x00\x00\x00\xe0\x91_q?\x00\x00\x00\xc0\xa2\xd6\x86\xbf\x00\x00\x00`\xde\xbe\x9c?\x00\x00\x00@\xa5R\x81\xbf\x00\x00\x00\xe0\x93\xcb|?\x00\x00\x00`\xad\xa3\x84\xbf\x00\x00\x00\xa0|aJ\xbf\x00\x00\x00 \x0cd\x91\xbf\x00\x00\x00\xa0\x91\x7fh?\x00\x00\x00\xc0\x8e{\x90?\x00\x00\x00\xc0\'\x8a\x96?\x00\x00\x00\x00XNa\xbf\x00\x00\x00\xa0\x15~~\xbf\x00\x00\x00`\xeb\x8e\x96\xbf\x00\x00\x00\xa0\x11\xady\xbf\x00\x00\x00\xc07\xc5d\xbf\x00\x00\x00\x80_V\x81?\x00\x00\x00\x80\xe5Hr?\x00\x00\x00\x00\xc8\xc3\x81?\x00\x00\x00\x00~\xe3s\xbf\x00\x00\x00`Z\xe8D?\x00\x00\x00\xe0U\x94`?\x00\x00\x00\xe0\x90\x16\x86?\x00\x00\x00 \xe6\x10w?\x00\x00\x00`\xb4\x99f?\x00\x00\x00\xa0\xcf\xc7\x89?\x00\x00\x00\x00\x058\x8e\xbf\x00\x00\x00\xc0\xc5\x82o\xbf\x00\x00\x00 \xdd\xb2\x94\xbf\x00\x00\x00\xc0t\xc0y\xbf\x00\x00\x00\xc0\x94\x8e\x98\xbf\x00\x00\x00`\x8b\xfc\x80\xbf\x00\x00\x00\xa0\x14\xd6v\xbf\x00\x00\x00 \xd4\x85\x8f?\x00\x00\x00\xa0}t\x8c\xbf\x00\x00\x00\x00VU\x89\xbf\x00\x00\x00\xe0&8\x91\xbf\x00\x00\x00 H\xae`?\x00\x00\x00\xe0\xcc\x90n\xbf\x00\x00\x00@\x03\xbal?\x00\x00\x00@oZ\x97\xbf\x00\x00\x00 \x1dQ\x81\xbf\x00\x00\x00`}4\x84\xbf\x00\x00\x00 C\xa7Z\xbf\x00\x00\x00`t\'\\\xbf\x00\x00\x00`\xe3\xc6\x80\xbf\x00\x00\x00\x80y\xea\x88?\x00\x00\x00\xe0\xd6\x96s?\x00\x00\x00\xc0\x85\x02d\xbf\x00\x00\x00`xY\x8f?\x00\x00\x00\x00\x9f\x17h\xbf\x00\x00\x00`l\x1d\x88?\x00\x00\x00\xc0\xb2\xd5Z\xbf\x00\x00\x00 \xe6\xe7q\xbf\x00\x00\x00 2\x1eu\xbf\x00\x00\x00@\xd7\xe6{\xbf\x00\x00\x00\xe0m~\'?\x00\x00\x00\x00\x9e\xdfv?\x00\x00\x00\x80&\x86u\xbf\x00\x00\x00 \xd2\x91\x88\xbf\x00\x00\x00\x00\xbf\xe1\x92?\x00\x00\x00\xa0<}\x82?\x00\x00\x00\xa0|\xb7\x83\xbf\x00\x00\x00\x80s\x9dk\xbf\x00\x00\x00 6\xc9\x82\xbf\x00\x00\x00\xa0r\x83B\xbf\x00\x00\x00\xc0cEi\xbf\x00\x00\x00`\xa9\xb6q?\x00\x00\x00\x00\x16\xa6\x85\xbf\x00\x00\x00 b\xfbF?\x00\x00\x00\xe0\xa1%\x81?\x00\x00\x00 =\x9f|\xbf\x00\x00\x00@\x1b\xebW\xbf\x00\x00\x00`\xa7\x07\x90?\x00\x00\x00\xc0\x11\x87m\xbf\x00\x00\x00\xa0\xa6f\x98?\x00\x00\x00\xc0\xbe\x00h?\x00\x00\x00\x80\xb7\x1e\x8b\xbf\x00\x00\x00`\xb7\xefv?\x00\x00\x00\x00\xad`\x85\xbf\x00\x00\x00`kdi?\x00\x00\x00\x00{\xd6\x96?\x00\x00\x00\xe0\xb8*\x88\xbf\x00\x00\x00\xe0e\x02u\xbf\x00\x00\x00`-\x8aQ?\x00\x00\x00 \xcc\xc1u?\x00\x00\x00\x80:\xb6\x88?\x00\x00\x00\xa0\xa7\xfb\x81\xbf\x00\x00\x00\x80\x14jB?\x00\x00\x00\xa0\x90WH?\x00\x00\x00\x00\xb3\xf6\x80\xbf\x00\x00\x00\x80\xde\xd4p\xbf\x00\x00\x00\xc0\xd0\x9d\x97\xbf\x00\x00\x00`\x0cJp\xbf\x00\x00\x00 \x01\x97}?\x00\x00\x00 \xbdzt\xbf\x00\x00\x00\x80\x17\x92\x86?\x00\x00\x00\xe0\xa4(X?\x00\x00\x00\xe0\xca\xb3\x90\xbf\x00\x00\x00\xe0\x9d=p?\x00\x00\x00\xc0!\x0em?\x00\x00\x00@\x96\xe1\x80\xbf\x00\x00\x00\x00u\xa6\x93\xbf\x00\x00\x00 \xf7\xbc\x8e\xbf\x00\x00\x00@\xa7I\x83\xbf\x00\x00\x00\xa0\xb3\x8f}?\x00\x00\x00@\x81ub?\x00\x00\x00\x00\x15\xb3{?\x00\x00\x00`o\xa2\x01\xbf\x00\x00\x00\xa0\x8b\xe1\x7f?\x00\x00\x00\xa0~\xcfx?\x00\x00\x00\x80\x15\x96{\xbf\x00\x00\x00`\xd4lz\xbf\x00\x00\x00\x80\xab\x82\x94\xbf\x00\x00\x00\xc0\xe5b\x80\xbf\x00\x00\x00@TL\x84\xbf\x00\x00\x00\x00D\xecz\xbf\x00\x00\x00\xe0\x86\xd3\x88?\x00\x00\x00 \xd2\xbc@?\x00\x00\x00 \xb2\x84\x86\xbf\x00\x00\x00\xa03\x0bT\xbf\x00\x00\x00\xa0\xa7o\x8e\xbf\x00\x00\x00@\xcacy\xbf\x00\x00\x00@)\x81\x82?\x00\x00\x00@\x10!\x9c?\x00\x00\x00@\xa1\xda\x84\xbf\x00\x00\x00\xa0\xd7\xeb\x90\xbf\x00\x00\x00 \x07\r\x99?\x00\x00\x00@\xb4\x90\x87?\x00\x00\x00 \x16\xbcV\xbf\x00\x00\x00@\xc5\xd6\x8b?\x00\x00\x00\x80\x16\xb2o?\x00\x00\x00\xc0>\n\x85\xbf\x00\x00\x00\x00>{\x01?\x00\x00\x00\x00>\x01@?\x00\x00\x00\xe0\x17kb?\x00\x00\x00\xe0\x19\x9a4?\x00\x00\x00`)qR\xbf\x00\x00\x00\x80\x8a\nw\xbf\x00\x00\x00`\xd3K@\xbf\x00\x00\x00\x00o\x19w?\x00\x00\x00\xe0S\x87\x85\xbf\x00\x00\x00\xa0_u\x92?\x00\x00\x00@P=`?\x00\x00\x00\xa0_\xdcP\xbf\x00\x00\x00@\xce\x84t\xbf\x00\x00\x00`|$U\xbf\x00\x00\x00\xa0E\x1bn?\x00\x00\x00 \xdf\xadu?\x00\x00\x00\xa0\xb7n\x95\xbf\x00\x00\x00\xc0\x0c\xabN\xbf\x00\x00\x00@Q\n{?\x00\x00\x00\x00})v?\x00\x00\x00\xc0V\x92\x89\xbf\x00\x00\x00@03q\xbf\x00\x00\x00\xc0\x8a3v?\x00\x00\x00\x80C\x88c\xbf\x00\x00\x00\x00@\xd6p\xbf\x00\x00\x00@\x05\xf1:?\x00\x00\x00\x80-O\x86\xbf\x00\x00\x00`d\xb4U\xbf\x00\x00\x00\xa06\xca\x91?\x00\x00\x00\x80\x95T\x07?\x00\x00\x00\x80"\x13\x83\xbf\x00\x00\x00 "\x82\x92?\x00\x00\x00\x80\x98\xd9\x91\xbf\x00\x00\x00\x00\xbdIQ?\x00\x00\x00\xe0\x15\xaea?\x00\x00\x00`k\xe3b\xbf\x00\x00\x00\x80\xcesv\xbf\x00\x00\x00`hyv\xbf\x00\x00\x00\x00>mx\xbf\x00\x00\x00`k\x89x\xbf\x00\x00\x00\x80\x05\xb4\x80\xbf\x00\x00\x00\xa0^\x17q\xbf\x00\x00\x00\xe0\x16P\x8f\xbf\x00\x00\x00\xa0.\xf6\x88\xbf\x00\x00\x00\x80\x8f\x80\x8d\xbf\x00\x00\x00\x80_\x13\x91\xbf\x00\x00\x00\x80P\x8am?\x00\x00\x00\xc0Q0\x83\xbf\x00\x00\x00\xa0\xca$p?\x00\x00\x00\xa0D\x12x?\x00\x00\x00\xe0\x08=\x82?\x00\x00\x00\xc0\xa78\x87?\x00\x00\x00\xa0\x13"v\xbf\x00\x00\x00@f\xe5Z\xbf\x00\x00\x00\xc0\x08\x82\x82\xbf\x00\x00\x00 \xd3 `\xbf\x00\x00\x00\x00\tnK?\x00\x00\x00 9j\x93\xbf\x00\x00\x00\xc0\xfe\x81\x82?\x00\x00\x00\x00\xb1\x171\xbf\x00\x00\x00\x80}\x12\x85\xbf\x00\x00\x00`\xef\xae\x81?\x00\x00\x00\xa0\xd6~\x9d\xbf\x00\x00\x00 j\xb5{?\x00\x00\x00\x00*uv\xbf\x00\x00\x00\xc0\xf6\xba{\xbf\x00\x00\x00\xa0E\xebI\xbf\x00\x00\x00`\x18\x8b\x99\xbf\x00\x00\x00 \xc6\xbc\x87?\x00\x00\x00@\xfbc\x8f\xbf\x00\x00\x00`\x89ar?\x00\x00\x00`\xc5\x15e?\x00\x00\x00\x00\x8a\x1aH\xbf\x00\x00\x00\x00\xdf\xb4\x81?\x00\x00\x00\x80\x0bJ\x92\xbf\x00\x00\x00\xc0x\x02\x84?\x00\x00\x00@C\xe0V\xbf\x00\x00\x00@\x89\x19e\xbf\x00\x00\x00\xc0\xce\xb1??\x00\x00\x00\xc0\x05\x14\x82\xbf\x00\x00\x00 \x9e\x86\x8d\xbf\x00\x00\x00`\x06\xc5\x83?\x00\x00\x00 <\x93t\xbf\x00\x00\x00\xe0\xea\xb1a\xbf\x00\x00\x00\xe0L]\x8c?\x00\x00\x00\xe0\x8ev2\xbf\x00\x00\x00\x00\r\xe6\x8a\xbf\x00\x00\x00@`\x94r\xbf\x00\x00\x00\xe0\xb3\xd3b?\x00\x00\x00\xc0%\xfb\x88?\x00\x00\x00\xa0\x88\xc9s\xbf\x00\x00\x00`\xbc\xa1V\xbf\x00\x00\x00`\xe0\x06r\xbf\x00\x00\x00\x80\x1e\x10R?\x00\x00\x00\xc0\\N4?\x00\x00\x00\xe0\xccJW?\x00\x00\x00`\xfb\xc6\xf8\xbe\x00\x00\x00\xa0\xd4}\x81\xbf\x00\x00\x00 \xd2\xa2e?\x00\x00\x00\x80i\xc2m?\x00\x00\x00\xa0\xd5W\x91?\x00\x00\x00\x80]ps?\x00\x00\x00 \xdaCm\xbf\x00\x00\x00\xc0\x0e\x1f\x8f?\x00\x00\x00 \xbf\xa5a?\x00\x00\x00\xe0\xbc\xef\x80\xbf\x00\x00\x00`l>\\\xbf\x00\x00\x00@\x86g\x82\xbf\x00\x00\x00\x80 \xf1z\xbf\x00\x00\x00@\xbc;\x94?\x00\x00\x00 h\x0e}\xbf\x00\x00\x00\xe0d\xe3\x8d\xbf\x00\x00\x00\xa0WY\x8a\xbf\x00\x00\x00 \xbb5\x8d\xbf\x00\x00\x00\xc0\xae}f?\x00\x00\x00@Q\xc3\x93\xbf\x00\x00\x00\x00&\xfe\x87?\x00\x00\x00 \xff\xe6v?\x00\x00\x00\xa0\xe9Re?\x00\x00\x00\xe0Gj`?\x00\x00\x00 \x16\x97\x91\xbf\x00\x00\x00\x00\xc0\xc0\x84\xbf\x00\x00\x00\xc0o1\x94\xbf\x00\x00\x00 66\x93?\x00\x00\x00@\xb1\xc4t\xbf\x00\x00\x00 gL\x96?\x00\x00\x00`\xf3\xedb\xbf\x00\x00\x00\xe0@\x85h\xbf\x00\x00\x00\xe0VR\x81?\x00\x00\x00\xc0\x81 \x9b?\x00\x00\x00`P=\x83?\x00\x00\x00\x80\x18G\x81\xbf\x00\x00\x00`\x8e\xab]\xbf\x00\x00\x00 *N+?\x00\x00\x00\x00\x02v\x81?\x00\x00\x00\xc0;\x8du?\x00\x00\x00\x00\xb59\x99?\x00\x00\x00\x00{7w?\x00\x00\x00\xc0\xf9Y\x88\xbf\x00\x00\x00\x80%\x17x\xbf\x00\x00\x00\xc0\x18a\x91\xbf\x00\x00\x00`T\xb7\x80\xbf\x00\x00\x00\xc0J\xd6\x81?\x00\x00\x00\x00[k\x94\xbf\x00\x00\x00@Y\x9ab?\x00\x00\x00\xc0\x8b\x0f\x83\xbf\x00\x00\x00\xa0\x91\xd1_\xbf\x00\x00\x00@\xa8\xb6c?\x00\x00\x00`~\xc3p\xbf\x00\x00\x00\xc0f\xce\x95?\x00\x00\x00\xe0X\xf4\x82?\x00\x00\x00\xa0\xa3N\x80\xbf\x00\x00\x00\x80\xef\xf2c?\x00\x00\x00`}3\x89\xbf\x00\x00\x00`\xe9\x0cv\xbf\x00\x00\x00 @F\x8f\xbf\x00\x00\x00\xa0\xb6\xf8\x90\xbf\x00\x00\x00\x80t\x06u\xbf\x00\x00\x00\x80\x9b+\x9c?\x00\x00\x00\xa0\x9b\xba~?\x00\x00\x00\xe0\x93\xa6T?\x00\x00\x00\x80\x14\x9d\x85\xbf\x00\x00\x00\xe0\xcaPu?\x00\x00\x00\xa0\x06\xde}\xbf\x00\x00\x00@\x95Dh\xbf\x00\x00\x00\x80\x85!\x83?\x00\x00\x00\xa0\x16=|?\x00\x00\x00\xc00\xd9a?\x00\x00\x00\x80\xbdQ\x7f\xbf\x00\x00\x00`\x02\xa6\x84\xbf\x00\x00\x00\xc0\xf4av?\x00\x00\x00@is\x7f?\x00\x00\x00\xe0{zu?\x00\x00\x00 \xd2\xd7x\xbf\x00\x00\x00@\xe9\x8ez\xbf\x00\x00\x00\x00\xc9\x93B?\x00\x00\x00`\x97\xb6Q\xbf\x00\x00\x00@n-\x85?\x00\x00\x00\xe0\xd4\xa9z?\x00\x00\x00\xc0i\x90p\xbf\x00\x00\x00`\xa0\xaaz\xbf\x00\x00\x00\x80\xb3]\x8d?\x00\x00\x00\xa0+>\x88?\x00\x00\x00 UiW\xbf\x00\x00\x00`\xcf\x93x?\x00\x00\x00\xc0\x02\xff\x91\xbf\x00\x00\x00 p\xea|\xbf\x00\x00\x00 \xfcW\x81\xbf\x00\x00\x00 \xd8\\j\xbf\x00\x00\x00`)\ti?\x00\x00\x00\x00\x84N\x86?\x00\x00\x00\x00K\x8e\x85?\x00\x00\x00\xa0\xb0#`?\x00\x00\x00`4\x94\x87\xbf\x00\x00\x00`\xe2\xa5I?\x00\x00\x00\xa0\x92\xe6t?\x00\x00\x00\xe0n\x1d\x8c?\x00\x00\x00@{\xa6Y?\x00\x00\x00`\x05\x95\x83\xbf\x00\x00\x00\xe0t:x\xbf\x00\x00\x00\x80\xc8s0?\x00\x00\x00`\x9b\xdbd?\x00\x00\x00\xc09\x98`\xbf\x00\x00\x00`\x8c\n\x81?\x00\x00\x00`\xcb\\e\xbf\x00\x00\x00\x80\x9c\x84\x88?\x00\x00\x00\xc0\x1f)f\xbf\x00\x00\x00\x80[\xd0\x8a?\x00\x00\x00\xa0\x8c[i?\x00\x00\x00\x80Fpu?\x00\x00\x00\x80\xa1\xa3M?\x00\x00\x00@\xd3\xb3\x84\xbf\x00\x00\x00\x80\xc6\x0b\x82?\x00\x00\x00\x80\xd1[\x81\xbf\x00\x00\x00\x00\xcch\x88\xbf\x00\x00\x00 \xfc\xd2z?\x00\x00\x00\xe0\xb8;\x89?\x00\x00\x00\xa0\xfe\xebg?\x00\x00\x00@\x818\x93\xbf\x00\x00\x00\x00\xbf\xd5\x83\xbf\x00\x00\x00\xe0\x95\x14q?\x00\x00\x00@D\xbd\x93?\x00\x00\x00\x00\x02\x92\x8c?\x00\x00\x00@\xf8ba\xbf\x00\x00\x00\xe0\r\xe2p?\x00\x00\x00\xe0\x94\x96\x89?\x00\x00\x00@K\xf7{\xbf\x00\x00\x00@\x16p\x94\xbf\x00\x00\x00\xc0B\xe7\x92?\x00\x00\x00`\xac\xe5Q?\x00\x00\x00\x00\x80g\x8e\xbf\x00\x00\x00\x80\x003\x83?\x00\x00\x00\x00X\xf9\x8b?\x00\x00\x00\xe0\x9c\xe7^?\x00\x00\x00`\xb5\x1f\x8c\xbf\x00\x00\x00\xa0\x95\x1ar\xbf\x00\x00\x00@\x9a\x15}\xbf\x00\x00\x00\xc0\r\x83\x80\xbf\x00\x00\x00 =\x1d\x95\xbf\x00\x00\x00\x80\xab\xe3{?\x00\x00\x00@\xb0Y\x8b\xbf\x00\x00\x00\xa0X\x1ff\xbf\x00\x00\x00\x805!X?\x00\x00\x00\xc0\'\xa3}?\x00\x00\x00\xa0:\xae\x7f\xbf\x00\x00\x00\xe0\xab\xd6\x8e\xbf\x00\x00\x00`\x00\xbb\x97\xbf\x00\x00\x00\xe0\x00\xbd\x88?\x00\x00\x00@\xa3\xa3\x1f?\x00\x00\x00\x80\xedr\x80?\x00\x00\x00\xc0\xc4\xadd?\x00\x00\x00\x00\xf6?\x7f\xbf\x00\x00\x00@\x9f\xc7j\xbf\x00\x00\x00 "\x17t?\x00\x00\x00@\x8c\xba\x91\xbf\x00\x00\x00`\x13\x05\x18\xbf\x00\x00\x00`\x8e\xcf\x8b?\x00\x00\x00@sEr\xbf\x00\x00\x00@6(m\xbf\x00\x00\x00`\x10\x82b?\x00\x00\x00@\xe7\xc9\x87?\x00\x00\x00\x00\x13\x1cc?\x00\x00\x00\xc0\x8d(S?\x00\x00\x00\x00\xd5M\x81\xbf\x00\x00\x00@l\x8e\xa3?\x00\x00\x00\xe0\xac`v?\x00\x00\x00\xa0\xddjo\xbf\x00\x00\x00 >\xe5\x93\xbf\x00\x00\x00 \xd2\xb9h?\x00\x00\x00\x80\xdbY}?\x00\x00\x00\xe0\x81\xa6\x83\xbf\x00\x00\x00\xa0\xbe~F\xbf\x00\x00\x00@~D\x1a?\x00\x00\x00\xe0\xe8\xbeu\xbf\x00\x00\x00 \xb13s\xbf\x00\x00\x00\x00\xe3\xba\x87\xbf\x00\x00\x00\xc0\x0f\xc9\x84\xbf\x00\x00\x00 .\x13\x81\xbf\x00\x00\x00\x80{\xdby\xbf\x00\x00\x00 \xcdF\x81?\x00\x00\x00\xa0\x1c\xdb\x96?\x00\x00\x00\xc0;\xf1\x87\xbf\x00\x00\x00\xc0b\xc4\x87\xbf\x00\x00\x00`\xb2\x11\x8e\xbf\x00\x00\x00\xc0L\xcf\x82?\x00\x00\x00\xa0\x0c`b\xbf\x00\x00\x00@\x945\x80\xbf\x00\x00\x00\xc0Vx\x83?\x00\x00\x00`\x18\xde\x8a\xbf\x00\x00\x00\xc0^\xf7h?\x00\x00\x00\x800\x9a\x1e?\x00\x00\x00\x80_G\x82?\x00\x00\x00`\xe4\x15\x90?\x00\x00\x00\xc0\xb4Py?\x00\x00\x00`\x05\n2\xbf\x00\x00\x00`D\x0e\x99\xbf\x00\x00\x00\x00:\xee\x82?\x00\x00\x00\xa0\x17\x7f\x88?\x00\x00\x00\x80\x02\xd2i\xbf\x00\x00\x00\xc0k\rx\xbf\x00\x00\x00\xc0\xfe\x1f\x81?\x00\x00\x00\xc0w\x95\x95?\x00\x00\x00 ~\xeea?\x00\x00\x00\xa0]\xd8^?\x00\x00\x00\xa0\xa2\xcfZ\xbf\x00\x00\x00`\x1e\x15\x96?\x00\x00\x00\x00L\xdfU?\x00\x00\x00\x80\xdb\xc4\x88?\x00\x00\x00\xa0\x0f\\j?\x00\x00\x00\xc0\xbc\x84\x92?\x00\x00\x00@}2v\xbf\x00\x00\x00\xc03d`?\x00\x00\x00`t\xd4f\xbf\x00\x00\x00\x80\x19OM?\x00\x00\x00@\xef\xbd`?\x00\x00\x00`4"v\xbf\x00\x00\x00`\xa1v\x82\xbf\x00\x00\x00\x80+\xbc\x95?\x00\x00\x00\x00\x0f\xcb\x88\xbf\x00\x00\x00 mI\\?\x00\x00\x00@\xd33\x91?\x00\x00\x00\x00\xa9\x9cw?\x00\x00\x00\xc0\x1d\xdf\x80\xbf\x00\x00\x00\xa0MgV?\x00\x00\x00@\xdd\xb0x?\x00\x00\x00\xc0\x83\x82s\xbf\x00\x00\x00\xe0B\xfbU\xbf\x00\x00\x00\xa0%mo\xbf\x00\x00\x00\x00\x10\xc3z?\x00\x00\x00\x00\xd1\xcbz?\x00\x00\x00\x00\xb9\xe3u?\x00\x00\x00\xe0f\xb5\x8c?\x00\x00\x00\x00)\x08\x92?\x00\x00\x00`\x12\xc3o\xbf\x00\x00\x00@a\xd7K?\x00\x00\x00\xe0\xab\xc4\x80\xbf\x00\x00\x00\xc0\xccv\x84\xbf\x00\x00\x00\x80\xfb\x96q?\x00\x00\x00\x80\x95\xa1\x94?\x00\x00\x00\xa0\xc4.\x89?\x00\x00\x00\xe0\xa9/p\xbf\x00\x00\x00`\xf0.\x85\xbf\x00\x00\x00\xc0\x0e\x96\x82?\x00\x00\x00\x80\xa6\xa8\x7f?\x00\x00\x00\xa0\x1f\xc9\x84\xbf\x00\x00\x00`\x98\xef\x80\xbf\x00\x00\x00@\xe8\x13}\xbf\x00\x00\x00\x00]rj\xbf\x00\x00\x00 }\xd5\x81\xbf\x00\x00\x00\xa0\xef\xf6\x8d?\x00\x00\x00\xc0\xeelh\xbf\x00\x00\x00\xa0\x9f\x7fr?\x00\x00\x00`\xe9\xdcv?\x00\x00\x00\xa0\xa2\xc0g\xbf\x00\x00\x00\xe0m\xccv\xbf\x00\x00\x00\x00\x95\xdc\x88\xbf\x00\x00\x00`Wp\x89\xbf\x00\x00\x00\xc0\xa6a\x95?\x00\x00\x00\xc0\r\xbf\x80\xbf\x00\x00\x00\xe0FR\x93\xbf\x00\x00\x00\xc0)ji\xbf\x00\x00\x00\x00\xfd\xe3z?\x00\x00\x00\x80h\xe9g\xbf\x00\x00\x00\xa0K\x86\x90\xbf\x00\x00\x00 \x18\xfa\x8f\xbf\x00\x00\x00\xc0\x81\x15\x87\xbf\x00\x00\x00\xc0.\xa7S\xbf\x00\x00\x00\xa0\rmV\xbf\x00\x00\x00 \xa3\x88\x84\xbf\x00\x00\x00 h\xb1\x8f?\x00\x00\x00\x80\xa4|\x8d?\x00\x00\x00@\xb7\x7f\x90?\x00\x00\x00\xe0C\x92m\xbf\x00\x00\x00@\xa8\xc7W?\x00\x00\x00\xe0\xf9R\x84?\x00\x00\x00\xc0\xdc\xd5X\xbf\x00\x00\x00\xa0%\xc0\x85?\x00\x00\x00\x00Tn\x84?\x00\x00\x00`@\x8dz\xbf\x00\x00\x00 \xd6\xad\x94?\x00\x00\x00\x80\x94?\x83\xbf\x00\x00\x00\xc0?9|\xbf\x00\x00\x00\x80\x1fS\x94?\x00\x00\x00\xc0\xd9S\x81?\x00\x00\x00\xc0Qxw\xbf\x00\x00\x00\xc0!\xcf\x88\xbf\x00\x00\x00@\xf4\x8db\xbf\x00\x00\x00\x80\rYp?\x00\x00\x00\xc0$[\x87?\x00\x00\x00\xe0\xe9\xca\x91?\x00\x00\x00\xe0\xc5\x12m?\x00\x00\x00\xe0z\x03p\xbf\x00\x00\x00 *Wj?\x00\x00\x00\xe0\xaf,l\xbf\x00\x00\x00\xa0\xec\xb4i\xbf\x00\x00\x00@\xd9\x1dy?\x00\x00\x00\xe0{\xaa\x18?\x00\x00\x00@\x90\x91y\xbf\x00\x00\x00\xc0\xc3\xed\x99\xbf\x00\x00\x00\x80\x02\xf3k?\x00\x00\x00`\x8e"m?\x00\x00\x00`\x9b\xbfa\xbf\x00\x00\x00\xe0X\x9de?\x00\x00\x00\xa0\xee-\x8e?\x00\x00\x00\x80\x05\xb6\x8b\xbf\x00\x00\x00`\x9c<\x82\xbf\x00\x00\x00 \xc8{\x82?\x00\x00\x00\x80l\xbf\x84\xbf\x00\x00\x00\x80\xd18w?\x00\x00\x00\xe0\xda\xa5A\xbf\x00\x00\x00\xc0\xbd\x01i?\x00\x00\x00 1\xa5\x8b\xbf\x00\x00\x00\x00\xee\x9d\\\xbf\x00\x00\x00\xa0\xac)\x86\xbf\x00\x00\x00`\xd8\x10\x82\xbf\x00\x00\x00\xc0 \xa9u\xbf\x00\x00\x00 \xd8\xb3\x82?\x00\x00\x00 \x94\xeei?\x00\x00\x00@%\x12L?\x00\x00\x00\x80\x1bLy?\x00\x00\x00 \x01\x8bk?\x00\x00\x00\xc0\xc5\x9a\x81?\x00\x00\x00\xe0\x91}w\xbf\x00\x00\x00\x00\xcdhc?\x00\x00\x00\xe0&\xbc\x8d?\x00\x00\x00\x00y,r?\x00\x00\x00`pLy?\x00\x00\x00\xa0t\x9d\x90\xbf\x00\x00\x00\x800\xc3\x88?\x00\x00\x00\x00\x1ejy?\x00\x00\x00\xa0\xac\x8b\x84\xbf\x00\x00\x00`\x920\x92?\x00\x00\x00`\x14\x7f\x90?\x00\x00\x00\x80:\x19\x8b?\x00\x00\x00\x00/\x99l\xbf\x00\x00\x00\xc0\x05\xc4z?\x00\x00\x00\xc0\xf5N\x88?\x00\x00\x00\xc0\xe4dp\xbf\x00\x00\x00\x00R\x8dU?\x00\x00\x00\x80\xec^\x9a\xbf\x00\x00\x00\xa0\x02\x11=?\x00\x00\x00@\xf7\xf4L?\x00\x00\x00\xa0\xb7[D?\x00\x00\x00\xc0\x05\x8a\x7f?\x00\x00\x00@\\[\x8f\xbf\x00\x00\x00\x80M+\x80\xbf\x00\x00\x00\x80\xd7sw?\x00\x00\x00\xe0[\xb8o?\x00\x00\x00\x00\xaa\xafp\xbf\x00\x00\x00@\x93&T?\x00\x00\x00\xc0_t\x91?\x00\x00\x00@\xe2\x17\x89?\x00\x00\x00@v=u?\x00\x00\x00\xa0\xc0pU\xbf\x00\x00\x00\x80G.A\xbf\x00\x00\x00\xa0\xa47Y\xbf\x00\x00\x00\x80\xa7,d\xbf\x00\x00\x00\x00\xda5q\xbf\x00\x00\x00\xa0I\xeb\x83\xbf\x00\x00\x00 e\xe3{?\x00\x00\x00`2g\x8f?\x00\x00\x00\xe0i\x96x\xbf\x00\x00\x00\xe0i8\x88?\x00\x00\x00@\x04\x11i\xbf\x00\x00\x00\xc0 <u?\x00\x00\x00\xa0\xf2\x8ex?\x00\x00\x00\x00\xafC\x96\xbf\x00\x00\x00@\x84^\x89\xbf\x00\x00\x00`\x1e\xdbo?\x00\x00\x00`\xf5u\x91\xbf\x00\x00\x00\xe0\x1a\xd8\x87?\x00\x00\x00\xc0+\x87f\xbf\x00\x00\x00`\r\xe2Z\xbf\x00\x00\x00`+`:?\x00\x00\x00 d\xf2v\xbf\x00\x00\x00\x00\x89xc\xbf\x00\x00\x00\xe0L\xc7\x88\xbf\x00\x00\x00\xa0\xa5\x99/\xbf\x00\x00\x00 \xbe }\xbf\x00\x00\x00\xa0g\xae}\xbf\x00\x00\x00\xc01\xe2R?\x00\x00\x00`\xa2\xd3J?\x00\x00\x00\x80Y\xe2\\?\x00\x00\x00\xe0\x16\x1cq\xbf\x00\x00\x00\xe05\xa4\x82?\x00\x00\x00 #p\x83?\x00\x00\x00\x00\xb0\x93{\xbf\x00\x00\x00\x80^\xd7A\xbf\x00\x00\x00@\\vt\xbf\x00\x00\x00 \xab\x9fu?\x00\x00\x00\xe0\x92\xd0j?\x00\x00\x00\xc0\x16\x94\x91?\x00\x00\x00\xc0@\xa6T?\x00\x00\x00\x80\x19\x8cz?\x00\x00\x00\x80\x97x\x7f\xbf\x00\x00\x00\xa0\x96\xb9\x8b?\x00\x00\x00\x80AR\x91\xbf\x00\x00\x00`\xb4\xdb\x82\xbf\x00\x00\x00`N\xb7\x80?\x00\x00\x00\x00lBv\xbf\x00\x00\x00 \x15\xfeU\xbf\x00\x00\x00\x80\xb7\xd5\x92\xbf\x00\x00\x00\xa04\x80\x99\xbf\x00\x00\x00\xc0\xb3\x0e0\xbf\x00\x00\x00\xe0bX\x90\xbf\x00\x00\x00\x80\xf7\x7f\x8d\xbf\x00\x00\x00\x00\xb4\x92\x81\xbf\x00\x00\x00\xc0["[?\x00\x00\x00 X\xd9w?\x00\x00\x00@\x817t?\x00\x00\x00`]pi?\x00\x00\x00\xa0f\xabr\xbf\x00\x00\x00`\x1f\x15\x82\xbf\x00\x00\x00\x80\x81,\x9a\xbf\x00\x00\x00\xc0\xc3C\x91?\x00\x00\x00`\x16\x1ej?\x00\x00\x00\xa0\x0c\x8dt?\x00\x00\x00\xa0\xaa\xa1g\xbf\x00\x00\x00`xYu?\x00\x00\x00\x00\xcd7\x8f?\x00\x00\x00@\xf0\xb3b?\x00\x00\x00`Nh \xbf\x00\x00\x00\xa0\x8c\xa2v?\x00\x00\x00\xe0;\xb6\x8b\xbf\x00\x00\x00\xe0\x17\xed\x80\xbf\x00\x00\x00`)gt?\x00\x00\x00\x80\x81\xcdj?\x00\x00\x00 D4\x81\xbf\x00\x00\x00 \x8e\xa9\x90?\x00\x00\x00`\x88\xb1\x8e\xbf\x00\x00\x00`C@m?\x00\x00\x00\x80\x156p?\x00\x00\x00 \xf7\xd9x\xbf\x00\x00\x00\xa0\xba\xbcu?\x00\x00\x00 \xb1ax\xbf\x00\x00\x00\xa0\xb0N\x83?\x00\x00\x00\xc0\x02Oi?\x00\x00\x00\xc0X\xcco?\x00\x00\x00`\xaa\x80}\xbf\x00\x00\x00 "\xb2\x9a\xbf\x00\x00\x00 \xacq\x81?\x00\x00\x00\x00\xbe\x12\x14?\x00\x00\x00\xe0V\x00Z\xbf\x00\x00\x00\x80\x04|r\xbf\x00\x00\x00\xa0V\x81g?\x00\x00\x00\xa0\xa5\x95{\xbf\x00\x00\x00`\xb8\n\x81?\x00\x00\x00\xc0\x80\xc7s?\x00\x00\x00\xe0\xd8EV\xbf\x00\x00\x00\xe0!}u\xbf\x00\x00\x00\xe0s\xfa\x8a?\x00\x00\x00\x80\xec\xba\x97?\x00\x00\x00\xa0x\xf1s\xbf\x00\x00\x00\xc0\xfb?m?\x00\x00\x00\xa0H\x87w\xbf\x00\x00\x00`\xad\xf7\x80\xbf\x00\x00\x00 \x07\x1al\xbf\x00\x00\x00\xc0\x91\xdc\x7f?\x00\x00\x00\xa0<\xabh?\x00\x00\x00\x80a\x07\x95\xbf\x00\x00\x00@*\x06\x84\xbf\x00\x00\x00\xc02S\x87\xbf\x00\x00\x00`\xb7\xb8w\xbf\x00\x00\x00`\xcf\x8be\xbf\x00\x00\x00@j\x86B\xbf\x00\x00\x00\xc0\x1f\xfd\x8f\xbf\x00\x00\x00@\xd2\xdfu\xbf\x00\x00\x00\xa0_Ro\xbf\x00\x00\x00`\x1c\xc4s\xbf\x00\x00\x00 \t\xf5v?\x00\x00\x00\x00l4k?\x00\x00\x00@\x96\xd1\x89?\x00\x00\x00\xe0~\xc5t?\x00\x00\x00\xa0F/\x84\xbf\x00\x00\x00\x00\xf0\xe3Y?\x00\x00\x00\xe0"\x86`?\x00\x00\x00@z\x84w?\x00\x00\x00\xa0\x98nu?\x00\x00\x00@\x0c\x82r?\x00\x00\x00`\x15\x99l?\x00\x00\x00@N<B?\x00\x00\x00\xc0\xa3\x1b{?\x00\x00\x00`\x8bHi\xbf\x00\x00\x00@\x19\xf3U?\x00\x00\x00\xc0\x02\x05W\xbf\x00\x00\x00\xe0%\x19f?\x00\x00\x00`\\\xd2i\xbf\x00\x00\x00 \xb4\x83\x85\xbf\x00\x00\x00\x00\xf3\x00&\xbf\x00\x00\x00\x80\x1b\x83x?\x00\x00\x00`=3\x91?\x00\x00\x00`\xb5\x9c\x85\xbf\x00\x00\x00\xe0[\x94\x88\xbf\x00\x00\x00\xa0L\x8bk?\x00\x00\x00@\x95\xaan\xbf\x00\x00\x00 \x04/\x82?\x00\x00\x00\x80\xdc\x10k?\x00\x00\x00 \xa3\xa2v?\x00\x00\x00\xe0,\xaf\x7f\xbf\x00\x00\x00 \x8d\x0fw?\x00\x00\x00\xe0,k\x0b?\x00\x00\x00@\xf3\xd9\x7f?\x00\x00\x00`\xbc\xa7T?\x00\x00\x00\xa0\x8c\xf8u?\x00\x00\x00\xa0WV\x7f\xbf\x00\x00\x00\xe0(\xc3\x8b?\x00\x00\x00 w\xf5\x8e\xbf\x00\x00\x00`\x08\xcc\x84?\x00\x00\x00`\x7f\x8e`?\x00\x00\x00 Nsx\xbf\x00\x00\x00@wo\x84\xbf\x00\x00\x00\x809yy\xbf\x00\x00\x00\xe0\x14\x89&\xbf\x00\x00\x00 \x92J|\xbf\x00\x00\x00\x80_3{\xbf\x00\x00\x00\xe0\x89\xd0b?\x00\x00\x00\x80D)\x96\xbf\x00\x00\x00\x80\x84\'\x8a?\x00\x00\x00\xe0\x8a\x0c\x86?\x00\x00\x00\xe0\xcf\xd3\x97?\x00\x00\x00`\xaf\xd2\x90\xbf\x00\x00\x00\xe0\xa9@\x90\xbf\x00\x00\x00\xa0b\xf9R\xbf\x00\x00\x00\xe0l\x7f\x8d\xbf\x00\x00\x00\xc0\x02N\x8c\xbf\x00\x00\x00\xa0o7T?\x00\x00\x00\x00J\x05\x90?\x00\x00\x00`?\x90\x89\xbf\x00\x00\x00 \x92@\x8c\xbf\x00\x00\x00 \xba:\x88?\x00\x00\x00 #r\x86\xbf\x00\x00\x00\xe0\xbcW\x86?\x00\x00\x00 ]\x94t\xbf\x00\x00\x00\x803\xa9\x7f\xbf\x00\x00\x00\xe0\xb9\x8a\x7f\xbf\x00\x00\x00`\x8e\xb8\x93?\x00\x00\x00 C\xa8\x80\xbf\x00\x00\x00 *\xd8k?\x00\x00\x00`\xcdl\x95\xbf\x00\x00\x00\xa0;\x19x\xbf\x00\x00\x00\xa0\x1fE_?\x00\x00\x00@\x7f\x08B\xbf\x00\x00\x00\xe0\xe1dR?\x00\x00\x00 \xf0\xfdw?\x00\x00\x00@t\xe3o\xbf\x00\x00\x00\x805\xcc8?\x00\x00\x00\x80\x1f-~\xbf\x00\x00\x00\xc0$\x0f\x87?\x00\x00\x00\xc0\x03,j?\x00\x00\x00\xe0_\xb0\x8a\xbf\x00\x00\x00\xe0.Vl?\x00\x00\x00@(\xd9r\xbf\x00\x00\x00\x80\x1av\x93\xbf\x00\x00\x00 Btr\xbf\x00\x00\x00\x00\x7f@\x90?\x00\x00\x00\x00\x07\xa7\x84?\x00\x00\x00\x80\xc2\x11i\xbf\x00\x00\x00@&\xe7j?\x00\x00\x00\x00p\x17o\xbf\x00\x00\x00\x80\xda\xb6\x8a\xbf\x00\x00\x00\x80\x1a\xae\x84?\x00\x00\x00 Q#W\xbf\x00\x00\x00 \xbeDz\xbf\x00\x00\x00\xe0pY\x84\xbf\x00\x00\x00\xe0\xc3\xecw\xbf\x00\x00\x00\xa0Y\x87\x91?\x00\x00\x00\xc09\xcf\x86?\x00\x00\x00@Shz\xbf\x00\x00\x00\xc0b\xf6m?\x00\x00\x00\xe0\t\x93q\xbf\x00\x00\x00`\xd0\xd6w?\x00\x00\x00\xc0\x8c\x9bv\xbf\x00\x00\x00@<\x15u\xbf\x00\x00\x00\x80Jds?\x00\x00\x00@\'2 ?\x00\x00\x00\x00\x9bQ\x89?\x00\x00\x00\xc0\xebMe\xbf\x00\x00\x00 \xf8I{\xbf\x00\x00\x00\xa0\xe1\xd0\x86?\x00\x00\x00\x80\x95\xe5\x91?\x00\x00\x00\x80\xf0(q?\x00\x00\x00`\xf3HI?\x00\x00\x00\xa0\x99\x92\x91?\x00\x00\x00\xa0N\x150\xbf\x00\x00\x00\x00\x94\xa1t?\x00\x00\x00\xa0\x05\xceb?\x00\x00\x00\xc0"k\x8b?\x00\x00\x00`\x92\xa0M?\x00\x00\x00@\xec\x89\x90?\x00\x00\x00\x00\x1ct\x83\xbf\x00\x00\x00\xa0_&A\xbf\x00\x00\x00\xe0\'\xce\x95\xbf\x00\x00\x00@\x00\x8bu?\x00\x00\x00@i|\x83\xbf\x00\x00\x00`\x9c&]\xbf\x00\x00\x00\xc0\xd2\xc7`\xbf\x00\x00\x00@\xd5\x8at\xbf\x00\x00\x00\xa0u+\x84?\x00\x00\x00\xc0\xc6\x16\x8e?\x00\x00\x00`\xe9\xaf\x94?\x00\x00\x00\x80\xc4\xa6t\xbf\x00\x00\x00\xa0\x98\x04\x93?\x00\x00\x00\xa0AD\x90\xbf\x00\x00\x00\xc0\xbeMR?\x00\x00\x00\xc0g\x1eT?\x00\x00\x00 \x02\xf1\x8d\xbf\x00\x00\x00\xe0\xdf\xa6\x99\xbf\x00\x00\x00@\xda\xe1\x94?\x00\x00\x00`\xfa\xe3\x8b\xbf\x00\x00\x00@\xbc\x1e\x98?\x00\x00\x00 \xcc\xb7\x8f?\x00\x00\x00\xc0c+\x8b\xbf\x00\x00\x00 U\x06\x82?\x00\x00\x00\xa0&\xcdg?\x00\x00\x00\xc0\x9e\xd3P?\x00\x00\x00\x00\xf5\xbfi?\x00\x00\x00 \xe8R\x83?\x00\x00\x00 3\xb8l?\x00\x00\x00 *\xb9\x8d\xbf\x00\x00\x00\x00\x18\x0cx\xbf\x00\x00\x00`\xdc\xb7\x82?\x00\x00\x00 O\xe7w?\x00\x00\x00@G\xb6|?\x00\x00\x00@\x86\x88\x86?\x00\x00\x00 L\x02\x80?\x00\x00\x00\xe0+7\x85?\x00\x00\x00\xe0\xd5E\x91\xbf\x00\x00\x00\x80\x9bU`\xbf\x00\x00\x00\xc0\xf8\xcd\x8d\xbf\x00\x00\x00 f\x84}\xbf\x00\x00\x00\x00\xcan:?\x00\x00\x00\x00\x0ew\\\xbf\x00\x00\x00\xe09\xc1\x99\xbf\x00\x00\x00\x80\x14\xea\x87\xbf\x00\x00\x00 \xaf\x8d\x88?\x00\x00\x00 \x01\r\x98?\x00\x00\x00@\xf3\x05\x85\xbf\x00\x00\x00`\xb0\xfex\xbf\x00\x00\x00\x00\xc7\xa1R?\x00\x00\x00\xc0\x83ZJ?\x00\x00\x00@\xac\xe1s?\x00\x00\x00 \xdd\x1b\x86\xbf\x00\x00\x00`\xe0\xd5v\xbf\x00\x00\x00\xe0F\xfdv?\x00\x00\x00\x80\xcbK\x8a?\x00\x00\x00 \x16\x82n?\x00\x00\x00@}<\x88\xbf\x00\x00\x00\x00nyv?\x00\x00\x00`\x18\xbf\x8e?\x00\x00\x00\x80\xe4o}?\x00\x00\x00\xa0\xc7\x06Y?\x00\x00\x00\xe0\x12\x15w?\x00\x00\x00\xe0\xeaC\x87?\x00\x00\x00@\x89\xc0\x8a?\x00\x00\x00\xa0\x94\xafe\xbf\x00\x00\x00 \x04!x?\x00\x00\x00\xe0^\xb0q?\x00\x00\x00 \xc7~j?\x00\x00\x00\xe0\xe3\x05\x85?\x00\x00\x00@\t\x8f[?\x00\x00\x00\xe0u\x07p\xbf\x00\x00\x00\x00\xf99q?\x00\x00\x00\xc0\xb7Fp?\x00\x00\x00\x00\x1e\xb6\x87\xbf\x00\x00\x00`0\xa6n\xbf\x00\x00\x00`-\x9ao?\x00\x00\x00`m1t\xbf\x00\x00\x00\xe0\x83\x95s\xbf\x00\x00\x00@\x00NS?\x00\x00\x00\xe0\x82\x0eW\xbf\x00\x00\x00\xc0\xc2\ru\xbf\x00\x00\x00\xe0m\xc8\x83?\x00\x00\x00\xc0\xb5`V?\x00\x00\x00`V\xd1\x82\xbf\x00\x00\x00\xa0g[\x90\xbf\x00\x00\x00\xe0\xe8\x94\x8b\xbf\x00\x00\x00\x80\x17\xb2v\xbf\x00\x00\x00\xe0\xe2OK\xbf\x00\x00\x00\xc0\xb0\xcd\x8f?\x00\x00\x00\x80\xc9\tu\xbf\x00\x00\x00 ^]\x84\xbf\x00\x00\x00\xa0<\x96\x84?\x00\x00\x00\xc0\x97\xeel?\x00\x00\x00\xc0\xff\x90-?\x00\x00\x00\x80\xa5\x00x\xbf\x00\x00\x00\xa0\x9bEe?\x00\x00\x00@.\xb4w?\x00\x00\x00\xe0)\xd1k\xbf\x00\x00\x00\x00\xc5\xddr?\x00\x00\x00`\x1b\xfb\x84?\x00\x00\x00\xc0\x80W\x93\xbf\x00\x00\x00`z\x89q?\x00\x00\x00 \xbeZ\x92?\x00\x00\x00\xc0\xbemo?\x00\x00\x00\xe0%Wf\xbf\x00\x00\x00\xe0I\xeb\x96\xbf\x00\x00\x00\x80\xc5X\x9a\xbf\x00\x00\x00\xc0"\x9b\x98\xbf\x00\x00\x00 M\x90t?\x00\x00\x00\x00\x8e}B?\x00\x00\x00@4Gx\xbf\x00\x00\x00\xc0\xb1\xde??\x00\x00\x00\xe0\x9c\x1c\x8b\xbf\x00\x00\x00\x006\xc9Q?\x00\x00\x00\x80To\x85?\x00\x00\x00\xe0hE\x8a?\x00\x00\x00\xc0=\x92b\xbf\x00\x00\x00\x00\xeb\xe6\x8f\xbf\x00\x00\x00\x00_\xfe_?\x00\x00\x00@\x10\xedk\xbf\x00\x00\x00@\x07\x0c\x82?\x00\x00\x00 z7|?\x00\x00\x00@:"e?\x00\x00\x00\x00\xc8\xe9w\xbf\x00\x00\x00\xa0\x10\xa4\x8b\xbf\x00\x00\x00\x80\tRp?\x00\x00\x00\xc0\xa4Q\x81?\x00\x00\x00\xc0\xdcXw?\x00\x00\x00\xa00\r\x8a?\x00\x00\x00`FlD?\x00\x00\x00`\xa9+i\xbf\x00\x00\x00\xe0\xa5\xedb\xbf\x00\x00\x00\xc04\\n\xbf\x00\x00\x00\x00f\xe5g\xbf\x00\x00\x00\x005}\x83\xbf\x00\x00\x00 \xd3\x8c{\xbf\x00\x00\x00`z\xb2p?\x00\x00\x00 \xce\xc0z?\x00\x00\x00`O\x99\x90?\x00\x00\x00 \x85\x19O\xbf\x00\x00\x00\x80$\r`?\x00\x00\x00 \xaa\xb3f\xbf\x00\x00\x00@\xd5\x02F?\x00\x00\x00\xe0\x12\xf7\x92\xbf\x00\x00\x00 u\xa8\x85\xbf\x00\x00\x00 \xbb\x81^\xbf\x00\x00\x00\x80\xf2Z\x8a\xbf\x00\x00\x00`\xbfp|?\x00\x00\x00\xe0\xb93a?\x00\x00\x00\xe0\xb3\xe6\x8b\xbf\x00\x00\x00\xc01\xbe\x88?\x00\x00\x00 \xb6\xf9p\xbf\x00\x00\x00\xc0P\x86@\xbf\x00\x00\x00@U\x9a\x87?\x00\x00\x00\x80\x1a\xfcm\xbf\x00\x00\x00@\xcd}s\xbf\x00\x00\x00@\xf9\xd4u?\x00\x00\x00\xc0]8s?\x00\x00\x00\xc0\xa0~@\xbf\x00\x00\x00 \x99]f?\x00\x00\x00`i\x99d?\x00\x00\x00\xa0\x17\x12\x13?\x00\x00\x00`\x97zs?\x00\x00\x00`\xb9\x87r?\x00\x00\x00 \x81\xae\x81?\x00\x00\x00`\xd3e\x93\xbf\x00\x00\x00\xe0\xc8\x88`\xbf\x00\x00\x00\x80\x92tb\xbf\x00\x00\x00\xe0\xdd\x03\x90\xbf\x00\x00\x00\x8067\x8c\xbf\x00\x00\x00\x00\x10\x9b\x80?\x00\x00\x00`\xe7K]\xbf\x00\x00\x00\xc0C\x98R?\x00\x00\x00\x80\xa9\tU\xbf\x00\x00\x00@J\x1bI?\x00\x00\x00@\xd2\xb2q?\x00\x00\x00\xa0\x9aH\x81\xbf\x00\x00\x00\xc0P\xbf`?\x00\x00\x00`^\xae\x94?\x00\x00\x00\x80|\xf6\x85\xbf\x00\x00\x00\x80\xdc\xc0\x7f\xbf\x00\x00\x00@\x8b\xf2q?\x00\x00\x00 \xd3hd\xbf\x00\x00\x00 \xdb\xd7t\xbf\x00\x00\x00@\xc9f@\xbf\x00\x00\x00\x80\x94\xbc\x81?\x00\x00\x00\x00a\xf7c\xbf\x00\x00\x00\xc0\x98\xb8\x81?\x00\x00\x00\xc0Aw}?\x00\x00\x00\xe0\x8bE\x96?\x00\x00\x00\xc0\xe6&h?\x00\x00\x00\xe0\x85mL?\x00\x00\x00\xe0\x02\x0cz\xbf\x00\x00\x00@\xb3\x0f\x80?\x00\x00\x00 \x19"\x85\xbf\x00\x00\x00\xa0\x83"\x94\xbf\x00\x00\x00\xc0q\x07e?\x00\x00\x00\x006]l\xbf\x00\x00\x00\x00\xad\xc4\x8c?\x00\x00\x00\xc0\xdc7\x91?\x00\x00\x00@M:\x8b?\x00\x00\x00`\xc7\xa8\x92\xbf\x00\x00\x00@,\xafu?\x00\x00\x00\xa0\x14\x8dm\xbf\x00\x00\x00@<\xec\x92\xbf\x00\x00\x00 "\xb9^\xbf\x00\x00\x00`\xaa\x9c\x82?\x00\x00\x00@\x86\xdez?\x00\x00\x00`)Nh?\x00\x00\x00\x80~3Y\xbf\x00\x00\x00@\x9d\xb8\x87\xbf\x00\x00\x00\x00i\xf4i?\x00\x00\x00\xa0\x97Dg?\x00\x00\x00\x00J\xa7\x98?\x00\x00\x00\x80\xe6O\x98\xbf\x00\x00\x00\x80{\x0eD\xbf\x00\x00\x00\xc0\xb5\xa7B?\x00\x00\x00\xe0``b?\x00\x00\x00\xe0\xfa,J\xbf\x00\x00\x00\x00\xd6rx\xbf\x00\x00\x00\xc0\xe0bO\xbf\x00\x00\x00\xc0\x98\x99g\xbf\x00\x00\x00\x80\xa8m\x85?\x00\x00\x00`\x85\xf5w\xbf\x00\x00\x00@\xbc2\x91\xbf\x00\x00\x00`t\x8fa?\x00\x00\x00\x80\xdab\x94?\x00\x00\x00@\x80Mu?\x00\x00\x00\x00\xc1\xd6\x89\xbf\x00\x00\x00\x80\xb4\xca\x80\xbf\x00\x00\x00@^\x1e\x9a\xbf\x00\x00\x00\xa0H\xbd\x8e\xbf\x00\x00\x00\xa0\xac\x1e<?\x00\x00\x00\x80\x88:\x8b\xbf\x00\x00\x00@\x1b\xe3v?\x00\x00\x00@5wt\xbf\x00\x00\x00`\xa6\xb3O?\x00\x00\x00\x00\xaff\x94\xbf\x00\x00\x00 p\xf5\x86\xbf\x00\x00\x00@\x19\xd9\x93?\x00\x00\x00`\xabB\x80?\x00\x00\x00\x00y\xec\x86\xbf\x00\x00\x00\xc0g\x9cx?\x00\x00\x00@\x08\xe4V\xbf\x00\x00\x00\xc0\xd9-c?\x00\x00\x00\x80\xfb\xd4u?\x00\x00\x00`\x81\xf5a\xbf\x00\x00\x00 \xa9\xfa\x80\xbf\x00\x00\x00\xe0I7R?\x00\x00\x00 \x9fe\x8a?\x00\x00\x00\xe0L\x9e\x82?\x00\x00\x00\xa0k,g?\x00\x00\x00 \xb2Im\xbf\x00\x00\x00\xc0KzT?\x00\x00\x00`\xe9\x1b\x95\xbf\x00\x00\x00\xa0\r\xc4i?\x00\x00\x00`F\x04f?\x00\x00\x00`\xc6\x1b\x8e?\x00\x00\x00\xc0\xfe\xc2V\xbf\x00\x00\x00 :\xf5>\xbf\x00\x00\x00\xc0\xae\xe0\x80?\x00\x00\x00\xc0\x0e\xdf\x81\xbf\x00\x00\x00\x00\xd4\x8e\x88?\x00\x00\x00`\x84\x03U\xbf\x00\x00\x00\x00\x11g\x8e?\x00\x00\x00\xc0\x99\x83k\xbf\x00\x00\x00\xa0+\x98s?\x00\x00\x00@g\x95\x87\xbf\x00\x00\x00@\xe1%V?\x00\x00\x00 \xa6\xf8\x8c?\x00\x00\x00\xe0^mk\xbf\x00\x00\x00\xe0\x17\x81\x80\xbf\x00\x00\x00@z:Z?\x00\x00\x00\xc0\x01\xa4r\xbf\x00\x00\x00 \xefn\x85?\x00\x00\x00\x80\xf3\xfa\x8e?\x00\x00\x00\x80\x8f\xcdB\xbf\x00\x00\x00`n;\x88\xbf\x00\x00\x00 \x8d=~?\x00\x00\x00@"\xdb{\xbf\x00\x00\x00\x80\x1b\x0c}?\x00\x00\x00`\xd0a\x86\xbf\x00\x00\x00\xc0j9\x8d?\x00\x00\x00\x00pc\x9a\xbf\x00\x00\x00`\xabR\x84\xbf\x00\x00\x00\xc0\x92\xc8{\xbf\x00\x00\x00\xe0\xac>|?\x00\x00\x00@$\x8c\x8a?\x00\x00\x00\xe0R\'X\xbf\x00\x00\x00 {\x7fg?\x00\x00\x00\x80\xf1L]\xbf\x00\x00\x00\xa0(ke?\x00\x00\x00\xa0\xaa\xbe\x86?\x00\x00\x00@\xc1ns?\x00\x00\x00@\x00\x9f\x92\xbf\x00\x00\x00 |,\x89\xbf\x00\x00\x00\xe0\xf5\xab\x82?\x00\x00\x00\xc0F\xbf\x84\xbf\x00\x00\x00\x80\xa3\xe7c?\x00\x00\x00\x00\xa0\xf9Y?\x00\x00\x00\xc0^4y\xbf\x00\x00\x00\xa0\xc8\xa7<?\x00\x00\x00\xe0\x1f\xa4\x9a?\x00\x00\x00\xc0\xc2\xbar\xbf\x00\x00\x00\xe0\xf3=|?\x00\x00\x00\x808\xfaT\xbf\x00\x00\x00\xa0\xe7\xecB?\x00\x00\x00\xe0\x00\xd1\x81\xbf\x00\x00\x00\x80K\xf9\x8f\xbf\x00\x00\x00\xa0\xd26s\xbf\x00\x00\x00`6\xd6G\xbf\x00\x00\x00`\xec$}\xbf\x00\x00\x00\x00\xdd\xc2{\xbf\x00\x00\x00\xa0\xc1\xbfy\xbf\x00\x00\x00\x00\xfeuc\xbf\x00\x00\x00`_\'\x80\xbf\x00\x00\x00\xc0?\xf3\x8a?\x00\x00\x00\xc0\x8c\xcbw?\x00\x00\x00\xe0\xc5\x12\x8c?\x00\x00\x00@\xa9Oy\xbf\x00\x00\x00\x80A{k?\x00\x00\x00 \x9c[\x85?\x00\x00\x00@\x95d\x8a\xbf\x00\x00\x00`\x88\x13k?\x00\x00\x00`\x82G\x92?\x00\x00\x00\xc0\x11\x96T\xbf\x00\x00\x00\x80\x07\xa6\x89?\x00\x00\x00\xa0\xbe\x7fi\xbf\x00\x00\x00 \xb8\xda\x82\xbf\x00\x00\x00\xa09\xb6a\xbf\x00\x00\x00\x00\xde#6\xbf\x00\x00\x00\x00\x9cnT\xbf\x00\x00\x00@\xf8\x02x\xbf\x00\x00\x00@;=\x82?\x00\x00\x00 \x17\r\x8a?\x00\x00\x00\x00\xa3ZU\xbf\x00\x00\x00\x80x\x90}?\x00\x00\x00\xe0\xd8\xd7t?\x00\x00\x00 \xb6\xa4w\xbf\x00\x00\x00 \xe5\x89t\xbf\x00\x00\x00`\'1\x7f?\x00\x00\x00`"|t?\x00\x00\x00\xc0\xa9\xf1H?\x00\x00\x00`\x7f\xf3\x82?\x00\x00\x00@jb\x82\xbf\x00\x00\x00\x00\x97T\x88\xbf\x00\x00\x00\xe0\\i\x91\xbf\x00\x00\x00`\x17A\x99\xbf\x00\x00\x00\xa0\x9c\xean?\x00\x00\x00\x00h9W\xbf\x00\x00\x00\xe0A\xe3\x82\xbf\x00\x00\x00\x806\x8c`\xbf\x00\x00\x00\x80\xa2x\x8d\xbf\x00\x00\x00\xa0\xf2\\\x8d\xbf\x00\x00\x00\xa0\x0f\xc6z?\x00\x00\x00\x80\x0bye\xbf\x00\x00\x00 `\x8bs\xbf\x00\x00\x00`\xa9\xb0a\xbf\x00\x00\x00@1\xc9e\xbf\x00\x00\x00 .\x0f\x80?\x00\x00\x00\xe0k\xd5T?\x00\x00\x00\xa0/\x0b\x83?\x00\x00\x00\xa07\xebg\xbf\x00\x00\x00`\xdc\xe8r\xbf\x00\x00\x00\xa0\xda\x8e\x87\xbf\x00\x00\x00`\xce\xe8\x84\xbf\x00\x00\x00@7\xe9h\xbf\x00\x00\x00 \x9d\x12\x96\xbf\x00\x00\x00\xa0@\xc1h?\x00\x00\x00`\xf0\xdaj\xbf\x00\x00\x00@63l?\x00\x00\x00\x00\xc2\xdf\x94?\x00\x00\x00\xa0\x8d\xa9\x8c\xbf\x00\x00\x00\xc0\x079\x84?\x00\x00\x00 \xe4J\x85?\x00\x00\x00 \x03\xf1~\xbf\x00\x00\x00\xc0\xf2\x14m?\x00\x00\x00`\xe5pp\xbf\x00\x00\x00`\xcb\x01u?\x00\x00\x00\xe0\x8a\xf0\x8d?\x00\x00\x00\x00q\x9bT\xbf\x00\x00\x00\xc0q3\x91\xbf\x00\x00\x00\x80J\xf4\x84\xbf\x00\x00\x00\x80V7\x80?\x00\x00\x00\xc0\x1fpw?\x00\x00\x00\xe0\xa2{\x90?\x00\x00\x00\xc0\xc9.s\xbf\x00\x00\x00\xe0p\xdc\x8f\xbf\x00\x00\x00\xc0\xf3\x11^\xbf\x00\x00\x00@\x89\x1fx?\x00\x00\x00\xa0\xd3Np\xbf\x00\x00\x00 <Dt?\x00\x00\x00`8\xd8q?\x00\x00\x00\xe0\xe4\x15\x81?\x00\x00\x00\xc0\xad\x10\x99\xbf\x00\x00\x00\x80^\xd7s\xbf\x00\x00\x00\x80\xa7\xc8`?\x00\x00\x00`-t\x8f?\x00\x00\x00@\xdf\x0f\x7f\xbf\x00\x00\x00\x80\x9d\xbfW\xbf\x00\x00\x00@\x17\x8d\x94?\x00\x00\x00 n}\x83?\x00\x00\x00\xa0W\xdc/\xbf\x00\x00\x00\xe0\xb6\x9f\x89\xbf\x00\x00\x00 \xb5J<\xbf\x00\x00\x00\xc0i\xa6y?\x00\x00\x00\x00\xca\xd9y?\x00\x00\x00 )L}?\x00\x00\x00\x800\x0fb\xbf\x00\x00\x00\x80p\xc0i\xbf\x00\x00\x00 o\xca\x89?\x00\x00\x00\xe0KL\x8e\xbf\x00\x00\x00@\xcdx\x8d\xbf\x00\x00\x00`\xf2h\x99\xbf\x00\x00\x00@k\x01{?\x00\x00\x00 c\xc0P\xbf\x00\x00\x00\xa0\xafK\x85?\x00\x00\x00`\xe4f\x86\xbf\x00\x00\x00\xc0\x8ax\x86\xbf\x00\x00\x00@K\x9az?\x00\x00\x00\x80a\x8a\x81?\x00\x00\x00@\xb1O\x81?\x00\x00\x00\x00\xcdC\x8d\xbf\x00\x00\x00`\x8a\n\x89?\x00\x00\x00\xc0\xb2n*\xbf\x00\x00\x00`\xf5_{?\x00\x00\x00`\xb7%\x95?\x00\x00\x00 \x04h\x81?\x00\x00\x00`\xda\xd9r?\x00\x00\x00\x00h\xe0G\xbf\x00\x00\x00@U\xbb\x92\xbf\x00\x00\x00`<\xe7z\xbf\x00\x00\x00\xe0~\xac\x93?\x00\x00\x00\x00<z\x87?\x00\x00\x00`\xd0 n?\x00\x00\x00 \xad:\x84?\x00\x00\x00 2\xed\x91?\x00\x00\x00\x00\x12`\x7f\xbf\x00\x00\x00\xc0!\x11e\xbf\x00\x00\x00\xa0S\xff\x83\xbf\x00\x00\x00\xa0\x87\xe6a?\x00\x00\x00\xc0\x92\xady?\x00\x00\x00\x00o\xd6t?\x00\x00\x00\x80\xb2\x1f~?\x00\x00\x00\x00Y\xe0^?\x00\x00\x00\xc0\x05\\\x86?\x00\x00\x00\x80l\'r?\x00\x00\x00\xc0e\x88\x89\xbf\x00\x00\x00\xe05\x9e\x86\xbf\x00\x00\x00`\x1e(y\xbf\x00\x00\x00@\x87\x96\x80?\x00\x00\x00\xc0\xac\x94x\xbf\x00\x00\x00\x00)\x9a\x86\xbf\x00\x00\x00\xc0\xae\xe0<\xbf\x00\x00\x00\xc0\x9e\xe5\x84\xbf\x00\x00\x00\x80\xe7\x93\x92\xbf\x00\x00\x00\xc0a\xa1H\xbf\x00\x00\x00\x00T\xd9}\xbf\x00\x00\x00@$\xa1I\xbf\x00\x00\x00\x00N\xfa\x81\xbf\x00\x00\x00 H\xa5d?\x00\x00\x00 W\xbe\x7f?\x00\x00\x00\x80\xe0>\x81?\x00\x00\x00@\xa06l\xbf\x00\x00\x00 \xd3\xf4\x91?\x00\x00\x00`\xd5W\x85?\x00\x00\x00 k\xae\x9b?\x00\x00\x00\x00R\x0eC?\x00\x00\x00\xc0# %?\x00\x00\x00\xc0\x87\xa3\x8a?\x00\x00\x00\x00\xbbI|\xbf\x00\x00\x00\xe0\x87\x0bv?\x00\x00\x00`w\xf7{?\x00\x00\x00@\xb7\xc7~?\x00\x00\x00\xe0\xd4\x05\x83\xbf\x00\x00\x00\x00//\x02?\x00\x00\x00\x80\x86\x04\x8e?\x00\x00\x00\x00\xc9/}?\x00\x00\x00\x00ZDv\xbf\x00\x00\x00\x00o0_\xbf\x00\x00\x00 \xb3\xfeo\xbf\x00\x00\x00\xe0Q\x05\x81?\x00\x00\x00@\x98\xec$\xbf\x00\x00\x00\xe0@%\x8a?\x00\x00\x00\x80\x05\xb0\x85?\x00\x00\x00 \x16\x01}\xbf\x00\x00\x00\x00\xb1\xa2f\xbf\x00\x00\x00\xa0\xb2/\x83?\x00\x00\x00\xe0\x10\x06g\xbf\x00\x00\x00 <^p\xbf\x00\x00\x00\x80\x0e(g?\x00\x00\x00\x00\x9c\xc2t\xbf\x00\x00\x00\xc0\xbe\xafp\xbf\x00\x00\x00\xa0y6z\xbf\x00\x00\x00@\xb2\x89d\xbf\x00\x00\x00\xc0\xee\x14\x80\xbf\x00\x00\x00\xc0\xed\xfes?\x00\x00\x00\xc0\xbf\x8a{?\x00\x00\x00\xc0\xab\xd2l\xbf\x00\x00\x00\xc0Y=\x82?\x00\x00\x00 \xa8\xde\x10?\x00\x00\x00\xa0b\xf4z?\x00\x00\x00`\x19"p\xbf\x00\x00\x00 _pq?\x00\x00\x00`\xc8\x99w\xbf\x00\x00\x00\x80\xf6\xe4\x86?\x00\x00\x00\x00&\xa1f\xbf\x00\x00\x00\xe0\xa2\xdd\x95\xbf\x00\x00\x00\x00\xf1\x0c\x93\xbf\x00\x00\x00 \xee\xe5`?\x00\x00\x00\xe0t\xc7j\xbf\x00\x00\x00\xa0:8s?\x00\x00\x00 2\xf2l?\x00\x00\x00\x00Qg\x83\xbf\x00\x00\x00\xe0\xe2\xa7\x83?\x00\x00\x00\x00\xf0\xb3s\xbf\x00\x00\x00\x80\xe0\x82c\xbf\x00\x00\x00@I\xed]\xbf\x00\x00\x00\x00Unx?\x00\x00\x00\xe0\xcdQ\x8c\xbf\x00\x00\x00`\xef\xe3j\xbf\x00\x00\x00 \xf0\\\x91\xbf\x00\x00\x00\x80\x1f\xbaJ?\x00\x00\x00\x00g#t\xbf\x00\x00\x00\xa0\x0c\xfa+?\x00\x00\x00 \x9cc\x82\xbf\x00\x00\x00\x00\x98Q\x92?\x00\x00\x00 \xc6\xe0!\xbf\x00\x00\x00\x00\xa0\xa8\x86\xbf\x00\x00\x00\xe0_\xb2=\xbf\x00\x00\x00\xc0\xb2\xff[?\x00\x00\x00@\xfa\xbf\x88?\x00\x00\x00\xa0\xcf\xef}?\x00\x00\x00 \xc1j\x89\xbf\x00\x00\x00`\xcf\x00\x88?\x00\x00\x00\xc0\xc0\x8c\x89\xbf\x00\x00\x00 \xef\xb5s\xbf\x00\x00\x00\x00\xfd\x82\x91?\x00\x00\x00\x80\'\xff\x80?\x00\x00\x00 \xd0\x85\x90?\x00\x00\x00\xe0Y\'s?\x00\x00\x00\x80T\xc8\x80\xbf\x00\x00\x00@\n\xe3r?\x00\x00\x00`3\xe7|\xbf\x00\x00\x00\x80Sb\x87?\x00\x00\x00 vY\x91?\x00\x00\x00\xe0\x94T\x7f\xbf\x00\x00\x00\x807\xaaW\xbf\x00\x00\x00 \x07^\x88\xbf\x00\x00\x00\x80\x9c.\x8d?\x00\x00\x00\x80\xb7\x9f?\xbf\x00\x00\x00 \xcdV\x92\xbf\x00\x00\x00`j\xf1X\xbf\x00\x00\x00 \x11\xc5\x8c\xbf\x00\x00\x00\xa0\xc1!<?\x00\x00\x00\x80\xea\x96`?\x00\x00\x00`\xd3s9\xbf\x00\x00\x00@\xb6@s?\x00\x00\x00\x80\xd5\x9e\x87?\x00\x00\x00 Y(\x85\xbf\x00\x00\x00\x00+\x19\x81?\x00\x00\x00\xa0=\x1a`?\x00\x00\x00 D\xea\x94?\x00\x00\x00\xe0\xc2E~?\x00\x00\x00\xa0I[~\xbf\x00\x00\x00@\xd6\xc0l?\x00\x00\x00\xc0\x1e\xb8w\xbf\x00\x00\x00 \x9b\x04t\xbf\x00\x00\x00\x00l\x88\x82\xbf\x00\x00\x00 \x99\x0f\x84\xbf\x00\x00\x00\xc0\xdfD\x82\xbf\x00\x00\x00\xa0\xf4MI?\x00\x00\x00\x00\xc3\x7f\x87\xbf\x00\x00\x00`\x81\x97\x96\xbf\x00\x00\x00`\x91\xd1R?\x00\x00\x00\xe0w=\x92?\x00\x00\x00\x00\xdf\xf1w?\x00\x00\x00`\x9ei}\xbf\x00\x00\x00`~\xf3\x84\xbf\x00\x00\x00\x00]\xe6\x94?\x00\x00\x00 Kd\x80?\x00\x00\x00`}ja?\x00\x00\x00 W$x\xbf\x00\x00\x00\xc0Yx\x82\xbf\x00\x00\x00\xc0\x98\xa0\x9f?\x00\x00\x00`\xbf)\x81?\x00\x00\x00@qFk?\x00\x00\x00\x00.\xbbj?\x00\x00\x00\x00\xa7x\x8e\xbf\x00\x00\x00\xc0\n\xc6\x93?\x00\x00\x00\x80\xeaol?\x00\x00\x00`\xb9$\x86?\x00\x00\x00\xe0sNz?\x00\x00\x00 \xdc\x17t?\x00\x00\x00 \x0bAu\xbf\x00\x00\x00\x80\x83d\x83\xbf\x00\x00\x00\xe0\xd4fi\xbf\x00\x00\x00@\xb6\xd1Q\xbf\x00\x00\x00\xc0M\x00}?\x00\x00\x00\x00\xd9\xdb\x8c\xbf\x00\x00\x00\x80\x88\xd3w\xbf\x00\x00\x00\xe0}\xb4\x95?\x00\x00\x00\x00\xba\xb8c\xbf\x00\x00\x00\xa0\xc5\xa1\x83?\x00\x00\x00\x80\n\xbea\xbf\x00\x00\x00@`\x1f}?\x00\x00\x00\xe0r\x17Q?\x00\x00\x00@\xb8\x95\x90\xbf\x00\x00\x00\xe0\x08s\x80\xbf\x00\x00\x00\xe0w\x0bi\xbf\x00\x00\x00\xa0\xd8\x94\x82\xbf\x00\x00\x00\x00i4H\xbf\x00\x00\x00\xe0\nc\x80\xbf\x00\x00\x00\x00r(g?\x00\x00\x00`CO\x90\xbf\x00\x00\x00\xe0\xc60P?\x00\x00\x00\xe0r3=?\x00\x00\x00\x80\xe36\x97?\x00\x00\x00\xe0$\xc8\x84?\x00\x00\x00\x80P\xfbx\xbf\x00\x00\x00\xe0\rQ\x83?\x00\x00\x00\xc0\x8f`\x83?\x00\x00\x00\xc0)\x9a\x8a?\x00\x00\x00 \x04\x16\x9c\xbf\x00\x00\x00\xe0\x16r\x82\xbf\x00\x00\x00\xa0\xc1\xe6\x83?\x00\x00\x00 \xb5\x9ez?\x00\x00\x00 \xc60\x8f\xbf\x00\x00\x00 \xf24s\xbf\x00\x00\x00\xe0\x85\x95\x8d?\x00\x00\x00 \xe3\xb8\x8f?\x00\x00\x00\xc0E\x1bN\xbf\x00\x00\x00\xc0\x05\x0c\x81?\x00\x00\x00\x00\xa3$x?\x00\x00\x00\xe0p\x7f\x89?\x00\x00\x00\xa0\xe6#r\xbf\x00\x00\x00\x00\x8c`n?\x00\x00\x00\x00\x03\xc9\x84\xbf\x00\x00\x00\x00\xb6\xbe\x84?\x00\x00\x00`\xe4\x19\\?\x00\x00\x00 \xf1s\\\xbf\x00\x00\x00@\x1e\x90\x8b\xbf\x00\x00\x00 \x88Is\xbf\x00\x00\x00\xa0P\xac\x81\xbf\x00\x00\x00\xe0_\xf2\x92?\x00\x00\x00`79o?\x00\x00\x00\x00=w\x94?\x00\x00\x00 \xf7U\x8e?\x00\x00\x00\xa0\xea\x80\x8c\xbf\x00\x00\x00\xa0\xed\x0b~?\x00\x00\x00\x00\x907\x88\xbf\x00\x00\x00@+[x\xbf\x00\x00\x00\xe0\xa1&\x89?\x00\x00\x00\xa0\xc8t\x92\xbf\x00\x00\x00@\xd7\xe3q\xbf\x00\x00\x00\x00E`\x83?\x00\x00\x00\xc0\nbz\xbf\x00\x00\x00\x80\xe5\xc7F?\x00\x00\x00\xc0\x10\xfbr\xbf\x00\x00\x00\x00\xcfs??\x00\x00\x00\xe0\x8c\xe3>?\x00\x00\x00\xc0ap`?\x00\x00\x00 \x1e\x91\x85\xbf\x00\x00\x00\xe04\xd9\x8c?\x00\x00\x00\x00,\xa7p?\x00\x00\x00\x00\xac\xc0p?\x00\x00\x00`q\xa0}?\x00\x00\x00\x00\xfb\xc0\x82\xbf\x00\x00\x00 \x17\xbd\x81?\x00\x00\x00@;\xc6a\xbf\x00\x00\x00\xe0\x99\x94d\xbf\x00\x00\x00\xe0-!p?\x00\x00\x00@N\xa2\x81?\x00\x00\x00`\xea\x1c\x87\xbf\x00\x00\x00\x00\xe1\x0cb\xbf\x00\x00\x00\x00\x991p?\x00\x00\x00\xa0h\x92\x96\xbf\x00\x00\x00\xc0c\xf2D?\x00\x00\x00@5\xc1r\xbf\x00\x00\x00`\xc8\xd1\x90?\x00\x00\x00@\xa0e\x86\xbf\x00\x00\x00\x00A?\x94?\x00\x00\x00@\x12\x14\x93?\x00\x00\x00\xc0\x83\xa2t?\x00\x00\x00\x80\x95nQ?\x00\x00\x00\x00\xa7<\x84\xbf\x00\x00\x00\xa0l\xddk?\x00\x00\x00`\xce\xbe\x91\xbf\x00\x00\x00@\xa3\x99G\xbf\x00\x00\x00\x80O\tg?\x00\x00\x00 =,x?\x00\x00\x00\x80;{\x8b?\x00\x00\x00@\x80Xf?\x00\x00\x00 \x8fxo?\x00\x00\x00\x00\xc8\xf82?\x00\x00\x00`z-\x88\xbf\x00\x00\x00`\xf0\xe4h\xbf\x00\x00\x00\xc0\xb4\x06\x81?\x00\x00\x00\xc0b\xc0\x91\xbf\x00\x00\x00\x00\xb2an\xbf\x00\x00\x00\x80K\x82\x8c\xbf\x00\x00\x00`\rl\x83?\x00\x00\x00\xe0\x97\xa3>\xbf\x00\x00\x00\x00\x03\x99`?\x00\x00\x00\xe0T\xcdu\xbf\x00\x00\x00`\x07\x9a\x91?\x00\x00\x00`\xb2\xa4\x81?\x00\x00\x00\xc0z0\x80?\x00\x00\x00`\xfaC\x95?\x00\x00\x00\xe0\xb7(8\xbf\x00\x00\x00\x00JOe\xbf\x00\x00\x00`\xcc\xc3\x82\xbf\x00\x00\x00\xe0\xa1\xfda?\x00\x00\x00 \xcc\xb8\x96?\x00\x00\x00\xc0|}c\xbf\x00\x00\x00 }\xd5\x8b\xbf\x00\x00\x00\x80\xf1V\x89?\x00\x00\x00\xe0\x1bp\x90?\x00\x00\x00\x00\xbc\xd0\x8e\xbf\x00\x00\x00\x00\x1be\x95?\x00\x00\x00@\xed=\x82\xbf\x00\x00\x00\xa06qu\xbf\x00\x00\x00 \x9c\xa6V\xbf\x00\x00\x00`\xbf\xe9\x88\xbf\x00\x00\x00`\xb5\xfc~?\x00\x00\x00\xa0\xc9_\x7f\xbf\x00\x00\x00\xc0I\xbb\x83\xbf\x00\x00\x00\x80\x1f\x95r\xbf\x00\x00\x00\x00\xdc\xe9~\xbf\x00\x00\x00\x00\xf3A\x87\xbf\x00\x00\x00\x80)\xb8\x89\xbf\x00\x00\x00@B9w?\x00\x00\x00\xe0\x16M8?\x00\x00\x00\xe0\x88[D?\x00\x00\x00\xe0\xce;\x84\xbf\x00\x00\x00`\xeae\x83\xbf\x00\x00\x00@\xa2\xb8m\xbf\x00\x00\x00\xa0)]\x9d\xbf\x00\x00\x00\xc0\xb9Hp\xbf\x00\x00\x00\x00\x88Yu\xbf\x00\x00\x00\x00i[t\xbf\x00\x00\x00\xc0\xaa/\x87?\x00\x00\x00@\xca-`\xbf\x00\x00\x00 \x8b\x9b|?\x00\x00\x00\xa0?\xb7\x84?\x00\x00\x00\xe0R\xbd\x83?\x00\x00\x00\xa0\x1d\xf3}\xbf\x00\x00\x00 <ag\xbf\x00\x00\x00\xe02\x9dr?\x00\x00\x00\x00\xf1\xfb\x99\xbf\x00\x00\x00@^\xe0w\xbf\x00\x00\x00`Y\x06\x81\xbf\x00\x00\x00 ~\xe2`?\x00\x00\x00\xe0\xe8\xfb\x93?\x00\x00\x00\x00\xf5\xd8D?\x00\x00\x00\x00\x8a\xd6`\xbf\x00\x00\x00\xa07\xd5\x8c\xbf\x00\x00\x00\xc0\x0f\xbcq?\x00\x00\x00\xa0`\xd4;?\x00\x00\x00`\x16+\x81?\x00\x00\x00\xe0\xa1\xaf\x88\xbf\x00\x00\x00`\xa8\x7f\x84?\x00\x00\x00\xa0c-\x80\xbf\x00\x00\x00\xa0\xf40"\xbf\x00\x00\x00\xc0\xb0\xecP?\x00\x00\x00\xc0\xee2c?\x00\x00\x00 O\xf4\x88\xbf\x00\x00\x00\xa0\xd2ES\xbf\x00\x00\x00@\x92\x00|\xbf\x00\x00\x00`y\xb5\x8b?\x00\x00\x00\xa0\x7f\x91\x80?\x00\x00\x00\xc0\xf8\xe5`?\x00\x00\x00 `m\x82?\x00\x00\x00\x00\xe8\xcc\x90\xbf\x00\x00\x00\xa0`1i?\x00\x00\x00\x80P\xe4\x82\xbf\x00\x00\x00\x00x\xe7v?\x00\x00\x00\x80\x8d~i\xbf\x00\x00\x00\xe0x\xd6\x84\xbf\x00\x00\x00`V!\x89?\x00\x00\x00@\xab\x13q?\x00\x00\x00\xa0e\xf6g\xbf\x00\x00\x00 \xb94\x95\xbf\x00\x00\x00\x00\xc7\x9aw\xbf\x00\x00\x00\x80\x7f\xf4G?\x00\x00\x00 .Vp\xbf\x00\x00\x00`\x7ft\x81?\x00\x00\x00\xa0\x1d\xd3\x90\xbf\x00\x00\x00@l\xb7\x7f?\x00\x00\x00 \x01\xc1d\xbf\x00\x00\x00 E\xa2c?\x00\x00\x00@\x8f\xd6\x10\xbf\x00\x00\x00\xe0L\x9f\x8a?\x00\x00\x00\xa0Jy\x85?\x00\x00\x00\x802\xfdq\xbf\x00\x00\x00\xa0\x0f\xe4\x8b?\x00\x00\x00\xa0u\xe7\x8c?\x00\x00\x00\x00\x138p\xbf\x00\x00\x00@\xc0\xc0l?\x00\x00\x00\x80\t!p\xbf\x00\x00\x00`\x9dYE\xbf\x00\x00\x00\x80+tz\xbf\x00\x00\x00\xe0\xd4>\x8b\xbf\x00\x00\x00 \xb8\xdeF?\x00\x00\x00\x80%\x90u\xbf\x00\x00\x00\xc0\xe1\xc3\x83\xbf\x00\x00\x00\xa0\xa0\x15\x96\xbf\x00\x00\x00\xa0\x89\x04W?\x00\x00\x00@\xf1\xdc~?\x00\x00\x00 \xf5v\\\xbf\x00\x00\x00`\x03\xddR?\x00\x00\x00\x00\xf7\xfc\x8a?\x00\x00\x00\xa0J6\x89?\x00\x00\x00\xa0\x93\xe5i?\x00\x00\x00`\xce;a?\x00\x00\x00\xa0\xd6\xc9s\xbf\x00\x00\x00@\xb3By?\x00\x00\x00@\x08\x02d?\x00\x00\x00`\xb8[Q\xbf\x00\x00\x00\x00@\xe5u\xbf\x00\x00\x00 \x8c\xfbs\xbf\x00\x00\x00@\xfd\xf9v?\x00\x00\x00 \xd0Nl?\x00\x00\x00\x00\xf3){?\x00\x00\x00@\xb7\x7f~\xbf\x00\x00\x00\x00\xe0\x1b\x80?\x00\x00\x00`\xdf@|\xbf\x00\x00\x00`YF\x8f?\x00\x00\x00 \xbc\x1b\x93?\x00\x00\x00 \x1d\xb8k?\x00\x00\x00\x80\xa5&v\xbf\x00\x00\x00\x00\xeb\xb4{\xbf\x00\x00\x00`m)7?\x00\x00\x00\x00\xd4\xa9d?\x00\x00\x00@\x94(\x04\xbf\x00\x00\x00@s\x89p?\x00\x00\x00\xa0\xb8\x1fv\xbf\x00\x00\x00\x00$\xb9g\xbf\x00\x00\x00@M\x19u\xbf\x00\x00\x00\x80\xfa\x8a\x81\xbf\x00\x00\x00\x80\xdbt|?\x00\x00\x00\x80\x18\x04|?\x00\x00\x00@M\xc8x\xbf\x00\x00\x00\x80\xa4\x9bx\xbf\x00\x00\x00\x80^\x0cg?\x00\x00\x00 \x07\x86\x8d\xbf\x00\x00\x00\x00\xf7%z?\x00\x00\x00\xa0\x1c\x8e\x0c\xbf\x00\x00\x00\xe0\xdd\xc8\x84\xbf\x00\x00\x00 \x0e-R\xbf\x00\x00\x00\xc01q\x8c?\x00\x00\x00 \x9b\xebS\xbf\x00\x00\x00 \xcaol\xbf\x00\x00\x00\x80D\xc0v?\x00\x00\x00`\xc4\x0cp\xbf\x00\x00\x00`\x81\n\x81?\x00\x00\x00\xe0GF\x88?\x00\x00\x00`Rw\x85\xbf\x00\x00\x00\x80\xa5\xbc\x81?\x00\x00\x00`YQ\x87\xbf\x00\x00\x00\xc0\xbe\x80\x82?\x00\x00\x00`\xc0\xfd\x8a?\x00\x00\x00`\x10\x87}\xbf\x00\x00\x00`E2b\xbf\x00\x00\x00`\x91\xf8\x7f?\x00\x00\x00@\x08\xb6y\xbf\x00\x00\x00\x00\xbb\xc5\x8b\xbf\x00\x00\x00@\xf1\x94\x7f?\x00\x00\x00@\\\xb2\x82\xbf\x00\x00\x00\xe0F=\x95\xbf\x00\x00\x00\x80e\xb2\x81?\x00\x00\x00\xc0%\xfc\x91\xbf\x00\x00\x00\xc0\x07\xf9a?\x00\x00\x00`\xc0\'\x95?\x00\x00\x00\xe0\ra\x80?\x00\x00\x00@\x87\xce\x90?\x00\x00\x00@H\x1e\x89?\x00\x00\x00\xe0!Oq?\x00\x00\x00\xa0\xf9=i?\x00\x00\x00\xc0\xe6;\x07?\x00\x00\x00\xe0\xe2\xde\x80\xbf\x00\x00\x00\xe0xrc\xbf\x00\x00\x00\xc0\xb9\xf3l\xbf\x00\x00\x00@\x8d\xa7\x81\xbf\x00\x00\x00\xe0\xb8#d\xbf\x00\x00\x00\xe0\x83=\x86\xbf\x00\x00\x00 \xcen|\xbf\x00\x00\x00\x80\xe8\x15w\xbf\x00\x00\x00\x80g!s\xbf\x00\x00\x00@\xb4%\x88\xbf\x00\x00\x00@\x879~?\x00\x00\x00\x00\x02K\x91?\x00\x00\x00\x00\xa0\x1e\x89?\x00\x00\x00@\xf2\xdaQ\xbf\x00\x00\x00\xe0\x90\x06t\xbf\x00\x00\x00\x80\xf3\xb3|?\x00\x00\x00\xe0\xea\xbe\x84?\x00\x00\x00\xa0x\xec\x99?\x00\x00\x00 \xa5\xc4\x80?\x00\x00\x00 Q\xbd{\xbf\x00\x00\x00\x80\xa5\xac\x7f\xbf\x00\x00\x00\xc0\xe7\xf0y\xbf\x00\x00\x00@\x92\xa4o\xbf\x00\x00\x00\xc0.Iv\xbf\x00\x00\x00 d\xb6\x98?\x00\x00\x00\xc0\xce\xf9y?\x00\x00\x00\x80\xb8\xfe\x98\xbf\x00\x00\x00\xc0mr`\xbf\x00\x00\x00 h\x0b\x92?\x00\x00\x00\x80\xb8\xc2y\xbf\x00\x00\x00`c\xc4~?\x00\x00\x00\xe0\xee\xe6\x8b?\x00\x00\x00\xa0\xdarn\xbf\x00\x00\x00`6\xdd\x84?\x00\x00\x00\xe0\x91bn\xbf\x00\x00\x00\xa0\xf3\x9ey\xbf\x00\x00\x00\xa0\xea\x87\x86?\x00\x00\x00\xc0u\xbcZ?\x00\x00\x00 ]\x9aq\xbf\x00\x00\x00\xa0\x9avs?\x00\x00\x00\xe0\xf0\xe2o?\x00\x00\x00\x00\xf8\xc3i\xbf\x00\x00\x00 \xe8\xe2\x90\xbf\x00\x00\x00\xa0\x15\x90\x94\xbf\x00\x00\x00\xc0\xc2\x8fk\xbf\x00\x00\x00\xa0\xb8\xe6\x82\xbf\x00\x00\x00\xc0\xa8\xc5t\xbf\x00\x00\x00@zaj?\x00\x00\x00\x00\x8b\xc2#?\x00\x00\x00\xa0\x17\xces?\x00\x00\x00\xa0/_x?\x00\x00\x00\x00\xcf\xcdj\xbf\x00\x00\x00`~\x04\x92\xbf\x00\x00\x00\xe0\xf7\xa5p\xbf\x00\x00\x00\x00\xbd\x0e\x81\xbf\x00\x00\x00@\xd4\xb5e\xbf\x00\x00\x00\xc0\xb2=r?\x00\x00\x00\x00\xd3\xb7\x83?\x00\x00\x00\xe0\x19\x10\x85?\x00\x00\x00@v\x88\x8c\xbf\x00\x00\x00@\xfe\xff\x82\xbf\x00\x00\x00\xc0\xf8\xb4\x99?\x00\x00\x00\xc0}#}?\x00\x00\x00@l\xa9v?\x00\x00\x00\xa0\xa2\xb3~\xbf\x00\x00\x00 fL"?\x00\x00\x00\x00&:d\xbf\x00\x00\x00@D\xf4\x7f\xbf\x00\x00\x00@>\x9f\x8c?\x00\x00\x00@\xf1]u\xbf\x00\x00\x00\x00\x15;\x8f\xbf\x00\x00\x00\xe0\xa3\x19s\xbf\x00\x00\x00\x80\xf9\xe1]?\x00\x00\x00\xe0\x96+\x89\xbf\x00\x00\x00\x80b\xd3x?\x00\x00\x00 O\x86\x98?\x00\x00\x00\xc0T\xe4r?\x00\x00\x00\xe0\x0b\x1c`?\x00\x00\x00`\xe6\xea`?\x00\x00\x00\xa0,Dd\xbf\x00\x00\x00@U,\x85?\x00\x00\x00\xe0\xd6\xa5p?\x00\x00\x00`\xae\x88j?\x00\x00\x00\x80\xdc+<?\x00\x00\x00\xa0\xe3\xbd~\xbf\x00\x00\x00`:\rt\xbf\x00\x00\x00\x00\xe5\xe3\x85\xbf\x00\x00\x00\x00\x13\xdc\x85\xbf\x00\x00\x00\x00x\x0ft\xbf\x00\x00\x00\xa0=\x8et\xbf\x00\x00\x00\x80\xa5h_?\x00\x00\x00`[\x9cy\xbf\x00\x00\x00\xc0\xd8\xf7Q\xbf\x00\x00\x00\xc0I\x12p?\x00\x00\x00\xc0\xe8]r?\x00\x00\x00 \xd7m`?\x00\x00\x00\xe0\x91\xbc\x8d\xbf\x00\x00\x00\x00_\xe4\\?\x00\x00\x00\xc0k\x9e\x83?\x00\x00\x00\x80\x8egN?\x00\x00\x00\xe0*\x9d{\xbf\x00\x00\x00\xa0\xb7_e\xbf\x00\x00\x00\xc0\xaf\x15\x83\xbf\x00\x00\x00`\xf0\xa9\x81\xbf\x00\x00\x00`D\x8eX?\x00\x00\x00\xa0\x92\x06\x8c?\x00\x00\x00 :\x1ex\xbf\x00\x00\x00 \xbdz\x94?\x00\x00\x00\x80\xeb\x0e`\xbf\x00\x00\x00@\\T=\xbf\x00\x00\x00 \x14\x0f\x86\xbf\x00\x00\x00\xc0\x19qp\xbf\x00\x00\x00@\xca1\x88?\x00\x00\x00@=\xeer?\x00\x00\x00\x00\x1e\xd4\x8b\xbf\x00\x00\x00\xc0\x91C\x89?\x00\x00\x00\xc0\x11\xb0d\xbf\x00\x00\x00\xe0\x024\\?\x00\x00\x00 \x06S\x83\xbf\x00\x00\x00\xc0+wd\xbf\x00\x00\x00\xc0G\xb1\x91\xbf\x00\x00\x00\x80C\x0c\x86?\x00\x00\x00@f\x17\x92\xbf\x00\x00\x00\xa03\x0c\x82?\x00\x00\x00 x\x89\x93?\x00\x00\x00\xc0\x02\xab[\xbf\x00\x00\x00\xe0\xe5\xa4\x95\xbf\x00\x00\x00\xe05\xdc\x92\xbf\x00\x00\x00\x80a\xed\x85\xbf\x00\x00\x00\x00\x11(\x13\xbf\x00\x00\x00\x80q\xc5\x80\xbf\x00\x00\x00\x80\x12\x94y?\x00\x00\x00@\xddV\x82?\x00\x00\x00\x00\xc0\xa9Y\xbf\x00\x00\x00\xc0\x017\x94\xbf\x00\x00\x00 \x91)\x8b?\x00\x00\x00\xe0\x7fy\x90?\x00\x00\x00\xe0\xfc\x90\x8d\xbf\x00\x00\x00@:\xdb\x87\xbf\x00\x00\x00\x00\x84]r\xbf\x00\x00\x00`\xc9RY\xbf\x00\x00\x00\x80r\xf6s\xbf\x00\x00\x00\x80\xd0\xa3\x88\xbf\x00\x00\x00\x00<\x06q\xbf\x00\x00\x00@M\x13\x16\xbf\x00\x00\x00\x00\x86\x84v?\x00\x00\x00 \xc7\xb6\x8d\xbf\x00\x00\x00\xa0\xa2\xcc\x9d?\x00\x00\x00@i\x07x?\x00\x00\x00\xa0\x03F\x83?\x00\x00\x00\xe0\x8d"\x80?\x00\x00\x00\xc0\xa7\xf2\x80\xbf\x00\x00\x00\xe0G\\U?\x00\x00\x00\xe0\x9e\xe6\x8f\xbf\x00\x00\x00`$\xa7\x81?\x00\x00\x00\x80\xe74\x91?\x00\x00\x00`\xa87o\xbf\x00\x00\x00\xc0\x99s\x81\xbf\x00\x00\x00@\x00\x84f?\x00\x00\x00 \x1a\x1e\x86\xbf\x00\x00\x00`\xc3+\x92\xbf\x00\x00\x00\xe0\xa0\x94\x7f?\x00\x00\x00@\xdfLD?\x00\x00\x00@h\x16\x82\xbf\x00\x00\x00\x00\x96"|\xbf\x00\x00\x00\x80\xb7\x7fv\xbf\x00\x00\x00`8\xa5x?\x00\x00\x00 !R\x87\xbf\x00\x00\x00\xa0\x07*N\xbf\x00\x00\x00\xa0)\x1d\x8a\xbf\x00\x00\x00\xe0\xa0@a?\x00\x00\x00@\xec3\x87\xbf\x00\x00\x00\xc0\x97\x87\x83\xbf\x00\x00\x00@{\x0bo?\x00\x00\x00 \x00\x1b\x85?\x00\x00\x00`\x0c;R\xbf\x00\x00\x00\xe0x;\x8f?\x00\x00\x00\xe0\xe4qx?\x00\x00\x00\xc0a\xa51?\x00\x00\x00\x80M)g?\x00\x00\x00@W\xdba\xbf\x00\x00\x00\xa0\x11\xe4g?\x00\x00\x00`+e\x96?\x00\x00\x00\x80\x90\x87X?\x00\x00\x00\x80\x1e\x88\x92\xbf\x00\x00\x00`lf~?\x00\x00\x00\x80\xd6Eu?\x00\x00\x00\x00\x88kz?\x00\x00\x00\xe0\x17\xd7\x89?\x00\x00\x00\x80[\x02d\xbf\x00\x00\x00`\xef\x84y\xbf\x00\x00\x00\x00&\x0b`?\x00\x00\x00\xe0.\xcd}?\x00\x00\x00@\xf0\xd5[?\x00\x00\x00 \x16/\x86\xbf\x00\x00\x00@\xbeYr\xbf\x00\x00\x00@\xb7\x14[\xbf\x00\x00\x00\xe0s}\x1e?\x00\x00\x00\xa0\xc3\xab{\xbf\x00\x00\x00\x80\xe1\x19\x82\xbf\x00\x00\x00\xc0\xad+y?\x00\x00\x00 \xf0\xe2`\xbf\x00\x00\x00\x80%\xd2x?\x00\x00\x00 \x1b\xfa_\xbf\x00\x00\x00\xe0W@\x84\xbf\x00\x00\x00\x80\xa9\xee\x88?\x00\x00\x00@Y\xd4]\xbf\x00\x00\x00@\xe3\x02p\xbf\x00\x00\x00`o\xff\x88?\x00\x00\x00\xc0O\xd4\x95?\x00\x00\x00\xa0\xb3\x99t\xbf\x00\x00\x00\xa0\x0f\x89\x86\xbf\x00\x00\x00`\xf7J\x87\xbf\x00\x00\x00\xe03\x1d\x91?\x00\x00\x00\xc08\x99f\xbf\x00\x00\x00`\xa5\x1br?\x00\x00\x00\x80M`\x91\xbf\x00\x00\x00@k\xb9\x89?\x00\x00\x00@\xb5\xcef\xbf\x00\x00\x00 \xedr\x84\xbf\x00\x00\x00\x803m`?\x00\x00\x00\x80F\x80n\xbf\x00\x00\x00\x00\x96f\x8a?\x00\x00\x00\xc0[1\x91\xbf\x00\x00\x00\xa0\x0bay\xbf\x00\x00\x00\xc0W}q?\x00\x00\x00\xc0v\xc8\x92?\x00\x00\x00\xe0\x96\xab`?\x00\x00\x00\x00\xf5\x93v?\x00\x00\x00\xc0N^U\xbf\x00\x00\x00 \xba>\x8c\xbf\x00\x00\x00\xe0mT\x80?\x00\x00\x00\xc0\xe9\x1bG\xbf\x00\x00\x00\xc0\xfa\xf9\x84?\x00\x00\x00`\xc6\xdfW\xbf\x00\x00\x00@\xd6\xf3\x85?\x00\x00\x00\xe0\xd1\xce\x8a\xbf\x00\x00\x00`\xb2\xbb\x97?\x00\x00\x00\x80\xd6\x90w?\x00\x00\x00\x80\xd9t\x88?\x00\x00\x00 Y\x90J\xbf\x00\x00\x00\xa0\xd5j\x88\xbf\x00\x00\x00\xc0\xf9\x9c\x8d?\x00\x00\x00@\xc5\x86o\xbf\x00\x00\x00@\xed\x1ai\xbf\x00\x00\x00\x80\x82\x1c`\xbf\x00\x00\x00@-\x01\x80?\x00\x00\x00@g\xf7\x87\xbf\x00\x00\x00\x00\xb1\xd7R\xbf\x00\x00\x00`rOt?\x00\x00\x00\x80\xb37\x94\xbf\x00\x00\x00\xc0{\xaa\x8f\xbf\x00\x00\x00\x80\x85\xdeR?\x00\x00\x00`\x8dpt\xbf\x00\x00\x00\xe0\x8c\xeb\x91\xbf\x00\x00\x00\xc0.\xd2\x8a?\x00\x00\x00`=:s?\x00\x00\x00\xa0\xfb\xdf\x8a\xbf\x00\x00\x00\xa0+*\x91?\x00\x00\x00\xc0o\x1dz?\x00\x00\x00\xe0$\x9d\x86\xbf\x00\x00\x00\xe0=Go\xbf\x00\x00\x00\xe0\xc7#\x91\xbf\x00\x00\x00 \xe6\x8a4\xbf\x00\x00\x00\x807\xa3{\xbf\x00\x00\x00\xa0\x0b\x1d\x92?\x00\x00\x00@QVR\xbf\x00\x00\x00\xc0?\x1eT?\x00\x00\x00\x80\x00\x00q\xbf\x00\x00\x00 \x07\xe6>?\x00\x00\x00\x80i\x90\x8b?\x00\x00\x00\xc0\x9e\x98L?\x00\x00\x00@\x83\xc7u?\x00\x00\x00\x80lZD?\x00\x00\x00@20\x8e?\x00\x00\x00\xa0\xbb\xd6X\xbf\x00\x00\x00@9vz?\x00\x00\x00\xc0\xb2+k\xbf\x00\x00\x00`\x89#y\xbf\x00\x00\x00@\xc5\xd4n\xbf\x00\x00\x00\x80}<{\xbf\x00\x00\x00\xc0Cv\x80\xbf\x00\x00\x00\xe0\x10 z?\x00\x00\x00\x00\x00>W?\x00\x00\x00\xe0=\x17}\xbf\x00\x00\x00 \x8e\xc6=?\x00\x00\x00\xc0\x82\x15r\xbf\x00\x00\x00 ]\xd3e?\x00\x00\x00`\xb7g\x88\xbf\x00\x00\x00\x00\xae\xb9u?\x00\x00\x00 b\xd6u?\x00\x00\x00 ~rw\xbf\x00\x00\x00\x00\xb3\xa9\x8e\xbf\x00\x00\x00 P\xd7\x88\xbf\x00\x00\x00@J\xacM\xbf\x00\x00\x00 \xda\xeei?\x00\x00\x00\xa0w\x7f\x83\xbf\x00\x00\x00\x00\xa2q\x87\xbf\x00\x00\x00\xa0\xf0`j\xbf\x00\x00\x00@\xaa\xdci?\x00\x00\x00@%u|?\x00\x00\x00 d\xf7p?\x00\x00\x00\xa0\xae\xab\x80\xbf\x00\x00\x00\x00x\x8cs\xbf\x00\x00\x00\xc0!\xbdp\xbf\x00\x00\x00\x00x\xe3n?\x00\x00\x00`\x93\xb3k\xbf\x00\x00\x00\xe0\xfdK\x8b?\x00\x00\x00`B\xf3\x97\xbf\x00\x00\x00\xa0\x80\xdbs?\x00\x00\x00\x00\xf0\xcad?\x00\x00\x00\xa0~\xa1a?\x00\x00\x00\xe0\x83!r\xbf\x00\x00\x00`f\x9ay?\x00\x00\x00`c\xb3r?\x00\x00\x00`\xbbs\x95?\x00\x00\x00\x00\xbd\x01}\xbf\x00\x00\x00@\\iq?\x00\x00\x00\x00\xcb4\x85?\x00\x00\x00\x00\xa0\xfak\xbf\x00\x00\x00\xa0\xb2\xd3k\xbf\x00\x00\x00\xc0)\x92q?\x00\x00\x00\xc0\x1c\xd4v?\x00\x00\x00@\xce\xaaj?\x00\x00\x00\x80\xe0*n?\x00\x00\x00`\x16\xac^?\x00\x00\x00\x00\xd2rW?\x00\x00\x00\xa0\xac\xe5t\xbf\x00\x00\x00\x80\xfc\xd4{?\x00\x00\x00 X\x83v\xbf\x00\x00\x00\xa0\x0e\xf0|\xbf\x00\x00\x00\x00\x99<}?\x00\x00\x00 \xe3\xf9\x80\xbf\x00\x00\x00@W\xd3c?\x00\x00\x00 V$\x9c?\x00\x00\x00@\xc5\xc9}?\x00\x00\x00\x00\x02\x1ag\xbf\x00\x00\x00\xa0\r)\xda>\x00\x00\x00`\xdd\x93F?\x00\x00\x00\xa0L\\~\xbf\x00\x00\x00@\x82\xc0~\xbf\x00\x00\x00\xa0.\xde\x91\xbf\x00\x00\x00\x00V\xc7\x88?\x00\x00\x00\xc0\xc4"d?\x00\x00\x00`\x9b\xed\x82?\x00\x00\x00 \x91\xddV\xbf\x00\x00\x00@\xd0\x04\x82\xbf\x00\x00\x00\xa0\x81\xbd\x92?\x00\x00\x00 \xf6\x99\x81\xbf\x00\x00\x00`{\xe91\xbf\x00\x00\x00`\x9f@v\xbf\x00\x00\x00 ]\xe7\x93\xbf\x00\x00\x00\x80b\xc9L?\x00\x00\x00 OAp\xbf\x00\x00\x00\xc0\x97\xf3\x87\xbf\x00\x00\x00\xe0l\x82h\xbf\x00\x00\x00@\x0b\xfaJ?\x00\x00\x00`]I\x88\xbf\x00\x00\x00\xe0[\xc5\x86?\x00\x00\x00\x00!\xc1\x93\xbf\x00\x00\x00`\xb6\xd6\x82\xbf\x00\x00\x00\xc0\xeab\x83?\x00\x00\x00\x80\xa9\xe8\\\xbf\x00\x00\x00\xa0s\xb3\x88\xbf\x00\x00\x00@\x9d\x88-?\x00\x00\x00\xa0\x95O|?\x00\x00\x00\xc0\x0b\x1el?\x00\x00\x00`\x95\xdd\x96?\x00\x00\x00\x00\x08\xea~?\x00\x00\x00 \xca\x86\x95?\x00\x00\x00 c\x0ef?\x00\x00\x00\xa0Z@w\xbf\x00\x00\x00@+t\x93\xbf\x00\x00\x00@\xc20\x91\xbf\x00\x00\x00@W\xe2h?\x00\x00\x00\xc06I\x7f?\x00\x00\x00`\xb8\xcfz\xbf\x00\x00\x00 \xa5zT\xbf\x00\x00\x00 e\xf3j?\x00\x00\x00\xa0\xadBn?\x00\x00\x00@\xa3f\x88?\x00\x00\x00\x80\x8e\x1f\x91?\x00\x00\x00\x00#St\xbf\x00\x00\x00\x80ZZ\x8e?\x00\x00\x00\xa0\x17J\x8b\xbf\x00\x00\x00\x80\xd9\xd7\x90?\x00\x00\x00\x00\xf2\xacp\xbf\x00\x00\x00\xa0[|\x80?\x00\x00\x00\x00\xfdMf\xbf\x00\x00\x00@\xaf%l?\x00\x00\x00\xc0\x9d\xf6y\xbf\x00\x00\x00@!\x9fN?\x00\x00\x00\xc0\x96\xcbp?\x00\x00\x00\xc0\xd6\xe3\x81?\x00\x00\x00\xe0\x85\x9ar\xbf\x00\x00\x00\xe0\xef7g\xbf\x00\x00\x00\x80\x89\xd6t\xbf\x00\x00\x00\x80\xd4I\x8d?\x00\x00\x00\x80?\xe53?\x00\x00\x00@\xb0\xb6\x90\xbf\x00\x00\x00 \\|\x92?\x00\x00\x00`n\xd6\x80\xbf\x00\x00\x00\x00\xf1\xde\x88?\x00\x00\x00\xc0W}\x83\xbf\x00\x00\x00\xc0\x8fu\x91\xbf\x00\x00\x00`\x93]e?\x00\x00\x00`\x9f\xcb|\xbf\x00\x00\x00 I\xde\x83\xbf\x00\x00\x00`\xef\xe6\x84\xbf\x00\x00\x00\x80k\x9fr\xbf\x00\x00\x00\xc0\xa7\xa6\x88\xbf\x00\x00\x00\x80\xdd\xe4\x9d?\x00\x00\x00\xa0\xd0:_\xbf\x00\x00\x00\xe0Wau?\x00\x00\x00 \x1e\xc3p\xbf\x00\x00\x00\x00A\xfe\x90?\x00\x00\x00\x80\xa0\xffr\xbf\x00\x00\x00`\x9d\xf8~\xbf\x00\x00\x00\xa0\x82\xce\x83?\x00\x00\x00\x80\xb5+\x8c\xbf\x00\x00\x00\xa0\xf2\x89m?\x00\x00\x00`\x06#u?\x00\x00\x00\x00^\x8aY\xbf\x00\x00\x00\xa0\x0fV\x8e\xbf\x00\x00\x00\x00\x96\xcb`?\x00\x00\x00\x802\x0b\x83\xbf\x00\x00\x00\x80\xa9$\x82?\x00\x00\x00`r|d\xbf\x00\x00\x00`\x17\x85x?\x00\x00\x00 \x00~\x89\xbf\x00\x00\x00\x80\xbe\xc5\x80?\x00\x00\x00\x00\xe8b\x88?\x00\x00\x00\xe0U\xfbp\xbf\x00\x00\x00@f>\x85\xbf\x00\x00\x00\xc0\xd6m\x97\xbf\x00\x00\x00\x80U\xf1\x85\xbf\x00\x00\x00\x80\x1e\x0bu?\x00\x00\x00\xa0[vu\xbf\x00\x00\x00\x00\x07\xd0V?\x00\x00\x00\xc0\xc3eY?\x00\x00\x00\x80\x1d\xd3y?\x00\x00\x00\xa0\xca\xeb@?\x00\x00\x00\xa0a>\x95\xbf\x00\x00\x00\xc0\xe8\xefW?\x00\x00\x00\xc0\x12\xc2\x93\xbf\x00\x00\x00\xa0\xef4Y?\x00\x00\x00@\xe3\x81u?\x00\x00\x00 E\xe3n?\x00\x00\x00\xe0\xb6\xa4\x80?\x00\x00\x00\x00\x1c\t\x8e\xbf\x00\x00\x00\xe05\x93g\xbf\x00\x00\x00 \xb8\xb1o\xbf\x00\x00\x00\xa0 Bw\xbf\x00\x00\x00\x00i[\x98?\x00\x00\x00\x00b\xdc\x8f\xbf\x00\x00\x00 \x07\xcco?\x00\x00\x00\x80\x00`\\?\x00\x00\x00\xe0\x16,\x83?\x00\x00\x00@E\xa5\x8b?\x00\x00\x00\xa0A<i?\x00\x00\x00\x00\xd2-\x8f?\x00\x00\x00\xe0\xb2`\x84\xbf\x00\x00\x00\xe0\xb4\xb3]\xbf\x00\x00\x00\x00x\xbd\'?\x00\x00\x00\x00\xf5\x8a`\xbf\x00\x00\x00\xc0\xaa:y?\x00\x00\x00\xc0\rh\x82\xbf\x00\x00\x00\xc0NC\x90\xbf\x00\x00\x00@\xc30t\xbf\x00\x00\x00\xa0\xc5\xef,\xbf\x00\x00\x00\xe0q\xedY?\x00\x00\x00\xa0\xa3\xc9o\xbf\x00\x00\x00\x80\x8dS\x86?\x00\x00\x00 \x19\xeb\x87?\x00\x00\x00`\xf1Dp\xbf\x00\x00\x00\x80\xc4\x05n?\x00\x00\x00 \x03\xfe\x8e\xbf\x00\x00\x00`\xff\x88s?\x00\x00\x00\xe0b\xa6~?\x00\x00\x00\xc0\xaeFp\xbf\x00\x00\x00\xe0\xa7t\x89?\x00\x00\x00 \x85Z\x84?\x00\x00\x00\x00/pl\xbf\x00\x00\x00@\xaea\x93?\x00\x00\x00\xa0\xde;\x85\xbf\x00\x00\x00@kzF\xbf\x00\x00\x00\xa0\xc1\xeem?\x00\x00\x00\x00\x89Rn\xbf\x00\x00\x00`\xbf\x8a\x83?\x00\x00\x00@\x9a\xce\x92?\x00\x00\x00\xa0\x8b<e\xbf\x00\x00\x00`\x81\xfb\x93?\x00\x00\x00\xe0[\xd5z?\x00\x00\x00\xa0?G\x84\xbf\x00\x00\x00@\x19%r\xbf\x00\x00\x00\xa0i\'\x86?\x00\x00\x00\x00\x8f&r\xbf\x00\x00\x00\x00\xa1\xc5U?\x00\x00\x00\xa0\x0c\r\x88\xbf\x00\x00\x00\x00\xaf\x05{?\x00\x00\x00`\xab\x83Q\xbf\x00\x00\x00\x00\xe1\xb8\x8f?\x00\x00\x00`\x00\xecx?\x00\x00\x00\x00x\x94u?\x00\x00\x00\xe0\x89\xfe\x86\xbf\x00\x00\x00\xc0TD\x85?\x00\x00\x00\xc0\xb6xr?\x00\x00\x00 \xf4,|\xbf\x00\x00\x00\x00W~X?\x00\x00\x00@\xb4Er?\x00\x00\x00@\x18\xc1\x8b?\x00\x00\x00 \'\x95\x85\xbf\x00\x00\x00\xc0\x8e\x10l\xbf\x00\x00\x00\x00\xd2\xb9j\xbf\x00\x00\x00\xc0\x1a\xb4T?\x00\x00\x00\xe0\xbf\xc1Y\xbf\x00\x00\x00\xe0\x04\x0bq?\x00\x00\x00\xa0\x06\xe3p?\x00\x00\x00\x00jd\x85?\x00\x00\x00\xe0\xb0\x1az\xbf\x00\x00\x00\xc0\xc3\x08p\xbf\x00\x00\x00@\x8b\xff\x8a\xbf\x00\x00\x00 \xbb8\x9a\xbf\x00\x00\x00`\xc1\x13\x0c?\x00\x00\x00 0\x12\x11?\x00\x00\x00\x80\x1c\xf7\x82?\x00\x00\x00 \xd0\xeea?\x00\x00\x00\xa0R?v?\x00\x00\x00 6U\x84?\x00\x00\x00\xc0&\xb5\x81?\x00\x00\x00\xc0f\x81\x84?\x00\x00\x00`\xa5\x1a\x80?\x00\x00\x00\x00\x0cV\x8b\xbf\x00\x00\x00 \xc2%\x82\xbf\x00\x00\x00\xa0\x04\xf8t\xbf\x00\x00\x00 ;n\x87?\x00\x00\x00\x00\x9a\xa6?\xbf\x00\x00\x00@\xdf\xa1l\xbf\x00\x00\x00\xa0\xf2\xd2\x85\xbf\x00\x00\x00\xc0<\x9a\x91\xbf\x00\x00\x00\x80\xcc\xfa\x84\xbf\x00\x00\x00@\xe2\xeeu\xbf\x00\x00\x00@\xc4\x00\x90?\x00\x00\x00`7\xb3\x87?\x00\x00\x00\x80\xe0\x9a\x94?\x00\x00\x00\xa0R\xe6o\xbf\x00\x00\x00\x80O\x85\x84\xbf\x00\x00\x00`\x8a\x05V\xbf\x00\x00\x00\xa0Z`\x8c?\x00\x00\x00\xe0\xd6\xaaM\xbf\x00\x00\x00\xc0\x86)\x80?\x00\x00\x00`*op?\x00\x00\x00\xe0m@\x87\xbf\x00\x00\x00`\x85%4?\x00\x00\x00@\xf6\xbe\x87\xbf\x00\x00\x00\x80\xc4\xf3\x81?\x00\x00\x00\x80\xd5\x8cr\xbf\x00\x00\x00` \xc5\x84?\x00\x00\x00\x80\xd8\xdcs?\x00\x00\x00\xe0k\xde\x90?\x00\x00\x00 \xa0Y|?\x00\x00\x00\xe0\xdeu\x86\xbf\x00\x00\x00\xe0\xcb\x1b|?\x00\x00\x00\x00}\x1d\x83\xbf\x00\x00\x00`\xaf\x12\x88?\x00\x00\x00\xe0)o\x8a\xbf\x00\x00\x00`\xcf\x90\x90?\x00\x00\x00 05k\xbf\x00\x00\x00\xa0Q\\\x86\xbf\x00\x00\x00`\xc8/C?\x00\x00\x00@JB}\xbf\x00\x00\x00\xe0\n^\x80?\x00\x00\x00\x00\xf1\xafR?\x00\x00\x00\xa0\x1b\xdf\x84?\x00\x00\x00\x00A\xf4\x85?\x00\x00\x00 @0\x80?\x00\x00\x00\xa0\x04\x1af?\x00\x00\x00\xa0A\xa9p?\x00\x00\x00\x00\xc7%5?\x00\x00\x00\x80\xcd\x05q\xbf\x00\x00\x00\xa0\xfb\xebw?\x00\x00\x00\x801\x0ed?\x00\x00\x00\xa0\xe7"\x83\xbf\x00\x00\x00`r\xb4\x83\xbf\x00\x00\x00\x80\xfefa?\x00\x00\x00 j\xc0\x96?\x00\x00\x00`\xea\x93\x86\xbf\x00\x00\x00\x80\xca\xdf\x83\xbf\x00\x00\x00`o\x19w\xbf\x00\x00\x00`2\x18n\xbf\x00\x00\x00\x00\xd9\x14B?\x00\x00\x00\x80\xd3dl\xbf\x00\x00\x00\x80uT\x93\xbf\x00\x00\x00`s\x8ap\xbf\x00\x00\x00@\xa6a\x88\xbf\x00\x00\x00@\xf2\x9d\x81\xbf\x00\x00\x00 \xe4\xe7\\?\x00\x00\x00`\xb6\xa1y\xbf\x00\x00\x00\xa0\x9e\xc4|?\x00\x00\x00@[\\`?\x00\x00\x00\x80\x81\xc9z\xbf\x00\x00\x00\xa0\xdb\xc8\x81?\x00\x00\x00`\xdf\xfa\x90?\x00\x00\x00\x00=4F\xbf\x00\x00\x00`T\x0cr?\x00\x00\x00\xa0\x8f\xf3c?\x00\x00\x00\x80\xd4\x96L\xbf\x00\x00\x00\xc0\x9ee\x85\xbf\x00\x00\x00\x00\x88~\x8e\xbf\x00\x00\x00 8\xcff?\x00\x00\x00`\x08\xeaH\xbf\x00\x00\x00 0\x9f\x83?\x00\x00\x00\xc0(t\x8a?\x00\x00\x00\xa0J\xba\x89?\x00\x00\x00\x80\x926p\xbf\x00\x00\x00\xa0Q\x18W?\x00\x00\x00`\x98\xcf\x88?\x00\x00\x00`\xb4]\x92\xbf\x00\x00\x00 \r\xcfM?\x00\x00\x00\xe0a\x19|?\x00\x00\x00\x80\xf8\xcaj?\x00\x00\x00@3\x91\x88?\x00\x00\x00\x00\x97\xd9v?\x00\x00\x00`U\xa8\x80\xbf\x00\x00\x00\x80E:r\xbf\x00\x00\x00\xe0\x9b$U?\x00\x00\x00\xa0%\xa9K?\x00\x00\x00\xe0U\xd0s?\x00\x00\x00 \x9b]`\xbf\x00\x00\x00\xa0\x81E\x89\xbf\x00\x00\x00\x80k.\x82\xbf\x00\x00\x00\xe0Px\x90\xbf\x00\x00\x00@\x0b\x00h?\x00\x00\x00\xc0\xfc\t\x9f\xbf\x00\x00\x00 ^i\x8c?\x00\x00\x00\xe0\x91\x02~\xbf\x00\x00\x00\xe0\xce\xab\x82?\x00\x00\x00\xe0g\xfe{\xbf\x00\x00\x00`A`\x8e?\x00\x00\x00\xc0\xa7\xcdH?\x00\x00\x00 \xd4\\\x82?\x00\x00\x00\xc0 4r?\x00\x00\x00 T\xf2&?\x00\x00\x00@\xec\xe1\x8b\xbf\x00\x00\x00 \xc6\xa6\x89?\x00\x00\x00\xc0O\x1f\x90?\x00\x00\x00\xa0\xe3\x87f?\x00\x00\x00 \xc5^x?\x00\x00\x00 \xf1\xfe\x90?\x00\x00\x00`Y\xca"?\x00\x00\x00\x80]\xff|?\x00\x00\x00\xe0\xc6n\x93\xbf\x00\x00\x00`Z\xf6u\xbf\x00\x00\x00\x00\x01\x87\x82?\x00\x00\x00\x00\xce\x98\x84\xbf\x00\x00\x00\x80s\xec\x83?\x00\x00\x00\xc0\xb5Z\x8b?\x00\x00\x00\x80\xc4uK\xbf\x00\x00\x00\x80\x85\xebW\xbf\x00\x00\x00\xe0\xbd\xc8w\xbf\x00\x00\x00@eIu?\x00\x00\x00\x00\xbf5d?\x00\x00\x00@pYi?\x00\x00\x00\x80b\xddY?\x00\x00\x00`\x84\xdaP\xbf\x00\x00\x00\xe0si\x93\xbf\x00\x00\x00\xc0*qB\xbf\x00\x00\x00 \xdc\x98|\xbf\x00\x00\x00 \xb9\xe1\x86\xbf\x00\x00\x00\xe0\x06u\x86?\x00\x00\x00@\x96\xec\x80\xbf\x00\x00\x00`R\xd1~\xbf\x00\x00\x00\x00K\xb6o?\x00\x00\x00`4\xd1q\xbf\x00\x00\x00@o:\x8c\xbf\x00\x00\x00`\r&c?\x00\x00\x00\xe0\xbe\x05\x93\xbf\x00\x00\x00 \xf6\xea_\xbf\x00\x00\x00\xa0|8\x8c\xbf\x00\x00\x00@\xa6%b?\x00\x00\x00 o\xfd\x88?\x00\x00\x00\xe0\x8eZZ?\x00\x00\x00\xe0\xc4\xd4u\xbf\x00\x00\x00\xc0\xf3q\x8d\xbf\x00\x00\x00\xa0\xfe}\x84\xbf\x00\x00\x00\x00y\xd9I\xbf\x00\x00\x00@0Nv\xbf\x00\x00\x00@\x82\x9dz?\x00\x00\x00\x80\xce\xf5y?\x00\x00\x00\xc0\xf7\x85\x85\xbf\x00\x00\x00\xe0\xc3Q\x87?\x00\x00\x00@H\xbct?\x00\x00\x00`\xad\xde\x8f?\x00\x00\x00\xa0\xe60\x9f\xbf\x00\x00\x00@\x02\xca\x81\xbf\x00\x00\x00\xc0m\xf9y\xbf\x00\x00\x00\xa0\x95\xd2\x88\xbf\x00\x00\x00\x00\x84\xddP\xbf\x00\x00\x00\xc0\x19\xd5\x89?\x00\x00\x00\xe0\xb2\x1fS\xbf\x00\x00\x00\x00A\x13z?\x00\x00\x00 \xf0\xe6h\xbf\x00\x00\x00@\x91\x170\xbf\x00\x00\x00\x00P\x06a?\x00\x00\x00`&w\x8e\xbf\x00\x00\x00\xa0\xc5\xaff\xbf\x00\x00\x00\xa0\x9a\'\x82\xbf\x00\x00\x00\xa0gJ8\xbf\x00\x00\x00\x80\x0e\xd1\x91?\x00\x00\x00 0\xcaF?\x00\x00\x00\xa0"\xa0\x97\xbf\x00\x00\x00`\x1an\x7f?\x00\x00\x00`{\xa5\x8c?\x00\x00\x00\x00\xf5\x12h\xbf\x00\x00\x00 j3s\xbf\x00\x00\x00\xc0\xee\xc9\x85?\x00\x00\x00\xe0\x9e`I?\x00\x00\x00 \xe2\xbf_?\x00\x00\x00\xc0\x1f]w\xbf\x00\x00\x00`\x0f%s?\x00\x00\x00@\xf3\xe9\x8d\xbf\x00\x00\x00 b]y\xbf\x00\x00\x00`\xfd;v\xbf\x00\x00\x00@?\xe1{?\x00\x00\x00 v\xdc\x82\xbf\x00\x00\x00@\x94\x00Z?\x00\x00\x00\x80x:i\xbf\x00\x00\x00\x002{+\xbf\x00\x00\x00\xc0\xb5\xd7\x91?\x00\x00\x00\xe09\xa2\x8b?\x00\x00\x00\xc0t\x1f\x86\xbf\x00\x00\x00\xa0\xb0`\x87?\x00\x00\x00\x80\x9c\xc9\x8d?\x00\x00\x00\x00\x02 h\xbf\x00\x00\x00\x80\x9d\xd1\x8a\xbf\x00\x00\x00`\x1c\xf3}?\x00\x00\x00@G\x14q\xbf\x00\x00\x00\xc0\x8a\xbe\x82\xbf\x00\x00\x00 \xe92\x89?\x00\x00\x00\xc0c\xa2r\xbf\x00\x00\x00\x80\x06\xb7\x85\xbf\x00\x00\x00\xc0\xe6pZ?\x00\x00\x00\xa0q\x8dC\xbf\x00\x00\x00\x00\x8a\x88\x85\xbf\x00\x00\x00\xa0q\xfc\x87\xbf\x00\x00\x00\x00\x8f\xd0\x86?\x00\x00\x00\xc0\x111\x87\xbf\x00\x00\x00\xc0\x12\xcfz?\x00\x00\x00 Y\xc6q?\x00\x00\x00@\xd3?~?\x00\x00\x00\x80\x11H\x89?\x00\x00\x00\xc0\xfd\xd6\x8c\xbf\x00\x00\x00\x80\xaa\xbe\x84\xbf\x00\x00\x00`d\xcbp?\x00\x00\x00\x80\xc7$t?\x00\x00\x00 \xfbgX\xbf\x00\x00\x00\x80%\x8e\x87?\x00\x00\x00`Oj]?\x00\x00\x00 \x17i\x90?\x00\x00\x00 \x99\xe4u\xbf\x00\x00\x00\xe0\t\xd3\x80?\x00\x00\x00\x00\xcaM\x88?\x00\x00\x00\x00=\xadz\xbf\x00\x00\x00 \xaf\xd4U?\x00\x00\x00`\xf7Gq\xbf\x00\x00\x00\xa0\xbd\xacg\xbf\x00\x00\x00\xa0Fk\x83?\x00\x00\x00 \x01S|?\x00\x00\x00\xc0\xe9\xeeQ\xbf\x00\x00\x00\xc0\xbf,u\xbf\x00\x00\x00\xa0(\xd4\x80\xbf\x00\x00\x00\xa0\x90\x16\x8d?\x00\x00\x00\x80\xe9\xc0h?\x00\x00\x00@\xb1"\x90?\x00\x00\x00\xe0`wl?\x00\x00\x00\xc0\xcf\xb0t?\x00\x00\x00\x805X\x8b?\x00\x00\x00\xc0?\xf3W\xbf\x00\x00\x00`-\x7f#?\x00\x00\x00`98U?\x00\x00\x00`Q\x88s?\x00\x00\x00\x80\x95\x16e?\x00\x00\x00@VGz\xbf\x00\x00\x00`?K\x85?\x00\x00\x00`l\xe8x\xbf\x00\x00\x00\xe0\xc2\x18+\xbf\x00\x00\x00`\x16\x1b`\xbf\x00\x00\x00 \x8c\xcbj\xbf\x00\x00\x00 \xe5\xb5\x89\xbf\x00\x00\x00 {\xdab\xbf\x00\x00\x00 \xe5\xab]?\x00\x00\x00 L9\x83?\x00\x00\x00@S\xe8Y\xbf\x00\x00\x00\xe0n8r\xbf\x00\x00\x00`\x02\xcf\x80?\x00\x00\x00\xe0N\xc9~\xbf\x00\x00\x00@\xf7\xcfh?\x00\x00\x00 \xc5p\x82\xbf\x00\x00\x00 \x183w\xbf\x00\x00\x00@\x08\xb4\x8e\xbf\x00\x00\x00`\xfd\xe2k\xbf\x00\x00\x00\xa0\x16\x82\x99?\x00\x00\x00@I\x96\x87\xbf\x00\x00\x00\xe0lk\x85?\x00\x00\x00\xe0\xdf\xa7\x80\xbf\x00\x00\x00\xc0G\xff\x80\xbf\x00\x00\x00 \xa8\xfb\x92\xbf\x00\x00\x00`\x8d+5?\x00\x00\x00`}\x19\x9e\xbf\x00\x00\x00\x80\xb2\x94\x94\xbf\x00\x00\x00@\x8b\x8af?\x00\x00\x00\x00\xe7\x0cj\xbf\x00\x00\x00\xc0\xf6 \x86?\x00\x00\x00\xa0\xfdKs\xbf\x00\x00\x00\xe08\x19\x8a\xbf\x00\x00\x00\xa0F\x92\x84?\x00\x00\x00\xe0\xd6@\x89?\x00\x00\x00\xa0\x94+\x8a?\x00\x00\x00\xc0\x8ex\x85?\x00\x00\x00 \xbd\xefk\xbf\x00\x00\x00 \x18\xd5|\xbf\x00\x00\x00\xe0\xf0\xc05\xbf\x00\x00\x00\xa0\x90\x8a\x85?\x00\x00\x00`\x81\xc6\x8d?\x00\x00\x00\x80\xfc\xe5x?\x00\x00\x00\x00\x1f9t?\x00\x00\x00 \x00\x00u?\x00\x00\x00`\xa0C\x88?\x00\x00\x00\xc0\x8f>\x85?\x00\x00\x00\xc0Vaq?\x00\x00\x00\xa0\x07\xbdv?\x00\x00\x00`\x80\xfb\x81?\x00\x00\x00`#$\x81\xbf\x00\x00\x00\xc0\xa6\x1av\xbf\x00\x00\x00\x00\x7f\x9bd\xbf\x00\x00\x00\xe0\xd0\x86\x80?\x00\x00\x00\x80$\xe1\x84\xbf\x00\x00\x00`\x94\x0e\x85?\x00\x00\x00@\xca\xf4I?\x00\x00\x00 \'\xa9|\xbf\x00\x00\x00\xc0\x05Du?\x00\x00\x00 \xcf\x83j\xbf\x00\x00\x00@\xda\xde\x85\xbf\x00\x00\x00\x00\x17\x1dX\xbf\x00\x00\x00\x80\xe8\xa3\x87\xbf\x00\x00\x00@M\xeas?\x00\x00\x00\x80.\xe6\x84?\x00\x00\x00\x808\xc7{?\x00\x00\x00\x00\x0b\xf2\x7f\xbf\x00\x00\x00 \x8f1\x84?\x00\x00\x00`\xd1\x1a{\xbf\x00\x00\x00 #\xbcw\xbf\x00\x00\x00\xc0AMs\xbf\x00\x00\x00\xe0`\xa7\x80?\x00\x00\x00 \xb5\x14A\xbf\x00\x00\x00@\xa7\xe0\x93\xbf\x00\x00\x00`\x08\xa5\x82\xbf\x00\x00\x00`l\x95\x81\xbf\x00\x00\x00`\xaf\x19\x8d?\x00\x00\x00\x00\x11\x0f^?\x00\x00\x00\x00lx\x82?\x00\x00\x00 \x18\x93^?\x00\x00\x00\x80\xf0\x84\x80\xbf\x00\x00\x00\xc0\xbb\xcd\x81?\x00\x00\x00\x80M\x17a?\x00\x00\x00 F\x85\x80?\x00\x00\x00\x80\x93\xf9~\xbf\x00\x00\x00@\x17\x16\x82\xbf\x00\x00\x00`&*t\xbf\x00\x00\x00 \xdd\xf4v\xbf\x00\x00\x00\x80\xfb\x91\x83\xbf\x00\x00\x00`\x81\xa2u?\x00\x00\x00\xc0\xeck\x87\xbf\x00\x00\x00\xc0V\xd5J\xbf\x00\x00\x00\x80\x13M\x7f?\x00\x00\x00\x80Xz\x96?\x00\x00\x00 \x04~f\xbf\x00\x00\x00 \xd2Yv\xbf\x00\x00\x00@i1u?\x00\x00\x00\xa0\x88\x0f\x93\xbf\x00\x00\x00\xc0\xb0\xfaz\xbf\x00\x00\x00@\xa5^\x87\xbf\x00\x00\x00\xc0\'C\x8c?\x00\x00\x00 i\xc6\x96?\x00\x00\x00`MX\x83\xbf\x00\x00\x00\xc0R\x1f\x8a\xbf\x00\x00\x00\x80rR\x84\xbf\x00\x00\x00\xe0\x04\xe4\x99?\x00\x00\x00\xc0\x92\xddu\xbf\x00\x00\x00`\xc8x]\xbf\x00\x00\x00\xa0\x80\x8c\x90\xbf\x00\x00\x00 Q\xd9\x86?\x00\x00\x00\xc0$\xf8l?\x00\x00\x00\xa0\x1c\xb0n?\x00\x00\x00 j\xfe\x91\xbf\x00\x00\x00\xc0\xde\x1fG?\x00\x00\x00\xa0\x8c\x8c\x82\xbf\x00\x00\x00 \xde\x8e\x96?\x00\x00\x00\x80\x13KW\xbf\x00\x00\x00\x00lV\x92\xbf\x00\x00\x00@"\xaet\xbf\x00\x00\x00@\xf9\xb8\x89?\x00\x00\x00 1wQ?\x00\x00\x00\xc0\x97\x01{\xbf\x00\x00\x00`\xfb\xc2I?\x00\x00\x00 [qx?\x00\x00\x00\x00\x97\xdb\x80\xbf\x00\x00\x00\x00\xbb\xc7\x93?\x00\x00\x00\x80\xea\r\x85\xbf\x00\x00\x00 \xee\xa8\x84\xbf\x00\x00\x00\x80&\x1co\xbf\x00\x00\x00\xa0~,m\xbf\x00\x00\x00\xe0\xd0\xc1O\xbf\x00\x00\x00\x80u\xa9\x87\xbf\x00\x00\x00\xa0\x9c^v\xbf\x00\x00\x00`\xa5\xd7F\xbf\x00\x00\x00 \x01\xb1\x87?\x00\x00\x00@!\x7f\x7f?\x00\x00\x00 \xfd\xd6\x8e\xbf\x00\x00\x00\x80\xb1\x81\x91?\x00\x00\x00@Z\xbd\x91\xbf\x00\x00\x00\x80\xcf7\x84?\x00\x00\x00\x00(\xdcz?\x00\x00\x00\xa0\x9bF\x8d?\x00\x00\x00\x80\x8c/m?\x00\x00\x00\xa0\xd4\x9c\x87\xbf\x00\x00\x00 ~\xc3\x8e?\x00\x00\x00`\xffel?\x00\x00\x00\x00\xe2\xd3t\xbf\x00\x00\x00 c\xecn?\x00\x00\x00\xa09\xc3~?\x00\x00\x00\xa0\x1d\xc3\x85?\x00\x00\x00\xa0V\x16\x87?\x00\x00\x00@(\xa2d\xbf\x00\x00\x00\xa0m&\\?\x00\x00\x00\xa0\xb2\x03g?\x00\x00\x00\x00p\xf1V?\x00\x00\x00`\xac\xfaa\xbf\x00\x00\x00\xc0\xcd7Z\xbf\x00\x00\x00\xc0\xff\xedu?\x00\x00\x00 \xfd\xa1,\xbf\x00\x00\x00\xa0\xa0\xd9\x83?\x00\x00\x00`\rX_\xbf\x00\x00\x00 n.\x86?\x00\x00\x00`\xf1j\x89\xbf\x00\x00\x00 i\x93\x7f?\x00\x00\x00\x00\x0c}\x85\xbf\x00\x00\x00\x00\xafP\x8d\xbf\x00\x00\x00\xc0\x8eWu?\x00\x00\x00@\x1d!J?\x00\x00\x00`/\xe4q\xbf\x00\x00\x00@\x8d\xc7q\xbf\x00\x00\x00\x00\xe0\xd5y?\x00\x00\x00\x00Q\xeck?\x00\x00\x00`~P~?\x00\x00\x00\xc0\xfc5\x80?\x00\x00\x00`\x00.@?\x00\x00\x00\x80g\xda~\xbf\x00\x00\x00\x80\xd6`4?\x00\x00\x00\xe0\x07$t?\x00\x00\x00 l\xdf{\xbf\x00\x00\x00\xc0*\xe2p\xbf\x00\x00\x00\xa03\x9c\x83\xbf\x00\x00\x00\x00\x08\x15?\xbf\x00\x00\x00`\xb4\xc6C?\x00\x00\x00`L]\x93?\x00\x00\x00 \xeeL\x8f?\x00\x00\x00@\x952T\xbf\x00\x00\x00\xa0#\xedw\xbf\x00\x00\x00\xa0f~s\xbf\x00\x00\x00\xe0\x02\x84\x95?\x00\x00\x00`\x19\xd6~?\x00\x00\x00 \x0f\xd5\x80\xbf\x00\x00\x00\xa0\xb1\x89y\xbf\x00\x00\x00`\xc6\x1d\x8f?\x00\x00\x00\x80\x18\x9dm\xbf\x00\x00\x00@Ck\x8b\xbf\x00\x00\x00`TE\x80?\x00\x00\x00\xc0\x12Ao\xbf\x00\x00\x00\x80\xe8l\x86\xbf\x00\x00\x00@\xca\x94U?\x00\x00\x00\x80T\xb5W\xbf\x00\x00\x00\xe0cO\x1e?\x00\x00\x00\x00\xf1\xe0y?\x00\x00\x00\x00\xc1\xaa\x89\xbf\x00\x00\x00\x80\xf7\xbf\x86?\x00\x00\x00\xe0\xcd\xbbd?\x00\x00\x00\xa0W\x1a\x82\xbf\x00\x00\x00\xe0\xed\xbb\x88?\x00\x00\x00@\xda\x9c\x97\xbf\x00\x00\x00\x00\x18\xca\x82\xbf\x00\x00\x00@+j\x8c\xbf\x00\x00\x00\xa0\x13b<?\x00\x00\x00\xa0\xf2%\x88\xbf\x00\x00\x00\xc0)\xa3\x8e?\x00\x00\x00\xc0y~q\xbf\x00\x00\x00\x80\x1fWY?\x00\x00\x00\xe0o\x18~\xbf\x00\x00\x00@\xe6\xea\x89\xbf\x00\x00\x00 \xbe\x80\x8c?\x00\x00\x00`\xed\x06\x84?\x00\x00\x00\x00\x1a\x1a}\xbf\x00\x00\x00@\xb0\xd8\x90?\x00\x00\x00\x80F\x18k?\x00\x00\x00@\xd7\xb5\x80\xbf\x00\x00\x00`\xef\xa8\x86?\x00\x00\x00\x80\x011u?\x00\x00\x00@\xcd\np\xbf\x00\x00\x00\x00\xc48|?\x00\x00\x00 *pe\xbf\x00\x00\x00 s\xad+\xbf\x00\x00\x00\x802\t{\xbf\x00\x00\x00\xe0\xf2\xd6{?\x00\x00\x00\xc0\xca\xd9W?\x00\x00\x00\xe0\xa3q\x88\xbf\x00\x00\x00\x00\x89\xb5\x88?\x00\x00\x00@k\x12\x91\xbf\x00\x00\x00@\xf5\xb1x\xbf\x00\x00\x00\x80\x0f\x0fe\xbf\x00\x00\x00\xe0\xd4\xecm\xbf\x00\x00\x00 \xd1\x18\x8d?\x00\x00\x00\xe0\x04\'\x93\xbf\x00\x00\x00 \xdc\xd5o\xbf\x00\x00\x00\xa0Rxt\xbf\x00\x00\x00`Y\xdaf\xbf\x00\x00\x00\x80\xe7og\xbf\x00\x00\x00\xc0\xab\x88\x85?\x00\x00\x00@\xdf\x0b}\xbf\x00\x00\x00\x00U\x9dZ\xbf\x00\x00\x00\xa0\x88c}\xbf\x00\x00\x00\xe0\xf7{g\xbf\x00\x00\x00\xe0\xaa\x04e\xbf\x00\x00\x00@\xa3\x92\x87?\x00\x00\x00\x00e\xcdr?\x00\x00\x00\xc0\xab\x0fr\xbf\x00\x00\x00\x80\xda\xa2s\xbf\x00\x00\x00@2Bz\xbf\x00\x00\x00\xc0\x8f\x80z\xbf\x00\x00\x00\xe0\\\xaff?\x00\x00\x00\x00\xad\x95r\xbf\x00\x00\x00@$\xb2s\xbf\x00\x00\x00\xe0\xf6\x8eg\xbf\x00\x00\x00\xe0h\x81\x9c\xbf\x00\x00\x00@\xde\xd7u?\x00\x00\x00\x00hm\x90?\x00\x00\x00@SM\x81\xbf\x00\x00\x00 \x12\xe0h\xbf\x00\x00\x00`\x98\xd8\x89?\x00\x00\x00\x80\xb0\xa0\x91\xbf\x00\x00\x00 \xda\xdd\x8e?\x00\x00\x00`-+c?\x00\x00\x00\x00\x95{9?\x00\x00\x00\xe0\x13\x1a\x81\xbf\x00\x00\x00\xa02\x88s?\x00\x00\x00\x00:Ja\xbf\x00\x00\x00 \xecx\x90?\x00\x00\x00\x00\x8b\x89\x7f?\x00\x00\x00\xe03\x03\x8d?\x00\x00\x00\xa0\xd1\xad,\xbf\x00\x00\x00`\x1d\x0bl\xbf\x00\x00\x00\xa0\xe7\xf8h?\x00\x00\x00\xc0y\xae\x89\xbf\x00\x00\x00@\x96\xeb\x92?\x00\x00\x00 \xfd\x88\x97?\x00\x00\x00\xc0\xe1\xe1i?\x00\x00\x00 \xf5\xadj?\x00\x00\x00\x80w\xee\x80\xbf\x00\x00\x00`u\xdc\x8e\xbf\x00\x00\x00\x00\x17%\x8a?\x00\x00\x00\xe0\x02\x98\x8f\xbf\x00\x00\x00`cw\x83?\x00\x00\x00 \r\xf2l\xbf\x00\x00\x00\xe0%\x86C?\x00\x00\x00\x00\x96\xf9\x82\xbf\x00\x00\x00@I\x8a\x87\xbf\x00\x00\x00@i7\x7f?\x00\x00\x00\x0076p\xbf\x00\x00\x00\xa0^\x93\x86?\x00\x00\x00\x00e\xf5n\xbf\x00\x00\x00\x00p\xd6\x8a?\x00\x00\x00@\x8c\xedh?\x00\x00\x00\xe0s\x99\x8e\xbf\x00\x00\x00`\xcbE\x8b?\x00\x00\x00@R\x9aV\xbf\x00\x00\x00\x00\x91H\x91\xbf\x00\x00\x00\xa07wj\xbf\x00\x00\x00`Sw\x96\xbf\x00\x00\x00 \xfa"\x89?\x00\x00\x00\x80eW\x95\xbf\x00\x00\x00\xa0j\xfd\x84?\x00\x00\x00@\x12\xe7\x96\xbf\x00\x00\x00\xc0{\xddd?\x00\x00\x00\xc0\xfe\xa7{\xbf\x00\x00\x00`\x91Uw?\x00\x00\x00@\xec\x94j?\x00\x00\x00@Q\x85:?\x00\x00\x00\x80Iq\x81\xbf\x00\x00\x00 V\x06\x84\xbf\x00\x00\x00\xc0\xa1k\x8e\xbf\x00\x00\x00\xa0\t\xfdm\xbf\x00\x00\x00\x80\x84\xd1w\xbf\x00\x00\x00@4\xdd\x87?\x00\x00\x00\xe0\x05\xc0V?\x00\x00\x00\xe0\xecIr?\x00\x00\x00`\x88+|\xbf\x00\x00\x00@\x18\xe5\x8c?\x00\x00\x00`\xa8\xcb\x89\xbf\x00\x00\x00@"Ct?\x00\x00\x00\xe0\x99\xf7t?\x00\x00\x00\xa0\x97g]\xbf\x00\x00\x00\xe0\xe6.p?\x00\x00\x00@/u\x91\xbf\x00\x00\x00\x80Y\xbb\x92?\x00\x00\x00 \xed\xc0\x81\xbf\x00\x00\x00 _\xa7\x97?\x00\x00\x00 \xcf\xf2i\xbf\x00\x00\x00\x00\x98\xeeP\xbf\x00\x00\x00\x80R\x97\x10?\x00\x00\x00\xe0!\xbd\x85?\x00\x00\x00@$\xce\x8a?\x00\x00\x00\x00\xc7\x9f\x88\xbf\x00\x00\x00\x00\xf2\'\x89?\x00\x00\x00\x80\x94\xec\x87\xbf\x00\x00\x00\xa0P}q?\x00\x00\x00\xa0\xe9\xe8x?\x00\x00\x00\x80\\\xe0\x88?\x00\x00\x00 \xe6\xf0`\xbf\x00\x00\x00\x80\x9ade\xbf\x00\x00\x00 F\x13u\xbf\x00\x00\x00 kB\x87\xbf\x00\x00\x00\x80\x8a\xf5G?\x00\x00\x00\xe0\xdc\xe2K\xbf\x00\x00\x00@Y\x8e\x85\xbf\x00\x00\x00\x00\x04\xd2i?\x00\x00\x00\xc0\xa3\x02q\xbf\x00\x00\x00\x80\xdc\x18Q?\x00\x00\x00 \xf1\xa3q?\x00\x00\x00\x00)\x1d\x84?\x00\x00\x00`~\xb9\x87?\x00\x00\x00@P&\x81\xbf\x00\x00\x00\xc0\xbaAp\xbf\x00\x00\x00@\xdf\xfc|?\x00\x00\x00 \xa1\xdc\x84?\x00\x00\x00@\xd5\x1e\x16\xbf\x00\x00\x00\x80\x81ru\xbf\x00\x00\x00\xc0 \xce,?\x00\x00\x00\xc0j\r\x94?\x00\x00\x00\x00\xadhZ?\x00\x00\x00`^R\x81\xbf\x00\x00\x00\x00\x8a:\x84\xbf\x00\x00\x00@\xfd\x87\x84?\x00\x00\x00`\x9a\x16\x94\xbf\x00\x00\x00`,|]?\x00\x00\x00\xa0\x98-\x83?\x00\x00\x00\xc0\x08m\x89?\x00\x00\x00@ia\x82?\x00\x00\x00\xe0\\\x86\x7f\xbf\x00\x00\x00\x80i{{?\x00\x00\x00\x80bpu?\x00\x00\x00`h\x97b?\x00\x00\x00`WRq\xbf\x00\x00\x00@\x1e\xa5\x82?\x00\x00\x00\xc0\x1c\xc8\x86?\x00\x00\x00\xe0n|e?\x00\x00\x00`t\x01\x85?\x00\x00\x00\x00\xef\x1b\x8c?\x00\x00\x00@\xde?Z\xbf\x00\x00\x00\x00\'7\x88?\x00\x00\x00\x00\x9b\\{?\x00\x00\x00`\xff\xa9e\xbf\x00\x00\x00\x00 sc\xbf\x00\x00\x00\xc0\xeb\xbbr?\x00\x00\x00\xa09\xee4\xbf\x00\x00\x00`|\xe8r?\x00\x00\x00\xe0\xda2\x80?\x00\x00\x00 \xdcqs\xbf\x00\x00\x00 o\xe3\x82\xbf\x00\x00\x00 K\xc5t?\x00\x00\x00\xe02\x0eq?\x00\x00\x00@\x8f\xc0w\xbf\x00\x00\x00 \xb2C\x85\xbf\x00\x00\x00\xc0\n\xf1v\xbf\x00\x00\x00`amw?\x00\x00\x00\xc0]P\x89?\x00\x00\x00\x80(\x00\x8d\xbf\x00\x00\x00\xa0\xcb\xeeI?\x00\x00\x00\x80\x1b\xf7\x8b?\x00\x00\x00\xc0\xdd\xd9\x90\xbf\x00\x00\x00`L\xa2\x82?\x00\x00\x00 yyH\xbf\x00\x00\x00`\xe7^\x91?\x00\x00\x00@ev\x8c?\x00\x00\x00\x80\x99\xa3t\xbf\x00\x00\x00@\x0b\x99\x94?\x00\x00\x00\xa0X\xf3i?\x00\x00\x00\xe0V\xabP\xbf\x00\x00\x00\xa0M\xf45?\x00\x00\x00\x80bfw\xbf\x00\x00\x00\x00\xd7`\x86?\x00\x00\x00\xc0N\x16\x7f?\x00\x00\x00\x80\x86\xd5\x82\xbf\x00\x00\x00`\x1a\xd3{\xbf\x00\x00\x00\xa0\xcc\r\x97\xbf\x00\x00\x00`\x90\xad\x86\xbf\x00\x00\x00\x00\x1b\x0b\x80\xbf\x00\x00\x00\x00I|m?\x00\x00\x00\xa0\xb9\xde@?\x00\x00\x00\xa0`fp?\x00\x00\x00\x80\x9a\'^?\x00\x00\x00\xc0[K]?\x00\x00\x00@\x80\x04\x86\xbf\x00\x00\x00\x00\x17<S\xbf\x00\x00\x00 V\xa9q\xbf\x00\x00\x00 \xc0\xfb\x84?\x00\x00\x00@\x98\xab@\xbf\x00\x00\x00\x00\x93\xb4\x95\xbf\x00\x00\x00\xe0^\xd1\x7f?\x00\x00\x00\x00>-^\xbf\x00\x00\x00\xc0\xfc\xe2w\xbf\x00\x00\x00 \xba\x19\x88?\x00\x00\x00`k\x03\x8f?\x00\x00\x00 N\xdaS\xbf\x00\x00\x00\x80^a\x7f\xbf\x00\x00\x00\xe0\x8d\xf9u?\x00\x00\x00 |\xceh?\x00\x00\x00`C\x93\x80?\x00\x00\x00\x00\xe2\rx\xbf\x00\x00\x00\x00>\xad~?\x00\x00\x00`\x9b\x8dO\xbf\x00\x00\x00\x80c\x8di?\x00\x00\x00@g\xb7\x89\xbf\x00\x00\x00`\x01\xa4~\xbf\x00\x00\x00\x80\x8b\xc6\x8e?\x00\x00\x00\x00-R\x89?\x00\x00\x00\x00B\x16\x80\xbf\x00\x00\x00@\x04\xa5t\xbf\x00\x00\x00\xa0V\xb4\\?\x00\x00\x00@0\xe5\x82\xbf\x00\x00\x00\x80\x0c?q\xbf\x00\x00\x00 \xe3(u\xbf\x00\x00\x00 \x11\xc3\x7f?\x00\x00\x00\xa0i\x1el?\x00\x00\x00\x00o\xf3\x85\xbf\x00\x00\x00\x80\x1e)W?\x00\x00\x00\x00j!_?\x00\x00\x00\x00\x1fz\\\xbf\x00\x00\x00`\xfc\x97\x91?\x00\x00\x00`2\xdf\x91?\x00\x00\x00\xc0\xd1Zc\xbf\x00\x00\x00 \xdd\xbb\x90?\x00\x00\x00\xa0\xc4<t\xbf\x00\x00\x00\xa0~\xc3f?\x00\x00\x00\x80\xf8\n\x99?\x00\x00\x00\xc0\xb5\x1ar?\x00\x00\x00\xe0\x9c\x1cm\xbf\x00\x00\x00 +\x93\x81\xbf\x00\x00\x00\xc0H\x1c\x8d?\x00\x00\x00 \xd2\xcey?\x00\x00\x00\xe0\x15\xfa\x8a?\x00\x00\x00`5\xa5c\xbf\x00\x00\x00\x00\xeb\xa9\x8e?\x00\x00\x00\xe0\xb5\xd1\x84?\x00\x00\x00@W$[?\x00\x00\x00\xa0Q\xc2\x94\xbf\x00\x00\x00`\x18i\x98\xbf\x00\x00\x00\x0061\\\xbf\x00\x00\x00@7\x0c\x8a\xbf\x00\x00\x00`\x07\xb8@?\x00\x00\x00@rJ\x91\xbf\x00\x00\x00\x00m\xc3\x90\xbf\x00\x00\x00\xe0\xb7\x84j?\x00\x00\x00\xc0+q\x8f\xbf\x00\x00\x00@\xaep\x83?\x00\x00\x00\x00z\x87\x84\xbf\x00\x00\x00\x00\xb5\x82i\xbf\x00\x00\x00\x00\xec\x12\x98?\x00\x00\x00\x80\xd5\xfde\xbf\x00\x00\x00\xc0\xa9&2\xbf\x00\x00\x00\xe0]\xca|\xbf\x00\x00\x00@\xe3\xcf6\xbf\x00\x00\x00 V\x8f\x89\xbf\x00\x00\x00\x00\x1cD\x98\xbf\x00\x00\x00@\x14\xbe\x84?\x00\x00\x00\x80\xc9\xecu?\x00\x00\x00@W\x00\x8f\xbf\x00\x00\x00 \x9d\x0e\x8b\xbf\x00\x00\x00\xc04\x1a\x88?\x00\x00\x00\xa0q\\}\xbf\x00\x00\x00@Rhj?\x00\x00\x00`\x83\xd7g\xbf\x00\x00\x00\xc0\x9c\xc9z?\x00\x00\x00\x00z\x19\x9a\xbf\x00\x00\x00@\x9d\x9e\x81\xbf\x00\x00\x00 \x80\xba\x81?\x00\x00\x00\xa0\x14\x7f\x8b?\x00\x00\x00\x00\xbbcu?\x00\x00\x00 \x01\xdd\x89\xbf\x00\x00\x00\xa0\xdf\x7fo\xbf\x00\x00\x00\xa0S\xc5b?\x00\x00\x00\x80\x19\n\x87?\x00\x00\x00\xc0S\xab ?\x00\x00\x00\xa0=Xy\xbf\x00\x00\x00\xa0]v\xa0\xbf\x00\x00\x00`2\xe4u\xbf\x00\x00\x00\xa02\xaf\x88\xbf\x00\x00\x00\x00\xd1\xd6|?\x00\x00\x00\x80\x86\xd1\x80?\x00\x00\x00\x00\xb4\xed\x8e?\x00\x00\x00\x80a\x84w\xbf\x00\x00\x00@L\xb35?\x00\x00\x00\x00\xb8\x7f\x86\xbf\x00\x00\x00\xe0;\xf7h?\x00\x00\x00`\x03\x83\x96\xbf\x00\x00\x00\xa02\x9b7?\x00\x00\x00\xa04J\x86?\x00\x00\x00\x80T\x9bb\xbf\x00\x00\x00\xe0%\xd1\x81?\x00\x00\x00\x80DJ\x90\xbf\x00\x00\x00`\xe6}z?\x00\x00\x00 sV\x87?\x00\x00\x00 \x1d\xe7k\xbf\x00\x00\x00\x00\xa6:u\xbf\x00\x00\x00@\xd8\xa5\x8b?\x00\x00\x00\xe0\xda_g\xbf\x00\x00\x00\xc06s\x9c\xbf\x00\x00\x00\xe0\x86\xbb\x93\xbf\x00\x00\x00@,]\x86?\x00\x00\x00\xa0V\xe7{\xbf\x00\x00\x00\x80\xdb\x02\x89\xbf\x00\x00\x00`\xf5u\x92?\x00\x00\x00\x00\xd9\x7f\x83\xbf\x00\x00\x00\x00\x19\xe8\x95?\x00\x00\x00\xc0\x8c\xd7\x93?\x00\x00\x00\xe0tj\x8a?\x00\x00\x00\x00R:\x83?\x00\x00\x00\xe0\x17A{\xbf\x00\x00\x00\xa0/5\x89?\x00\x00\x00\xa0\xcf\x98\x94?\x00\x00\x00\x00\xc3\x17\x83\xbf\x00\x00\x00\xe0\x1b\x93x\xbf\x00\x00\x00\xe0m\xe6\x84?\x00\x00\x00\xe0\xb4\xdai?\x00\x00\x00\xa0\x7f\x1ea?\x00\x00\x00\x80\xe6\x05I\xbf\x00\x00\x00 \xeeUt\xbf\x00\x00\x00\xc0%\x1aq?\x00\x00\x00\xc0\xcc.\x87\xbf\x00\x00\x00\xc0\x04\x87s\xbf\x00\x00\x00\x80\xd3Yu?\x00\x00\x00\xc03\xae\x96\xbf\x00\x00\x00@\x01.c?\x00\x00\x00\xa0\xb1@u?\x00\x00\x00\xa0\x94B\x83?\x00\x00\x00@\xee\xa6{?\x00\x00\x00@?bg?\x00\x00\x00@\t,^?\x00\x00\x00@G\xc5h\xbf\x00\x00\x00 \t\x076\xbf\x00\x00\x00`~\xaa\x84?\x00\x00\x00@\xe3\xca\x86\xbf\x00\x00\x00\x80^\xbb\x87?\x00\x00\x00`\x0c\\\x86?\x00\x00\x00\x80\xe5\xef|\xbf\x00\x00\x00\x80\xd3\xf1`\xbf\x00\x00\x00\x80\xa1\xc1z?\x00\x00\x00 \xd3\xa0\x80\xbf\x00\x00\x00\x00P\\\x87\xbf\x00\x00\x00\x80ow\x99\xbf\x00\x00\x00\x80\xb6b\x88?\x00\x00\x00\x00Py\x86\xbf\x00\x00\x00`\xc2\xa1T\xbf\x00\x00\x00\x00d[\x85\xbf\x00\x00\x00\xc0\x05\x84f?\x00\x00\x00\xe0\xbfV&?\x00\x00\x00@K\xaci?\x00\x00\x00\xe0\xea\xe0\x89\xbf\x00\x00\x00\xa0T\xa2\x81?\x00\x00\x00\x80\x9a\x14j?\x00\x00\x00\xc0\xfa\xc8\x7f?\x00\x00\x00\x00?\x9f\x93\xbf\x00\x00\x00`k\xd7`\xbf\x00\x00\x00\x00\x88\xeb\x81?\x00\x00\x00\x00Wl\x87?\x00\x00\x00\x80V\x82\x89?\x00\x00\x00\xc0\xcf\x8di?\x00\x00\x00\xe0gY\x8b?\x00\x00\x00`"\xe6\x93?\x00\x00\x00 \'Ok?\x00\x00\x00\xe0E\xb8c?\x00\x00\x00\xc0r\x9a\x85\xbf\x00\x00\x00\x80\x82;p\xbf\x00\x00\x00\x00\xc9^W?\x00\x00\x00\xc0\xb0\x9f\x92\xbf\x00\x00\x00\xa0\x802\x8b?\x00\x00\x00\xa0\xe4D\x84?\x00\x00\x00\xc0\x19_\x80?\x00\x00\x00@\xdd\xfc\x8b?\x00\x00\x00 d\\x?\x00\x00\x00\x80\xc7\xaf~?\x00\x00\x00@\xe4\xfc\x91\xbf\x00\x00\x00\x00\xfc.\x96?\x00\x00\x00\x00\xb4\x14\x85\xbf\x00\x00\x00\xe0@\xfbd\xbf\x00\x00\x00\xa0\x8b\xd1\x83\xbf\x00\x00\x00`2\xe6s\xbf\x00\x00\x00\xe09\xfa\x86\xbf\x00\x00\x00@W\xf4e\xbf\x00\x00\x00\xc0+T\x88?\x00\x00\x00@\xb8\xa5r?\x00\x00\x00\x00T\xc3c\xbf\x00\x00\x00\xe0\x98MJ\xbf\x00\x00\x00\x80>\xb5\x81?\x00\x00\x00\x805\xe7F\xbf\x00\x00\x00\xc0|\x15\x94\xbf\x00\x00\x00\x80\x80\x12q?\x00\x00\x00@\xf5\xabm?\x00\x00\x00\xa0I\t\x89\xbf\x00\x00\x00@!?d?\x00\x00\x00\xc0\xa4\xac\x89?\x00\x00\x00 -\xe5\x86\xbf\x00\x00\x00\xc0N\xfe\x86?\x00\x00\x00`\x1d\xac\x9d?\x00\x00\x00@\n3`\xbf\x00\x00\x00 \xe6\x0f\x8d\xbf\x00\x00\x00\xa0q\xbd\x85\xbf\x00\x00\x00`\x0c\x8d\x7f?\x00\x00\x00\x80lip?\x00\x00\x00 m\xa7\x81?\x00\x00\x00@\xd6\xed\x90\xbf\x00\x00\x00`\x00\xc5v?\x00\x00\x00\xc0\xfab~\xbf\x00\x00\x00`\xad\x81\x80\xbf\x00\x00\x00\xe0~<\x7f\xbf\x00\x00\x00\x00\xab\x9c\x8b?\x00\x00\x00\xe0\xd9\x98w\xbf\x00\x00\x00\xa0Fk:\xbf\x00\x00\x00\xa0\xe0V\x82?\x00\x00\x00\x00D\x1er?\x00\x00\x00 v\x7f\x80\xbf\x00\x00\x00 \x87=M?\x00\x00\x00\x80 \x01b\xbf\x00\x00\x00\xc0\xf4&-\xbf\x00\x00\x00`S\xec\x82\xbf\x00\x00\x00`\\\xdb`\xbf\x00\x00\x00\x00_p\x85?\x00\x00\x00\x00\x9cm\x97\xbf\x00\x00\x00\xe0\xf4lv?\x00\x00\x00\x00\x18\xc2r?\x00\x00\x00 \x9d\xb6\x88?\x00\x00\x00`\x00\x01\x8b?\x00\x00\x00\xc0\x9ckW\xbf\x00\x00\x00\x80zYd\xbf\x00\x00\x00 \xecjq\xbf\x00\x00\x00\xe0|\x91J?\x00\x00\x00\x00a\xb6k\xbf\x00\x00\x00\xa0\x89\xefX\xbf\x00\x00\x00\xe0\xeds}?\x00\x00\x00@I\x88y\xbf\x00\x00\x00`\x13\x12u\xbf\x00\x00\x00@\xa6\xb2\x93?\x00\x00\x00 _^e\xbf\x00\x00\x00\x801\xe8G?\x00\x00\x00@\xdb\xf1\x86?\x00\x00\x00@\x97\xdcs\xbf\x00\x00\x00 d\x80D\xbf\x00\x00\x00@\xbe\xa4W\xbf\x00\x00\x00@t4\x95?\x00\x00\x00`\x12@\x82\xbf\x00\x00\x00\x00\xd34|?\x00\x00\x00\xa0-\x1av?\x00\x00\x00\xe0\xa4=\x91?\x00\x00\x00\x80chL?\x00\x00\x00@B\nl\xbf\x00\x00\x00\xe0f?\x90?\x00\x00\x00@\xd9\x99\x90?\x00\x00\x00 \xa1\x87\x85\xbf\x00\x00\x00 B\x1cz?\x00\x00\x00 ,\xe5t?\x00\x00\x00\x00\x06->\xbf\x00\x00\x00@/\x90\x85\xbf\x00\x00\x00@\xab\xe4w?\x00\x00\x00`\x91\x16\x95\xbf\x00\x00\x00 J=\x91\xbf\x00\x00\x00 R\x1eC\xbf\x00\x00\x00@\x7f\x86\x81\xbf\x00\x00\x00\x00_OZ?\x00\x00\x00\xc0I\x0eh?\x00\x00\x00\xc0C\x07\x88?\x00\x00\x00\xa0\x06+Q\xbf\x00\x00\x00\x80Z\xcf\x81?\x00\x00\x00\x00K\x80~\xbf\x00\x00\x00\xe0\x1e\x02!\xbf\x00\x00\x00`\xe2y\x81?\x00\x00\x00 \xfa\x8e\x82?\x00\x00\x00\x80\x80\xed\x93\xbf\x00\x00\x00\xe0y\xd5\x8b\xbf\x00\x00\x00@\xd5+\x82?\x00\x00\x00\xa0V\xa0w\xbf\x00\x00\x00\x00H\xf9|?\x00\x00\x00\xc0\xed\x9e\x86\xbf\x00\x00\x00\xc0\xa0\xf8\x93\xbf\x00\x00\x00@\x15z\x83?\x00\x00\x00`w$\x87\xbf\x00\x00\x00\xe0\xf4-d\xbf\x00\x00\x00\xe0\xc1\x9f\x8e\xbf\x00\x00\x00\x80\x16ex\xbf\x00\x00\x00@O\x88~?\x00\x00\x00\x80\xdb\xb6o?\x00\x00\x00\xa0\x00\xed\x85\xbf\x00\x00\x00\xc0\xb5v(?\x00\x00\x00\xa0\x9d\tZ?\x00\x00\x00`\xbe\xd2\x84\xbf\x00\x00\x00\xc0\xf8vt?\x00\x00\x00\xe0\xc0kw\xbf\x00\x00\x00\x80n(g?\x00\x00\x00@\xdcy|?\x00\x00\x00 \xdb\x18\x80?\x00\x00\x00\xe0o\x89\x8a\xbf\x00\x00\x00\x80J6{\xbf\x00\x00\x00\xa0,\xb4\x80?\x00\x00\x00\x00\xce\xffW?\x00\x00\x00`\x82"W?\x00\x00\x00\x80g\xa5L?\x00\x00\x00 \xfe\xe1\x80\xbf\x00\x00\x00\xe0\xad9{\xbf\x00\x00\x00`$\x8cd\xbf\x00\x00\x00`\x89\x19I?\x00\x00\x00 w\x1br?\x00\x00\x00\xa0\x06\xf5W?\x00\x00\x00`0`\x93\xbf\x00\x00\x00\xc0\x07\xe8#?\x00\x00\x00\xe0\xed\x06K\xbf\x00\x00\x00\xa0\xd7\x01\x86?\x00\x00\x00@\xad\xc8\x98?\x00\x00\x00\x80\'\xdd\x8a?\x00\x00\x00\x00D\xdb\x9b\xbf\x00\x00\x00\xa0\xf5\x87=\xbf\x00\x00\x00\xe0\xa1f}?\x00\x00\x00\x80e\xd4\x80\xbf\x00\x00\x00\xe0B\xc3>\xbf\x00\x00\x00\xc0\xc2\xf1\x92\xbf\x00\x00\x00\x00\xd2Ft?\x00\x00\x00\xa0 \x17\x89?\x00\x00\x00@\xed\xe7i?\x00\x00\x00`?*y?\x00\x00\x00\xe0[\xbbY?\x00\x00\x00\x80%\xd9\x99\xbf\x00\x00\x00\xa0\xdbN\x93\xbf\x00\x00\x00\xc0\x05\x03i\xbf\x00\x00\x00\xe0-^\x87\xbf\x00\x00\x00\xc0\xa73\x8f\xbf\x00\x00\x00 \xad \x94\xbf\x00\x00\x00\xc0\x9b\xb0v?\x00\x00\x00\xa0\xbd}x\xbf\x00\x00\x00\x00\xe9\xc1w?\x00\x00\x00\x00N\xf0\x8c\xbf\x00\x00\x00\x00\xcf\x94\x80?\x00\x00\x00\xe0\xa0\xd3s\xbf\x00\x00\x00`\x9a\xfbr\xbf\x00\x00\x00\x00]|U\xbf\x00\x00\x00\xc0c\x04n\xbf\x00\x00\x00\x80\x04\xb2\x82?\x00\x00\x00\x00\xc2r0\xbf\x00\x00\x00 1)\x81?\x00\x00\x00 \x0c~R\xbf\x00\x00\x00\x00\x96\xe6Y?\x00\x00\x00 /\n\x8a?\x00\x00\x00\x00\x8e\x14\x94\xbf\x00\x00\x00@\xd6\xa3\x82\xbf\x00\x00\x00\xc0!\xe6Y\xbf\x00\x00\x00`4\xe1t\xbf\x00\x00\x00\xc0\xa8\'~?\x00\x00\x00\xc0\x1b\xa13\xbf\x00\x00\x00`\xd2\x8c\x83?\x00\x00\x00`\xbeL\x85\xbf\x00\x00\x00\x80\xe1\x96r?\x00\x00\x00\x00\x15aN?\x00\x00\x00@\xf5h{?\x00\x00\x00\xa0\xf0EQ\xbf\x00\x00\x00\xa0\xc5\x03\x8c\xbf\x00\x00\x00\xe0\xed5\x82\xbf\x00\x00\x00\xe0\x95\xbc\x93\xbf\x00\x00\x00 \x04DD\xbf\x00\x00\x00\xc0\xf7,\x86?\x00\x00\x00\xe0\x1c4\x91?\x00\x00\x00\x80\xd4Ms?\x00\x00\x00\x80{-\x86?\x00\x00\x00\xe0\xb3\x88w\xbf\x00\x00\x00 \xee\xc7c\xbf\x00\x00\x00@\x96\xe0|?\x00\x00\x00\xc0\x17DF?\x00\x00\x00\xc0\x96\xf6G\xbf\x00\x00\x00`qpi\xbf\x00\x00\x00\xa0:\xfd}\xbf\x00\x00\x00\x80M;\x89?\x00\x00\x00 RXz?\x00\x00\x00`\x13\xa6~?\x00\x00\x00\x80\xc7\xa8p\xbf\x00\x00\x00\xa0\xa3\x7f\x99\xbf\x00\x00\x00@\x94\xc1x?\x00\x00\x00 {\x0ek?\x00\x00\x00\xe0\xfb\xee\x8a\xbf\x00\x00\x00 \x1f\x11]\xbf\x00\x00\x00\x80\x18D\x80\xbf\x00\x00\x00 \xd6\x92\x94?\x00\x00\x00\xc0`\x0ct?\x00\x00\x00\x80\xf3q\x97?\x00\x00\x00`\xf82p?\x00\x00\x00@\xb6\xf0v\xbf\x00\x00\x00\xa0&\xb7|\xbf\x00\x00\x00\xc0\xd4\r\x7f?\x00\x00\x00`c\xeax?\x00\x00\x00\xc0X\x1cj\xbf\x00\x00\x00`8kP\xbf\x00\x00\x00`-A\x7f\xbf\x00\x00\x00\xc0\x16y9\xbf\x00\x00\x00\x80\x87\x07\x91?\x00\x00\x00@\xeeQ\x84?\x00\x00\x00\xc0\xae\x8e\x95\xbf\x00\x00\x00\xa0\xa7m@\xbf\x00\x00\x00@S\xd8r\xbf\x00\x00\x00\x80\x91\x03g\xbf\x00\x00\x00\xe0\xe2`\x81?\x00\x00\x00\xc0`\x98t\xbf\x00\x00\x00@RR\x91?\x00\x00\x00``\xed\x95\xbf\x00\x00\x00`\xf4\x8c}\xbf\x00\x00\x00\xa0\xabFz\xbf\x00\x00\x00@\xda\x07\x92?\x00\x00\x00\xe0\xb89y?\x00\x00\x00\x00\xd4%\x94\xbf\x00\x00\x00@\xa9b~\xbf\x00\x00\x00@k\xd0r?\x00\x00\x00@\xa3\xfa\x83?\x00\x00\x00\xe0{\xcd\x82?\x00\x00\x00\xe0DPx\xbf\x00\x00\x00@\xfe\xf7s?\x00\x00\x00@ulf\xbf\x00\x00\x00 }\x19U\xbf\x00\x00\x00 ]\xe4\x82?\x00\x00\x00\x00o\xff|?\x00\x00\x00\x00&\xaf}\xbf\x00\x00\x00\xe0^\xc5\xb0\xbe\x00\x00\x00\xc0\xe6\xb2s\xbf\x00\x00\x00\x80L\xf2E\xbf\x00\x00\x00\x80\xc8\nn?\x00\x00\x00 \x08\x11u\xbf\x00\x00\x00@9\x15\x84?\x00\x00\x00 \xb5e\x8b?\x00\x00\x00\xe0t\xcb\x8c\xbf\x00\x00\x00`\xbc\x03\x92?\x00\x00\x00`\xfe\xa6\x91?\x00\x00\x00@p\xdcy?\x00\x00\x00@\xe8.\x89\xbf\x00\x00\x00`\xcd=u\xbf\x00\x00\x00`^\x11}\xbf\x00\x00\x00\x80>\xe6\x8b?\x00\x00\x00 \xd6,\x80?\x00\x00\x00`\x12\xe3o?\x00\x00\x00`e\x17c\xbf\x00\x00\x00@\xb2I~\xbf\x00\x00\x00\xc0;J/?\x00\x00\x00@6\xe7\\\xbf\x00\x00\x00\x00\xb2\xe7O?\x00\x00\x00\xe0\xf9\xa5`\xbf\x00\x00\x00\x00\xa9D{?\x00\x00\x00\xc08\x89O\xbf\x00\x00\x00\xc0\x8f\xccs?\x00\x00\x00\xc0\xa7\xd1\x91\xbf\x00\x00\x00\x80\x04\xae\x8d\xbf\x00\x00\x00`\xbc\xec|\xbf\x00\x00\x00\xa0G\r`?\x00\x00\x00`u(t?\x00\x00\x00\x80\xf1VY?\x00\x00\x00\x80\x13\x87\x93?\x00\x00\x00\xc0\xa2\x08\xff>\x00\x00\x00\xe0+*v?\x00\x00\x00\xc0\x95\xbba\xbf\x00\x00\x00\x80\xdeM\x86?\x00\x00\x00\x80\xe3\xd3*?\x00\x00\x00`$\x91S\xbf\x00\x00\x00\xc0\xa1\xd7~?\x00\x00\x00\x005\x11\x91?\x00\x00\x00\xa0\x15V\x8a\xbf\x00\x00\x00\xe0\xe1\x18\x8c\xbf\x00\x00\x00`\xcaLg\xbf\x00\x00\x00\xe0\xb9\xad\x8b?\x00\x00\x00 \x1b\xb7\x86\xbf\x00\x00\x00`\x9eW\x8b?\x00\x00\x00\xc0\\1\x89?\x00\x00\x00\xc0\xb4y\x91?\x00\x00\x00 \xed\xf3t?\x00\x00\x00 \x1a}\x95\xbf\x00\x00\x00 LiH?\x00\x00\x00\xa0\x0e\xd6\x91\xbf\x00\x00\x00\xc0\xb6$\x90?\x00\x00\x00\x00\xa7\xde\x86\xbf\x00\x00\x00\xa0\xfa\xbf\x89\xbf\x00\x00\x00\x00\xa9\xb9\x80?\x00\x00\x00`\x12-O\xbf\x00\x00\x00@\xebdP?\x00\x00\x00\x80>\xecX?\x00\x00\x00 \x9a\xc2x?\x00\x00\x00\xa0\x81\x0bq\xbf\x00\x00\x00\x80M\xb2\x85\xbf\x00\x00\x00\x00\x85\x97\x84\xbf\x00\x00\x00@Snq\xbf\x00\x00\x00\xe0:\\\x94\xbf\x00\x00\x00\x008d\x7f?\x00\x00\x00`bLs\xbf\x00\x00\x00\xa02)r\xbf\x00\x00\x00 \'p\x92?\x00\x00\x00`\xd1\xbc\x84\xbf\x00\x00\x00 :\x82\x92\xbf\x00\x00\x00`\xc5lp\xbf\x00\x00\x00\xc0j\xcd\x82?\x00\x00\x00\x80uy\x80\xbf\x00\x00\x00\xe0\x84\xc6\x89\xbf\x00\x00\x00\x00\x85\xebu\xbf\x00\x00\x00 \x9dE\x82\xbf\x00\x00\x00\xc0\xc9\x85w\xbf\x00\x00\x00\x00b~\x84?\x00\x00\x00\xe0\x83\x00\x86?\x00\x00\x00\xe0\xb9\xc4q?\x00\x00\x00@@/a\xbf\x00\x00\x00 \xb3~a?\x00\x00\x00\xc0\xc3Ju\xbf\x00\x00\x00\xe0\xffB\x85\xbf\x00\x00\x00\xc0P\x87\x85\xbf\x00\x00\x00\xc08\xad\x95\xbf\x00\x00\x00\xe0h*s?\x00\x00\x00`\xbe|\x81?\x00\x00\x00\x00\\>\\?\x00\x00\x00`\xe8\xec\x99?\x00\x00\x00 v\xdf\x8d\xbf\x00\x00\x00\xa0a\x10u?\x00\x00\x00\xe0t\r\x83?\x00\x00\x00\xc0\x8f3a?\x00\x00\x00 \x1a\x19z?\x00\x00\x00\xa0\xab\x8c\x97\xbf\x00\x00\x00`7\xc3\x93?\x00\x00\x00\xc0\xf5\x95G\xbf\x00\x00\x00\xc0GK~?\x00\x00\x00 \xcci\x84?\x00\x00\x00@\xc1\x8cz?\x00\x00\x00\xa0\t\xb4I\xbf\x00\x00\x00\x00p\\\x81?\x00\x00\x00`\xd7\x95b\xbf\x00\x00\x00\x00\xe4\xa6C?\x00\x00\x00@\x9b\x07\x81?\x00\x00\x00\xe0\x1dj\x91?\x00\x00\x00\x80\xa3\x93g?\x00\x00\x00\xe0\xd1\x1c\x85\xbf\x00\x00\x00@\x15ff?\x00\x00\x00\xc0\xf7sl?\x00\x00\x00\xc0\xbc\xa1E\xbf\x00\x00\x00\xa04\xeb2?\x00\x00\x00@\x7f\x9as?\x00\x00\x00`u>y?\x00\x00\x00 C\x97(\xbf\x00\x00\x00  #Z\xbf\x00\x00\x00`$\x8a\x84?\x00\x00\x00`#MU?\x00\x00\x00`\xbc\x1ez\xbf\x00\x00\x00@\xc7\xa6\x84\xbf\x00\x00\x00`\x08\xc4\x83\xbf\x00\x00\x00\xc0\xb8\x88\x80?\x00\x00\x00\x80o\xe6\x80?\x00\x00\x00\xa0\x8b\xb5\x82?\x00\x00\x00\xa0\xb6\xa4Z\xbf\x00\x00\x00\xe0\x9b\xf6b?\x00\x00\x00`0*f?\x00\x00\x00 \xdfO\x8b?\x00\x00\x00\x80\x9fo\x8f?\x00\x00\x00`\x904\x85\xbf\x00\x00\x00\x80\xd7\xb8|?\x00\x00\x00\xc0[\xb5q\xbf\x00\x00\x00\xa0\xb8\xc44\xbf\x00\x00\x00 \xc5\x96p?\x00\x00\x00\xc0\xaf\xb0\x8e?\x00\x00\x00\xa0\x8a\x88\x80?\x00\x00\x00@\xf2\xbcs\xbf\x00\x00\x00 \xe4\xae.\xbf\x00\x00\x00 \xfe\xaf\x97\xbf\x00\x00\x00 \xbd\xc3\x8a\xbf\x00\x00\x00@\xf9\xa0J\xbf\x00\x00\x00@i2\x80\xbf\x00\x00\x00\x80\xf2\'\x83\xbf\x00\x00\x00`h?o?\x00\x00\x00\x00\xd0\xd9L\xbf\x00\x00\x00\xe0\xcf\x19W?\x00\x00\x00\xc08\xbcs\xbf\x00\x00\x00\x805\xa9R?\x00\x00\x00 >0\x90?\x00\x00\x00\xc0\xb1\xf0\x84?\x00\x00\x00\x00\x97\xa0s\xbf\x00\x00\x00\xe0`V\x8d?\x00\x00\x00\xc0\xad^J?\x00\x00\x00\xa0\x84\xdeb?\x00\x00\x00\x00\x0c\xaa\x86?\x00\x00\x00\xc0Div?\x00\x00\x00\xa0\xbdM\x91?\x00\x00\x00\xc0\xc7\xe9\x82\xbf\x00\x00\x00\xe0%\xd3\x8a?\x00\x00\x00\x80dM\x93?\x00\x00\x00@7Q\x87\xbf\x00\x00\x00 \x8a\xbf\x84\xbf\x00\x00\x00\x80\x96\xaeq\xbf\x00\x00\x00\xa0p\x8b\x8b\xbf\x00\x00\x00 \x00\xeb\x7f?\x00\x00\x00\xe0\x9cB\x90?\x00\x00\x00\x80\x98\'N?\x00\x00\x00\x80\xa2Up?\x00\x00\x00`)\x94u\xbf\x00\x00\x00 KE\x83?\x00\x00\x00`A\xa0|?\x00\x00\x00 \xc4vr?\x00\x00\x00 \xd3\x1am?\x00\x00\x00\x00\xfe\xaak\xbf\x00\x00\x00\x80\xa1\xf2T\xbf\x00\x00\x00\x80tui\xbf\x00\x00\x00\xa0\x84\xccr\xbf\x00\x00\x00 \xfc:H?\x00\x00\x00\x80-\x85l?\x00\x00\x00\xe0@7B?\x00\x00\x00\xc0\x05Pv?\x00\x00\x00 \xa6\r\x99?\x00\x00\x00\xa0\xdd\xa0q?\x00\x00\x00\xa0\xfb[q\xbf\x00\x00\x00\xa0n\x0e\x95\xbf\x00\x00\x00\x809"\x7f\xbf\x00\x00\x00`cK\x8f?\x00\x00\x00\xa0`\x04\x80\xbf\x00\x00\x00\x00\xff\xa6i\xbf\x00\x00\x00\xe0\x88{z\xbf\x00\x00\x00\xe0o8}?\x00\x00\x00 \x9a\x8e}?\x00\x00\x00\x00;sM?\x00\x00\x00 \xd3"\x94?\x00\x00\x00@o_\x86?\x00\x00\x00\xc0q\xf3r?\x00\x00\x00\xe0-wf\xbf\x00\x00\x00@\x8d\x92\x85\xbf\x00\x00\x00\x80H%0?\x00\x00\x00@\xd8\xa3j?\x00\x00\x00`\x8bl\x9b\xbf\x00\x00\x00\xa0\x8ax{\xbf\x00\x00\x00@\x19 \x87\xbf\x00\x00\x00@\x95\xb5\x88\xbf\x00\x00\x00 \x83\xe8x?\x00\x00\x00\xe0\x8d\xdf\x8a\xbf\x00\x00\x00\xc0]%\xea>\x00\x00\x00\xe0\t\x1d\x80\xbf\x00\x00\x00\xe0b\xfaz?\x00\x00\x00@\xcf\x06\x81\xbf\x00\x00\x00 kda?\x00\x00\x00\x80\x8cky\xbf\x00\x00\x00\x80\x1e0[\xbf\x00\x00\x00@K7S?\x00\x00\x00`\x1c\n\x84?\x00\x00\x00@\xce\x04t?\x00\x00\x00\x806\r\x91\xbf\x00\x00\x00\xe0\xb7\xf0\x82?\x00\x00\x00\xc0\x83\x7fV?\x00\x00\x00\x00\xecp\x8d?\x00\x00\x00 \x13\xffe?\x00\x00\x00\xc0\x1a\x07\x80?\x00\x00\x00 \xa7\xfdl?\x00\x00\x00\x002\xecd?\x00\x00\x00\xc0W\x07s?\x00\x00\x00`8\xebr\xbf\x00\x00\x00`\xba4o\xbf\x00\x00\x00@\x8c\xa3\x94?\x00\x00\x00 U\xb2\x92\xbf\x00\x00\x00\xc0\xa7\xd1x?\x00\x00\x00\xc0\xc9\x9e\x85?\x00\x00\x00\x80\x91\xee\x87\xbf\x00\x00\x00 \xf3=g\xbf\x00\x00\x00\x80z\xb2\x91?\x00\x00\x00\x00\xd0\x04\x84?\x00\x00\x00\x80\xb9\xf7\x8d\xbf\x00\x00\x00 z4o?\x00\x00\x00\x80\x12\xacd\xbf\x00\x00\x00\xa0,\xb2\x83?\x00\x00\x00\x80\xb9\x85\x9c\xbf\x00\x00\x00\x00d\x9b\x15\xbf\x00\x00\x00@\xad\xb2\x90\xbf\x00\x00\x00`\xcd\xb9\x8b\xbf\x00\x00\x00\xe0\x92\xa6]?\x00\x00\x00\xe0\xe8\xe4i\xbf\x00\x00\x00\x80}\x0e\x8a\xbf\x00\x00\x00 *\xees\xbf\x00\x00\x00 \x0e2\x82\xbf\x00\x00\x00 \xb5\xfd\x8f?\x00\x00\x00 o\xeet?\x00\x00\x00\x80\x1f2E?\x00\x00\x00\x00\xed\xf8^\xbf\x00\x00\x00\xa0\xaf\xddt?\x00\x00\x00\x80\xcc\xf3\x1b\xbf\x00\x00\x00\xc0)}\x84\xbf\x00\x00\x00 \xb8\xc9y?\x00\x00\x00\xa0\xcf\xf9r?\x00\x00\x00@\x80e\x88?\x00\x00\x00\x80\xbd42\xbf\x00\x00\x00`\xc0-`\xbf\x00\x00\x00`\x0bJ\xd8>\x00\x00\x00@btE\xbf\x00\x00\x00\xa0\xab#R\xbf\x00\x00\x00\x80p\x9aq\xbf\x00\x00\x00\x80\xe0\xadt?\x00\x00\x00@\x9c\xc6\x91?\x00\x00\x00\xe0\x1f\xdc\x85?\x00\x00\x00 \xa2(\x96?\x00\x00\x00\xa0\xf1*\x9a?\x00\x00\x00`H\x98p?\x00\x00\x00\xa0\xac\xd1c\xbf\x00\x00\x00\xa0\xdbYt\xbf\x00\x00\x00\xe0\x8d\xbe\x81?\x00\x00\x00\xe0n\n_\xbf\x00\x00\x00\xa0\x02[\x80\xbf\x00\x00\x00\x00\x92\'\x85?\x00\x00\x00@\x80kH?\x00\x00\x00\xc0\xf52t?\x00\x00\x00\xa0\xdf\x8cp?\x00\x00\x00\x00\xe6\x17|\xbf\x00\x00\x00\x00\xa4\xa8}\xbf\x00\x00\x00\x80\xdfT\x94?\x00\x00\x00\xe0\x8eRJ\xbf\x00\x00\x00@j\xe1}?\x00\x00\x00\x00\x86mr?\x00\x00\x00\x80D\xf3\x80?\x00\x00\x00\xe0\x9aEc?\x00\x00\x00\x00>\xf7\x83?\x00\x00\x00@YVx?\x00\x00\x00\x00\x1a\x06y?\x00\x00\x00 /\xadl?\x00\x00\x00\xe0\x81Lr\xbf\x00\x00\x00@\xf1S\x87\xbf\x00\x00\x00`S\x1a\x89\xbf\x00\x00\x00\xa0k\xa8W\xbf\x00\x00\x00\xe0~S\x81?\x00\x00\x00\x00\x0e0v\xbf\x00\x00\x00 \x97\xac\x95?\x00\x00\x00\xc0|\xb3\x83\xbf\x00\x00\x00\x80\x0b|w\xbf\x00\x00\x00\x00\x90sc\xbf\x00\x00\x00\x80-\x9b\x85\xbf\x00\x00\x00\xa0\xb6\x1a`?\x00\x00\x00\xa0\xc2\xc5\xa1?\x00\x00\x00 u7a\xbf\x00\x00\x00\xa0\x007\x1d\xbf\x00\x00\x00`\xa6\n}\xbf\x00\x00\x00@\xc4\xd7G?\x00\x00\x00 \x13\x85\x82?\x00\x00\x00`\xe1\r\x80?\x00\x00\x00\xa0_mZ\xbf\x00\x00\x00@\x8fs[\xbf\x00\x00\x00@\xcc\xa9\x81\xbf\x00\x00\x00\x80\x04Ab\xbf\x00\x00\x00\xa0o\x08P?\x00\x00\x00@|t\x88\xbf\x00\x00\x00\xe0\x18m\x1d?\x00\x00\x00\xe0\xb9\x8dz\xbf\x00\x00\x00`\xab\xa5T?\x00\x00\x00\xa0?\xb0}?\x00\x00\x00\xe0{\xabt?\x00\x00\x00\x80\xd3*X?\x00\x00\x00\x80\x1bH\x95\xbf\x00\x00\x00 Q\x1a|\xbf\x00\x00\x00 $\xc5\x84\xbf\x00\x00\x00\xe0\x19\r\x7f\xbf\x00\x00\x00\x00]qg?\x00\x00\x00 \x01\xe1w\xbf\x00\x00\x00@$mr\xbf\x00\x00\x00\x80\xb5\xaas?\x00\x00\x00\x80S\xa9\x88\xbf\x00\x00\x00\xe0\xea2y\xbf\x00\x00\x00\xa0\xbc\xb9`\xbf\x00\x00\x00\xc0\xc1Yx?\x00\x00\x00 \xc5\x8ep?\x00\x00\x00\x006|q\xbf\x00\x00\x00@a/\x8a?\x00\x00\x00\x804\xe8\x95?\x00\x00\x00\x80\x0bKy?\x00\x00\x00`\x99*`\xbf\x00\x00\x00`\xc4e\x99\xbf\x00\x00\x00 (\xbbq\xbf\x00\x00\x00\x00.R\x8b?\x00\x00\x00\x80d8r\xbf\x00\x00\x00 \xaa\xd7|?\x00\x00\x00\x80\xe3\x87m\xbf\x00\x00\x00\xe0\xc5\xc8\x80\xbf\x00\x00\x00\x80\x9d\\\x85?\x00\x00\x00 )\x7fV?\x00\x00\x00\x00\xf5\x87\x82?\x00\x00\x00\x00\x0ej\x90?\x00\x00\x00 b\x8f\x85?\x00\x00\x00\xe0\xb6\xc8\x8c?\x00\x00\x00\xc0\xfaX\x83?\x00\x00\x00@\xb5u\x88\xbf\x00\x00\x00\x80\x91Hh?\x00\x00\x00\xc0\x90\x9dx\xbf\x00\x00\x00`\xddf\x8a\xbf\x00\x00\x00`;\x03I\xbf\x00\x00\x00\x00\xb0Ot?\x00\x00\x00\x80\xdc.\x8d?\x00\x00\x00\xe0\x15mh\xbf\x00\x00\x00\xa0(=\x85?\x00\x00\x00 P\x0eo\xbf\x00\x00\x00\xa0~\xfb\x96\xbf\x00\x00\x00\xa0\x0cU\x91?\x00\x00\x00\x00(f\x97\xbf\x00\x00\x00 \xf4*\x80?\x00\x00\x00\xc0#\x9f\x8c?\x00\x00\x00\x00\x17z\x95?\x00\x00\x00\x00\xb3;a\xbf\x00\x00\x00\x00\x88\x9d\x83\xbf\x00\x00\x00@\xe7\xeby\xbf\x00\x00\x00\xa0\xf5\xc3\x7f?\x00\x00\x00\x80e\xae\x82\xbf\x00\x00\x00\xc0"\x1bp\xbf\x00\x00\x00 \xf5E\x86?\x00\x00\x00\xa0\x97$\x87?\x00\x00\x00\x00_\x85\x8f?\x00\x00\x00\xe0\xbe\x06\x92\xbf\x00\x00\x00`\x7f\xd8y?\x00\x00\x00\xe0.b\x8d\xbf\x00\x00\x00\xa0\x8e\xbe\x7f?\x00\x00\x00\xa0\xb00W?\x00\x00\x00\x00\xa8\x82p?\x00\x00\x00\x00\x97\xbe\x9a?\x00\x00\x00\xc0N\xfb|?\x00\x00\x00\xa06eW\xbf\x00\x00\x00`\x9d\xa8a\xbf\x00\x00\x00\x804N\x86\xbf\x00\x00\x00\xe0z\x1c\x80?\x00\x00\x00\xc0\x9d~e\xbf\x00\x00\x00\xe0\x10ui?\x00\x00\x00\xa0|Ls?\x00\x00\x00\xe0\x9e\x15\x85\xbf\x00\x00\x00\xa0\xecz1\xbf\x00\x00\x00`q\xe7v?\x00\x00\x00 V\xda}\xbf\x00\x00\x00\x807_M?\x00\x00\x00\x00\xd2\x83\x7f\xbf\x00\x00\x00\x80\xaf\xe8Q?\x00\x00\x00\xe0\x91\xedw?\x00\x00\x00\xa0o\x1bu?\x00\x00\x00`\x00yj\xbf\x00\x00\x00\xa0\xb6&\x92?\x00\x00\x00\xc0\xcb\xe8\\\xbf\x00\x00\x00\xa0c\xc7{\xbf\x00\x00\x00\xe0&\xa4x\xbf\x00\x00\x00@w\x80\x8f\xbf\x00\x00\x00\xe0\x97\x81\x87\xbf\x00\x00\x00\xc0\x9fL\x91?\x00\x00\x00\xe0\xae\x07j\xbf\x00\x00\x00@\xdd\xfai\xbf\x00\x00\x00@\xd4%v?\x00\x00\x00\x00\xe02\x80?\x00\x00\x00\x00\xfc\xbcr?\x00\x00\x00@\xf8P5?\x00\x00\x00\xa0\xc9!\x85\xbf\x00\x00\x00 \xc63x\xbf\x00\x00\x00\x80\x9dax?\x00\x00\x00\xc0\x10dv?\x00\x00\x00 \xeaV`?\x00\x00\x00\x00\\d|\xbf\x00\x00\x00\x80\xc0\x80e\xbf\x00\x00\x00\xc0\x88\xe5\x93\xbf\x00\x00\x00\x00\x92\xcf}\xbf\x00\x00\x00`\x90\x13\x05\xbf\x00\x00\x00\xe0\xabm\x90?\x00\x00\x00\xe0\xd3\xcay\xbf\x00\x00\x00`\xb4}\x92\xbf\x00\x00\x00\x00\x8e\xb4\x87?\x00\x00\x00\x80\xb5\xc5k\xbf\x00\x00\x00 r\x82C\xbf\x00\x00\x00\xc0a,k\xbf\x00\x00\x00\xa0y\x99\x8a\xbf\x00\x00\x00@!\xcam\xbf\x00\x00\x00\x00U\xe2\x85?\x00\x00\x00`\xea4\x98?\x00\x00\x00`\xfen\x85\xbf\x00\x00\x00\xa0ltZ\xbf\x00\x00\x00`\xdb\xb9b\xbf\x00\x00\x00\x00qL\x8a?\x00\x00\x00\xe0kn\x97\xbf\x00\x00\x00\x80\x80\xdb|?\x00\x00\x00`\x92\x8e\x8d\xbf\x00\x00\x00\x001\x82W\xbf\x00\x00\x00\xa0,\xf9\x92?\x00\x00\x00\x80&\xe7i\xbf\x00\x00\x00\xc0lk`\xbf\x00\x00\x00\x00\x1a\x87\x88\xbf\x00\x00\x00\xc0\xf4\xb0\x88?\x00\x00\x00\xe0%\xbeP?\x00\x00\x00`\xa7\x98\x82\xbf\x00\x00\x00 6T\x86?\x00\x00\x00\xc0\x0c\xa0d?\x00\x00\x00 \xf0T_?\x00\x00\x00@\xbb\xa3\x89\xbf\x00\x00\x00\xc0X\xefl\xbf\x00\x00\x00\x80Q\x96o?\x00\x00\x00\xa0D\xe8z?\x00\x00\x00\xc0\x92#\x82?\x00\x00\x00\xc0\xda#u\xbf\x00\x00\x00@\xdfK\x9c?\x00\x00\x00 WQL?\x00\x00\x00 L\xbbw\xbf\x00\x00\x00@\x8c\xc0\x93\xbf\x00\x00\x00\xe0\x90\xfe\x85?\x00\x00\x00\x80p_x\xbf\x00\x00\x00`\xa3,\x98?\x00\x00\x00\xa0\xd0cj?\x00\x00\x00\x00\x12\x88\x86\xbf\x00\x00\x00\x80\xd1\xeff?\x00\x00\x00\xe0\x8aSr?\x00\x00\x00\xc0\x88\x8dd\xbf\x00\x00\x00\xc0hwt?\x00\x00\x00@\xd9\x13W\xbf\x00\x00\x00 ~\x10\x88?\x00\x00\x00\xe0b(l\xbf\x00\x00\x00\xe0*?z?\x00\x00\x00`g\x0cs?\x00\x00\x00\x80\x01\x86\x87?\x00\x00\x00 U\x16m\xbf\x00\x00\x00\x00 Mn?\x00\x00\x00\xa0e5\x95?\x00\x00\x00@p\xe4\x9b\xbf\x00\x00\x00\xc0\xb2*e\xbf\x00\x00\x00\x00xQj\xbf\x00\x00\x00\xe0m\xd6|?\x00\x00\x00@\x08\xde\x8e\xbf\x00\x00\x00\xc0\xc9*k?\x00\x00\x00\x80v<\x82\xbf\x00\x00\x00\x00\xe0\x0e\x86?\x00\x00\x00\xa0P\xc5i?\x00\x00\x00 l\x85E?\x00\x00\x00\x80R\x0e\x96?\x00\x00\x00\xc0#\xe1~?\x00\x00\x00`Kgy\xbf\x00\x00\x00`6\x15\x90\xbf\x00\x00\x00\x80\xee\x8f\x87?\x00\x00\x00\xc0\xbe\x8e}\xbf\x00\x00\x00\xa0I\xb3b\xbf\x00\x00\x00`\x81\xa7\x82?\x00\x00\x00`\xd1W_?\x00\x00\x00\xe0R\rj\xbf\x00\x00\x00\xe0\x9d\tc?\x00\x00\x00\xc0r\x99\x80?\x00\x00\x00@C+U?\x00\x00\x00\xe0\xfb]\x85\xbf\x00\x00\x00`\xab\x08\x85?\x00\x00\x00\x80\x8e4H\xbf\x00\x00\x00\xc07\x94\x8a\xbf\x00\x00\x00`k\xe9\x89?\x00\x00\x00\xe0\xe15\x85\xbf\x00\x00\x00@\x90\x818\xbf\x00\x00\x00\xe0\x18\xd2\x80?\x00\x00\x00\xa0\xf8E\x8e\xbf\x00\x00\x00\x80h\xa5f\xbf\x00\x00\x00`!\xd3\x99\xbf\x00\x00\x00@e\xd6\x81?\x00\x00\x00\x80\xeaNf\xbf\x00\x00\x00 \xe3\xa6\x89?\x00\x00\x00\xa0!\xc8\x90\xbf\x00\x00\x00\x00\xec\x1c\x81?\x00\x00\x00 :\x90h?\x00\x00\x00\xc0\x86\x86\x83\xbf\x00\x00\x00 \xb7\x0cS?\x00\x00\x00 M\xe9F\xbf\x00\x00\x00 \xefa\x8b?\x00\x00\x00\xc0m\xce\x94\xbf\x00\x00\x00\xc0B\xd0|\xbf\x00\x00\x00\xa0b\xf0\x86\xbf\x00\x00\x00\xc0;[\x97\xbf\x00\x00\x00`|7_?\x00\x00\x00@H\xec\x8b?\x00\x00\x00`\xf3C\x87\xbf\x00\x00\x00\x80R\xa8\x80?\x00\x00\x00\xa0\xb1H\x88\xbf\x00\x00\x00@\xb2\xfe\x86?\x00\x00\x00\xa0B\x12\x97?\x00\x00\x00\x80=\n\x94\xbf\x00\x00\x00\xc0\x91\xf1c?\x00\x00\x00\xa0C\xb8\x85?\x00\x00\x00`\xdb\xa2\x81\xbf\x00\x00\x00 \xb6\x16|\xbf\x00\x00\x00\xc0\xb35\x80\xbf\x00\x00\x00`\xba\x8b\x89\xbf\x00\x00\x00`\xb0\x88\x8f?\x00\x00\x00 \xb8\xc5\x81\xbf\x00\x00\x00@$`K\xbf\x00\x00\x00 7R]\xbf\x00\x00\x00\xc0\x85r\x80?\x00\x00\x00\xe0\\\xccW\xbf\x00\x00\x00\xc0\xac\x15c?\x00\x00\x00\xc02_o?\x00\x00\x00\x00_\xfa\x83?\x00\x00\x00`\x04\r\x8c\xbf\x00\x00\x00\xc0\x07\xc2D\xbf\x00\x00\x00`1at?\x00\x00\x00\x80\t\x08M\xbf\x00\x00\x00@o`d\xbf\x00\x00\x00\xa0#\xdcD?\x00\x00\x00@\xafLu\xbf\x00\x00\x00\xc0\xe0\xf5\x8c\xbf\x00\x00\x00@\xe3N\x88?\x00\x00\x00\xc0\x16\xc3\x91\xbf\x00\x00\x00\x80c$g\xbf\x00\x00\x00\xc0\xd4V\x82?\x00\x00\x00\x00\x88E~\xbf\x00\x00\x00@\xdf\xfc|\xbf\x00\x00\x00\x00\x08\x81\x93\xbf\x00\x00\x00`\x8f\xf0q\xbf\x00\x00\x00\x00\xa9\x0b\x9c?\x00\x00\x00\x80\x9a\xac\x9e?\x00\x00\x00@D\x19s?\x00\x00\x00\xa0R\xfbf\xbf\x00\x00\x00\xa0\xfd\xff\x89\xbf\x00\x00\x00 }XF\xbf\x00\x00\x00 \xcf\x98\x7f?\x00\x00\x00 PX\x81?\x00\x00\x00 \x91\xd9\x82?\x00\x00\x00`>\xd3T?\x00\x00\x00\xe0\xa5\x8ae?\x00\x00\x00\x80\xean\x87\xbf\x00\x00\x00\x803sv?\x00\x00\x00@\x8b\xaf\x90?\x00\x00\x00\x80\xf5\xde\x8e?\x00\x00\x00@\x80\xe0b\xbf\x00\x00\x00\xe0\xae$`\xbf\x00\x00\x00\x00\xc7\xc0,\xbf\x00\x00\x00 j\x16t\xbf\x00\x00\x00@\x85,\x90\xbf\x00\x00\x00\x00c\x0e\x8c?\x00\x00\x00\x80\xf7\xdc\x84?\x00\x00\x00 7s~\xbf\x00\x00\x00@f\xd7s?\x00\x00\x00\x80\x0c_\x96\xbf\x00\x00\x00\xc0\xe5\xd3u\xbf\x00\x00\x00\xc0\xe1&\x82?\x00\x00\x00\xc0\xe9\xbd\x81\xbf\x00\x00\x00\xe0\xb0\x18\x80?\x00\x00\x00\xe0G\xb4\x99?\x00\x00\x00\x80\xad[w\xbf\x00\x00\x00\x00\x06\xc9\x86?\x00\x00\x00\x00\xbckr\xbf\x00\x00\x00@[\x12w\xbf\x00\x00\x00\xc0\x07&\x87?\x00\x00\x00\x00}\xd7\x87\xbf\x00\x00\x00@\x87\x8fa\xbf\x00\x00\x00 T\x19\x8e?\x00\x00\x00 \xabT\x80?\x00\x00\x00 \xf1L\x8b?\x00\x00\x00\x00y\xc6z\xbf\x00\x00\x00 \xe4\xb8\x94\xbf\x00\x00\x00 ,\xc4m\xbf\x00\x00\x00 \xc9\xfa\x91\xbf\x00\x00\x00\x80\xdcJb?\x00\x00\x00\xc0pP~\xbf\x00\x00\x00\xa0\x92m\x88\xbf\x00\x00\x00 \x8d\x94x\xbf\x00\x00\x00@\xb4\x1fr?\x00\x00\x00\xc0A.~?\x00\x00\x00@\'\xd0e?\x00\x00\x00\xa0\x17CY\xbf\x00\x00\x00@%\xf3\x86\xbf\x00\x00\x00\x00\xa1\x80\x92\xbf\x00\x00\x00 \x8f\xcc\x83?\x00\x00\x00`\xa7\n:\xbf\x00\x00\x00`&\x0ct?\x00\x00\x00\x80\xdd\xb2{\xbf\x00\x00\x00\xe0\x08\xd2F\xbf\x00\x00\x00\xe0\xf1\x9c\x92?\x00\x00\x00\x00\xbd\xa1P?\x00\x00\x00\xc0\x16U\x8a?\x00\x00\x00\x00\x1a\xfaN?\x00\x00\x00\xc0T\x0f\x7f?\x00\x00\x00\xe0\x1d-2\xbf\x00\x00\x00\xa0Z\xe4\x80\xbf\x00\x00\x00\xe0;\tR?\x00\x00\x00 d\xccY?\x00\x00\x00\x80\xa6\x88\x8e\xbf\x00\x00\x00\xe0\x90Ld?\x00\x00\x00 u\x11{?\x00\x00\x00`\xfe\xa2\x1d?\x00\x00\x00\xc0X\x02\x90?\x00\x00\x00\xc0t\xa9\x94?\x00\x00\x00\xe0\x07Us\xbf\x00\x00\x00\x00\xb2\xd0h\xbf\x00\x00\x00\xc0\xbe\xa7p?\x00\x00\x00\xa0\xb3\r\x7f\xbf\x00\x00\x00\xa0\xb7\xf7p?\x00\x00\x00\xa0lN\x86?\x00\x00\x00\x80\x9a\x8cd?\x00\x00\x00\xe0\xfe(\x8d\xbf\x00\x00\x00\x80\x95\xf9\x9b?\x00\x00\x00\x00*n\x8f?\x00\x00\x00\x004\xbd\x95?\x00\x00\x00\xa0\xc6\xdfo\xbf\x00\x00\x00\x80T2j\xbf\x00\x00\x00\x00\xed\x7f\x8a\xbf\x00\x00\x00\xa0/\xf5}?\x00\x00\x00\x80\xfb\x9e\x8b?\x00\x00\x00`\xfb\xccv?\x00\x00\x00\xc0\xf0\x08j\xbf\x00\x00\x00\xa0\xec\xd4V?\x00\x00\x00\x80\r\xdb\x8e?\x00\x00\x00\xc0\x88Au\xbf\x00\x00\x00@\xf6)o\xbf\x00\x00\x00\x80K,~\xbf\x00\x00\x00`\xf6\x01r\xbf\x00\x00\x00\xc0y\x94x\xbf\x00\x00\x00\xc0>8h\xbf\x00\x00\x00 V}\x80?\x00\x00\x00`\xafFo\xbf\x00\x00\x00\xe0RFt\xbf\x00\x00\x00`\x9ca`\xbf\x00\x00\x00 \x89\x08|\xbf\x00\x00\x00\x004\xc1p\xbf\x00\x00\x00\xc0\x1fn\x86?\x00\x00\x00\x00_\xc7r\xbf\x00\x00\x00\x00\xb7\xba\x87\xbf\x00\x00\x00\xc0\xed\xd3c\xbf\x00\x00\x00\xe0\x19\xb3\x83\xbf\x00\x00\x00\xa0\xbd\xe7\x9a\xbf\x00\x00\x00\xe0\xc3\xc0\x80\xbf\x00\x00\x00\xa0\xa27\x93?\x00\x00\x00\xa0S\x06p?\x00\x00\x00\xc0\x8bU\x83\xbf\x00\x00\x00\xe05\xf6w\xbf\x00\x00\x00@A\x84q\xbf\x00\x00\x00\xa0Y\x94p\xbf\x00\x00\x00\xc0\xa5\xfdz\xbf\x00\x00\x00\xe0W\x0fN?\x00\x00\x00\xe0\x157R?\x00\x00\x00 "\xa2\x95?\x00\x00\x00\x00\x89\x1bt?\x00\x00\x00\xc0\xb8\xc0\x7f?\x00\x00\x00 \x9ebn?\x00\x00\x00\xe0n\xebK?\x00\x00\x00 cF\x86?\x00\x00\x00\xe0\x1e\x10b?\x00\x00\x00\x00\x82 \x81\xbf\x00\x00\x00\xc03\xdf\x93?\x00\x00\x00@\xddO\x83?\x00\x00\x00 \x86\x9bu?\x00\x00\x00\xc0=\x99h\xbf\x00\x00\x00@\x80\x10\x8e?\x00\x00\x00@\xd6\x12G\xbf\x00\x00\x00@\xb7\xa6x?\x00\x00\x00\x80\xe1ZX\xbf\x00\x00\x00 \xa1Tq\xbf\x00\x00\x00\xc0_\xe6`\xbf\x00\x00\x00\xe0\xe5\x19~\xbf\x00\x00\x00\x80[\x89m\xbf\x00\x00\x00`\x91\xe1w\xbf\x00\x00\x00\x80\xf8\x8a\x8a\xbf\x00\x00\x00\xe0\xd0\xe1\x91?\x00\x00\x00\xa0\x1b\x9c\x94\xbf\x00\x00\x00\xe0P\xaas\xbf\x00\x00\x00@\xd5A\x7f?\x00\x00\x00\xc0vES?\x00\x00\x00\xc0\xd8K\x88\xbf\x00\x00\x00\xa0s^\x94?\x00\x00\x00\x00m z?\x00\x00\x00 \xe9\xa4B\xbf\x00\x00\x00\xe0\x91\xb3p?\x00\x00\x00@\xb4\xfaz\xbf\x00\x00\x00\xa0\x1d\x18\x83\xbf\x00\x00\x00\xa0f\xb3t\xbf\x00\x00\x00\xe0Q\xbdv\xbf\x00\x00\x00\xe0\x98\xafl\xbf\x00\x00\x00 \x1f\xf7\x7f\xbf\x00\x00\x00\xe0\x94\x11\x8f?\x00\x00\x00\xa0_p\x8b\xbf\x00\x00\x00\xe0\xb8Uk\xbf\x00\x00\x00\xa0\x1c\x7f\x82\xbf\x00\x00\x00\xe0\xfa\x89\x82\xbf\x00\x00\x00 \xd9\x91\x89\xbf\x00\x00\x00\x00\x0ePD?\x00\x00\x00 \x17\xa7n\xbf\x00\x00\x00\xa0f\xc1e\xbf\x00\x00\x00\xa0k\x15\x94\xbf\x00\x00\x00\xe0\xa3\xbc\x7f\xbf\x00\x00\x00@\x04\xcd\x89\xbf\x00\x00\x00\xa0\xf6\x81|?\x00\x00\x00\xc0\xd5\xe3t?\x00\x00\x00\x80\xea\xa5a?\x00\x00\x00@\x11Nu?\x00\x00\x00\xc0=\xe2\x8e\xbf\x00\x00\x00`\xac,\x80\xbf\x00\x00\x00`\xe3\x08o\xbf\x00\x00\x00\xe0?5}\xbf\x00\x00\x00@x\xa4\x8c?\x00\x00\x00\xc0E\xca\x8a\xbf\x00\x00\x00\xe0fDu?\x00\x00\x00\xe0\xa2\x1a\x90?\x00\x00\x00\x00\x0f\x15_\xbf\x00\x00\x00\x00`3s\xbf\x00\x00\x00\xc0\x96\x81\x86?\x00\x00\x00\xc0F.W\xbf\x00\x00\x00@\x11\x1f\x8e\xbf\x00\x00\x00\x00dB\x8a?\x00\x00\x00\xa0A\x86_?\x00\x00\x00 \xfaP\x90\xbf\x00\x00\x00\xa0Rq\x81\xbf\x00\x00\x00\x80Pkq\xbf\x00\x00\x00\xc0\x1eR\x89?\x00\x00\x00\xe0\xb4 \x86\xbf\x00\x00\x00\xe0\xa6\xaea?\x00\x00\x00\xa0\x05\x95\x89\xbf\x00\x00\x00 \xa1\xdf\x91\xbf\x00\x00\x00\x80\xdaq\x81\xbf\x00\x00\x00\xa0\xfe\x16h\xbf\x00\x00\x00\xc0\xac\x7fs\xbf\x00\x00\x00\xa0I\xb3\x8b?\x00\x00\x00\x80d!\x94\xbf\x00\x00\x00@\x1a\xda\x95\xbf\x00\x00\x00\xc0\xa0a\x84?\x00\x00\x00\x00\xd0\xcda\xbf\x00\x00\x00\x80\x90\x93\x8c\xbf\x00\x00\x00@5:\x8a\xbf\x00\x00\x00\x80\x915\x8f?\x00\x00\x00\x80\xf5\xdb\x8c?\x00\x00\x00 \x0c\x15G\xbf\x00\x00\x00\xa0(\x1d\x87\xbf\x00\x00\x00\x804J\x88\xbf\x00\x00\x00`V`|?\x00\x00\x00\x80\xc6\xe8\x90?\x00\x00\x00\xc0\xaf\x15\x82\xbf\x00\x00\x00 ~Rx?\x00\x00\x00 \x96\xcd\x81\xbf\x00\x00\x00@\xec!\x9b?\x00\x00\x00\x80\n\x8f\x8f\xbf\x00\x00\x00\xc0\x15\x91\x83\xbf\x00\x00\x00\xe0\x1axg?\x00\x00\x00\xa0\xa8X[?\x00\x00\x00\xe0\xac[^\xbf\x00\x00\x00\xa0\x96\\u\xbf\x00\x00\x00`\x17\x18\x94?\x00\x00\x00`\xc0\x02\x89\xbf\x00\x00\x00\xc0\xc9\xdf\x84?\x00\x00\x00\xc0\x98\x84u?\x00\x00\x00`!\x96\x04?\x00\x00\x00\x00\x1a\xed\x81\xbf\x00\x00\x00\xc0o\xa9\x85?\x00\x00\x00\x80\xaai\x82\xbf\x00\x00\x00@\x0f\x18\x86?\x00\x00\x00`\x8d\xc9>\xbf\x00\x00\x00\xc0\x94\xf4\x99?\x00\x00\x00\xc0Z\xdb\x87?\x00\x00\x00\x00\x0b\x1c_?\x00\x00\x00\xa0p>e\xbf\x00\x00\x00\x00\xd5\x87\x8f\xbf\x00\x00\x00\x00\x87/\x80\xbf\x00\x00\x00@\xd4\x96\x80?\x00\x00\x00\x00`Jn\xbf\x00\x00\x00@F\x06^?\x00\x00\x00 U\xb2v\xbf\x00\x00\x00@\xcb\x02\x8d?\x00\x00\x00`\xd3\x9fz\xbf\x00\x00\x00 m\xb1\x84\xbf\x00\x00\x00\x00\xb4a\x87\xbf\x00\x00\x00`t\x80f\xbf\x00\x00\x00\x80V\xe6\x91?\x00\x00\x00\xe0\xfby~?\x00\x00\x00@\x98\x9f\x8d\xbf\x00\x00\x00\x80y\xa2\xe4\xbe\x00\x00\x00\xc0\x04\x9a\x7f?\x00\x00\x00@\xecF\x90\xbf\x00\x00\x00\xa0\x84\xd9|?\x00\x00\x00`\x8e\xd3w\xbf\x00\x00\x00\x80\xeb\xfa\x7f\xbf\x00\x00\x00@\x89\x94\x81\xbf\x00\x00\x00@\xc0\xa4\x81\xbf\x00\x00\x00\xc0@rk?\x00\x00\x00\x80\x1e\x0b\x82\xbf\x00\x00\x00 \xd0\x88\x87?\x00\x00\x00\xe0\x8c\xde\x8d?\x00\x00\x00\xe0\x84$\x86?\x00\x00\x00\x80X\xa1`?\x00\x00\x00 Bo\x8a\xbf\x00\x00\x00\xc0\x123\x86\xbf\x00\x00\x00@5 \x87\xbf\x00\x00\x00\xc0>qO\xbf\x00\x00\x00\xc0t\xd1p\xbf\x00\x00\x00\xa0!}`?\x00\x00\x00\xe0\xc2"t?\x00\x00\x00\x80\x1b\xbe\x83\xbf\x00\x00\x00\x00c\xfc\x8e\xbf\x00\x00\x00\xc0c\x00f?\x00\x00\x00\x80\x01\x8bD\xbf\x00\x00\x00\xa0s/Z?\x00\x00\x00 !AD\xbf\x00\x00\x00\xa0;(k\xbf\x00\x00\x00\xa0\xc5[{\xbf\x00\x00\x00\xa08\xd5\x8f\xbf\x00\x00\x00\x80\x00\xf6v\xbf\x00\x00\x00\xc0\xcac}\xbf\x00\x00\x00@\x10\x82\x86?\x00\x00\x00 \xfe\xcaw?\x00\x00\x00\xe0\xeb\x0e\x8b\xbf\x00\x00\x00@\xc8\xebX\xbf\x00\x00\x00\x80&\xf6p\xbf\x00\x00\x00\x00}\xf0\x92?\x00\x00\x00@_\xb0p?\x00\x00\x00\x80\xf6\'e\xbf\x00\x00\x00\xc0\xf52p\xbf\x00\x00\x00\xc0%/e?\x00\x00\x00\x80\xa3o\x83\xbf\x00\x00\x00\x00\xf4\xdb\x94\xbf\x00\x00\x00`\xe1\xd2w?\x00\x00\x00\x80\xc5\xe5|?\x00\x00\x00\x80\xf8\xdd\x8d\xbf\x00\x00\x00\xe0f6\x90?\x00\x00\x00\x80\rYj?\x00\x00\x00`!\xb0\x84?\x00\x00\x00\x00]\xc4}\xbf\x00\x00\x00\x00)\x90\x90\xbf\x00\x00\x00 \xb7"x?\x00\x00\x00 .\x8b\x8a\xbf\x00\x00\x00\x80\xd5E\xa1?\x00\x00\x00`\x0bhh\xbf\x00\x00\x00\x00\x80\x85x\xbf\x00\x00\x00@\x92\xed\x90?\x00\x00\x00@$\xaby\xbf\x00\x00\x00\xe0\xe9\xbf@\xbf\x00\x00\x00@M\xc8a?\x00\x00\x00\xc0\xfd\xfa}?\x00\x00\x00`b\xd2o\xbf\x00\x00\x00\x00\x13ht\xbf\x00\x00\x00@=n\x96\xbf\x00\x00\x00@\x83X\x84?\x00\x00\x00 )\xd2W\xbf\x00\x00\x00\x00\xb7K\x82\xbf\x00\x00\x00\xa0\xf9\x99h\xbf\x00\x00\x00\x803\xa5\x8c?\x00\x00\x00`/-~?\x00\x00\x00@\xd9\xe1\x8e?\x00\x00\x00\xe0+\xd3\x92\xbf\x00\x00\x00`D\xa8y\xbf\x00\x00\x00\xa0#\xfd\x89?\x00\x00\x00@\xd4\x84\x84\xbf\x00\x00\x00\xc0\xb7\x94\x83?\x00\x00\x00\x00\xfar\x80?\x00\x00\x00`\x98\x0e\x90?\x00\x00\x00@\x8b\xc9\x81?\x00\x00\x00 =]\x91\xbf\x00\x00\x00\xc0\x02\x1da\xbf\x00\x00\x00 %8p\xbf\x00\x00\x00\xc0\xd1.v?\x00\x00\x00\x00FWw\xbf\x00\x00\x00 \xb0\xae\x84?\x00\x00\x00\x80\xce\x83q?\x00\x00\x00\x00\xeb"\x85?\x00\x00\x00\xc0 \t\x81?\x00\x00\x00 <{k\xbf\x00\x00\x00@\xec)\x83?\x00\x00\x00@\x18\xc1\x85?\x00\x00\x00`\x04\xd2y?\x00\x00\x00\x00cg\x81?\x00\x00\x00`\'\xb2W?\x00\x00\x00\xa03\xc1b?\x00\x00\x00 0hd\xbf\x00\x00\x00`\xa0\x06\x81\xbf\x00\x00\x00`\x9a7a?\x00\x00\x00\xe0\\7`?\x00\x00\x00\xc0\x19\x87Y?\x00\x00\x00\x00\xd9!M?\x00\x00\x00\xc0\xa3+u?\x00\x00\x00\x80\x06\xdcr?\x00\x00\x00`|\x85s?\x00\x00\x00\x80\x9e\xcev\xbf\x00\x00\x00@\xcd\xfd\x8a\xbf\x00\x00\x00\xe0\xb5\x04b\xbf\x00\x00\x00\xe0\x8e\t\x80\xbf\x00\x00\x00\xe0,`p?\x00\x00\x00 \x87\x18n\xbf\x00\x00\x00\xa0n\xf5o?\x00\x00\x00\xc0\xb6\n\x81?\x00\x00\x00\xa0\xc6z\x81\xbf\x00\x00\x00\xa0Znc\xbf\x00\x00\x00`0\x01\x84\xbf\x00\x00\x00@\xab1\x85?\x00\x00\x00\xa0\xf1\xc7|\xbf\x00\x00\x00@m\xf6X?\x00\x00\x00@M@\x8c?\x00\x00\x00`\x18\xff\x97\xbf\x00\x00\x00`f\xbak?\x00\x00\x00\x80\x9d\xf7s\xbf\x00\x00\x00@5\xc0\x8b?\x00\x00\x00\x00W\xa3\x85?\x00\x00\x00@\xccO\x92?\x00\x00\x00`;e\x85\xbf\x00\x00\x00`\xd4$\x90\xbf\x00\x00\x00`\x89\n\x96?\x00\x00\x00\xa0E\xe2\x87?\x00\x00\x00\xc0,IQ?\x00\x00\x00\xc04y\x98\xbf\x00\x00\x00\xa0i\xacw?\x00\x00\x00 \xe0\xec:?\x00\x00\x00\xa0\xd1\x12\x85\xbf\x00\x00\x00 \xdd\x93d\xbf\x00\x00\x00`\x0bL\x91?\x00\x00\x00\x00\xa5\xd0r?\x00\x00\x00 \xf4\x19k?\x00\x00\x00 \x99:\x88\xbf\x00\x00\x00 \xe2^{\xbf\x00\x00\x00\xc0G\x86f\xbf\x00\x00\x00 D\xaa\x92\xbf\x00\x00\x00\x80\x19j\x8c?\x00\x00\x00@\xdb\xa8\x8d\xbf\x00\x00\x00@\xeb\x16F\xbf\x00\x00\x00\xe0\xcf\x15\x92\xbf\x00\x00\x00 [\x1dv\xbf\x00\x00\x00\xa0\xa7\x85\x91\xbf\x00\x00\x00\xa0Y$\x83\xbf\x00\x00\x00\x80W$\\\xbf\x00\x00\x00\xc0\xfd,8?\x00\x00\x00\xe0\xc7\r`?\x00\x00\x00 \xbe\xb7f?\x00\x00\x00 \x15\xf5|?\x00\x00\x00\x00h\x9f\x88\xbf\x00\x00\x00\xe0f\x1a\x85?\x00\x00\x00`b\xc1z\xbf\x00\x00\x00\x80\x0e0P\xbf\x00\x00\x00 V2\x91\xbf\x00\x00\x00`\x1c\xcc~?\x00\x00\x00\x00\xe5J\\?\x00\x00\x00\xc0#,\x92\xbf\x00\x00\x00\xe0\xcf06?\x00\x00\x00\xa0\xbc\xaah?\x00\x00\x00\xa0\xe6\x8e\x82?\x00\x00\x00 C\x1f\x8c?\x00\x00\x00\x00Pd8?\x00\x00\x00\xc0B\xc5i\xbf\x00\x00\x00 :\xd9\x89?\x00\x00\x00\xc0S\xa1\x8e\xbf\x00\x00\x00 \xb9\x9bw\xbf\x00\x00\x00\x00\xd6\x05~\xbf\x00\x00\x00@a\x8ap?\x00\x00\x00 T\xccs\xbf\x00\x00\x00`\xe14P?\x00\x00\x00\xa0\x10m\x7f?\x00\x00\x00\x80\xe3\xb5[?\x00\x00\x00\xe0\xbe\xca\x8a\xbf\x00\x00\x00`\xdeea\xbf\x00\x00\x00\x00\xaaW\x85\xbf\x00\x00\x00`c\x97u?\x00\x00\x00 \xebv\x8d?\x00\x00\x00\x00\xcc\x81l?\x00\x00\x00@Q7\x92?\x00\x00\x00`\xbc\x80\x92?\x00\x00\x00\xa0\xb5\xb4q\xbf\x00\x00\x00 :w\x89\xbf\x00\x00\x00 \xf9\x9eU\xbf\x00\x00\x00\x00s\x02\x8f?\x00\x00\x00\x00n!v?\x00\x00\x00@\x01\xbf|?\x00\x00\x00\x80\xe4Y\x99?\x00\x00\x00`i\x90q\xbf\x00\x00\x00\xe0\xde\x1du\xbf\x00\x00\x00\x809\xfd\x8c\xbf\x00\x00\x00`\xf9nM?\x00\x00\x00\xc0\xb5\xf6s?\x00\x00\x00 8\xc0[?\x00\x00\x00\xa0l(}?\x00\x00\x00\xa0o\xd4p?\x00\x00\x00 \xc1\x8dy?\x00\x00\x00\xc0\xa4\xe9K\xbf\x00\x00\x00 v\x10\x9c?\x00\x00\x00\x00\xf5\xa3\x93?\x00\x00\x00\x00zd\x80\xbf\x00\x00\x00\x00o\x89W\xbf\x00\x00\x00@\xbe$`\xbf\x00\x00\x00\xe0\xd3p\x84?\x00\x00\x00\xe0\x8e\xbeZ\xbf\x00\x00\x00\x80IQ\x8f\xbf\x00\x00\x00\xc0\xa8\xdd|\xbf\x00\x00\x00`\xce(y?\x00\x00\x00\x00\xb0\xfdr?\x00\x00\x00`\xfc\xd5\x8b?\x00\x00\x00\x00}L\x91\xbf\x00\x00\x00 \xfdE\x95?\x00\x00\x00 #\xd3U\xbf\x00\x00\x00\x00\xea\x19p\xbf\x00\x00\x00\x80\xf8\xdc\x84?\x00\x00\x00`qz~?\x00\x00\x00` \xa3\x91\xbf\x00\x00\x00`r\xa5k\xbf\x00\x00\x00@"vN\xbf\x00\x00\x00 @\x14\x7f?\x00\x00\x00\xc0\xe4\x03\x91?\x00\x00\x00\xa0\x14\xa1R?\x00\x00\x00 \xd1\xa2{\xbf\x00\x00\x00\xe0\x0e<R?\x00\x00\x00@e\xbdw\xbf\x00\x00\x00\xc0\xff\xbc#?\x00\x00\x00 \xa4\x17~\xbf\x00\x00\x00 \xe3*~?\x00\x00\x00\x80C\x1a\x93\xbf\x00\x00\x00@\xfe\x81\x9c?\x00\x00\x00\x00\x85\xb6v?\x00\x00\x00 \xfc\x9e`\xbf\x00\x00\x00\xa0[\xfft\xbf\x00\x00\x00\x00{V \xbf\x00\x00\x00@*\xf2d?\x00\x00\x00 Mr\x88?\x00\x00\x00`\xa1^}?\x00\x00\x00\x00G\xbb\x81\xbf\x00\x00\x00\xe0\xa4\xc0t\xbf\x00\x00\x00\x80\x1dTk?\x00\x00\x00\x00\t\x92\x93\xbf\x00\x00\x00\x00\xb1\x91f?\x00\x00\x00\xa0rc\x81\xbf\x00\x00\x00\x00\x8e\n\x8c?\x00\x00\x00\x00_\xe8\x8e?\x00\x00\x00@k\x8e\x89?\x00\x00\x00 5\xfd\x87\xbf\x00\x00\x00`\xaf\xd1\x80\xbf\x00\x00\x00@\xce\x9b\x7f\xbf\x00\x00\x00\x80\xb9!}\xbf\x00\x00\x00\xa0\x0e(n\xbf\x00\x00\x00\xc0\xd1\x82\x83?\x00\x00\x00\xe0\x91\x13f?\x00\x00\x00\xe0\xbb\xffm\xbf\x00\x00\x00\xe0\x06^S\xbf\x00\x00\x00 n\xb4\'\xbf\x00\x00\x00\xa0+\x03\x93?\x00\x00\x00\x00\xa6\xd1]?\x00\x00\x00 :\x9b\x92\xbf\x00\x00\x00@\xfc\x97\x84\xbf\x00\x00\x00\x80\t}\x81\xbf\x00\x00\x00\xa06\xa0k?\x00\x00\x00`\xd2lG\xbf\x00\x00\x00\x00\xb0\xd9\x82?\x00\x00\x00\xa0WYj?\x00\x00\x00 @?Z\xbf\x00\x00\x00@\xed&\x8d\xbf\x00\x00\x00\x00\xb1A9?\x00\x00\x00\xc0\xd5\xf0Y?\x00\x00\x00\x00\xd8\xe9}\xbf\x00\x00\x00\xc0\x16\n\x84\xbf\x00\x00\x00`?\xc9`?\x00\x00\x00\x00\xa2 \x87?\x00\x00\x00\xa0\xabxZ\xbf\x00\x00\x00\x00\x86\x0bY?\x00\x00\x00 U\xb3\x80?\x00\x00\x00\x80\xf6\xaa\x82?\x00\x00\x00@&\x96y\xbf\x00\x00\x00\x801d\x90\xbf\x00\x00\x00\xa0\x07\x1b\\\xbf\x00\x00\x00\xe0\xbb\xc1\x92\xbf\x00\x00\x00\xa0\xbfA\x82?\x00\x00\x00 \xe0*\x8b\xbf\x00\x00\x00 \xff"\x91?\x00\x00\x00\xa0\xa2\x8az\xbf\x00\x00\x00 \x08mc?\x00\x00\x00\x80&#\x9a?\x00\x00\x00 \x8a\xa8\x83?\x00\x00\x00\xc0\xcdy\x7f\xbf\x00\x00\x00\x80\xd0\xc1\x90\xbf\x00\x00\x00\xc0Z/n?\x00\x00\x00 \xc4\xdab\xbf\x00\x00\x00\x00\x13\x02\x88?\x00\x00\x00 \xb8fr\xbf\x00\x00\x00`A\xa1\x95?\x00\x00\x00\x00A\x05\x97\xbf\x00\x00\x00@!C\x85?\x00\x00\x00\xa0\xab\xc5\x89\xbf\x00\x00\x00\xe0\xf9gt?\x00\x00\x00@\xed\x88\x82\xbf\x00\x00\x00`\xb8\xc5q\xbf\x00\x00\x00 \xab\x11\x7f?\x00\x00\x00`\x02\xc2`?\x00\x00\x00\xc0m}h?\x00\x00\x00\x80H\xa8\x97?\x00\x00\x00\xe0\x8f\xdb\x91\xbf\x00\x00\x00\xa0\xee\x01\x88?\x00\x00\x00\xc0\xbf\x87\x93?\x00\x00\x00\x80\x95\x8bT?\x00\x00\x00`(\xa0@\xbf\x00\x00\x00 *\x1ax\xbf\x00\x00\x00 \xc3\x88_?\x00\x00\x00 \x04\xc0\x8a\xbf\x00\x00\x00\xe0r\xb2q\xbf\x00\x00\x00\x80-\\?\xbf\x00\x00\x00 O\x0bs?\x00\x00\x00\x80\xed\xb3\x7f\xbf\x00\x00\x00 \xdeJ\x82\xbf\x00\x00\x00\xe0\x1c\xaa\x80\xbf\x00\x00\x00\x00\xef\xc9\x8e?\x00\x00\x00\xe0\xb6j]\xbf\x00\x00\x00\xa04\x0f\x8c?\x00\x00\x00 \n,i\xbf\x00\x00\x00\xa0Q\xd4c?\x00\x00\x00\x80\x9d\xe5\x8d?\x00\x00\x00\xe0\xf1\xed\x8c?\x00\x00\x00\x00<\r\x81\xbf\x00\x00\x00\xc0\xc2\x96s?\x00\x00\x00 \x94|i\xbf\x00\x00\x00\x80\x13\x81a?\x00\x00\x00 \xfffr\xbf\x00\x00\x00\xc0yM\x05\xbf\x00\x00\x00`\x85Jf?\x00\x00\x00\xe0)\x9b\x8e?\x00\x00\x00\xa0]4T\xbf\x00\x00\x00\xa0Y\xcc\x80\xbf\x00\x00\x00 j\xffp\xbf\x00\x00\x00 \x12Pn?\x00\x00\x00\x00\xe9mQ?\x00\x00\x00\xa0\xe9\xde|?\x00\x00\x00\x80\xb5h\x94?\x00\x00\x00`\x94\x15r?\x00\x00\x00\x00.dv\xbf\x00\x00\x00@\x02u\x97?\x00\x00\x00\x80\x96Hm?\x00\x00\x00\xc0f\x15m\xbf\x00\x00\x00\xa0!O\x8b\xbf\x00\x00\x00\xe0\x9e\xd1\x91?\x00\x00\x00\xc0\xc8\xfe\x90?\x00\x00\x00\x80\xdf\xb8\x88\xbf\x00\x00\x00\xc0\xcapt\xbf\x00\x00\x00\xe0+p\x86?\x00\x00\x00\x00\xaa\xb8\x86\xbf\x00\x00\x00\xc0\x8f\x19\x80\xbf\x00\x00\x00 \xd2oz\xbf\x00\x00\x00 /\x88{?\x00\x00\x00\x80\x0cmf?\x00\x00\x00\xe0\xc7\xda\x82?\x00\x00\x00\x80\xfc\x1f\x9b\xbf\x00\x00\x00 m/v\xbf\x00\x00\x00\xe0\xd2K\x8a?\x00\x00\x00\x00\xd8s\x81?\x00\x00\x00\xe0/7z\xbf\x00\x00\x00 \xfe\xf3L\xbf\x00\x00\x00\xe0\xc0$\x82\xbf\x00\x00\x00\xc0#\xb1\x8e?\x00\x00\x00@\xf3\x04\x95\xbf\x00\x00\x00 [+f?\x00\x00\x00`\tfQ\xbf\x00\x00\x00\xa0\xd8!{?\x00\x00\x00\x80\xd3\x08\x95\xbf\x00\x00\x00\xa0\x13\xee\x94\xbf\x00\x00\x00`\xbfL\x84\xbf\x00\x00\x00\xe0e\xeaq?\x00\x00\x00`x\'[\xbf\x00\x00\x00\xc0\xbaA\x85\xbf\x00\x00\x00@`E~\xbf\x00\x00\x00 \'\x94\x87\xbf\x00\x00\x00`D\xe1}\xbf\x00\x00\x00\xc0\xc8\xeb\x84\xbf\x00\x00\x00\x00\xb6D\x96\xbf\x00\x00\x00\x00\x9fG{?\x00\x00\x00\x00\x8e\x17\x88\xbf\x00\x00\x00\x80\xec]O?\x00\x00\x00\x00m{n\xbf\x00\x00\x00`\xf1kx?\x00\x00\x00\xe0\xe7\xc6w?\x00\x00\x00\xe0\xf6\xbco\xbf\x00\x00\x00`@\x0er?\x00\x00\x00\x80\rp{\xbf\x00\x00\x00\xc0\x1b>\x81?\x00\x00\x00\x00\x87\r}?\x00\x00\x00`=\xd5\x82?\x00\x00\x00@6Fg\xbf\x00\x00\x00\xe0\xb7\x02\x80?\x00\x00\x00@\xceIy\xbf\x00\x00\x00\xa0>P\x84\xbf\x00\x00\x00\xc0\x1b\xd3x?\x00\x00\x00`\xf0\xbav?\x00\x00\x00\x00v-\x90\xbf\x00\x00\x00 ^W{?\x00\x00\x00\x00A\xf8\x88\xbf\x00\x00\x00@\x1c\xf7t?\x00\x00\x00\xc0X\xd2\x85?\x00\x00\x00\x00\x86&Q\xbf\x00\x00\x00\xc0dx\x85\xbf\x00\x00\x00\x00\xc5-\x90\xbf\x00\x00\x00\x00\xbf\x9ft?\x00\x00\x00\xa0\xcb\xc6t?\x00\x00\x00@.\xe1~\xbf\x00\x00\x00`N\xe4\x8b\xbf\x00\x00\x00 8\xee\x84?\x00\x00\x00\xc0\xcakf?\x00\x00\x00\x80\x81!\x98\xbf\x00\x00\x00\x80\x9c\xb3w?\x00\x00\x00\xa0Y\xddp?\x00\x00\x00@\xef\xd1U\xbf\x00\x00\x00\x80:<\x8d?\x00\x00\x00@NJU\xbf\x00\x00\x00`\xf0\xc3[?\x00\x00\x00\xa0\x02>V\xbf\x00\x00\x00\x80.\x06\x81?\x00\x00\x00\x80\xcc,\x81\xbf\x00\x00\x00\x80\xf0\xe7~?\x00\x00\x00\xa0lIk\xbf\x00\x00\x00\x80\x07\x8b\x97\xbf\x00\x00\x00\x00\xa8Au\xbf\x00\x00\x00\xe0\xd0l\x84\xbf\x00\x00\x00\x80twm?\x00\x00\x00\xe0Y\xc9Z\xbf\x00\x00\x00`O\xee\x89\xbf\x00\x00\x00`\xae\xf8\x97?\x00\x00\x00\xe0W\n>?\x00\x00\x00@\xf8\x1as\xbf\x00\x00\x00`t\x93\x93?\x00\x00\x00\xe0<\xfe{\xbf\x00\x00\x00\xc0\x89\xc6\x87\xbf\x00\x00\x00`\xfb\xd8n?\x00\x00\x00\xe0\xcc\xf1\x87?\x00\x00\x00\x80\xb6\xf8t\xbf\x00\x00\x00\xe0j\x93\x83?\x00\x00\x00`\xe6ti?\x00\x00\x00\x80\xc1\xeby?\x00\x00\x00\x00\xaf6v?\x00\x00\x00`v\xb1B?\x00\x00\x00\xc0^{}\xbf\x00\x00\x00\x001\xcdz\xbf\x00\x00\x00 \xbf\xd2;?\x00\x00\x00\x00#\x90\x87?\x00\x00\x00\xa0IB\x90\xbf\x00\x00\x00\xa02\x86\x83?\x00\x00\x00\xc0\x18Y\x8b\xbf\x00\x00\x00`odM?\x00\x00\x00@,\xc6\x88\xbf\x00\x00\x00\xc0d\xb7d?\x00\x00\x00\x00\x98\xadk?\x00\x00\x00\xc0W\xec\x81\xbf\x00\x00\x00\xc0_\r\x89?\x00\x00\x00\xa0\xb3\xdee?\x00\x00\x00\xa0\xd0?~\xbf\x00\x00\x00@\xabqk\xbf\x00\x00\x00\x80\x13\x97E\xbf\x00\x00\x00 lEc\xbf\x00\x00\x00`\xc9\xab~\xbf\x00\x00\x00\xc0O.w\xbf\x00\x00\x00\xa0\xc49\x93\xbf\x00\x00\x00\x80\xfc\xd2\x84\xbf\x00\x00\x00\xe0\xfb\x13W\xbf\x00\x00\x00\x00\xb5\x85b\xbf\x00\x00\x00 `\xc30?\x00\x00\x00\xe0z\xc9\x8b\xbf\x00\x00\x00`\xd7Q\x95?\x00\x00\x00\xa0GF\x80?\x00\x00\x00\xe0\x1d3\x8b?\x00\x00\x00`\xc4\x0c\x91\xbf\x00\x00\x00`7\xe8\x8d?\x00\x00\x00\x00g\x89~\xbf\x00\x00\x00\xe0:\xaac\xbf\x00\x00\x00\x00\xea\x9f\x80?\x00\x00\x00\xc0\xc6\x99`\xbf\x00\x00\x00@\xaf7w\xbf\x00\x00\x00 \xbd\xcfx?\x00\x00\x00 \x07\x88\x88?\x00\x00\x00\x80\x8c\xafv?\x00\x00\x00@\x9aU\\\xbf\x00\x00\x00\xa0Y\xdd\x89?\x00\x00\x00\xe0O={?\x00\x00\x00\x00\x02\xc8l\xbf\x00\x00\x00\x80\xab\xa0{\xbf\x00\x00\x00`\xf8\xc0q\xbf\x00\x00\x00`\xe7If?\x00\x00\x00\xa0\xd3\t{?\x00\x00\x00 gxq\xbf\x00\x00\x00`\'\xf9\x84\xbf\x00\x00\x00 E&U\xbf\x00\x00\x00\x00\x13\xf0\x86?\x00\x00\x00 \x96c\x81\xbf\x00\x00\x00`\x1f2f?\x00\x00\x00\x80\xff\x1eV?\x00\x00\x00@\xf1\x84\x87?\x00\x00\x00\x00\x93&\x88?\x00\x00\x00\x80\xac\xd9\x87?\x00\x00\x00\xe0\xdb\xcdm?\x00\x00\x00\x00\xe5_\x84?\x00\x00\x00@\x16O\x8c?\x00\x00\x00\x80\xb45b?\x00\x00\x00\xe0\xf8gm\xbf\x00\x00\x00\xc0@\x8cf?\x00\x00\x00\x80!\xad\x86?\x00\x00\x00\x80\xa1Z\x90\xbf\x00\x00\x00\xe0\x87k\x81\xbf\x00\x00\x00\x80f\x8a\x8a\xbf\x00\x00\x00\xe0\x08\x90y?\x00\x00\x00@6\xb8\x91\xbf\x00\x00\x00\xa0\x95@|?\x00\x00\x00\xc0$\xa6p?\x00\x00\x00\xe0\x02\xad\x8a?\x00\x00\x00\xc0\xff\xefH?\x00\x00\x00\xe0~\x17R\xbf\x00\x00\x00@L\xa3y?\x00\x00\x00@W72\xbf\x00\x00\x00\xc0\xa4\xb4j?\x00\x00\x00 \t\x8b\x8c\xbf\x00\x00\x00\x00\x8a\xa5R\xbf\x00\x00\x00@L\x14\x88\xbf\x00\x00\x00`\x1bm\x91\xbf\x00\x00\x00 \x95\x0b[\xbf\x00\x00\x00 \xbcw\x84?\x00\x00\x00 \x19u\x89?\x00\x00\x00\x00\xf1\xf4\x8b\xbf\x00\x00\x00\x00\x80\xa3f?\x00\x00\x00\xc0j<k\xbf\x00\x00\x00\xe0\x92\x9e\x81?\x00\x00\x00@\xdeE\x80?\x00\x00\x00 5\xa4\x85?\x00\x00\x00\x00\x8d\xea\x8c?\x00\x00\x00\xe0\xb5HK?\x00\x00\x00\xa0\x11\xddo?\x00\x00\x00 @1s?\x00\x00\x00\x00\x99wr?\x00\x00\x00@>\xdd\x7f\xbf\x00\x00\x00\x00\xdd\xc3~\xbf\x00\x00\x00\x80a\x16M\xbf\x00\x00\x00\x80\xf3*\x8b\xbf\x00\x00\x00\xe0\xec\xbd\x8a\xbf\x00\x00\x00\xc0%\x01v?\x00\x00\x00`\xf8,`?\x00\x00\x00\xa0mJ\x93?\x00\x00\x00\x80\xd6R@?\x00\x00\x00 )\xad\x91?\x00\x00\x00\xe0\x1e{l\xbf\x00\x00\x00\xe0\x0c\xc0o\xbf\x00\x00\x00\x80c\xc6\x81?\x00\x00\x00\x00M@\x83?\x00\x00\x00\x80o\xc9X?\x00\x00\x00`\xbf\xf8s?\x00\x00\x00@Z\xb3\x94\xbf\x00\x00\x00\xa0\xa4\xaep\xbf\x00\x00\x00\xa0\xb8^\x91?\x00\x00\x00\xa0\xd7\xc9\x84\xbf\x00\x00\x00 9\xa9t\xbf\x00\x00\x00\x00\xe9)s?\x00\x00\x00\xe0\x17\x9bt?\x00\x00\x00 \x97C\xe4>\x00\x00\x00 W\x98}\xbf\x00\x00\x00\xe0N\xf6z?\x00\x00\x00\x803\xe5k?\x00\x00\x00`\xe1\x87\x8c?\x00\x00\x00`\x98\xbd\x80?\x00\x00\x00\xa0\x06|Q\xbf\x00\x00\x00\xc0\xfc\xd9\x10?\x00\x00\x00\xc0\x89\\r\xbf\x00\x00\x00`\xf6\x0eg?\x00\x00\x00\xc0a\xcf\x86\xbf\x00\x00\x00\xc0b\x8d\x91?\x00\x00\x00\x00\xed\xccg\xbf\x00\x00\x00@Oy\x95?\x00\x00\x00 \x0bzs\xbf\x00\x00\x00`h\xea\x8f\xbf\x00\x00\x00`\xf0\x11\x94?\x00\x00\x00@\xd5uz?\x00\x00\x00\xc0#"\'?\x00\x00\x00\x00\x9d3\x8a\xbf\x00\x00\x00@\xbc\x19}?\x00\x00\x00\xc0G\xd9u?\x00\x00\x00\xa0\xe6Hw\xbf\x00\x00\x00\x00\xe1\xb6t?\x00\x00\x00\xe0\xe1Bp?\x00\x00\x00\x00\xab\xa3o\xbf\x00\x00\x00@\x9dp~?\x00\x00\x00\xe0\x8e\xc9\x9f\xbf\x00\x00\x00\xc0\xbdOy?\x00\x00\x00\xa05\xccq?\x00\x00\x00@xi\x82\xbf\x00\x00\x00\xe0("\x8f?\x00\x00\x00\x80\xa7"\x90\xbf\x00\x00\x00\x80\xf2\x02\x80\xbf\x00\x00\x00\x80\x93\xe9\x96\xbf\x00\x00\x00\x80\xab\x02z\xbf\x00\x00\x00\xa0\xb0\x01\x80?\x00\x00\x00`AI\x92?\x00\x00\x00`\x17.\x81\xbf\x00\x00\x00`\x0f\xf9]\xbf\x00\x00\x00\xa0%W\x83\xbf\x00\x00\x00`&:r?\x00\x00\x00 \xfc\xb4{\xbf\x00\x00\x00`}\xc3{\xbf\x00\x00\x00\xc0\xecLx\xbf\x00\x00\x00\xc0G\xd4\x92\xbf\x00\x00\x00\x00\x1eIz\xbf\x00\x00\x00\x007\xbbz\xbf\x00\x00\x00@\xb8\x0c\x81?\x00\x00\x00\x00U{\x80?\x00\x00\x00 t\x7f\x8d\xbf\x00\x00\x00\xc0\xa2\x98n\xbf\x00\x00\x00\xe0Z\xbd[?\x00\x00\x00\x80\x17\xbf\x92?\x00\x00\x00`\xb7#~\xbf\x00\x00\x00\xc0\xd2\xfcy\xbf\x00\x00\x00\xe0\x0ft\x8c?\x00\x00\x00\xe0\xefwg\xbf\x00\x00\x00\xc0^R\x81\xbf\x00\x00\x00@d\x10\x7f?\x00\x00\x00@\\\x1dl?\x00\x00\x00\x00%\xaes\xbf\x00\x00\x00@1\x90h\xbf\x00\x00\x00\x00\n\xbcL?\x00\x00\x00\xc0h\xc3\x85\xbf\x00\x00\x00`\x1e\xece\xbf\x00\x00\x00\xe0\x897\x83\xbf\x00\x00\x00`\x9d\xc8\x8f?\x00\x00\x00`\xf0\rf?\x00\x00\x00\xe0++\x89?\x00\x00\x00 \x02Nb\xbf\x00\x00\x00 \xbb\xe9a\xbf\x00\x00\x00 \x12\xde\x91\xbf\x00\x00\x00\x80\x0bu\x8d?\x00\x00\x00 Y\xb6\x86?\x00\x00\x00\xa0%!\x87?\x00\x00\x00\xc0\xde3\x13\xbf\x00\x00\x00\xa0\x1c\xf5u?\x00\x00\x00\xc0\x85\x16p?\x00\x00\x00\xe0\xd8\x1ej?\x00\x00\x00\xc0\xad\x94a\xbf\x00\x00\x00\x00\xd2|\x88?\x00\x00\x00\x00\xc1\x8d\x93?\x00\x00\x00 Y[t?\x00\x00\x00\x80\xe6\xee\x91?\x00\x00\x00`a\x1er?\x00\x00\x00`(\xf1\x8e\xbf\x00\x00\x00\xe0W\xfbb?\x00\x00\x00`gt\x80?\x00\x00\x00\xa0-\xacb\xbf\x00\x00\x00`\xe1\xff.\xbf\x00\x00\x00\x80\xf3\x18\x89\xbf\x00\x00\x00 \xdb\x13y\xbf\x00\x00\x00@\xb8\xb9A\xbf\x00\x00\x00\xa0\xc8B\x82\xbf\x00\x00\x00@\x14:\x81\xbf\x00\x00\x00\xe0DG\x82\xbf\x00\x00\x00@\xf9\x9dw\xbf\x00\x00\x00\xe0\xc4\x01\x90\xbf\x00\x00\x00\xc0\xd8\xd6p\xbf\x00\x00\x00\xe0\xa2\x8e\x92?\x00\x00\x00\xc0s,\x88\xbf\x00\x00\x00`\xb0C\x83?\x00\x00\x00\x00\x88;\x86\xbf\x00\x00\x00` K\x93?\x00\x00\x00`&\xa7\x90?\x00\x00\x00`nW\x93\xbf\x00\x00\x00\x00\x9d\xda\x83\xbf\x00\x00\x00\x00\xe6X\x95\xbf\x00\x00\x00\xe0\x7fVv\xbf\x00\x00\x00@C\xeb\x81\xbf\x00\x00\x00`\xb2wq\xbf\x00\x00\x00@\xd3\xa0m?\x00\x00\x00\xc0\xd4\xa2\x89\xbf\x00\x00\x00\x00=\xcb\x8b\xbf\x00\x00\x00\xe0\xf0\xf1r?\x00\x00\x00\xc0\xe8\x0b\x8b?\x00\x00\x00`L\x84\x85\xbf\x00\x00\x00\x80\xbd9\x12\xbf\x00\x00\x00\x80)\xe2\x91\xbf\x00\x00\x00\xe0\x13\x85u?\x00\x00\x00\xe0\xa1\r\x0c?\x00\x00\x00\xc0\\\\\x80\xbf\x00\x00\x00\x80\xa9\x19|\xbf\x00\x00\x00\x00\xfe\xabU\xbf\x00\x00\x00\xa0\xe3\x9b|?\x00\x00\x00\xa0{\x97\x7f\xbf\x00\x00\x00 \x94\xa5\x94\xbf\x00\x00\x00@tN\x83\xbf\x00\x00\x00\xa0\'\x99p\xbf\x00\x00\x00@\n\xf3\x93?\x00\x00\x00\xe0h\xfei\xbf\x00\x00\x00 \xb8\xc9\x95\xbf\x00\x00\x00 \xe1\x0cw\xbf\x00\x00\x00\xa0\xb7d\x90?\x00\x00\x00\xa0\xec\xc7\x82?\x00\x00\x00\xa0\xf0s\x8c\xbf\x00\x00\x00@\xa1\x00\x8f\xbf\x00\x00\x00\xe0Fd\x86\xbf\x00\x00\x00`\xff\xe7g?\x00\x00\x00`\x96\xc77?\x00\x00\x00\x80\x06\x87n?\x00\x00\x00\x00q\x7fl\xbf\x00\x00\x00\xa0=\xccv\xbf\x00\x00\x00`\x1a@\x90?\x00\x00\x00\xc0k\xa1\x8e?\x00\x00\x00 s>y\xbf\x00\x00\x00\xe01\xcfq?\x00\x00\x00\xc0\xbe-\x82?\x00\x00\x00`tcj?\x00\x00\x00\x00_un?\x00\x00\x00\xe0\xe8\xdc\x7f\xbf\x00\x00\x00\xe0<E{\xbf\x00\x00\x00\xc0\n\x96e\xbf\x00\x00\x00`\xfd\xa5v?\x00\x00\x00\xa0\x00\xdc>?\x00\x00\x00\xa0#Ty?\x00\x00\x00`\xe7ox?\x00\x00\x00@\xaca\x8e\xbf\x00\x00\x00\xc0\x15\x14\x83?\x00\x00\x00\xa0\x0f\x94\x91?\x00\x00\x00`W\r`?\x00\x00\x00\x00V\xeep\xbf\x00\x00\x00\x80\xcc!\x87?\x00\x00\x00\xa01e`\xbf\x00\x00\x00\xe0\xe5`\x84?\x00\x00\x00`O!\x83\xbf\x00\x00\x00@\xf2\xbf|?\x00\x00\x00\x00\x02\xb1v\xbf\x00\x00\x00\xc0\x9e\x8bv\xbf\x00\x00\x00\x00\xcd\xa8\x96?\x00\x00\x00\x00\x12\x8f{?\x00\x00\x00\xa0\xec\xfd\\?\x00\x00\x00@\xe5\xa8P?\x00\x00\x00\x00\xca\xabf\xbf\x00\x00\x00@5\xc8~?\x00\x00\x00\x80\xfb\xe6h\xbf\x00\x00\x00 ]\xcd\x85?\x00\x00\x00@\xec\x99y?\x00\x00\x00\xe0\xc2&\x80\xbf\x00\x00\x00\xe0\xees\x80?\x00\x00\x00\xc0\xdcjr?\x00\x00\x00\x00\xbf~J\xbf\x00\x00\x00 \xa2er?\x00\x00\x00\xa0$\x1cl\xbf\x00\x00\x00@\xfa\x1eg\xbf\x00\x00\x00\xa0\xbf\x96~\xbf\x00\x00\x00\xa0Zb\x83\xbf\x00\x00\x00@S\n\x80\xbf\x00\x00\x00\xc0\rI\x88?\x00\x00\x00\xc0y\xd6y\xbf\x00\x00\x00 \x18+l\xbf\x00\x00\x00@\xdfx\x85?\x00\x00\x00\xe0^\xb0\x92?\x00\x00\x00\x80\xf6zP\xbf\x00\x00\x00\x80\xe2=\x92\xbf\x00\x00\x00\xc0\xf6\x1bv\xbf\x00\x00\x00@{\x13t?\x00\x00\x00\x003\xa9\x95?\x00\x00\x00 \xcd\x06\x7f?\x00\x00\x00@\xb3/\x84?\x00\x00\x00\xa0\xe3,\x84\xbf\x00\x00\x00@\xe9\x02\x91?\x00\x00\x00\x80#N\x8f\xbf\x00\x00\x00\xc0\x7f2P?\x00\x00\x00`\x02\x1ev?\x00\x00\x00\x00\xfa\x88\x89\xbf\x00\x00\x00\xa0\xde\x8b|\xbf\x00\x00\x00\xa0\xedIt?\x00\x00\x00\x00\xea\x06{?\x00\x00\x00\xe0\xbag\x8e?\x00\x00\x00 \xdcY\x86?\x00\x00\x00@m\xb9,?\x00\x00\x00@\xed\xddT?\x00\x00\x00`\xd0h\x80?\x00\x00\x00\xa0!\xf6\x91?\x00\x00\x00\xe0k\xd9x\xbf\x00\x00\x00\xe0T\x96\x81?\x00\x00\x00 OE\x94?\x00\x00\x00\x00\x7f\xddq\xbf\x00\x00\x00`F;\x80\xbf\x00\x00\x00`\xa8r}?\x00\x00\x00`>_s?\x00\x00\x00\x00B\xa7w\xbf\x00\x00\x00\xa0\xcf\x8f\x80\xbf\x00\x00\x00\xe05Jj\xbf\x00\x00\x00\xe0S6\x85?\x00\x00\x00\xa0@\x99y?\x00\x00\x00 >\xb2\x8f?\x00\x00\x00 \xbd\xf6C\xbf\x00\x00\x00\xc0\xb8g(?\x00\x00\x00 \xcf\x93\x83?\x00\x00\x00\xe0\xb0WQ\xbf\x00\x00\x00\xa0\x13\xc3\x8f?\x00\x00\x00\xe0{\xeeS\xbf\x00\x00\x00@o\x84^\xbf\x00\x00\x00\x80\xab\x02\x81\xbf\x00\x00\x00\xe0n\xf0@\xbf\x00\x00\x00`\x1c\x17y?\x00\x00\x00`\x9dmb\xbf\x00\x00\x00\xc0\xa9o\x8a?\x00\x00\x00\xe0\t\x88p?\x00\x00\x00`\xfb\x7fu?\x00\x00\x00\xc0?s\x86\xbf\x00\x00\x00\xe0\tyz\xbf\x00\x00\x00@\x89\x14f\xbf\x00\x00\x00\x00\x92%\x8a\xbf\x00\x00\x00@\xb9\x19\x85\xbf\x00\x00\x00\xa0<\x95~\xbf\x00\x00\x00\xe0\x0c\xd2\x80\xbf\x00\x00\x00\xc0\x89\x0eg\xbf\x00\x00\x00\xe0\xc4,\x88\xbf\x00\x00\x00 \x16\x08l\xbf\x00\x00\x00\xc0EIo?\x00\x00\x00\x00\x9d\x15\x90\xbf\x00\x00\x00\xc0\x8f\x90v?\x00\x00\x00\xa00\xf3y\xbf\x00\x00\x00\xe0\xb9\xb6w\xbf\x00\x00\x00\xc0\x89)`\xbf\x00\x00\x00\xa0\xc9\xe0v?\x00\x00\x00\x80\x14\xbdj?\x00\x00\x00\xe0\xdfQ\x92?\x00\x00\x00 \xe7#V\xbf\x00\x00\x00 \xf0\xf7\x81\xbf\x00\x00\x00@\xba\xdb\x90\xbf\x00\x00\x00\xe0QO\\\xbf\x00\x00\x00`C\x05\x80\xbf\x00\x00\x00\xe0\xaa\x98\x85?\x00\x00\x00 \xd2\x8b\x95?\x00\x00\x00`\xe8eo\xbf\x00\x00\x00\x00\xea\xfb\x8e\xbf\x00\x00\x00\x80\xe6\xf7E\xbf\x00\x00\x00\x80\xab9~?\x00\x00\x00`oXd?\x00\x00\x00@}k\x84\xbf\x00\x00\x00@Ao|\xbf\x00\x00\x00 \x95\x82\x92\xbf\x00\x00\x00\x005 \x84?\x00\x00\x00`a\x80b\xbf\x00\x00\x00\xc0op\x8a?\x00\x00\x00`T\xd4r\xbf\x00\x00\x00\xc0\xbf\xbcq\xbf\x00\x00\x00`\xc88\x82\xbf\x00\x00\x00 k^k?\x00\x00\x00@\x10\x12\x90?\x00\x00\x00\xe0\xc56\x90\xbf\x00\x00\x00\xa0\x01\x9fe\xbf\x00\x00\x00\xa0\xa16}\xbf\x00\x00\x00`J0\x7f?\x00\x00\x00@FKs?\x00\x00\x00\xa0\x86\x03\x8e\xbf\x00\x00\x00\xc0X\xfd|\xbf\x00\x00\x00\xe0\xb0W`\xbf\x00\x00\x00@\x05\xf4\x81\xbf\x00\x00\x00\x803\xcdJ?\x00\x00\x00\xc0)\x9c-\xbf\x00\x00\x00\xc0L\xef\x8a\xbf\x00\x00\x00\x80\x96\x10h?\x00\x00\x00\x805\xb7Q?\x00\x00\x00\x00\xa2\xc2x\xbf\x00\x00\x00\x00itw?\x00\x00\x00\x80I\xd7??\x00\x00\x00\xa0\xa9\xb8}?\x00\x00\x00\xc0$\xee\x85?\x00\x00\x00@\xa4\x1a\x89?\x00\x00\x00\x00\xd9\xb6f\xbf\x00\x00\x00\x80\xfb\x01i\xbf\x00\x00\x00\xe0-Dx?\x00\x00\x00\x00\x91E\x8c?\x00\x00\x00\x00X\x9c\x86?\x00\x00\x00\x80\x92`\x8b\xbf\x00\x00\x00\xc0\xd5\x87j\xbf\x00\x00\x00\xa0\x9d\xa0s\xbf\x00\x00\x00\x00\x19\x95\x85?\x00\x00\x00\xa0\x1f\x0bk?\x00\x00\x00\xc0e\xa5k\xbf\x00\x00\x00\x00\x9b.u\xbf\x00\x00\x00\x80i\xac}\xbf\x00\x00\x00\xe0 \xd3\x85\xbf\x00\x00\x00\x00\xe8\xf5\x87\xbf\x00\x00\x00\x80\xfc f?\x00\x00\x00\x80\xce\xf1a\xbf\x00\x00\x00\x00Fm\\\xbf\x00\x00\x00\xe0\x85\x84\x80?\x00\x00\x00 SH_?\x00\x00\x00 \xb6\xaa{?\x00\x00\x00\x80U\x97\x80\xbf\x00\x00\x00\xa0f*\x80?\x00\x00\x00\x80\xbcbn?\x00\x00\x00\x007\x8f\x84\xbf\x00\x00\x00\x00\xf6^G\xbf\x00\x00\x00\xe0V\x0cT\xbf\x00\x00\x00@\x89l\x89\xbf\x00\x00\x00\xa0\xa4R\x83?\x00\x00\x00\xa0\xde,\x8a\xbf\x00\x00\x00\xc0\xfaX\x8d\xbf\x00\x00\x00`\xa4ng?\x00\x00\x00\xa0\xf2\xcf\x8f\xbf\x00\x00\x00\xe0n\xfc\x87?\x00\x00\x00\xe0\x80\xb2\x86?\x00\x00\x00\xe0\xf4Zp\xbf\x00\x00\x00@\xc8\xb8t?\x00\x00\x00 \xeas\x87?\x00\x00\x00\x801rk?\x00\x00\x00@\x80\n\x8e?\x00\x00\x00\xc0{\xc8\x99\xbf\x00\x00\x00\xa0\xe5_\x87?\x00\x00\x00 ^E\x94?\x00\x00\x00\x00\xd5\xa7|\xbf\x00\x00\x00\xc0\xd7KB\xbf\x00\x00\x00 l\xa4E?\x00\x00\x00 \x88jh\xbf\x00\x00\x00\xa0\x12\xf2\x81\xbf\x00\x00\x00\x80u\xa1\x8c\xbf\x00\x00\x00\xe0\xe0\xf0x?\x00\x00\x00\x00{\x10w\xbf\x00\x00\x00@\xcb\x92m\xbf\x00\x00\x00\xe0\xa1NZ?\x00\x00\x00`\xca\xbfm?\x00\x00\x00\x80\x03,r\xbf\x00\x00\x00\x00\x91\x89z?\x00\x00\x00\x00Q\x80\x7f?\x00\x00\x00\xe0\x8f\xe7x?\x00\x00\x00\xc0/\xd0\x96?\x00\x00\x00\xc0C \x95\xbf\x00\x00\x00\x80\x8b\x93h?\x00\x00\x00`\x183Z?\x00\x00\x00\xe0\xeep\x83?\x00\x00\x00\x00^?\x82?\x00\x00\x00\xa0E\xdfW?\x00\x00\x00`\xe9\xfa\x92?\x00\x00\x00 H\xa0\x82\xbf\x00\x00\x00\x80\x95\xf0O?\x00\x00\x00`\xf1x\xfd>\x00\x00\x00\xa0\x06\xea\t\xbf\x00\x00\x00`\x1f\xfe{\xbf\x00\x00\x00\xa0[\xdbY?\x00\x00\x00\xa0\x19\x99\x80?\x00\x00\x00\xa0\xc0C\x92?\x00\x00\x00 \x8d3t\xbf\x00\x00\x00\x00\x81\xbaR\xbf\x00\x00\x00\xe0QB\x8b?\x00\x00\x00\x80\x0f\x00}\xbf\x00\x00\x00\x80/\xbfi\xbf\x00\x00\x00@0\xad^\xbf\x00\x00\x00\x80\x12H\x8d?\x00\x00\x00\xc0\xc8\xb4y\xbf\x00\x00\x00\x00\xac)n\xbf\x00\x00\x00\xa0\x95KI\xbf\x00\x00\x00\xa0w\xa0\x8d\xbf\x00\x00\x00\x80\xce\x98q?\x00\x00\x00@\xd0\x9f\x97?\x00\x00\x00\x008\x92`\xbf\x00\x00\x00\xa0\xf0\xdf\x80\xbf\x00\x00\x00\xe07\x14v\xbf\x00\x00\x00\xc0\xa3\xd3\x80\xbf\x00\x00\x00\x00\xae\x83M\xbf\x00\x00\x00@\xc3as?\x00\x00\x00\x80\xbe\xf2\x86?\x00\x00\x00\xc0\xe5\x1f\x8a?\x00\x00\x00\x001n\x7f?\x00\x00\x00`e\xbc`?\x00\x00\x00\xa0\x91\xbb\x8b?\x00\x00\x00\xc0\xcf\xb1+?\x00\x00\x00@\xb5*\x81?\x00\x00\x00\xa0\x1b\xbd\x7f?\x00\x00\x00\x00"\xb4t\xbf\x00\x00\x00\xa0\x1c%\x93\xbf\x00\x00\x00\xa0\xd4\xb4\x8c?\x00\x00\x00\xe0\x16K\x94?\x00\x00\x00`8\xd8\x7f?\x00\x00\x00\x801\xb0X\xbf\x00\x00\x00 \x89\x0f\x80?\x00\x00\x00\xe0{\xcb}?\x00\x00\x00@p\xb0y?\x00\x00\x00@\x1f\xefU\xbf\x00\x00\x00\xa0\x15\x0b\x87\xbf\x00\x00\x00\xc0m\xe2w?\x00\x00\x00`Y\x98\x81?\x00\x00\x00\xc0\x9c \x98?\x00\x00\x00\xc0\xe7\xb7e?\x00\x00\x00\xc0\x93\xc6b?\x00\x00\x00@]\xc3l\xbf\x00\x00\x00\x80\xcf\x13\x80\xbf\x00\x00\x00 G\x85\x8e?\x00\x00\x00\x80KG\x86\xbf\x00\x00\x00\xa02\xb4\x8c?\x00\x00\x00`\xac\x82\x8f?\x00\x00\x00\xa0\x8d?c\xbf\x00\x00\x00\x00\xa1\x8b\x84\xbf\x00\x00\x00\xa0\x81\x89s\xbf\x00\x00\x00 d\xcf\x85\xbf\x00\x00\x00\x00\xa9\x98\x85?\x00\x00\x00\xa0j\xa8\x94?\x00\x00\x00\xc0]\x81D\xbf\x00\x00\x00\xa0\xf6PR?\x00\x00\x00`l\x8f\x80\xbf\x00\x00\x00\x80\xa0\x02\x83?\x00\x00\x00\x00\xe1\x99g?\x00\x00\x00`\xcf\x12\x92?\x00\x00\x00\xc0m\r\x93\xbf\x00\x00\x00\xe0R+u\xbf\x00\x00\x00\x80\x0b\x93a\xbf\x00\x00\x00 ga\x8e?\x00\x00\x00\x00/\x9b{?\x00\x00\x00@=\xbeq\xbf\x00\x00\x00\x80dv\x90?\x00\x00\x00\xe0\xd8\xb6e\xbf\x00\x00\x00 5yd?\x00\x00\x00@ \x1d~?\x00\x00\x00\x80\x06+\x93?\x00\x00\x00\xc0w\x1dI?\x00\x00\x00\xa0\xed\x1cp?\x00\x00\x00`\xd7/\x88\xbf\x00\x00\x00 \xb9\xf0v?\x00\x00\x00\xe0\xcc\x90g\xbf\x00\x00\x00\xc0\xe0\xf8f?\x00\x00\x00@J%\x91?\x00\x00\x00\x80|#\x83\xbf\x00\x00\x00`&\xcc\x8a?\x00\x00\x00@\'c\x97?\x00\x00\x00\xc0E\x0c\x84?\x00\x00\x00`h\xf3\x8c\xbf\x00\x00\x00@\xbe`}?\x00\x00\x00@T\x92C\xbf\x00\x00\x00\xc0\xa2\x90\x90?\x00\x00\x00\x00l\xd1\x8b?\x00\x00\x00\x00\xc3\x0b\xa0\xbf\x00\x00\x00\x00Z/M\xbf\x00\x00\x00 y\x14\x8d?\x00\x00\x00\x00\x8e\xce\x97\xbf\x00\x00\x00\x00*N\xe7>\x00\x00\x00\x80\x86\ns\xbf\x00\x00\x00\xe0\x1d\xc5\x8d\xbf\x00\x00\x00`Ir\x8f?\x00\x00\x00 \x94$H?\x00\x00\x00\xe0b\x96r\xbf\x00\x00\x00\x80k;7?\x00\x00\x00\xe0E\xaa\x82?\x00\x00\x00\xc0vB\x8a?\x00\x00\x00\xe0\xf6\xfbo\xbf\x00\x00\x00@\x0f\x0f\x99\xbf\x00\x00\x00`\x87\x04e\xbf\x00\x00\x00\xe0\x9d\x89m?\x00\x00\x00\xc0\x8e\xc2q?\x00\x00\x00\xc0Q!\x87?\x00\x00\x00`\xed\xcbU\xbf\x00\x00\x00\xe0P\xd0\x92?\x00\x00\x00`\xf6\n\x9f?\x00\x00\x00 \xa4Eb\xbf\x00\x00\x00 z\n\x8d?\x00\x00\x00\xa0w\x98v\xbf\x00\x00\x00\xe0\'\xeba?\x00\x00\x00 \x88\x04a?\x00\x00\x00@\x85\x9ci?\x00\x00\x00\x80\xc7\x94u?\x00\x00\x00\xc04CP\xbf\x00\x00\x00\xe0A\xb1\x85?\x00\x00\x00\x00-\xb5\x8e\xbf\x00\x00\x00@J\x02y\xbf\x00\x00\x00`\xcb\x9a\x86\xbf\x00\x00\x00\xc0\xac\xfdu?\x00\x00\x00\x00y\x1fM\xbf\x00\x00\x00\xa0\x86\xd8n\xbf\x00\x00\x00\xc0}P\x83\xbf\x00\x00\x00\xa0x\xd9T\xbf\x00\x00\x00\xc0\x07q\x90?\x00\x00\x00\x00\x80ep?\x00\x00\x00\x00\x07k\x91?\x00\x00\x00\x00\xb0\xf34?\x00\x00\x00@\x84\xc87\xbf\x00\x00\x00@\xd1\x1el\xbf\x00\x00\x00\xe0\x9c\xc0S?\x00\x00\x00\x00L\xc5\x8c?\x00\x00\x00@\x03\x99\x85?\x00\x00\x00`O>d\xbf\x00\x00\x00@\xe5\x12i\xbf\x00\x00\x00\x00}\x03s\xbf\x00\x00\x00\xe0Z\x9f~\xbf\x00\x00\x00\xe0\xcb\xc1\x94\xbf\x00\x00\x00\x00\xc1\xecy?\x00\x00\x00\xe0\xf5\xb0\x85?\x00\x00\x00\xc0\xcd\xd4\x85\xbf\x00\x00\x00@\xe2\x94\x7f\xbf\x00\x00\x00\xe0\xaa\xef4\xbf\x00\x00\x00\x00\xc8\x80\x90?\x00\x00\x00\x80\'^\x92\xbf\x00\x00\x00 \xcb\'\x91?\x00\x00\x00\xa0\x9f#f?\x00\x00\x00\xc0\xdd\xeeg?\x00\x00\x00`\xd8.u\xbf\x00\x00\x00\x00B<>?\x00\x00\x00`\x90\xd0\x85?\x00\x00\x00\xe0\\\x16}?\x00\x00\x00`\xd1E\x8a\xbf\x00\x00\x00@\x8d\xd0\x87\xbf\x00\x00\x00\x00\xd9\x7f$\xbf\x00\x00\x00\xe0\xe4\x0b\x9a\xbf\x00\x00\x00\xa0\x85\xca\x91?\x00\x00\x00`_\x12\x8d\xbf\x00\x00\x00\x80[\xefi?\x00\x00\x00\xc0\xd0a3?\x00\x00\x00\xe0\xf3\tu?\x00\x00\x00 \xdb`r\xbf\x00\x00\x00\xc0L\xfbs?\x00\x00\x00\x80\xc2\xcdp\xbf\x00\x00\x00`\xe5d\x86\xbf\x00\x00\x00\x00\x0c\xcew\xbf\x00\x00\x00 u7u?\x00\x00\x00\x00\xb45s\xbf\x00\x00\x00\xa0\xfdM\x8c?\x00\x00\x00\xa0\xa6\x8eo\xbf\x00\x00\x00\xa0?:\x83\xbf\x00\x00\x00\xc00\xf3I\xbf\x00\x00\x00 \xed\\\x82?\x00\x00\x00\x00\x06\\\x85?\x00\x00\x00 \x99Tw?\x00\x00\x00\xc0tz\x9a\xbf\x00\x00\x00 \x14lq\xbf\x00\x00\x00\x00\x94\xb3h?\x00\x00\x00`\x0c\x99{\xbf\x00\x00\x00 \xddX\x84?\x00\x00\x00\x80\x9c\x0b\x83\xbf\x00\x00\x00\xe0\x0e\x0bx\xbf\x00\x00\x00\x80\x06x\x83\xbf\x00\x00\x00\xe0\xd5s\x85?\x00\x00\x00\xa0\xbc\x1b\x81\xbf\x00\x00\x00`\xc6\x18\x86?\x00\x00\x00\x00\xdfUl?\x00\x00\x00 \x8e\x0fz?\x00\x00\x00\xe0m\xb5u\xbf\x00\x00\x00 !\x97P\xbf\x00\x00\x00\xa0\xa7\x12u\xbf\x00\x00\x00\xc0,U\x8e\xbf\x00\x00\x00\xe0\xbf%}?\x00\x00\x00\xa0\xcb\x8c\x81\xbf\x00\x00\x00`<\xb5\x8a\xbf\x00\x00\x00 \x99\xa0\x97\xbf\x00\x00\x00\x00\xecB{?\x00\x00\x00@9B\x92?\x00\x00\x00@\xd0\x9b`\xbf\x00\x00\x00@].\x92?\x00\x00\x00 v\xbcu?\x00\x00\x00\x00m\xf5\x8a\xbf\x00\x00\x00\x80Usz?\x00\x00\x00\xa0\xd9\xb1\x8c\xbf\x00\x00\x00@)Ml?\x00\x00\x00@\xf6\xbf^\xbf\x00\x00\x00\xc0\xd80\x8f?\x00\x00\x00\xe0\x8f\xc7z?\x00\x00\x00\x80z\xc8\x8e?\x00\x00\x00\xc0\x93\x1ec\xbf\x00\x00\x00\xe0\xbd\x1av?\x00\x00\x00 j\xcf\x88\xbf\x00\x00\x00\xc0\xbe\xc7(\xbf\x00\x00\x00\xe0\xb2S\x8b?\x00\x00\x00@\xf2\xf4t?\x00\x00\x00 \x02\x17a\xbf\x00\x00\x00@Ijq\xbf\x00\x00\x00\x00\xe1!u?\x00\x00\x00\x80\x86\xfbf?\x00\x00\x00\xa0\x9f\\e\xbf\x00\x00\x00`=\xc3\x83\xbf\x00\x00\x00\xe0s\xca\x8e?\x00\x00\x00\x80\xf2\xf7\x8d?\x00\x00\x00\xc0\xd6\x0c`\xbf\x00\x00\x00\xe0\xbe\x8fC\xbf\x00\x00\x00\xa0\xd4wU?\x00\x00\x00\xc0\x8fz\x9c?\x00\x00\x00\xe0Y\xda\x90?\x00\x00\x00\xe0\xf8\xa6b\xbf\x00\x00\x00\x80e%\x8e?\x00\x00\x00 Iu@\xbf\x00\x00\x00@\xf1\x9b|\xbf\x00\x00\x00\xe0\x91\xb1y?\x00\x00\x00\x80~IQ\xbf\x00\x00\x00\xa0Q\x0c\x8f\xbf\x00\x00\x00@\xe9u\x80?\x00\x00\x00\x00k\xebd\xbf\x00\x00\x00@-!y\xbf\x00\x00\x00`\x15\x94\x81\xbf\x00\x00\x00\xe0\xf5\x87c\xbf\x00\x00\x00\xa0x\xb5\x93?\x00\x00\x00\x00\x10\xc7\x81?\x00\x00\x00\xa0\xa5,z\xbf\x00\x00\x00\x80\xa5\x18e\xbf\x00\x00\x00\x00$\x08\x87?\x00\x00\x00`&\xe7\x86\xbf\x00\x00\x00 \n\xd7j\xbf\x00\x00\x00`S\xc9u?\x00\x00\x00\x80\x9ex\x7f\xbf\x00\x00\x00\xe0AA\x87?\x00\x00\x00\xa0}bv\xbf\x00\x00\x00 \xec\x0ed?\x00\x00\x00 \xbc\x11T\xbf\x00\x00\x00@\xfa\rj?\x00\x00\x00 i1\x86?\x00\x00\x00 \xed\x1f\x89?\x00\x00\x00\xe0\xd9Q[\xbf\x00\x00\x00\xa0\x81B\x86\xbf\x00\x00\x00\xc0\x91q\x86\xbf\x00\x00\x00 |\x89Y?\x00\x00\x00@!\xf0\x83\xbf\x00\x00\x00\x00\xe7\xf3\x91\xbf\x00\x00\x00\x80\x03\xf5Y\xbf\x00\x00\x00\xe0 \xa2X\xbf\x00\x00\x00`\xa4$}?\x00\x00\x00 \xbb\xb1K\xbf\x00\x00\x00\xa0&\xe8\x80?\x00\x00\x00\xc0G\xc1u?\x00\x00\x00\xa0,\x8e|?\x00\x00\x00`\x80UZ\xbf\x00\x00\x00\xa0\x15o\x8d\xbf\x00\x00\x00\x80\xe6\xf6Y?\x00\x00\x00 u\xbb\x8c\xbf\x00\x00\x00@\x0e\xba\x84\xbf\x00\x00\x00\xc0\xb0\xccU\xbf\x00\x00\x00@\x02\xb1s?\x00\x00\x00\x80\xf8tt?\x00\x00\x00@\n\x97b?\x00\x00\x00 \x03\xca\x83?\x00\x00\x00 R6\x92\xbf\x00\x00\x00\xc03\xeb}?\x00\x00\x00`\xf53\x8a\xbf\x00\x00\x00\xc0V\xa2\x82\xbf\x00\x00\x00\x00\x99\xe6\x84\xbf\x00\x00\x00 7\xbce?\x00\x00\x00`\x82\x9f\x8b\xbf\x00\x00\x00\xe0\x8b\x89\x81\xbf\x00\x00\x00@aD_?\x00\x00\x00`\xbd\xee\x90?\x00\x00\x00\xc0\x1a\x10`?\x00\x00\x00@f-w?\x00\x00\x00\xe0\xb5\x1c_\xbf\x00\x00\x00\x00\xeb\x82\x91?\x00\x00\x00\xe0v\xd3\x84\xbf\x00\x00\x00`JH\x84?\x00\x00\x00\xe0\xad\x7f\x8a\xbf\x00\x00\x00\xc0D\xd65?\x00\x00\x00@\x13\x0e\x81\xbf\x00\x00\x00`\xb1\x9f~?\x00\x00\x00`\xf7D\x7f?\x00\x00\x00\x00\xce\x1cy\xbf\x00\x00\x00\xe0\xc3~\x86\xbf\x00\x00\x00\x00=\x05e\xbf\x00\x00\x00\xa0\t\xe1l?\x00\x00\x00 \x90yd?\x00\x00\x00\xe0}\x1c\x89?\x00\x00\x00\xe0\x90\xbd\x91?\x00\x00\x00\xa05\xe6\x84?\x00\x00\x00\xa02\x9f\x84\xbf\x00\x00\x00\x80\xa7\x93y?\x00\x00\x00\xe0\x05\x95w?\x00\x00\x00\xc0\x9a.\x14?\x00\x00\x00 \xba\xd9T?\x00\x00\x00 \xfc\x9b\x8c\xbf\x00\x00\x00\xc0n\xa4?\xbf\x00\x00\x00\xa0!\xbft\xbf\x00\x00\x00\xa0\xba\xc6\x98?\x00\x00\x00\x00X\x1bo\xbf\x00\x00\x00\xa0qZ\x88\xbf\x00\x00\x00\xc0\xafP\x91?\x00\x00\x00 \xe08\x88\xbf\x00\x00\x00\x80XS\x96\xbf\x00\x00\x00\xc0\xf9\x94\x8e\xbf\x00\x00\x00\xa0\xbf\x99p?\x00\x00\x00`/\xe4p\xbf\x00\x00\x00\xc0\xec\xa3\x86\xbf\x00\x00\x00 \x8f\xe1\x87?\x00\x00\x00`?s~\xbf\x00\x00\x00\xc0\xf5\x96\x8f?\x00\x00\x00\x80\x86)v?\x00\x00\x00@\x89\xf3\x9a\xbf\x00\x00\x00\xe0\x12\xa1t\xbf\x00\x00\x00\xc0\xfd\xee8\xbf\x00\x00\x00\xc0\xb0\xfb\x84\xbf\x00\x00\x00\xe0\xf5\x12\x90\xbf\x00\x00\x00\xa0\x92\xe3{?\x00\x00\x00\x00Z\xc3\x8a\xbf\x00\x00\x00 \x8b\xd0\x87?\x00\x00\x00 \xcf\xc9\x82?\x00\x00\x00`\xa7\xa0u\xbf\x00\x00\x00\x00\xd1\xa4u\xbf\x00\x00\x00`\xb9\xf8\x95?\x00\x00\x00\xc09\xedy?\x00\x00\x00`\xa2\xa9a?\x00\x00\x00@\xcd\x03\x80\xbf\x00\x00\x00 \x8e\x8f}\xbf\x00\x00\x00\xc0\xa3\xd6d\xbf\x00\x00\x00\xa0!\xd6Y\xbf\x00\x00\x00\xc0\xbaY\x80\xbf\x00\x00\x00\xc0t\xad\x80\xbf\x00\x00\x00\xa0V\x7f\x89\xbf\x00\x00\x00`\x0c\xc3\x81\xbf\x00\x00\x00 \xce\xc6\x83?\x00\x00\x00`\xffZ\x89\xbf\x00\x00\x00\x805q|?\x00\x00\x00 f\xe8\x8e\xbf\x00\x00\x00\x00}\x90\x90\xbf\x00\x00\x00\xe0A\x95~?\x00\x00\x00\xe0\xba\x06\x80?\x00\x00\x00\xe0\xac\x01T\xbf\x00\x00\x00\x00\xd2\x03r?\x00\x00\x00\x80\x14\xeb\x97\xbf\x00\x00\x00@\x83Ow?\x00\x00\x00 \xe0R\x8f?\x00\x00\x00\x80\xf5\x08\x8a\xbf\x00\x00\x00`\xcd\xcaz\xbf\x00\x00\x00\x00\xd3\xcd\x86\xbf\x00\x00\x00\x80\x93\xe1\x83\xbf\x00\x00\x00\xe0\x98\xfe|?\x00\x00\x00\xe0\xeb\x87t\xbf\x00\x00\x00\x00\xc0\t\x8c?\x00\x00\x00`\xee\xeae\xbf\x00\x00\x00\xe0\xf6\xb0q\xbf\x00\x00\x00\xa0\x01Z\x90\xbf\x00\x00\x00\xa0\x11\xc7\x7f?\x00\x00\x00\xc07\x90z\xbf\x00\x00\x00@\xa5\xc9\x86?\x00\x00\x00\xa0!\x00l\xbf\x00\x00\x00\x80\xca\xb5h\xbf\x00\x00\x00@\xe1\x04a\xbf\x00\x00\x00\xa0L\xe1\x85?\x00\x00\x00\x004%j?\x00\x00\x00\xc0\xa6\xecb\xbf\x00\x00\x00\x00\x94\xe8\x80?\x00\x00\x00`\x88\xa6s\xbf\x00\x00\x00@i2{?\x00\x00\x00\xa0\xe6f\x8c\xbf\x00\x00\x00\x00\xd4/\x8f\xbf\x00\x00\x00\xa0\xa2\x95t\xbf\x00\x00\x00 \x97%\x88\xbf\x00\x00\x00`\xc2\xd3e\xbf\x00\x00\x00 \x18\xd7>?\x00\x00\x00 .w\x93\xbf\x00\x00\x00 +\xf0l\xbf\x00\x00\x00\xc0\xd3Y\x8f?\x00\x00\x00\x80\xf27\x80?\x00\x00\x00\xc0\x05\xd9\x89?\x00\x00\x00@g\x91j?\x00\x00\x00\x00\x85#\x8d?\x00\x00\x00\xe0\x05V\x95\xbf\x00\x00\x00 \xef\xdb\x86?\x00\x00\x00\xe0\xcf\xfa\x94?\x00\x00\x00\x00\x92Vv?\x00\x00\x00\xc0\x12\x15m?\x00\x00\x00\xc0\xeaTp?\x00\x00\x00 e\xaby?\x00\x00\x00`\x17P[?\x00\x00\x00\x00\xd86j\xbf\x00\x00\x00\xe0\x03u\x93\xbf\x00\x00\x00\xa0\xa3\x89\x80\xbf\x00\x00\x00\xa0\x10}\x82?\x00\x00\x00 \xe3\x1fg?\x00\x00\x00\x00;\xbdg\xbf\x00\x00\x00\x80a\xf0z\xbf\x00\x00\x00\x80\x1fFK?\x00\x00\x00\xa0\x18\xf1\x96\xbf\x00\x00\x00\xa0:\x88b?\x00\x00\x00\xa0j\xff\x97\xbf\x00\x00\x00@\x03\xb2m\xbf\x00\x00\x00`\xe7\xdeR?\x00\x00\x00\xa0L\x0bY?\x00\x00\x00 \x18\x03\x95\xbf\x00\x00\x00\xc0\xfe\xa6\x89?\x00\x00\x00\x00$ra?\x00\x00\x00\xc0Z\xa0j?\x00\x00\x00@\xee\xe8\x91\xbf\x00\x00\x00 \xc7\x97s?\x00\x00\x00\xe0\x86\xc0~?\x00\x00\x00@i\x8a\x95\xbf\x00\x00\x00\xe0\xe9\xfdC\xbf\x00\x00\x00\xc0\xcd\x14q\xbf\x00\x00\x00 H\xb2]?\x00\x00\x00\x80]\x15j?\x00\x00\x00\xc0\xad\xa9I?\x00\x00\x00\x80\x9e$v\xbf\x00\x00\x00\xa05\xb1_?\x00\x00\x00\xa0I\x17\x8c\xbf\x00\x00\x00\x80\x92\xd5-?\x00\x00\x00`\xa4m\x16?\x00\x00\x00\xc0\xeaL\x8b\xbf\x00\x00\x00\x00\x11\xe3\x8d?\x00\x00\x00\xc0\xa7\xd6<?\x00\x00\x00 E\x85\x86?\x00\x00\x00\xc0\xe1IR?\x00\x00\x00\xe0G\xa4s?\x00\x00\x00\x00\x1a\xca\x96\xbf\x00\x00\x00@XKc\xbf\x00\x00\x00@\x88\x93I?\x00\x00\x00\x00>\x9f%?\x00\x00\x00\x00-e\x88\xbf\x00\x00\x00\xa0\x86:\x94?\x00\x00\x00\xc0\xa9\xbc\x97\xbf\x00\x00\x00 \xfb\x01\x7f\xbf\x00\x00\x00 \xb0E\x8a\xbf\x00\x00\x00\x80\xf2R\x83?\x00\x00\x00\xe0\x8e+x?\x00\x00\x00 \xf8q\x9a?\x00\x00\x00@\xc4\xa7a\xbf\x00\x00\x00\xc0\xd2u\x87?\x00\x00\x00 ^\xe0e?\x00\x00\x00 \x11,x\xbf\x00\x00\x00\x00\x07\xc5}\xbf\x00\x00\x00\xc0\xfa;}?\x00\x00\x00\xa0\xacV\x86\xbf\x00\x00\x00\x80\x0bs\x8d?\x00\x00\x00@<h\x9a\xbf\x00\x00\x00\xa0\xdb\xd3\x93?\x00\x00\x00 \xc3Vt?\x00\x00\x00\xa0\xdast\xbf\x00\x00\x00`\xfa\x9aq?\x00\x00\x00\xa0\xca(P?\x00\x00\x00\xc0\nk{?\x00\x00\x00 \x1f\x80m\xbf\x00\x00\x00\x80U\xaa\x83\xbf\x00\x00\x00`\xd2uP?\x00\x00\x00\xc0~\xaeu\xbf\x00\x00\x00\x00\xd0\xd4{?\x00\x00\x00\xc0\xf1]H\xbf\x00\x00\x00\x800\xa2\x82?\x00\x00\x00\xc0\xe7\xf5\x90\xbf\x00\x00\x00\x00\xc8\xc8q\xbf\x00\x00\x00\x00\xb6\rr\xbf\x00\x00\x00\x00\xc8\xd7\x99\xbf\x00\x00\x00\x00\xd7c]\xbf\x00\x00\x00\x00oy\x94?\x00\x00\x00\xa0\x04\xd2\x82\xbf\x00\x00\x00\xc0E\xcaf?\x00\x00\x00\xe0r\xbf\x8b\xbf\x00\x00\x00\x80\xd4U\x81\xbf\x00\x00\x00\xa04\x85\x80\xbf\x00\x00\x00\xa0\xb3\x96\x8f\xbf\x00\x00\x00\xc0]\xd4~\xbf\x00\x00\x00 \xdaG`\xbf\x00\x00\x00\xc0\x88\xdd\x8a\xbf\x00\x00\x00\xc0\x8f\xd1\x83?\x00\x00\x00@/i\x81\xbf\x00\x00\x00\xe0h\x19m\xbf\x00\x00\x00\x80\x94\xbb\x83?\x00\x00\x00\xc0\x7fj\x8d\xbf\x00\x00\x00\xa0\xf8qy?\x00\x00\x00\xe0/+u?\x00\x00\x00\xa0\xfeG\x8a?\x00\x00\x00\x80\xe0{\x8d?\x00\x00\x00\xc0\xff$|\xbf\x00\x00\x00\x00p\x82\x7f\xbf\x00\x00\x00`\x9f\xa2\x95?\x00\x00\x00\x00.\xa1y?\x00\x00\x00\xa0\xe5\xb3\x9e\xbf\x00\x00\x00@\x94\xc6\x8a?\x00\x00\x00\xa0\x87\xa0\x88?\x00\x00\x00\x80+\x06]?\x00\x00\x00@\x81\xc2\x83?\x00\x00\x00`w]u\xbf\x00\x00\x00\x00\xe2[q\xbf\x00\x00\x00\x00B\xf2c?\x00\x00\x00@\x83+r\xbf\x00\x00\x00\xe0\xd2\xca\x89?\x00\x00\x00\xa0m[|\xbf\x00\x00\x00\xe0\xa3mx\xbf\x00\x00\x00\xc0\x99\xf5\x84\xbf\x00\x00\x00@\xd8\xa6f\xbf\x00\x00\x00\xc0\x90%\x83\xbf\x00\x00\x00\xc09\t\x84?\x00\x00\x00\x80EtX\xbf\x00\x00\x00\x00X\xe0|?\x00\x00\x00\xc0\xeb\xfdq?\x00\x00\x00\x80\xd6\x91K\xbf\x00\x00\x00\x80\xefB\x82?\x00\x00\x00 \xec\xc2[?\x00\x00\x00\x00\xbd\xf9\x8f\xbf\x00\x00\x00`\x1b\xa5d?\x00\x00\x00@\x83@g\xbf\x00\x00\x00 3I}\xbf\x00\x00\x00`Y_I?\x00\x00\x00\xe0\x8b:Q\xbf\x00\x00\x00\xc0\x84U\x8b?\x00\x00\x00\xa0\r2u?\x00\x00\x00`Pm\x92\xbf\x00\x00\x00`-\x01S\xbf\x00\x00\x00\x00\xbb\xa2q?\x00\x00\x00\xc0\xde.\x81\xbf\x00\x00\x00`t\xde\x89\xbf\x00\x00\x00\x80\'\x9bg?\x00\x00\x00\xa0\x0fb5\xbf\x00\x00\x00@\xb4\xbe\x99\xbf\x00\x00\x00@]\x8c^\xbf\x00\x00\x00`\xfe\xa5\x86?\x00\x00\x00\x80*z\x86\xbf\x00\x00\x00\xe0<k\x83\xbf\x00\x00\x00 B!t?\x00\x00\x00@\xd1g\x8c\xbf\x00\x00\x00\x80\xfc\xc3z?\x00\x00\x00@\xe2\x1e\x8d\xbf\x00\x00\x00\xa0T\x17\x8f\xbf\x00\x00\x00\x80\x06\x87s?\x00\x00\x00\xc0#\x0e\x8a?\x00\x00\x00\xe0\xc2\xdb\x95\xbf\x00\x00\x00@\xba,f\xbf\x00\x00\x00@H\x8cR\xbf\x00\x00\x00 \x11\xcaj\xbf\x00\x00\x00\xc0\x1c\x12\x88\xbf\x00\x00\x00 )\x83\x91\xbf\x00\x00\x00 \x85Tf?\x00\x00\x00\xa0\xbb\xd3d\xbf\x00\x00\x00\xc0\x99S3?\x00\x00\x00 \x92\x9e\x84?\x00\x00\x00`|\x04(?\x00\x00\x00@"\xb4\x8e\xbf\x00\x00\x00\xc0\xa7B|?\x00\x00\x00`}\xc2\x89?\x00\x00\x00\xe0w\x19\x8a?\x00\x00\x00@\xc2S\x88?\x00\x00\x00\xe0\x80\xf5k?\x00\x00\x00\xa0\xaa\x85k?\x00\x00\x00\xa0<\x02\x84?\x00\x00\x00 \x81\xa2f\xbf\x00\x00\x00\xa0\xd5\xe1\x89?\x00\x00\x00\xc0\xf1b|\xbf\x00\x00\x00`\xb8\xb7\x8c?\x00\x00\x00\xe0\xfc\x98\x80\xbf\x00\x00\x00\xe0\x95\xa7\xa0\xbf\x00\x00\x00@l\xa6o\xbf\x00\x00\x00`_u\x85?\x00\x00\x00\x80\x96.m?\x00\x00\x00 F\xe9=?\x00\x00\x00\xa0k\x1fr\xbf\x00\x00\x00\xe0j\x9ex\xbf\x00\x00\x00`\x97\x90\x8b\xbf\x00\x00\x00\xe0\xad\xdc\x85\xbf\x00\x00\x00@\x14C\x91?\x00\x00\x00\x00\xa1\x16c\xbf\x00\x00\x00\xc0\xc8\xd4d\xbf\x00\x00\x00\x00\x08\xbd\x82?\x00\x00\x00 \x19\xa2\x91\xbf\x00\x00\x00\x80\x90\x12}?\x00\x00\x00\xe0\x8b\xf6\x86\xbf\x00\x00\x00\x00\xb3+|\xbf\x00\x00\x00 \xac6z\xbf\x00\x00\x00\x00\xb33\x82?\x00\x00\x00\xe0\xfa q?\x00\x00\x00 \x90\'t?\x00\x00\x00\xc0\xff\x9d\x7f\xbf\x00\x00\x00@\xb9.~\xbf\x00\x00\x00\xc0\xbd"z\xbf\x00\x00\x00\x80G\x19\x8b?\x00\x00\x00`\x15\xee\x8d?\x00\x00\x00@P\xc7z?\x00\x00\x00\x00&g\x87\xbf\x00\x00\x00`\tHk\xbf\x00\x00\x00\xe0\\\xe2\x95?\x00\x00\x00\xe0\xd1\xd7\x95\xbf\x00\x00\x00\xe0RqE?\x00\x00\x00`\xad\x06\x81?\x00\x00\x00\x80\xab!`?\x00\x00\x00`\xd2\x84s\xbf\x00\x00\x00 \xe6\xa4l\xbf\x00\x00\x00\xa0\x0b\xf3\x82\xbf\x00\x00\x00\x005\x1eq\xbf\x00\x00\x00\x80t\xb7\x85\xbf\x00\x00\x00\x00C\xae\x87\xbf\x00\x00\x00\xa0\x9f\x0c\x82?\x00\x00\x00 [\x0b{?\x00\x00\x00`>0\x90\xbf\x00\x00\x00\x80K\x96\x86\xbf\x00\x00\x00\x80\xe0\x05}\xbf\x00\x00\x00\xc0:\xa2}\xbf\x00\x00\x00`A\xbd\x84?\x00\x00\x00\xc0\xea\x95\x8d?\x00\x00\x00 \xdc\xe8a\xbf\x00\x00\x00\xc0\xbe\xac@?\x00\x00\x00\x00\xbdG\x7f\xbf\x00\x00\x00\x00p\x0b\x87\xbf\x00\x00\x00\x80\xbf\x96}\xbf\x00\x00\x00\xe0\x1d_\x85\xbf\x00\x00\x00\xa09\x8fb?\x00\x00\x00`(\xd2[\xbf\x00\x00\x00\x80\x9a\xfey?\x00\x00\x00\xc0\xc6\rx?\x00\x00\x00`u\x19g\xbf\x00\x00\x00@\x8f\xe7Z\xbf\x00\x00\x00@\xd1@\x80?\x00\x00\x00\xe0\xc5\xe4^\xbf\x00\x00\x00`\xb7\xacq\xbf\x00\x00\x00\xc0Z\xa6u?\x00\x00\x00\x00\xc6\xb0u?\x00\x00\x00\xa0\xe6\x13J?\x00\x00\x00\xe0\x03\x19f?\x00\x00\x00\x80\xa8.\x90\xbf\x00\x00\x00\x00m\xa0m?\x00\x00\x00`\x06\xa1o\xbf\x00\x00\x00 \x15`\x91\xbf\x00\x00\x00\xa0\x16\x85=\xbf\x00\x00\x00`\xa2\xcf<?\x00\x00\x00 \xe3\nb\xbf\x00\x00\x00\x80\x17\xe9n\xbf\x00\x00\x00\xe0\xe4N\x7f\xbf\x00\x00\x00@\xa1\x89\x91?\x00\x00\x00\x00K\x8f\x81?\x00\x00\x00 \x05*/?\x00\x00\x00 &\xf8\x94\xbf\x00\x00\x00@\x00\x8ez\xbf\x00\x00\x00@\n\xb2{?\x00\x00\x00\x80\xee\x00B\xbf\x00\x00\x00\x00\xc1U\x10?\x00\x00\x00\x80\xf8\x0cz?\x00\x00\x00`\xdd\xabu\xbf\x00\x00\x00\xc0V\x00\x93\xbf\x00\x00\x00\xe0y\xf2v?\x00\x00\x00\xa0By\x91?\x00\x00\x00 (\x87[?\x00\x00\x00\xc0h:l?\x00\x00\x00 \xd1m\x80\xbf\x00\x00\x00\x80\x11\xcb\x80\xbf\x00\x00\x00\x00k\xde\x85?\x00\x00\x00\x80\xab\xf8L\xbf\x00\x00\x00\xe0\xd1Dl?\x00\x00\x00@n\xbf\x93?\x00\x00\x00\x80\xca\ni\xbf\x00\x00\x00\xa0\xb1f\x91?\x00\x00\x00\x80\x9e\x99\x90?\x00\x00\x00`v\xa8\x8a?\x00\x00\x00`\xe7\x86X?\x00\x00\x00`r\x87{?\x00\x00\x00\x80\xc44\x81\xbf\x00\x00\x00 \xfcw\x81?\x00\x00\x00`/\x95\x84?\x00\x00\x00\x80\xbf<u?\x00\x00\x00`\nC\x90?\x00\x00\x00\xa0\xc8\xa5\x8a?\x00\x00\x00\xa0qj\x7f?\x00\x00\x00\xe0\xdd}i?\x00\x00\x00\xe0M\x95o\xbf\x00\x00\x00 \r\xf7\x85?\x00\x00\x00\x80\xeb\xa6\x85?\x00\x00\x00\x80\xe4\x14\x85\xbf\x00\x00\x00\xe0\xd8$\x92\xbf\x00\x00\x00\x00\xea]{?\x00\x00\x00\x00\n\xafE\xbf\x00\x00\x00\x00\x14)b?\x00\x00\x00\x00\x16T{?\x00\x00\x00\xe0Js\x88\xbf\x00\x00\x00\xe0\xbf\x80\x9a\xbf\x00\x00\x00\xe0\xc6\x07\x90\xbf\x00\x00\x00@S\'d?\x00\x00\x00`\xdd\x8b\x8e\xbf\x00\x00\x00@{~p?\x00\x00\x00\xa0\x14\xd9\x8a?\x00\x00\x00\xc0\xf3\xcc\x87?\x00\x00\x00\x00f\xab{?\x00\x00\x00\xe0\xcc\x15{\xbf\x00\x00\x00`-\x80x\xbf\x00\x00\x00 \r\xc8b?\x00\x00\x00\x00\x14\xa7s?\x00\x00\x00\x80t\xf8\x80\xbf\x00\x00\x00`\xdf\xa8\x84?\x00\x00\x00\x800}p?\x00\x00\x00 d\x9e\x8b?\x00\x00\x00@\xef\x80a?\x00\x00\x00\x00\x87\x17\x8c?\x00\x00\x00`t\xb8z\xbf\x00\x00\x00@\x87s|?\x00\x00\x00 \xaa\xf6\x8d?\x00\x00\x00`\x0b\x93 ?\x00\x00\x00\xc0\xaf\xc3O\xbf\x00\x00\x00@\x15n\x94?\x00\x00\x00\xa0\x10\xeab\xbf\x00\x00\x00`\xa0\x9bN?\x00\x00\x00@\xca\'c\xbf\x00\x00\x00`\xe9e\x86\xbf\x00\x00\x00 \xee\x16\x89\xbf\x00\x00\x00\xe0\xa5E\x91\xbf\x00\x00\x00`*+\x90\xbf\x00\x00\x00\x80)a\x83?\x00\x00\x00\x00\xb3H\x83?\x00\x00\x00 \xa3\xed\x86\xbf\x00\x00\x00\x00H\xb3t\xbf\x00\x00\x00`\xf6\xe7\x81\xbf\x00\x00\x00\xa0\x85\xe9\x86\xbf\x00\x00\x00`F=\x81\xbf\x00\x00\x00 L\xcfz\xbf\x00\x00\x00@HFg?\x00\x00\x00\xe0g\xd2{?\x00\x00\x00@\x9bmt\xbf\x00\x00\x00`\xa4V\x84\xbf\x00\x00\x00\xc0\xc3\xd7\x89\xbf\x00\x00\x00 \\\x1df?\x00\x00\x00\xa0K2\x85?\x00\x00\x00\x80\xcb\xddc?\x00\x00\x00\x00+\xd9\x81?\x00\x00\x00\xa0,\xdd}\xbf\x00\x00\x00\xc0D<\x96?\x00\x00\x00\x00\x1b}\x8a\xbf\x00\x00\x00`\xd7\xb9\x83\xbf\x00\x00\x00\x80`\x88\x86\xbf\x00\x00\x00\x80\x9e\xbda\xbf\x00\x00\x00`\xe8\xb6:\xbf\x00\x00\x00\xa0\rV\x7f?\x00\x00\x00`\xa2\xe0\x92?\x00\x00\x00\x00\x95!S?\x00\x00\x00`\x9c\xcep?\x00\x00\x00 \xc6\tG\xbf\x00\x00\x00\x80Ef\x7f?\x00\x00\x00 0yz\xbf\x00\x00\x00`\xb0\x1f|\xbf\x00\x00\x00\x80X\x06|?\x00\x00\x00`t\xe4\x8f\xbf\x00\x00\x00\x80\x88\xb5Y\xbf\x00\x00\x00\xe0\xcb3\x84?\x00\x00\x00\xa0\xc0+2\xbf\x00\x00\x00\xe0T\x98U?\x00\x00\x00\x00O\xb4\x85\xbf\x00\x00\x00\xe0\x8f\x10\x82\xbf\x00\x00\x00\xa0xkZ?\x00\x00\x00 I\xb4\x8f?\x00\x00\x00\xe0\x1b@~\xbf\x00\x00\x00\x80\x021c?\x00\x00\x00\x00\xfb\xe9x\xbf\x00\x00\x00\x00\xa1B1?\x00\x00\x00\xa0"&\x89?\x00\x00\x00\x803\xaf(\xbf\x00\x00\x00\x80\xb9\r\x82\xbf\x00\x00\x00\xe0\xe5\x9e\x92\xbf\x00\x00\x00\xa0\xa3\xb3t?\x00\x00\x00`H\x15\x83\xbf\x00\x00\x00`\x13Pm?\x00\x00\x00\xa0K\xa4\x88\xbf\x00\x00\x00\xa0\xf6\xba\x8b?\x00\x00\x00\x00\x12C\x93?\x00\x00\x00\xe0\xe5jB?\x00\x00\x00\xa0[Zk\xbf\x00\x00\x00\xe0\xe6\x05\x94\xbf\x00\x00\x00`L\r\x91\xbf\x00\x00\x00\xe0\xe6&s?\x00\x00\x00\xe0\x82nb\xbf\x00\x00\x00@\xe9\xf5\x8d\xbf\x00\x00\x00`\xe8\xa59\xbf\x00\x00\x00`?\x96u?\x00\x00\x00\x00\xfda}?\x00\x00\x00@)\x17\x93?\x00\x00\x00\xc0\x8f]|\xbf\x00\x00\x00`\xdc\x1e\x89?\x00\x00\x00`p\xfea\xbf\x00\x00\x00@\x0c\x9az?\x00\x00\x00\xe0\x08\x89f?\x00\x00\x00\xc0\xc1!a?\x00\x00\x00\x00\x9f\xc0\x87\xbf\x00\x00\x00\xc0\xdd\xe4q\xbf\x00\x00\x00\xa0\xb4\x81\x86?\x00\x00\x00\xe0CZw?\x00\x00\x00\x00\x93h\x92?\x00\x00\x00\x80R\xe5\x96\xbf\x00\x00\x00 \xbd\x03z\xbf\x00\x00\x00@]\\x\xbf\x00\x00\x00\x00\x97\xb8\x86?\x00\x00\x00\x80\xeb\xaes\xbf\x00\x00\x00\xc0\xbd\x88\x82\xbf\x00\x00\x00\xa0\xd8\xcae?\x00\x00\x00\xc0Y3\x90\xbf\x00\x00\x00\xc0\x983\x81\xbf\x00\x00\x00\x80\xa5\x97\x81?\x00\x00\x00\x00M\xb1_\xbf\x00\x00\x00\x00\x1b\x1ej\xbf\x00\x00\x00@Q\xe7{?\x00\x00\x00\xc0\xbaw\x85\xbf\x00\x00\x00`\xc6-\x93?\x00\x00\x00@\xbe\xe6x?\x00\x00\x00\xa0\xad\x88\x8a\xbf\x00\x00\x00\x00g\xa0\x82\xbf\x00\x00\x00\x00\xa0\x03\x7f?\x00\x00\x00\x80\xfc\xbb\x90?\x00\x00\x00 u\x9dg\xbf\x00\x00\x00\xe0\x08\x94\x86?\x00\x00\x00`2\xa4B\xbf\x00\x00\x00\x00\x16:\x8b\xbf\x00\x00\x00@\x84\xf7_?\x00\x00\x00\xe09\xbeX\xbf\x00\x00\x00\x00\xc0pe\xbf\x00\x00\x00 \x12\x07`\xbf\x00\x00\x00\xc0E\xe6\x92\xbf\x00\x00\x00\xc0\xc4\xb4N?\x00\x00\x00\xe0E\x80\x83\xbf\x00\x00\x00@\x0f\x8dd?\x00\x00\x00 \xb7\xe0\x95?\x00\x00\x00@NlW?\x00\x00\x00\xe0\xb2eq?\x00\x00\x00\xe0\xc7@\x8d\xbf\x00\x00\x00\xc0\xd3Y\x1b\xbf\x00\x00\x00\xc0\xf2k\x91\xbf\x00\x00\x00@-8V\xbf\x00\x00\x00 \xa3\xad~?\x00\x00\x00\x00\xae\xb7>?\x00\x00\x00 \xeb\xeeT\xbf\x00\x00\x00@\xcb\x91p\xbf\x00\x00\x00 9\xd6\x80?\x00\x00\x00\x00-j\x80?\x00\x00\x00@\x82\xe0\x84?\x00\x00\x00\xa0\xde\x0fg?\x00\x00\x00\x80\x10\xef\x88\xbf\x00\x00\x00\x80\\(m\xbf\x00\x00\x00\xc0\xc6r\x93?\x00\x00\x00\xa0\xc9U\x90\xbf\x00\x00\x00\x001E[\xbf\x00\x00\x00\xc0-\xd2\x8a?\x00\x00\x00 e\x8c\x81\xbf\x00\x00\x00 \xe3\xcel\xbf\x00\x00\x00\xa0\xb0\xedA?\x00\x00\x00\xc0\x80\xcf\x84?\x00\x00\x00\x00C\nt?\x00\x00\x00@\x1a\x8cW\xbf\x00\x00\x00`f|o?\x00\x00\x00\xc0w=t?\x00\x00\x00 qL\'\xbf\x00\x00\x00\xc0d\xa4\x85?\x00\x00\x00`KRz\xbf\x00\x00\x00\xc0\xaaUi?\x00\x00\x00\xa0\xcd\xf8s\xbf\x00\x00\x00\xe00\x15@?\x00\x00\x00@"\x9cZ\xbf\x00\x00\x00\x00h\xf7y\xbf\x00\x00\x00 \x94\xcf\x8c?\x00\x00\x00`\xb0\xc2V\xbf\x00\x00\x00`*\x94\x89\xbf\x00\x00\x00\x80\x96ZJ?\x00\x00\x00\xc0.d{?\x00\x00\x00`HEp\xbf\x00\x00\x00\x00\xd2\x82\x91?\x00\x00\x00`\xb6\'\x80\xbf\x00\x00\x00`\xa1\'z?\x00\x00\x00\xc0\xe6Rj\xbf\x00\x00\x00\xe0Ce\x90?\x00\x00\x00\xe0\x95\xda\x8b\xbf\x00\x00\x00@|\x82w\xbf\x00\x00\x00\xa0\x15"\x7f?\x00\x00\x00\xc0\xd5\xd8\x81?\x00\x00\x00@^\'\x85\xbf\x00\x00\x00\xa0;\xb5\x8b\xbf\x00\x00\x00\xe0\xbe\xcf\x0b?\x00\x00\x00\xa0\'\x91v\xbf\x00\x00\x00\xc0.\x05G\xbf\x00\x00\x00 \n\x8ca?\x00\x00\x00 c\xa9\x92?\x00\x00\x00\xe0\x07\x1c`?\x00\x00\x00`\x8d\x91\x83?\x00\x00\x00@\x9f5\x88?\x00\x00\x00\x80<3\x83\xbf\x00\x00\x00\x00\x1dJ\x92\xbf\x00\x00\x00@\xf6\x80\x94\xbf\x00\x00\x00\xc0\x81\x1f\x85?\x00\x00\x00\xe0\x0c\x9d{?\x00\x00\x00\x00S6{?\x00\x00\x00 \xfb\xddm\xbf\x00\x00\x00 \x0ePw\xbf\x00\x00\x00\xa0\x16\x83e?\x00\x00\x00\xa0\xde\xb9a\xbf\x00\x00\x00\x00{\x10\x8f?\x00\x00\x00\xa02E\x90\xbf\x00\x00\x00\xe0}Xq?\x00\x00\x00`IF\x9e\xbf\x00\x00\x00\x00]\xad^?\x00\x00\x00\x00NSr?\x00\x00\x00 \xaa\xdd\x8b?\x00\x00\x00\xa0\x97QU?\x00\x00\x00\x00\xf2\x0b\x87\xbf\x00\x00\x00\xe0\xc8Sx\xbf\x00\x00\x00\x80\xee\x8fv\xbf\x00\x00\x00\xa0(4o?\x00\x00\x00\xa0\xe0\xe7l\xbf\x00\x00\x00\x80Z.x?\x00\x00\x00\xa04\xd8T\xbf\x00\x00\x00`X\xb0S\xbf\x00\x00\x00\x80\xf7#\x8c?\x00\x00\x00@s\xee\x7f\xbf\x00\x00\x00\xe0\xbb\x86O\xbf\x00\x00\x00\xa0\xe8v~?\x00\x00\x00 _\xe1\x83\xbf\x00\x00\x00\xc0\x854\x97?\x00\x00\x00\xe0\x16Ns?\x00\x00\x00 \xa2\xa3\x81\xbf\x00\x00\x00\x80\x93\xbbn?\x00\x00\x00 \xef\x88\x8e?\x00\x00\x00`i{\x81\xbf\x00\x00\x00\x00v\xe4t?\x00\x00\x00\xc0\x15Nv?\x00\x00\x00\xa0\'\x95\x82\xbf\x00\x00\x00`es\x90\xbf\x00\x00\x00\xc0d\xff`?\x00\x00\x00\xc0\x9d[w\xbf\x00\x00\x00\x00\xc7cu\xbf\x00\x00\x00`\xa5\x9d\x84?\x00\x00\x00\xe0z\xbe\x85?\x00\x00\x00`:\xa5P\xbf\x00\x00\x00\xe0\x03\xb4w?\x00\x00\x00 \xed\xeel?\x00\x00\x00`\xa6\x99~\xbf\x00\x00\x00 ,\xeer?\x00\x00\x00@\x90\x17\x90\xbf\x00\x00\x00\x80E\xe1\x80?\x00\x00\x00\xc0\x86\x9eo?\x00\x00\x00\xe0(\x07\x83?\x00\x00\x00\xc0\x05\xf5\x82?\x00\x00\x00 "$\x84\xbf\x00\x00\x00\xe0f\xd0\x8a\xbf\x00\x00\x00\xe0!x\x89\xbf\x00\x00\x00@\xe6\x84y\xbf\x00\x00\x00@=\xacy\xbf\x00\x00\x00`\x92Ox?\x00\x00\x00\x00\xfcU\x96\xbf\x00\x00\x00\x80\xdb\x1ep?\x00\x00\x00\xc0fO~?\x00\x00\x00\x80\xaf\x9d\x86\xbf\x00\x00\x00\xa0\xb1\xdeQ?\x00\x00\x00\xa0\x93\xe0=?\x00\x00\x00\xa0\xc2\x9e\x9a?\x00\x00\x00\xc0\xd0\x8bu\xbf\x00\x00\x00\x80-\x1cD\xbf\x00\x00\x00\xc0B\x01i?\x00\x00\x00@\x92\xd3l?\x00\x00\x00\xc0l\x16\x80\xbf\x00\x00\x00@\x08\x9a\x95\xbf\x00\x00\x00 \x86)X?\x00\x00\x00\xe0\xef\x91D\xbf\x00\x00\x00\x80O\xf9\x90?\x00\x00\x00@\x04\x18t\xbf\x00\x00\x00\x80\x91\x1cP\xbf\x00\x00\x00\x80\xdd\xf5\x92?\x00\x00\x00\x00\xeaw\'?\x00\x00\x00\xa0\xc2&j?\x00\x00\x00\x80z\x1e\xf3\xbe\x00\x00\x00\xa0\xa4\x19{\xbf\x00\x00\x00`\x06\x07q\xbf\x00\x00\x00\x00\xaf\xc6|?\x00\x00\x00 \xcb\xe7\x84?\x00\x00\x00\xa0=]\x95\xbf\x00\x00\x00\xe0\xb1\x07[\xbf\x00\x00\x00\xc0\xde7t?\x00\x00\x00\xc0\xe3\xe7\x82?\x00\x00\x00@\xa8w]?\x00\x00\x00\xe0\xb0\xf5F\xbf\x00\x00\x00@\x80\xd5\x84?\x00\x00\x00\xe0\\#\x92?\x00\x00\x00\xe0O\xa6w\xbf\x00\x00\x00`S\x12b\xbf\x00\x00\x00\x00p8\x99?\x00\x00\x00\x00\xdd\x9dz\xbf\x00\x00\x00\xe0\xebR{\xbf\x00\x00\x00\x00\x06\x8c\x7f?\x00\x00\x00@\x88i;?\x00\x00\x00`\xd8\xff\x95\xbf\x00\x00\x00`\xfa\xe9s?\x00\x00\x00\xa0\x80\'\x94?\x00\x00\x00@\xc7\x9eX?\x00\x00\x00\xe0\x07\xd2x?\x00\x00\x00\xa03-o\xbf\x00\x00\x00\xc0\x9b\xcd\x88?\x00\x00\x00\xa0\xbc?D?\x00\x00\x00@\x15\xdbe?\x00\x00\x00\xc0vpv?\x00\x00\x00`ZSq\xbf\x00\x00\x00\x80*\x8cP?\x00\x00\x00\x80\xb8\xbd\x7f?\x00\x00\x00\xa0W\xe4r\xbf\x00\x00\x00\x00|\'_\xbf\x00\x00\x00\xe0\x8b\xefp?\x00\x00\x00\xe0a3i?\x00\x00\x00`]D\x84\xbf\x00\x00\x00\xa0u>=?\x00\x00\x00 \x94\x85u\xbf\x00\x00\x00@b9e\xbf\x00\x00\x00`\xd0\x8a|\xbf\x00\x00\x00 \xbe\x9dv?\x00\x00\x00\xc0\xb6\xcfa?\x00\x00\x00\xa0\x87\xd4`\xbf\x00\x00\x00\x00\xf3hw\xbf\x00\x00\x00@\xc7TO\xbf\x00\x00\x00\xe0\xd4bq?\x00\x00\x00\xa0G\x1fR\xbf\x00\x00\x00\xa0\x97I\x84\xbf\x00\x00\x00\xa0B1v\xbf\x00\x00\x00\xa0/\x08\x84\xbf\x00\x00\x00\x80\xdb<F\xbf\x00\x00\x00\xa0%C\x8a\xbf\x00\x00\x00\x00\x02J\x85?\x00\x00\x00\xc0\x8bcP?\x00\x00\x00\x80\x8a\xa3\x82\xbf\x00\x00\x00\xe0\xe1\xfdy\xbf\x00\x00\x00@\x95[h\xbf\x00\x00\x00\x00.\x93X?\x00\x00\x00@/\x08d?\x00\x00\x00\x80\xe7\xd3v?\x00\x00\x00 %\x9ay\xbf\x00\x00\x00\x80\xf85~?\x00\x00\x00\xe0zJQ\xbf\x00\x00\x00\xe0\x99B\x80\xbf\x00\x00\x00@\xe3[q?\x00\x00\x00`\xf8q\x81\xbf\x00\x00\x00\x80_{m?\x00\x00\x00\x00v\xdc\x8a\xbf\x00\x00\x00\xa0\xc1\x19u\xbf\x00\x00\x00\x00z\x04\x8c\xbf\x00\x00\x00\x80e\x96v\xbf\x00\x00\x00\xe0\x02vq?\x00\x00\x00`\\\x06x\xbf\x00\x00\x00 P\xdc\x93?\x00\x00\x00\xa0\xa1V\x83\xbf\x00\x00\x00\x805\xa4I\xbf\x00\x00\x00`\xb2\x1a|?\x00\x00\x00 \xc5\xb9\x85?\x00\x00\x00\xe08<\x85\xbf\x00\x00\x00\x80\xb0\x04r?\x00\x00\x00 \x9c,s?\x00\x00\x00`\x85$w\xbf\x00\x00\x00@\xd9Qy\xbf\x00\x00\x00\x00R\xbcH?\x00\x00\x00@\x8b\xa7\x83?\x00\x00\x00\xc0#P\x89?\x00\x00\x00`\xb5\xa2\x83?\x00\x00\x00 \xd8]q?\x00\x00\x00 {\xd7w\xbf\x00\x00\x00\xe0\x17P\x83\xbf\x00\x00\x00\xc0\x06O\x85\xbf\x00\x00\x00\xe0\xb5\xff\x91\xbf\x00\x00\x00 A\xdbu?\x00\x00\x00\x80;Ja?\x00\x00\x00@\xf9\'b?\x00\x00\x00\x80\xe7\xa5z\xbf\x00\x00\x00`\xf0sp?\x00\x00\x00\x00\xaa\x0e\x80\xbf\x00\x00\x00\xc0*Q\x90\xbf\x00\x00\x00\xa0\x9f\xd4\x9a?\x00\x00\x00\xc0\x8fN{\xbf\x00\x00\x00`\x12\xd8b?\x00\x00\x00\x80=[\x88?\x00\x00\x00`\xee}\x8a\xbf\x00\x00\x00\xc0*\x1e\x88\xbf\x00\x00\x00\x00\xec\xc5\x95?\x00\x00\x00@\xd1\x99\x89?\x00\x00\x00 e\x11\x87?\x00\x00\x00`f\x9e\x12\xbf\x00\x00\x00\x80\xd0\xd8B\xbf\x00\x00\x00`t\x8e\x90?\x00\x00\x00@\xea\xdfs?\x00\x00\x00@\xec\x82\x81?\x00\x00\x00\xc0\x05]\x88\xbf\x00\x00\x00@~D\xa1\xbf\x00\x00\x00`g\xf2t\xbf\x00\x00\x00`\x8eJ\x94\xbf\x00\x00\x00 \xa8cl\xbf\x00\x00\x00@\xed\xe0j?\x00\x00\x00\xa0\t\x15\x81\xbf\x00\x00\x00 \x0c\xe5\x82\xbf\x00\x00\x00\xc0C\x9a\x92?\x00\x00\x00\xa0\xd1w\x97\xbf\x00\x00\x00 {\x00\x91\xbf\x00\x00\x00\xc0\xbe&\x89?\x00\x00\x00\xe0z\xa7\x91\xbf\x00\x00\x00\xa0\xe3\x19p\xbf\x00\x00\x00 \xd8Se\xbf\x00\x00\x00\xe0\x80Dd\xbf\x00\x00\x00\xa0RUy?\x00\x00\x00\xc0+\xb1}\xbf\x00\x00\x00\xe0\xea\x02\x84?\x00\x00\x00`\x84\xd8E\xbf\x00\x00\x00 \x19\xa4\x82?\x00\x00\x00\xc0\xae\xc4o?\x00\x00\x00\xc0,\x9d\x8a?\x00\x00\x00\xe0\x00wz?\x00\x00\x00 \xe6\x1eh?\x00\x00\x00\x80,8\x91?\x00\x00\x00\xe0W\xda~?\x00\x00\x00\xe0S\xaf\x8c\xbf\x00\x00\x00\xe0\xd7pP\xbf\x00\x00\x00\xe0-\x00w\xbf\x00\x00\x00\xa0e:\x90?\x00\x00\x00\x80pmv\xbf\x00\x00\x00\xa0F7Y?\x00\x00\x00`\xffJb\xbf\x00\x00\x00\x80\xafA\x8b?\x00\x00\x00\xc0-\xfcz?\x00\x00\x00\x00\xf7\xb4S?\x00\x00\x00 \xf3\xb9l?\x00\x00\x00\x80\xefko\xbf\x00\x00\x00 t-o?\x00\x00\x00\xa0^#\x81?\x00\x00\x00`\xac8]\xbf\x00\x00\x00 \xe3\x8e_\xbf\x00\x00\x00`\xa9\xd2<?\x00\x00\x00\x00\x01\xa2e\xbf\x00\x00\x00\xe0\xa08\x84?\x00\x00\x00\xc0\xa66{?\x00\x00\x00@\x89\xff\x87\xbf\x00\x00\x00\xa0c\xb8u\xbf\x00\x00\x00\x00\x93~\xa1\xbf\x00\x00\x00`\xc6&\x84?\x00\x00\x00\x80\x10=|\xbf\x00\x00\x00`\x12;R\xbf\x00\x00\x00\xe0\xec\x02m\xbf\x00\x00\x00\x80\xd5\xbb\x86?\x00\x00\x00@\x8a\xe3u?\x00\x00\x00`_\xa8\x80?\x00\x00\x00 3\x18\x93?\x00\x00\x00\x80O\x83\x7f?\x00\x00\x00 \xb5\ry\xbf\x00\x00\x00\xc0J\x97\x86\xbf\x00\x00\x00\x80tSc?\x00\x00\x00\x00\x94\x99n?\x00\x00\x00\xc0\x05\xa4X\xbf\x00\x00\x00`\xbb\xa8|\xbf\x00\x00\x00\x80\x81\xdap?\x00\x00\x00 \x05\'\x87\xbf\x00\x00\x00\xe0T*\x81\xbf\x00\x00\x00\x00\xc5}r\xbf\x00\x00\x00\x80\xbc\xbbv?\x00\x00\x00\x00x\xb6w?\x00\x00\x00\x80z:\x89?\x00\x00\x00\x80\x1d\x01\x81?\x00\x00\x00 )\x81\x8f\xbf\x00\x00\x00\xe0\xb4\x19\x8b?\x00\x00\x00\x00b\xa9z?\x00\x00\x00`}E\x86\xbf\x00\x00\x00\x80\x99\x92%?\x00\x00\x00`\xa3\xc6\x8d\xbf\x00\x00\x00@-q\x7f\xbf\x00\x00\x00\x00\x19D\x8c\xbf\x00\x00\x00@\x7fE\x96\xbf\x00\x00\x00@n9N\xbf\x00\x00\x00\xa0\x01<|?\x00\x00\x00\xa0\x93zj\xbf\x00\x00\x00`\xcd\xbf\x80?\x00\x00\x00\xa0\xec\x1e\x8c?\x00\x00\x00`\xeaB\x8b\xbf\x00\x00\x00@\xc5\xf6b?\x00\x00\x00\xc0\xd9wq?\x00\x00\x00@x\xb0\x97\xbf\x00\x00\x00 \x94\xa9\x87?\x00\x00\x00\xe0\x8c\xa2a\xbf\x00\x00\x00`\xc4\xa7\x91\xbf\x00\x00\x00@\xe0\xd3\x84?\x00\x00\x00\x00\xd9\xcbs?\x00\x00\x00@\x85\xb4\x8d?\x00\x00\x00\x00{\x16\x82?\x00\x00\x00@U\xa5\x89?\x00\x00\x00\x00\xeb\x8a\x84\xbf\x00\x00\x00\xe0Zy|\xbf\x00\x00\x00 \xa5\xbc4?\x00\x00\x00 \xe8\x80Q\xbf\x00\x00\x00\xe0@sx?\x00\x00\x00\x00Z{z?\x00\x00\x00\x80*wh?\x00\x00\x00\x00I\xb0\x89?\x00\x00\x00 \x1a\xd6\x7f?\x00\x00\x00@\x19\x9ft\xbf\x00\x00\x00@1\xaa{?\x00\x00\x00@\x90\x8d{?\x00\x00\x00\xe0\xc2\xa4\x82\xbf\x00\x00\x00`\x16h>?\x00\x00\x00\xc0\xbd\xc9\x81?\x00\x00\x00\x00\x14JR\xbf\x00\x00\x00`\xbag|?\x00\x00\x00`Ix|\xbf\x00\x00\x00\x00\x92b\x8d?\x00\x00\x00\x00\xbd\x9ew\xbf\x00\x00\x00\xa0\x02\xa9+?\x00\x00\x00\xe0\x18~a\xbf\x00\x00\x00\x00\xee\ty\xbf\x00\x00\x00`\xaa\xb3\x80?\x00\x00\x00 \xebn\x81?\x00\x00\x00\xa0\xfc\x9b\x94\xbf\x00\x00\x00\xa0%\xe5r\xbf\x00\x00\x00\xc0\xcb2i?\x00\x00\x00`\xbd\x93\x85?\x00\x00\x00@\xad\x19^\xbf\x00\x00\x00\xc0\xea%q\xbf\x00\x00\x00 /\x10t\xbf\x00\x00\x00`\xe9\xca\x80?\x00\x00\x00 \xe8\xc9f?\x00\x00\x00`S6T\xbf\x00\x00\x00\xc0\xe6\x12\x88\xbf\x00\x00\x00\x80`H\x92?\x00\x00\x00\xe0\xc0\xfej\xbf\x00\x00\x00\xa0\xednY?\x00\x00\x00\x005y\x81\xbf\x00\x00\x00\xe0\x95\x9dz\xbf\x00\x00\x00\xe0\x03\x8ef?\x00\x00\x00\xc0I\xf6g\xbf\x00\x00\x00\xc0\xe0[\x8a?\x00\x00\x00\xc0@\xda\x82\xbf\x00\x00\x00`\xbc\xcc\x8c\xbf\x00\x00\x00\xe0\x17\x1f\x8c?\x00\x00\x00 \xac\xf5u?\x00\x00\x00\xe0\xde\x02w\xbf\x00\x00\x00\xc0\xe4\xf6z?\x00\x00\x00@E.\x90?\x00\x00\x00\xc0M\xd5z?\x00\x00\x00\x80\x89fG\xbf\x00\x00\x00\x80\xf3^\x92\xbf\x00\x00\x00`\xd6\xddm\xbf\x00\x00\x00\xc0-C\x88?\x00\x00\x00\x00a\x16e\xbf\x00\x00\x00@X\xe4O?\x00\x00\x00\xc0\xfe\xd4d?\x00\x00\x00`\xf1jr\xbf\x00\x00\x00\xa0u\x82|?\x00\x00\x00 \x1f>=?\x00\x00\x00 iR\x88\xbf\x00\x00\x00\x00\x1b~j?\x00\x00\x00\xe0\x94(q?\x00\x00\x00\xc0\r\xfeg?\x00\x00\x00\xa0\xe1\xe2 \xbf\x00\x00\x00\x00V\xdbW?\x00\x00\x00`N?n\xbf\x00\x00\x00\x00\xf4\xa6e\xbf\x00\x00\x00\x80R%\x85\xbf\x00\x00\x00@\xb4\x7f[\xbf\x00\x00\x00\xe03\x9d\x93\xbf\x00\x00\x00\xa04\xd1i\xbf\x00\x00\x00@\x03\x84\x8e\xbf\x00\x00\x00\x00\x86\x0c\x91?\x00\x00\x00\xa0U\xd6X\xbf\x00\x00\x00\x80qX\x90?\x00\x00\x00\x00\xdc\xfc\x86\xbf\x00\x00\x00@~6q?\x00\x00\x00\xc0\xd7\xd7X\xbf\x00\x00\x00\xe0~{\x89?\x00\x00\x00@\xe7\x99}?\x00\x00\x00`V\x83x?\x00\x00\x00\x80\xbc\x8b\x1c\xbf\x00\x00\x00\x80\xbac|\xbf\x00\x00\x00@\xc4\xf5\x84?\x00\x00\x00\xc0B\xcc\x80\xbf\x00\x00\x00 \x97\xf5x\xbf\x00\x00\x00\x00KMc?\x00\x00\x00\x00a@P\xbf\x00\x00\x00\x00\xf9f\x80?\x00\x00\x00 \xaa\xc5W\xbf\x00\x00\x00\xe0\xfa\x94m?\x00\x00\x00`\xc1(t?\x00\x00\x00\xc0\x99(\x83?\x00\x00\x00\xc0\xd9\xd2~\xbf\x00\x00\x00\xe0\n(|?\x00\x00\x00\xa0\x13\xffh?\x00\x00\x00\x00\xe4 o?\x00\x00\x00@Mkj\xbf\x00\x00\x00\xe0 W\x8b\xbf\x00\x00\x00\x00Z\n}?\x00\x00\x00\xe0\x86X\x89\xbf\x00\x00\x00\xc0&~/\xbf\x00\x00\x00\xe0\xf4*,\xbf\x00\x00\x00@\xda\x8eb\xbf\x00\x00\x00\x80\xc5\x91S?\x00\x00\x00\xc0\x1e\xca\x86\xbf\x00\x00\x00@l\xf0\x93\xbf\x00\x00\x00 \x02\xd3\x86?\x00\x00\x00\xa0Kq|?\x00\x00\x00\xa0^({\xbf\x00\x00\x00\x80\xf8v\x80?\x00\x00\x00@\xd4q\x81\xbf\x00\x00\x00\xc0}\x84\x86\xbf\x00\x00\x00\xa0a\xddU\xbf\x00\x00\x00\x80:\x1fR?\x00\x00\x00\xc0\x94.\x89\xbf\x00\x00\x00\x00\x0clN?\x00\x00\x00\x00\x18\xc1r?\x00\x00\x00 w\x84\x87\xbf\x00\x00\x00\x00\x07\x94\x83?\x00\x00\x00\xe0nol?\x00\x00\x00\xc0\x06\xe5i?\x00\x00\x00\xc0\xcc\xa1\x89\xbf\x00\x00\x00\x80/Z`\xbf\x00\x00\x00@\x13\xca`\xbf\x00\x00\x00\xa0\xb8\xa1v?\x00\x00\x00`>\'\x8e?\x00\x00\x00`\xea\x10\x97\xbf\x00\x00\x00\x80\x01\x08\x85\xbf\x00\x00\x00 \x8eX\x83\xbf\x00\x00\x00 \xfeN\x90\xbf\x00\x00\x00\xe0\t\'u\xbf\x00\x00\x00`\xe6\x99\x81?\x00\x00\x00\x00X\xe6Y?\x00\x00\x00\x80A\x1e\x80?\x00\x00\x00`7@\x82?\x00\x00\x00 ;\xcdO\xbf\x00\x00\x00\xc05\x82\x87?\x00\x00\x00\xa05\\{\xbf\x00\x00\x00 8\xfd\x7f\xbf\x00\x00\x00\xe0\xef\xd6b?\x00\x00\x00\xa0\xde?\x8c?\x00\x00\x00\xa0\x01\xaes?\x00\x00\x00\xa0\x15\xa0]?\x00\x00\x00@O\xfbe\xbf\x00\x00\x00\xc0\xd2\xb2\x99\xbf\x00\x00\x00@\xcbSv\xbf\x00\x00\x00`\x82ir?\x00\x00\x00\xe0o\x99x\xbf\x00\x00\x00\x80\x8d\x15e\xbf\x00\x00\x00\xa0\xbb?\x86?\x00\x00\x00 \xa7\xf6\x8e\xbf\x00\x00\x00 \xa75{?\x00\x00\x00\xe0\xe8\x18x\xbf\x00\x00\x00\x00\xfe\xf6\x85?\x00\x00\x00\x00;8\x8d?\x00\x00\x00`Y\xf6\x86?\x00\x00\x00\x00\x17f\x81\xbf\x00\x00\x00\xe0\xe0\xce}\xbf\x00\x00\x00\xc0\xe5\x1a\x96?\x00\x00\x00\xc0p\x1eU?\x00\x00\x00\xe0r\x8e\x82?\x00\x00\x00\xa0\xd5\xdei\xbf\x00\x00\x00`\x12\xe8\x95\xbf\x00\x00\x00\xe05[i?\x00\x00\x00\xc0h\xb1V\xbf\x00\x00\x00\xe0m2~?\x00\x00\x00\x00+o`?\x00\x00\x00\xa0)%\x89\xbf\x00\x00\x00`\xa3\x1f\x88\xbf\x00\x00\x00\xe0\x18\x94e\xbf\x00\x00\x00 \xea\xfb\x94?\x00\x00\x00\xa0\xa2\x94Z\xbf\x00\x00\x00\xe0A\r\x8b?\x00\x00\x00\xa0\x81\xfc\x83?\x00\x00\x00\xc04\x9ek?\x00\x00\x00@\xb4\xb9\x8b\xbf\x00\x00\x00\xa0\x10\xf0\x80?\x00\x00\x00\x00\x08*_\xbf\x00\x00\x00\xa0\x9asm\xbf\x00\x00\x00\xc0\\\xc4\x8f\xbf\x00\x00\x00@\x1b\xdbu\xbf\x00\x00\x00`g\xacH\xbf\x00\x00\x00 \x8b\x08^\xbf\x00\x00\x00\x00\x14y\x93\xbf\x00\x00\x00\xc0\xbb\xf0\x80?\x00\x00\x00\x80@\x0e|\xbf\x00\x00\x00\xc0C\xf0\x87\xbf\x00\x00\x00`\xacN{?\x00\x00\x00\xa0;\x8fU?\x00\x00\x00\xa0\xef\xd8\x83?\x00\x00\x00\xe0_\xf7\x94?\x00\x00\x00`pV:\xbf\x00\x00\x00\x00>d\x88?\x00\x00\x00\xc0NMr\xbf\x00\x00\x00\x00\xb4\xe1p\xbf\x00\x00\x00\xa0\\\xc4o\xbf\x00\x00\x00`\xacF\x90?\x00\x00\x00\xe0\xfb\xbb\x87?\x00\x00\x00@\x06\xd3r?\x00\x00\x00 \xcb\xf4\x95?\x00\x00\x00\xc0\xdbc\x92?\x00\x00\x00\xc0\xcd\xa1\x90?\x00\x00\x00\xc0djx?\x00\x00\x00 \xd3\x9a\x90\xbf\x00\x00\x00\xe0%*\x82\xbf\x00\x00\x00\x00\x11\x9cy?\x00\x00\x00@:\x85\x82?\x00\x00\x00@\xdd\xd9l\xbf\x00\x00\x00\x00e\x06\x84?\x00\x00\x00\xa0\x9f\xa9j\xbf\x00\x00\x00@\xec\xccp?\x00\x00\x00 \xdc\xa0q\xbf\x00\x00\x00@-0\x89?\x00\x00\x00 \x87\xef\x94\xbf\x00\x00\x00`\x10u7\xbf\x00\x00\x00\x80?\xe0\x7f?\x00\x00\x00\x00\xf8\x97\x92\xbf\x00\x00\x00`\xb5\xba\x83?\x00\x00\x00`w\x02p?\x00\x00\x00\x80\xa8k{?\x00\x00\x00\x80g\x1cq?\x00\x00\x00 \xb3\x89\x83?\x00\x00\x00\xa0\xf4\x8e\x98?\x00\x00\x00@\xf0\xf2\x94?\x00\x00\x00\xc0/(z\xbf\x00\x00\x00\x80u\xe8x\xbf\x00\x00\x00\xa0\x89$\x86\xbf\x00\x00\x00 R\x02\x86\xbf\x00\x00\x00\x00\x98}{\xbf\x00\x00\x00`\xd0\xa3\x83\xbf\x00\x00\x00\xe0v\x92\x87\xbf\x00\x00\x00\xa0S]\x8a?\x00\x00\x00\x80Z\x0bd?\x00\x00\x00@\x8fI\x83?\x00\x00\x00 +\xf9\x91?\x00\x00\x00\xc0\x0f\xf3d\xbf\x00\x00\x00@S3g\xbf\x00\x00\x00\xe0\\<\x83?\x00\x00\x00\x00\xaa\xd2\x83\xbf\x00\x00\x00\xc0jbu?\x00\x00\x00\x00`H\x87\xbf\x00\x00\x00\x00\x9b\xd1a?\x00\x00\x00`\xaf\x1cw\xbf\x00\x00\x00\xa0\x84/x\xbf\x00\x00\x00\xe0O\x8a{\xbf\x00\x00\x00\x00j>W\xbf\x00\x00\x00\x00\x10\x9b\x83?\x00\x00\x00@\x06\x82\x8b\xbf\x00\x00\x00`\x0c\xe8s\xbf\x00\x00\x00\x80\x84\x80o\xbf\x00\x00\x00\xc0J\xcbk\xbf\x00\x00\x00 \xcey\x91?\x00\x00\x00\xc0 \t\x80\xbf\x00\x00\x00@Q\x08p?\x00\x00\x00\xe0\xebd\x95\xbf\x00\x00\x00\xa0\x1a\x80g\xbf\x00\x00\x00`\xfdt~?\x00\x00\x00\xe0\x91\x891?\x00\x00\x00\xa0A\xaca?\x00\x00\x00\xe0!\xe8|?\x00\x00\x00@\x85\xf2d?\x00\x00\x00\x00 \xdbu?\x00\x00\x00@\xa0\xc6\x95\xbf\x00\x00\x00\xa0\\\xa3z?\x00\x00\x00\x80\x11\xcc\x14\xbf\x00\x00\x00\x80m\x8fX\xbf\x00\x00\x00\xc0\x1f\x84\x82\xbf\x00\x00\x00 C\xe8{?\x00\x00\x00`\x067\x84\xbf\x00\x00\x00\xa0o\xf5h?\x00\x00\x00\xa0\x96\x88\x8d\xbf\x00\x00\x00`K\xff\x97\xbf\x00\x00\x00\xe0P\xe6\x81\xbf\x00\x00\x00 \x17\x9d\x92?\x00\x00\x00 W)a\xbf\x00\x00\x00\x80%\x19q?\x00\x00\x00\xa0\xd6\xdcD?\x00\x00\x00\xa0\xc8l\x93\xbf\x00\x00\x00 ]\xc5\x90?\x00\x00\x00\xe0T\xa8\x84\xbf\x00\x00\x00\x00y\xa6\x89?\x00\x00\x00\x00\xb4\xb4\x8b\xbf\x00\x00\x00`W\xfdd?\x00\x00\x00\xc0\x03\xc0\x86\xbf\x00\x00\x00@1uB\xbf\x00\x00\x00`%M\x92\xbf\x00\x00\x00\x80\xb2E\x80\xbf\x00\x00\x00`G\xc0v?\x00\x00\x00 \x1d\xfcu\xbf\x00\x00\x00 \xe4\xf6i?\x00\x00\x00`\xab\xa0~\xbf\x00\x00\x00\x80\xfeRz?\x00\x00\x00\xe0\x8b,\x81\xbf\x00\x00\x00\xc0r\x91\x90?\x00\x00\x00\x00\xbbXN\xbf\x00\x00\x00\xc0\x98$\x8f?\x00\x00\x00`\xdae\x93\xbf\x00\x00\x00`\x01\xa5N?\x00\x00\x00\xa0\xb1[\x96\xbf\x00\x00\x00 \xf2Nq?\x00\x00\x00\x00\xe42\x7f?\x00\x00\x00\xc0\x8a!z?\x00\x00\x00\xc0\x8fST?\x00\x00\x00\x80|vb\xbf\x00\x00\x00\xe0\xa0\x1al\xbf\x00\x00\x00\xa0z\xed\x01?\x00\x00\x00\xc0i\x86\x81?\x00\x00\x00`\xe1<\x8e?\x00\x00\x00\x00<\xca{\xbf\x00\x00\x00 xIu?\x00\x00\x00 \xd2\xf0X\xbf\x00\x00\x00@\x10\x12S?\x00\x00\x00`c\xb5\x82?\x00\x00\x00 \x00i\x95?\x00\x00\x00`\xd8\xfe`?\x00\x00\x00\x805+6\xbf\x00\x00\x00\xa0\x0eV\x87?\x00\x00\x00`7_=\xbf\x00\x00\x00\xc0\x9b\xcf\x91\xbf\x00\x00\x00\x80\xd4\xb8\x88\xbf\x00\x00\x00\x80\xd8Wb?\x00\x00\x00\x00]\x01p\xbf\x00\x00\x00 \xb0\xe2\x82?\x00\x00\x00`Q$s\xbf\x00\x00\x00\x00\x17e1\xbf\x00\x00\x00\x00$c\x81\xbf\x00\x00\x00\xe0U\xf0\x81\xbf\x00\x00\x00\x80\xdf!f?\x00\x00\x00\xa0=U\x7f\xbf\x00\x00\x00`\x86C\x9d?\x00\x00\x00\xc0\xe7o\x94\xbf\x00\x00\x00\x00q\xd0w\xbf\x00\x00\x00 1\xd0v\xbf\x00\x00\x00\xe0"\xc3|\xbf\x00\x00\x00\xa0#1H\xbf\x00\x00\x00\x80RC\x83\xbf\x00\x00\x00\xe0t)\x80?\x00\x00\x00\xa0-eu?\x00\x00\x00 F\xb1m\xbf\x00\x00\x00@\'G\x90\xbf\x00\x00\x00\x00\x94$\x84?\x00\x00\x00\xc0\x19ou?\x00\x00\x00 ?\x1bM?\x00\x00\x00 \x1dn\x97\xbf\x00\x00\x00\x80\x86\x85x\xbf\x00\x00\x00`\xd1\xb8\x86\xbf\x00\x00\x00`/\x1e|?\x00\x00\x00\xe0\x19\x91\x7f\xbf\x00\x00\x00\x00U\xac\x8a?\x00\x00\x00\xa0\x95\xaey?\x00\x00\x00\xc0\xab6q?\x00\x00\x00\xe0\xe6\xd7\x90?\x00\x00\x00\xe0\xd1C\x7f\xbf\x00\x00\x00@\xe5\xb2|\xbf\x00\x00\x00\xa0\xafCk\xbf\x00\x00\x00@\xb9L\x8a?\x00\x00\x00\x80\xf3"\x92?\x00\x00\x00\x80+\xb1\x81\xbf\x00\x00\x00`\xd1Y\x8b\xbf\x00\x00\x00\xe0A\xc7\x99?\x00\x00\x00\xc0.{u?\x00\x00\x00\xa0J\x96g\xbf\x00\x00\x00 <>q?\x00\x00\x00 \x95\x06v\xbf\x00\x00\x00`=#s?\x00\x00\x00\x00\x84-\x84?\x00\x00\x00\xc0\x9dO\x90?\x00\x00\x00@\xeeRW?\x00\x00\x00@\xb1^\x87\xbf\x00\x00\x00\x00\xb0\x93\x8f\xbf\x00\x00\x00\xa0\xc7\xed\x80\xbf\x00\x00\x00`Wsn\xbf\x00\x00\x00 \xa30\x90\xbf\x00\x00\x00@D\x83k\xbf\x00\x00\x00\xc0\x02_\x81\xbf\x00\x00\x00\xa0+k4?\x00\x00\x00@\x84\x8d|?\x00\x00\x00\x00\x8c\xa0\x99?\x00\x00\x00@\x90\xa7l?\x00\x00\x00@m\x9e\x95?\x00\x00\x00\xa0\x9b\x9b\\?\x00\x00\x00 ,\xd3u\xbf\x00\x00\x00\xa0[\xba\x90\xbf\x00\x00\x00@\x90x\x85?\x00\x00\x00\x00LZ&\xbf\x00\x00\x00\xa0\x19W~\xbf\x00\x00\x00\xc0\x0cIj\xbf\x00\x00\x00`\x0fug\xbf\x00\x00\x00 ^\xe9\x89?\x00\x00\x00\x00e\xf0\x98\xbf\x00\x00\x00@\xe2\xd6\x92\xbf\x00\x00\x00\xe0\x0e\xc2^\xbf\x00\x00\x00`\xb3\x9bx?\x00\x00\x00\x00\xe9\xe1\x94\xbf\x00\x00\x00\xc0\xaf\xd9\x84\xbf\x00\x00\x00`l\x9b\x81?\x00\x00\x00\x00\xa1gu?\x00\x00\x00\x00\x82a\x83?\x00\x00\x00\x004Aa\xbf\x00\x00\x00\xa0\x9aFa?\x00\x00\x00@Y\x96\x80?\x00\x00\x00\x80;eu\xbf\x00\x00\x00\xe0\x816z\xbf\x00\x00\x00`R:\x83?\x00\x00\x00`0\x9d\x88?\x00\x00\x00`IWm?\x00\x00\x00\xe0\x0f\x8b\x83?\x00\x00\x00 \x18\x01v\xbf\x00\x00\x00 puq\xbf\x00\x00\x00\x80\x1b\x07\x8f?\x00\x00\x00\xe0\xbc\x87i\xbf\x00\x00\x00@N\xf7\x98?\x00\x00\x00\x80\xdd\x9eZ\xbf\x00\x00\x00\xe0\x0f(\x86\xbf\x00\x00\x00\xe0\x0ej\x82\xbf\x00\x00\x00\x00\x9ary?\x00\x00\x00\x00\xdeA\x93\xbf\x00\x00\x00`P8\x89\xbf\x00\x00\x00\xa0\xd41~?\x00\x00\x00@\x9b!z?\x00\x00\x00 \x86\xb1v?\x00\x00\x00\x80\xb5K\x85?\x00\x00\x00`\xbd7|?\x00\x00\x00@y\xe8v?\x00\x00\x00\xc0\xc2\xaf\x01\xbf\x00\x00\x00\xa0\x19\xc3\x8e?\x00\x00\x00`\x00\xfbv\xbf\x00\x00\x00\xa0\x94\xb3s?\x00\x00\x00\xc0\x02e]\xbf\x00\x00\x00 \xf5\x0e\x84?\x00\x00\x00\xa0\xc6\xa1}\xbf\x00\x00\x00@8\x86]\xbf\x00\x00\x00 \xb4\x98s?\x00\x00\x00\xa0\xf7\xb4D\xbf\x00\x00\x00@\xa7\xf1\x8f?\x00\x00\x00\x80\x96\r\x87?\x00\x00\x00@\x81O\x86?\x00\x00\x00\x00\xf8\x1em\xbf\x00\x00\x00\xc0\x16A\x89\xbf\x00\x00\x00 \xbc\xd1`?\x00\x00\x00\xa0\x1d\x1d\x80?\x00\x00\x00 \x8d\x89>\xbf\x00\x00\x00\x80\xc9\x80r\xbf\x00\x00\x00 \xc54t\xbf\x00\x00\x00\xa0\x1a|m\xbf\x00\x00\x00@\x8e\x99\x95?\x00\x00\x00@\xfc\xd1i?\x00\x00\x00\xa0\xd2p\x87?\x00\x00\x00\xc0*#1?\x00\x00\x00 \xa2{e?\x00\x00\x00\xa0ucs\xbf\x00\x00\x00 \xc1\xb2\x82?\x00\x00\x00\xe0\x18}@\xbf\x00\x00\x00\xc0\x0e\x83\x8b\xbf\x00\x00\x00\xc0\xff/o\xbf\x00\x00\x00\xc0\xb2\xaap?\x00\x00\x00@2\xe6\x80?\x00\x00\x00\xc0\x16\xe5\x84?\x00\x00\x00\x00\xff\x8a\x90?\x00\x00\x00\xe0b\xfcq?\x00\x00\x00 \x05!o\xbf\x00\x00\x00\xe0\x83h\x97\xbf\x00\x00\x00`8\x03C\xbf\x00\x00\x00\xc0\xda\xfb\x82?\x00\x00\x00\x80\xdeo\x81\xbf\x00\x00\x00`\x05\xd0x?\x00\x00\x00\x00%\x84E\xbf\x00\x00\x00\x80\xad5\x89\xbf\x00\x00\x00\x808\xb7`?\x00\x00\x00\x00n#\x89?\x00\x00\x00@AZa?\x00\x00\x00\xc0\xf9HX?\x00\x00\x00\xc0\x9e\x14r\xbf\x00\x00\x00\xa0\x83Rv\xbf\x00\x00\x00\xc0\x00b\x83\xbf\x00\x00\x00\xc0Bu|\xbf\x00\x00\x00 \xb8\x1es\xbf\x00\x00\x00@f\x8eq\xbf\x00\x00\x00\x00\x05\x97\x91\xbf\x00\x00\x00\xa0\xee\xe6&\xbf\x00\x00\x00\xa0\xca\x80Z?\x00\x00\x00\x80\x91y\x86?\x00\x00\x00@\x9f)u?\x00\x00\x00@\xb2en?\x00\x00\x00 \xca\x85\x84?\x00\x00\x00\x00\x9f\xd7\x88\xbf\x00\x00\x00`\x99\x97\x8f?\x00\x00\x00\xc0\xf5\x19r\xbf\x00\x00\x00\x00\xcbR\x85?\x00\x00\x00@\xec\xf2\x88\xbf\x00\x00\x00\xc0t;\x91?\x00\x00\x00\xe0Aux\xbf\x00\x00\x00\xc0t\xc0\x8c\xbf\x00\x00\x00@1\x91w\xbf\x00\x00\x00@\x1e\x8aU\xbf\x00\x00\x00@V@\'?\x00\x00\x00 z\x89\x95?\x00\x00\x00\x00-\xa6\x8c\xbf\x00\x00\x00\xc0,\x19-\xbf\x00\x00\x00`\xf8\x88\x93\xbf\x00\x00\x00\xc0hu\x9c\xbf\x00\x00\x00 \xe0\xba@\xbf\x00\x00\x00`\xa6\xeei?\x00\x00\x00\xc0\t`x?\x00\x00\x00\xa0=Bk\xbf\x00\x00\x00\x80M\xee\x8f\xbf\x00\x00\x00\xc0\xd03\x85?\x00\x00\x00\x00lIS?\x00\x00\x00\xe0Ez\x80\xbf\x00\x00\x00\x80\x9bSx?\x00\x00\x00\xe0\xd6\xd9\x89?\x00\x00\x00\xe0\xe1k|?\x00\x00\x00\x80\x12\xfdV?\x00\x00\x00\xa0K_N?\x00\x00\x00\x80\x1dYD\xbf\x00\x00\x00\x80\xc4\xd1}\xbf\x00\x00\x00\xc0\x00\x10\x95\xbf\x00\x00\x00\x00b\x9e\x84?\x00\x00\x00\x80t\x0bz\xbf\x00\x00\x00\x80\xd5\xc8z?\x00\x00\x00 \x99O]\xbf\x00\x00\x00 \xee?\x91\xbf\x00\x00\x00\x80\x85\xdfl\xbf\x00\x00\x00\x00\x02\x19X\xbf\x00\x00\x00\x00s\x1c\x7f\xbf\x00\x00\x00\xa0\xb7\x1e\x87\xbf\x00\x00\x00`\t\x06\x8e?\x00\x00\x00@X\xe4l\xbf\x00\x00\x00@\xbbZ{?\x00\x00\x00 xng\xbf\x00\x00\x00\xc0\x0f\x07u\xbf\x00\x00\x00`\xbc&i\xbf\x00\x00\x00\xa0\xfe>x\xbf\x00\x00\x00\xc0\x965\x8e\xbf\x00\x00\x00\x00\x93]e\xbf\x00\x00\x00\x00\xa1\x04\x89?\x00\x00\x00\xc0\x07H\x83\xbf\x00\x00\x00\xe0\tK\x80?\x00\x00\x00@\xdc\xa3T\xbf\x00\x00\x00`:\xf6\x84?\x00\x00\x00 VE&\xbf\x00\x00\x00\xa0\xaf\xa0N\xbf\x00\x00\x00\xc0\xa7\xbfr?\x00\x00\x00@=\x9c\x88?\x00\x00\x00`\x0cu\x84\xbf\x00\x00\x00\x00\x8aZ\x91?\x00\x00\x00\xa0\xa0\x99o\xbf\x00\x00\x00\xe0\x81\xd3~\xbf\x00\x00\x00\x00\xbb0|\xbf\x00\x00\x00\x00\xe4\xc2X?\x00\x00\x00@\x13\x83\x87?\x00\x00\x00\x80\x174{?\x00\x00\x00\xe0\x99\x93V\xbf\x00\x00\x00\xe0\xda&\x93?\x00\x00\x00\xe0Ev{?\x00\x00\x00\xc0\x0ftv?\x00\x00\x00 Zm\x9a\xbf\x00\x00\x00 \xa5\xce\x7f\xbf\x00\x00\x00 \xe6M\x8f\xbf\x00\x00\x00@\x1cpu?\x00\x00\x00\xe01\xccg?\x00\x00\x00`\xb9u\x90?\x00\x00\x00\xe0\x82\xbap\xbf\x00\x00\x00@\xef\x97t\xbf\x00\x00\x00\x80e\xc7\x85?\x00\x00\x00`\xcb@X\xbf\x00\x00\x00\xe0\xf9\xc63?\x00\x00\x00\xa0\x1dL{\xbf\x00\x00\x00\xc0<\x87\x8e?\x00\x00\x00\xc0%\x13\x91\xbf\x00\x00\x00\x00\x9c\x17T\xbf\x00\x00\x00\x00\xd1\xc4p\xbf\x00\x00\x00\xe0\xd3\x84\x8e?\x00\x00\x00@\xbd|\x81\xbf\x00\x00\x00`\xa9\x98<\xbf\x00\x00\x00\x00\xcca>?\x00\x00\x00\x00\xa65\x85?\x00\x00\x00\x00\xa3\xd9\x8e\xbf\x00\x00\x00\x00\x80*r\xbf\x00\x00\x00\xe0|g\x7f\xbf\x00\x00\x00\xa0\xeb\xf2u\xbf\x00\x00\x00\xe0\xba\xf5a\xbf\x00\x00\x00`\xc6\xa4Y?\x00\x00\x00\x00\xb3@Y?\x00\x00\x00\xe07=R\xbf\x00\x00\x00\xa0}\r\x8a?\x00\x00\x00\xc0\x98\x0e\x90?\x00\x00\x00\x00p12\xbf\x00\x00\x00\x80\xde\xcd\x87?\x00\x00\x00\xe0\x1e9\x83\xbf\x00\x00\x00\xe0(\xc4\x87?\x00\x00\x00\xe0\xf0\x1c\x93\xbf\x00\x00\x00\xa0|\'\x98\xbf\x00\x00\x00\x80~\x89\x87?\x00\x00\x00`\xa3\xc2d?\x00\x00\x00\x80a\xd7s?\x00\x00\x00 \xec\x95\x8c?\x00\x00\x00 \xea\x83\x7f?\x00\x00\x00`\xac\xf7o?\x00\x00\x00 a>y\xbf\x00\x00\x00`\xfc\xeb\x8e\xbf\x00\x00\x00\xe0\x07M\x89\xbf\x00\x00\x00`X.d\xbf\x00\x00\x00 \x84Nv\xbf\x00\x00\x00\xa0\xfc\x00Q\xbf\x00\x00\x00\xc0)\xf1\x8d\xbf\x00\x00\x00\xa0\x94\x8c7?\x00\x00\x00\xe0\x0b\xb6\x84\xbf\x00\x00\x00\x80<u\x88?\x00\x00\x00@\xe7\xb8\x83\xbf\x00\x00\x00\xe0.\xbbt\xbf\x00\x00\x00\xe0\x08\xba\xef>\x00\x00\x00`\x19:\x96\xbf\x00\x00\x00\xc0\xd3\\a\xbf\x00\x00\x00\xa0\x0f\xd7\x84\xbf\x00\x00\x00\xc0\x83\xe9v?\x00\x00\x00`\x05Cz\xbf\x00\x00\x00 ".\x95\xbf\x00\x00\x00\xc0\x87\x02w\xbf\x00\x00\x00`\xb93\x8d?\x00\x00\x00\xc0\x1f\xa5u?\x00\x00\x00\xe0\xc9\xcci\xbf\x00\x00\x00@a\xef\x90\xbf\x00\x00\x00\xe0\xd7\x8c\x82\xbf\x00\x00\x00\xc0\x14\x17K\xbf\x00\x00\x00\xa0\xcdV\x89?\x00\x00\x00\x80\xb3/q\xbf\x00\x00\x00`\xae.\x9c\xbf\x00\x00\x00`v"q\xbf\x00\x00\x00\xa0\xfe\x8e\x8e?\x00\x00\x00\xe0\xb5\xc1\x80\xbf\x00\x00\x00`\x7f\xeb\x81\xbf\x00\x00\x00\x00u\xecs?\x00\x00\x00\xa0\xfc{\x80\xbf\x00\x00\x00\x00\xb05`?\x00\x00\x00\xa0\x08\xb1k?\x00\x00\x00\xc0T\x06x\xbf\x00\x00\x00\x80\xf3\xaaQ\xbf\x00\x00\x00@N\xb1n?\x00\x00\x00\xc0\xd9\xb7\x90?\x00\x00\x00\x80\xfd\xdel\xbf\x00\x00\x00\x80\x13\xdf\x95\xbf\x00\x00\x00 }\x96v\xbf\x00\x00\x00 \xf3\xc4M?\x00\x00\x00\xe0P\xb9l\xbf\x00\x00\x00\xa0\xf6c\x93?\x00\x00\x00`\xaft\x90\xbf\x00\x00\x00`~0\x84\xbf\x00\x00\x00\x00\x1e6\x8d\xbf\x00\x00\x00\x00\x02\x12\x8c?\x00\x00\x00\xa0\xd1\x17\x8f\xbf\x00\x00\x00`\xd6v~?\x00\x00\x00\xa0\xb8\xd4w?\x00\x00\x00\xa0\x16\xb9\\\xbf\x00\x00\x00@\xd6\xa5\x84\xbf\x00\x00\x00`\x9e\xf2~?\x00\x00\x00@\xf3\xf4a?\x00\x00\x00\x80\x88u\x81?\x00\x00\x00\xc0:\xfcp?\x00\x00\x00@\xd14\x91?\x00\x00\x00\x80e\xa0J\xbf\x00\x00\x00\xc0\xacw\x8c?\x00\x00\x00`\xd5(x?\x00\x00\x00 \x8dX\x86\xbf\x00\x00\x00\x00b\xad\x8c\xbf\x00\x00\x00\xa0\x1c\xa7_?\x00\x00\x00\xc0DI\x89?\x00\x00\x00\xe0\x11\xe5z?\x00\x00\x00\xe0\xcf\xab\x87?\x00\x00\x00\xc0\x94\xa2|?\x00\x00\x00\xa0\xa0\xd8k\xbf\x00\x00\x00 .\x062?\x00\x00\x00\xa0\xaa7\x83?\x00\x00\x00 \x8f\xd5\x90?\x00\x00\x00`\x8b\xd3y?\x00\x00\x00\xa0i\x1ad?\x00\x00\x00@\xcc\x98W?\x00\x00\x00 \xa9\x8cy?\x00\x00\x00\xc0\xfe\xa9\x92?\x00\x00\x00\x00!\xb1t?\x00\x00\x00 \xd9\xd2}?\x00\x00\x00@+*\x9d\xbf\x00\x00\x00\xc0.p|?\x00\x00\x00\xc0j\xde\x84\xbf\x00\x00\x00\xe0\xc9\x80\x8d?\x00\x00\x00@\x9d\x11x\xbf\x00\x00\x00\xe0o\xa3\x8a?\x00\x00\x00\x00\x95qp?\x00\x00\x00@\x07Ee?\x00\x00\x00\xa0\xb5\xc9\x81?\x00\x00\x00@\xc7A\x81?\x00\x00\x00\xe0\x0b]\x87?\x00\x00\x00\xa0.\xf0\x8e\xbf\x00\x00\x00\xc0\x9br\x90?\x00\x00\x00\x00O\x9c\x88\xbf\x00\x00\x00`\xfd.R\xbf\x00\x00\x00 \x8c\xdeg?\x00\x00\x00\xa0\xfe\x91\x86\xbf\x00\x00\x00\xc0\xebN\x80\xbf\x00\x00\x00@|1c?\x00\x00\x00@\xd4\xb2u?\x00\x00\x00 \xf2\x99\x97\xbf\x00\x00\x00\xa0\x85g\x87?\x00\x00\x00\xc0A\xf2\x98?\x00\x00\x00\xc0%\x97i?\x00\x00\x00@\x01JP?\x00\x00\x00@y\xf3I?\x00\x00\x00\xe0\xc2*w?\x00\x00\x00\xc03\xab\x91?\x00\x00\x00`j\xcav\xbf\x00\x00\x00 MT\x9b\xbf\x00\x00\x00\xa0^]Q\xbf\x00\x00\x00`\r\xa2\x91?\x00\x00\x00\xc0\x08\x9d\x95?\x00\x00\x00\x801\xe4g?\x00\x00\x00 Y\xe3\x83\xbf\x00\x00\x00\xa0\x8f\xd9\x8a\xbf\x00\x00\x00\xc0\x86\xf8\x81?\x00\x00\x00 S7\x90\xbf\x00\x00\x00@\xa5\xa2\x82?\x00\x00\x00\xe0-\xbfz\xbf\x00\x00\x00\x80%Qv?\x00\x00\x00@7{M?\x00\x00\x00 4\xb7\x81\xbf\x00\x00\x00 \xe1\xe5q\xbf\x00\x00\x00\x00\x9e\x19T?\x00\x00\x00\xc0\xdd!\x81?\x00\x00\x00\x00\xd9\xdet?\x00\x00\x00 \xb6]h\xbf\x00\x00\x00\xc0\xd3av\xbf\x00\x00\x00\x00\\~P?\x00\x00\x00`0\x95\x81?\x00\x00\x00\xc0@\xad\x87?\x00\x00\x00 \xce\xc6\x98\xbf\x00\x00\x00`\x15\x14p?\x00\x00\x00\xc0\xed\xb0{?\x00\x00\x00\x00f%q\xbf\x00\x00\x00@s\x14\x80?\x00\x00\x00`\x9f\xe0z\xbf\x00\x00\x00\xa09\\I\xbf\x00\x00\x00\xa0\x1dz}\xbf\x00\x00\x00\xe0\xb0\x88\x81?\x00\x00\x00\xa0@sq\xbf\x00\x00\x00`\xa7\xc3\x82\xbf\x00\x00\x00\x80\xa3\xd3\\\xbf\x00\x00\x00 \xc6\x01\\?\x00\x00\x00\x00Kvr?\x00\x00\x00\x00#3J?\x00\x00\x00\x8025_?\x00\x00\x00`]Wp?\x00\x00\x00\x00pz}\xbf\x00\x00\x00`\x9d\xcar\xbf\x00\x00\x00`\x88\xcfp?\x00\x00\x00@\xde\x9ff\xbf\x00\x00\x00\xc0q\xcem\xbf\x00\x00\x00 \xa4\xfaL\xbf\x00\x00\x00`\xd1\xd0\x82\xbf\x00\x00\x00\xa0\x93\x14m\xbf\x00\x00\x00\x00?\xc4\x8a\xbf\x00\x00\x00\x00C\xdbk?\x00\x00\x00@-\x01p\xbf\x00\x00\x00\x80\xc9#&\xbf\x00\x00\x00\xc0\x07\xb2\x89?\x00\x00\x00\xe0\xf4\x99{\xbf\x00\x00\x00`^\x1bV?\x00\x00\x00\xe0!F|?\x00\x00\x00 ^\xe3q\xbf\x00\x00\x00\xe0k\xdel?\x00\x00\x00\xc0%\xd8N?\x00\x00\x00\x80\xeb\xc7n?\x00\x00\x00@\x03\x98\x0c\xbf\x00\x00\x00\x80\x96\x91[?\x00\x00\x00\x80\x9f\x0fq?\x00\x00\x00\xa0\xc2e\x89?\x00\x00\x00\xe0\xab\xa0\x84\xbf\x00\x00\x00\xa0\xf9A\x89?\x00\x00\x00@\xa6^\x7f?\x00\x00\x00 `\x81p?\x00\x00\x00`zDF?\x00\x00\x00 6Zq\xbf\x00\x00\x00\xc0\xed\x88\x8e\xbf\x00\x00\x00\xc0H\xb7\x84?\x00\x00\x00\x80\xcd\xee\x91?\x00\x00\x00\xa0`\xbf{\xbf\x00\x00\x00 N\x84O\xbf\x00\x00\x00@\xa8\xf1\x93?\x00\x00\x00\xe0\xa3\x89Y\xbf\x00\x00\x00\x80\xc1+\x80\xbf\x00\x00\x00\x80\xcePp?\x00\x00\x00\xc0\xfa\xc6\x90\xbf\x00\x00\x00\x80\xa5\x18s?\x00\x00\x00\x80\xcb\xdax\xbf\x00\x00\x00@w\x03\x93?\x00\x00\x00 ^\xfe\x86\xbf\x00\x00\x00@\x9d\xe1\x81\xbf\x00\x00\x00@\x1a@{\xbf\x00\x00\x00\xc0\xee\x1c\x7f\xbf\x00\x00\x00`\\\x1fj\xbf\x00\x00\x00\x002\x8f\x90?\x00\x00\x00 \x98\xc3Y?\x00\x00\x00\xc0\'@\x81\xbf\x00\x00\x00\x80\x85"/\xbf\x00\x00\x00@\xebru\xbf\x00\x00\x00\xa0S?^\xbf\x00\x00\x00`\x08\xd8r?\x00\x00\x00\xe0T\xc1~\xbf\x00\x00\x00\x00\xf0\x1db?\x00\x00\x00\xe0<E\x84\xbf\x00\x00\x00\x00\xa0\x9a\x92?\x00\x00\x00`\xa1\x17\x86\xbf\x00\x00\x00\xe0\x82D\x90\xbf\x00\x00\x00@\x87\xb1\x93?\x00\x00\x00\xe0"\xe0\x81?\x00\x00\x00\xa0\xb7\xdc\x89\xbf\x00\x00\x00\x00\x8a\xc76?\x00\x00\x00\xc0\n\xb9\x95\xbf\x00\x00\x00\x80\x17\tI?\x00\x00\x00`\x9c\xd3\x80?\x00\x00\x00\xe0\xefa\x90?\x00\x00\x00\xc0\x12n\x87?\x00\x00\x00\xa0\xb7\xd3\x7f?\x00\x00\x00\xc0oK{\xbf\x00\x00\x00 B\xf7\x82?\x00\x00\x00@\x01\x06U\xbf\x00\x00\x00`\x04@c\xbf\x00\x00\x00@W\xb6{\xbf\x00\x00\x00\x00\x8d3\x85?\x00\x00\x00\x80\x1c\x91\x8c\xbf\x00\x00\x00\x80\t\xf3w?\x00\x00\x00`\xf5\x11\x92?\x00\x00\x00@\xd3\xc9s?\x00\x00\x00\xa0\x96\xd1}?\x00\x00\x00\xc0\xde\xa8r\xbf\x00\x00\x00\xc0X\x9ev\xbf\x00\x00\x00 OX\x94?\x00\x00\x00`\x8e\x1a\x89?\x00\x00\x00@\xa9g~\xbf\x00\x00\x00\xc0**\x91?\x00\x00\x00\xe0\xbb\x1b\x82?\x00\x00\x00\xe0\xc0\x84\x9c?\x00\x00\x00\xa06\xff\x91?\x00\x00\x00`V\xc3s?\x00\x00\x00\xc0\x8e8\x92\xbf\x00\x00\x00@\x04G\x8b?\x00\x00\x00 +\xd6O\xbf\x00\x00\x00\x00\xe7ud?\x00\x00\x00\xe0\xdaR\x80\xbf\x00\x00\x00@\xeb)R\xbf\x00\x00\x00 {\xf9\x81?\x00\x00\x00\xc0M\xd8\x93?\x00\x00\x00\xe0c3\x85?\x00\x00\x00\xe0\xf0a\x8c?\x00\x00\x00 Ir|\xbf\x00\x00\x00\xc0,.\x90\xbf\x00\x00\x00\xc0\xa2\xcas?\x00\x00\x00 \x14m\x8c?\x00\x00\x00\x80\xcd\xff\x8e?\x00\x00\x00@\xb5x{\xbf\x00\x00\x00\xc0Aik?\x00\x00\x00\xa0`Z]\xbf\x00\x00\x00\xc0\xa6\xe7\x98\xbf\x00\x00\x00\x80\x03\x9f\x85\xbf\x00\x00\x00\xc0xG\x90\xbf\x00\x00\x00\xe0\x946\x8b?\x00\x00\x00\x80t\xf3G\xbf\x00\x00\x00\xc0\x0fm\x86?\x00\x00\x00\x00.u\x12\xbf\x00\x00\x00 \xa1\x94t\xbf\x00\x00\x00`\x93\x0f\x82\xbf\x00\x00\x00\xe0\xc6:\x89?\x00\x00\x00@\xe4-]?\x00\x00\x00\x80\x97\xc9|\xbf\x00\x00\x00 t+\x90?\x00\x00\x00\xe0\xa3\x82^\xbf\x00\x00\x00\x80z\x99t?\x00\x00\x00\x80h\'\x08?\x00\x00\x00`\x08FQ?\x00\x00\x00`\x00\xd7v\xbf\x00\x00\x00 c\xd7F?\x00\x00\x00\xc0\x1d\x86g\xbf\x00\x00\x00\xe0\x7f\x8a\x7f?\x00\x00\x00\xc0\xd0\xf3\x92?\x00\x00\x00\x00\x8eh\x88?\x00\x00\x00\x80\xdd=R\xbf\x00\x00\x00\x00\xdb]b?\x00\x00\x00@c\x91\x82\xbf\x00\x00\x00\xa0\x86}\x8d\xbf\x00\x00\x00@\xa6\xf0\x92\xbf\x00\x00\x00\x80z{]\xbf\x00\x00\x00 \xfa\x1f\x95\xbf\x00\x00\x00@\x00\xa7t?\x00\x00\x00\xe0\xe7\xb1\x81?\x00\x00\x00\x00\xff\x19\x80?\x00\x00\x00 Q\xb9\x80\xbf\x00\x00\x00 \x92\xeax?\x00\x00\x00\x00\xb1\xee\x8c\xbf\x00\x00\x00\x00xd\x99\xbf\x00\x00\x00@c%\x95\xbf\x00\x00\x00\x00\x89K\x89\xbf\x00\x00\x00\xc0T9x?\x00\x00\x00`n\x87g?\x00\x00\x00\xa0\xb1\\\x84\xbf\x00\x00\x00`\xc0\xaf\x84?\x00\x00\x00\x00\xcb\xcd\x91\xbf\x00\x00\x00`\xb4\x8e\x9a?\x00\x00\x00\xa0\x83\xebs?\x00\x00\x00@\xb5\xdey?\x00\x00\x00\xc0H\x1a\x91?\x00\x00\x00 q\x88\x87?\x00\x00\x00`\xe8\xe7r\xbf\x00\x00\x00\x00I\')\xbf\x00\x00\x00\xe0\x976g\xbf\x00\x00\x00\xe0U\x93x?\x00\x00\x00\xc0).\x95\xbf\x00\x00\x00\x00\x88\x1e\x95\xbf\x00\x00\x00\xa0Q\xa4\x91\xbf\x00\x00\x00\xe0\x1d\xbbt?\x00\x00\x00\x00\xce0\x1f?\x00\x00\x00\x80\xe8Dc\xbf\x00\x00\x00@^Q>\xbf\x00\x00\x00\xa0)\x11a?\x00\x00\x00 \xebbT\xbf\x00\x00\x00\xc0&\xef\x80\xbf\x00\x00\x00 \xe0\xd6\x87\xbf\x00\x00\x00\xe0E\xfaj\xbf\x00\x00\x00\xa0\xa0\'v?\x00\x00\x00 \xf8%\x8a\xbf\x00\x00\x00`4\x95\x8c\xbf\x00\x00\x00`\xd9\xf3\x8e?\x00\x00\x00 ^}\x9a?\x00\x00\x00\xe00\x9eu?\x00\x00\x00\x00\xfc\xf4i?\x00\x00\x00 \x93\xbby?\x00\x00\x00 p\xaa~?\x00\x00\x00\xa0\xf0!\x91\xbf\x00\x00\x00\xe0\xaa\xf2\x84?\x00\x00\x00\xa0J\xd1\x80\xbf\x00\x00\x00`b\x8f\x91\xbf\x00\x00\x00\x80^\x86\x87?\x00\x00\x00`4Z`?\x00\x00\x00\xe0{\x8ah?\x00\x00\x00@\x08\xdb~?\x00\x00\x00\xa0I\xd0\x83?\x00\x00\x00\xc0\xb2&\x8e\xbf\x00\x00\x00`\xe6\x0fh?\x00\x00\x00`\xa4Ke?\x00\x00\x00\xc0te\x81\xbf\x00\x00\x00`\xd1\xa5T?\x00\x00\x00\xa0\xfbUu\xbf\x00\x00\x00\xa0\xcc\xad\x83\xbf\x00\x00\x00 \xd8fa\xbf\x00\x00\x00\x0066\x96?\x00\x00\x00`>\x1dd\xbf\x00\x00\x00@\x94Wv?\x00\x00\x00\xa0P\xf0b\xbf\x00\x00\x00\xc0\x198q\xbf\x00\x00\x00\xc0\x17\x01p\xbf\x00\x00\x00`\xdek\x9a\xbf\x00\x00\x00 \xbd8\x8c?\x00\x00\x00\x00\'\xebA?\x00\x00\x00@r\x91i\xbf\x00\x00\x00\xe0V\xdct?\x00\x00\x00\xe0\n*p?\x00\x00\x00`\xf6.\x81?\x00\x00\x00\x00L\x9b\x8b\xbf\x00\x00\x00@\xfbCg?\x00\x00\x00\xe0]\xbct\xbf\x00\x00\x00\xa0A\xc3\x81?\x00\x00\x00\xc0x\xab\x7f?\x00\x00\x00`\xaf\xbd\x84?\x00\x00\x00\xc0\xf4Jd?\x00\x00\x00\x80?\x9ei?\x00\x00\x00 +\xe5\x8d?\x00\x00\x00`F\xa8~\xbf\x00\x00\x00 P1b?\x00\x00\x00\x80\xb9\x1ex?\x00\x00\x00\xa0\x91\xaa\x82?\x00\x00\x00@$c\x86?\x00\x00\x00\xa0\'Kw\xbf\x00\x00\x00\x00\x1d\x1c{\xbf\x00\x00\x00@{pu?\x00\x00\x00\x80\x02\xd9\x84\xbf\x00\x00\x00\x00\xd2\xbcS\xbf\x00\x00\x00\x80\x02\x95P\xbf\x00\x00\x00\xe0\xfa\xc7o?\x00\x00\x00\x00\xdd"\x81?\x00\x00\x00\xa0\x8d\xd3o?\x00\x00\x00`r\xa7\x85\xbf\x00\x00\x00\xa0SY6\xbf\x00\x00\x00@\xbbje?\x00\x00\x00`\xd8\xd9z\xbf\x00\x00\x00\xa0\x9c\x9d\x90\xbf\x00\x00\x00\x80U\x94s?\x00\x00\x00\xa0\x80\xc2\x80?\x00\x00\x00\x80_"\x88\xbf\x00\x00\x00\xc0\xbaS\x96\xbf\x00\x00\x00\x00\xf0\xa4e?\x00\x00\x00 \xdcjZ\xbf\x00\x00\x00 \xb7\xecd\xbf\x00\x00\x00\xc0\x84\xf1\x91?\x00\x00\x00@\xc5\x84\x80?\x00\x00\x00@\xa2\xbd?\xbf\x00\x00\x00\xc0\x17\\\x83?\x00\x00\x00\x80O\xdeP?\x00\x00\x00`\x92\xe4|?\x00\x00\x00\xe0\xce\xd1\x83\xbf\x00\x00\x00\x00_2\x84\xbf\x00\x00\x00@\xefN\x91\xbf\x00\x00\x00\xe0\xa5\x8b\x87?\x00\x00\x00\x00\x05E{?\x00\x00\x00\xc0\xd9\x8et\xbf\x00\x00\x00@\x8d l\xbf\x00\x00\x00`/Mt?\x00\x00\x00 \xeb\xc58?\x00\x00\x00\x00I\x97p\xbf\x00\x00\x00\xc0\x1al\x96?\x00\x00\x00 a\xbfF?\x00\x00\x00@\xa2\xc9\x87\xbf\x00\x00\x00@\xf2\xeag\xbf\x00\x00\x00\x00~"\x85\xbf\x00\x00\x00`O\xc7p?\x00\x00\x00@\xa0v5?\x00\x00\x00@\xdd\xa6\x83\xbf\x00\x00\x00 \\\xefq?\x00\x00\x00\x00\x8b\xf4d\xbf\x00\x00\x00 0\x0c\x7f?\x00\x00\x00\x00\x8apS\xbf\x00\x00\x00\x00\xd1\x8dS\xbf\x00\x00\x00\xa0^\xc1\x93\xbf\x00\x00\x00\xc05\xfdv\xbf\x00\x00\x00\x80\xf7td\xbf\x00\x00\x00\xe0\xde\xb2\x85\xbf\x00\x00\x00 69\x80?\x00\x00\x00 w\xd5h?\x00\x00\x00\xe0\xea\x10a\xbf\x00\x00\x00\xc0\xf0\xd7\x86\xbf\x00\x00\x00`\xd0\xc6s\xbf\x00\x00\x00\xa0G\xcd9?\x00\x00\x00 \x11\xf5\x82?\x00\x00\x00\xc0\xec\xc9\x88\xbf\x00\x00\x00\x00_\x16\x16\xbf\x00\x00\x00\xc0\x99RT?\x00\x00\x00\x00\xf9k\x82?\x00\x00\x00`\x87\x08\x89\xbf\x00\x00\x00\xa0\xd1qy?\x00\x00\x00\x80!\xf09\xbf\x00\x00\x00\x00\xdcKp\xbf\x00\x00\x00 \x1f\xaaD\xbf\x00\x00\x00\xa0\x8e\x1aW\xbf\x00\x00\x00\x00\xe5{\x91\xbf\x00\x00\x00@\x1cM\x8e\xbf\x00\x00\x00\xc0\xffw\x93?\x00\x00\x00 \xe9\xe2\x80?\x00\x00\x00\xc0\x1c\xa2\x87\xbf\x00\x00\x00\x80F/\x89?\x00\x00\x00\xc0\x8f\xfbU\xbf\x00\x00\x00\xa0\xb4eE?\x00\x00\x00\x00\xa5\xf14?\x00\x00\x00`J\x05}?\x00\x00\x00\xa0\x9a\xc6\x88\xbf\x00\x00\x00\x80\xcb\x10{?\x00\x00\x00\x80\xa2\x01\x96\xbf\x00\x00\x00 \xdb=\x99\xbf\x00\x00\x00@)\xbc\x85\xbf\x00\x00\x00@m02?\x00\x00\x00@\xac\x0f\x8e\xbf\x00\x00\x00 h\xac\x95?\x00\x00\x00 \xd5\x02t?\x00\x00\x00\xc0\x01}w\xbf\x00\x00\x00@\x10\x82\x81?\x00\x00\x00@\xbe23\xbf\x00\x00\x00\x00\x87\x14\x9b\xbf\x00\x00\x00`\x99L}\xbf\x00\x00\x00\xc0\x03"\x87?\x00\x00\x00\x00Bux?\x00\x00\x00@\x97,5?\x00\x00\x00`7\xa3\x91?\x00\x00\x00`6Ll\xbf\x00\x00\x00 \xdd\xa5\x82?\x00\x00\x00`\x818\x86?\x00\x00\x00\xc0\x12\x1d|?\x00\x00\x00\xc0Wa6\xbf\x00\x00\x00\xc0\x9e\xeb|?\x00\x00\x00 \x94\xebk?\x00\x00\x00 \xc1\xbaQ\xbf\x00\x00\x00`\xa2D\x84?\x00\x00\x00\xe0\xc1\x13u?\x00\x00\x00 Y8\x84?\x00\x00\x00 \xa3y\x81\xbf\x00\x00\x00@\x0fUv?\x00\x00\x00\xe0\x8c\xddy?\x00\x00\x00\x80\xc9\xdcm?\x00\x00\x00 :\xca\x91?\x00\x00\x00\x00Q\xa0\x90\xbf\x00\x00\x00\x00\x0bF\x87\xbf\x00\x00\x00@O\xe6B?\x00\x00\x00\xc05\x14\x83\xbf\x00\x00\x00\xe0H\xaew\xbf\x00\x00\x00@\x08\x94\x83?\x00\x00\x00\xe0B\xa4\x88?\x00\x00\x00\x80\xcf}T\xbf\x00\x00\x00\x00\x9alv?\x00\x00\x00\xa0\xbd\xed{?\x00\x00\x00\x80J\xebX?\x00\x00\x00@B\xdc\x85?\x00\x00\x00@\x91\xf6\x87\xbf\x00\x00\x00\xc0\xc7\x88\x86?\x00\x00\x00\xe0\xc9s\x97?\x00\x00\x00\xa0\xca\xbal?\x00\x00\x00\xa0~1\x80?\x00\x00\x00\xc0k\xcea?\x00\x00\x00 \xf0\x94s\xbf\x00\x00\x00`\xa9}\x80\xbf\x00\x00\x00\xe0\x02\x85\x83?\x00\x00\x00\xa0%\xedi?\x00\x00\x00\xe0\xbf#V\xbf\x00\x00\x00\xc0p\xd0n?\x00\x00\x00@*\xa2Z?\x00\x00\x00\x00\xfe\xa6k\xbf\x00\x00\x00 ;\x07\x95?\x00\x00\x00`\x84\x1f}\xbf\x00\x00\x00\x808>\x8e?\x00\x00\x00\xa0\xddY\x81\xbf\x00\x00\x00\x80\xc2\xf4}\xbf\x00\x00\x00\xc0*6y?\x00\x00\x00 i\xbcK\xbf\x00\x00\x00\xa0\xe6N\x83?\x00\x00\x00\xa0,\xbf\x99?\x00\x00\x00@\x9cL\x91?\x00\x00\x00\x80e}m?\x00\x00\x00\x00\x11\xb5u\xbf\x00\x00\x00\xe0t\xc0}?\x00\x00\x00\xa0s+t?\x00\x00\x00\xe0\xe0\xa8~\xbf\x00\x00\x00 Z\xfa}\xbf\x00\x00\x00@\x88H\x85\xbf\x00\x00\x00`>za?\x00\x00\x00 \xd9\x94f?\x00\x00\x00`\xba\xfe\x8f?\x00\x00\x00\xc0\x91s\x8a\xbf\x00\x00\x00`\xd0])\xbf\x00\x00\x00\x80\x84[\x81?\x00\x00\x00\x80\xb4\xa6\x94?\x00\x00\x00\x80\xfc\r\x81\xbf\x00\x00\x00\x00\x91_\x88\xbf\x00\x00\x00@\xea\x84\x8b\xbf\x00\x00\x00`\xa1\xf0\x8d\xbf\x00\x00\x00\x00/4u?\x00\x00\x00@\x18M\x00?\x00\x00\x00`\x8a\xbfw\xbf\x00\x00\x00`\xc8o\x80?\x00\x00\x00@4uz\xbf\x00\x00\x00@\x10\xd5]\xbf\x00\x00\x00\x00`\xb0\x12?\x00\x00\x00`)9\x91\xbf\x00\x00\x00\xc0\x97.\x81?\x00\x00\x00@y-[\xbf\x00\x00\x00\xa0\xc0\x9d\x8d?\x00\x00\x00\xc0\xf7\xdfI\xbf\x00\x00\x00`\x00\xfe\x8c\xbf\x00\x00\x00\x00\x98\x9a\x98\xbf\x00\x00\x00\xe0\x80\xd4u?\x00\x00\x00`nm\x94?\x00\x00\x00\x00@i\x80\xbf\x00\x00\x00 \x8e\x06\x7f\xbf\x00\x00\x00\xc0\xc3\x88\x89\xbf\x00\x00\x00\xc0\xc9vn\xbf\x00\x00\x00\x80\xc9nh\xbf\x00\x00\x00\xa0}\xc4\x87\xbf\x00\x00\x00 M\xb2\x8f?\x00\x00\x00\xc0\xce\xbe\x80?\x00\x00\x00\xa0\x19\x93m?\x00\x00\x00\xa0r\x00q?\x00\x00\x00\x00\xc4Gb\xbf\x00\x00\x00@\xc5\xbc\x96\xbf\x00\x00\x00\x00\xb2r\x82\xbf\x00\x00\x00\xe0JXz?\x00\x00\x00\x00+\xb1w?\x00\x00\x00\xe0\xc7tI\xbf\x00\x00\x00@\xc2\x90`?\x00\x00\x00\xa0ncC\xbf\x00\x00\x00\xe09nb?\x00\x00\x00@\xce\x10\x95\xbf\x00\x00\x00 i\xe5\x85?\x00\x00\x00`\xefn=?\x00\x00\x00\xc0\xf3\xe4F\xbf\x00\x00\x00\xc0M\x9az?\x00\x00\x00`\x13:f?\x00\x00\x00`\xe2\x87\x91\xbf\x00\x00\x00@\x95`\x85\xbf\x00\x00\x00\x00/\xa5a\xbf\x00\x00\x00`\xe8k\\?\x00\x00\x00`\x9b\x8c|?\x00\x00\x00\x00\x94\x8b\x8b?\x00\x00\x00\x80\x9a\xd0|?\x00\x00\x00\x001\xb7j\xbf\x00\x00\x00\x80QMi?\x00\x00\x00\xc0\xa6\xb6t\xbf\x00\x00\x00\xe0\x1c\xfe\x8b\xbf\x00\x00\x00\x00\x8e\xe9\x81\xbf\x00\x00\x00\xc0\x8f\x02\x8b?\x00\x00\x00\x80\xecpu\xbf\x00\x00\x00\x00\xa9\xd5x?\x00\x00\x00\x00\xa1pV?\x00\x00\x00 \x17/\x81?\x00\x00\x00 \xe9<y?\x00\x00\x00\xe0;\xbal?\x00\x00\x00@`\xb7j\xbf\x00\x00\x00\x00\xf8\xd4`\xbf\x00\x00\x00 \xb8.\x86?\x00\x00\x00\xa0\xd1\x88|?\x00\x00\x00\x80s~h\xbf\x00\x00\x00 \x02O\x8c?\x00\x00\x00\x80W\x89s?\x00\x00\x00\xe0\xa5\x1bj\xbf\x00\x00\x00\xa0/\xe9X?\x00\x00\x00\xc0\xb5\xd5\x8f?\x00\x00\x00 \xc3Q\x92?\x00\x00\x00\x8072|?\x00\x00\x00 \x1f\xfc\x7f\xbf\x00\x00\x00@S\xdbm\xbf\x00\x00\x00\xe0\x19\xc5\x82\xbf\x00\x00\x00 qAf?\x00\x00\x00\xa0\xb3\x8d|?\x00\x00\x00\xe0]\xd8(\xbf\x00\x00\x00@g\xeay?\x00\x00\x00\xa0td_\xbf\x00\x00\x00\xa0\xfb\xd1\x87\xbf\x00\x00\x00\xe0\xac\x9bn?\x00\x00\x00`\x8c\x0f\x90\xbf\x00\x00\x00`(\xf8z?\x00\x00\x00@\x1e\x95\x7f?\x00\x00\x00\xe0\x08\x08\x83\xbf\x00\x00\x00\x80`\xbf\x8e\xbf\x00\x00\x00\xe0\xe6%o?\x00\x00\x00\xa0\xc2\x986\xbf\x00\x00\x00\x80\xf1d]?\x00\x00\x00\x00RJ\x80?\x00\x00\x00\x00\x89\xe5\x90?\x00\x00\x00\xc0\xce\xc1O?\x00\x00\x00\x80\xf9\xeb>?\x00\x00\x00\x80\xa8\xed\x82?\x00\x00\x00\xc0buh?\x00\x00\x00@N^\x17\xbf\x00\x00\x00\xe0\xf4rT?\x00\x00\x00\xe0\xfe\xdb\x85\xbf\x00\x00\x00\xe0\x19q\x90?\x00\x00\x00\xe0\x8fWH\xbf\x00\x00\x00\xe0\xe3\x95c?\x00\x00\x00@\xa2\xfdq?\x00\x00\x00\xa0\x85\x02\x8d?\x00\x00\x00\xa0TRs?\x00\x00\x00\xa07\x9bt?\x00\x00\x00\xa0&\x958?\x00\x00\x00 \x15A\x83?\x00\x00\x00\x80\xa8\x97\x85?\x00\x00\x00@f\xd5\x99?\x00\x00\x00\x80\x00:t\xbf\x00\x00\x00@\xc6\xf6\x86?\x00\x00\x00\x80\x14\xc1\x88\xbf\x00\x00\x00`zD\x8a?\x00\x00\x00\xe0L\x87~\xbf\x00\x00\x00 Lld\xbf\x00\x00\x00\xa0y\xa4t?\x00\x00\x00\xc0\xd1\xda}?\x00\x00\x00\xa0\x8f\xbc~\xbf\x00\x00\x00\x00\xf2.\x84?\x00\x00\x00\xe0\xcc\x80\x80\xbf\x00\x00\x00\x00B\x15m?\x00\x00\x00\x80L\xfc\x84\xbf\x00\x00\x00 \x9a\x00\x93\xbf\x00\x00\x00@A}j\xbf\x00\x00\x00\xe0\xe8\xbd\x87\xbf\x00\x00\x00\x00\xea\x86~?\x00\x00\x00\xe0+\x97\x80?\x00\x00\x00\xa0\x95\x86\x93?\x00\x00\x00\x00=\xb0u\xbf\x00\x00\x00@w2w?\x00\x00\x00 \x1eX9\xbf\x00\x00\x00`s\x98\x89?\x00\x00\x00\xe0\xdd\x02\x92\xbf\x00\x00\x00\xc0=\x08A?\x00\x00\x00@\xc5|`\xbf\x00\x00\x00\x00\x02\xbef\xbf\x00\x00\x00@e|\x92?\x00\x00\x00\x80\xd22m\xbf\x00\x00\x00\xe0\xe0\x86\x96?\x00\x00\x00`\xc6M\x81\xbf\x00\x00\x00\xc0\xb85\x81?\x00\x00\x00\xc0\x15\xbeX?\x00\x00\x00\xc06\xcf\x85\xbf\x00\x00\x00`\x1d\xa8l\xbf\x00\x00\x00\x00\x9c\xda\x86?\x00\x00\x00\xe0P\xc6\x96\xbf\x00\x00\x00\xe0\xb6\x19t?\x00\x00\x00\xc0\xe8\xa8\x91\xbf\x00\x00\x00`\xed\x0cx\xbf\x00\x00\x00 \x9b\xf0\x91\xbf\x00\x00\x00 \xdc\xfb\x83?\x00\x00\x00\x80\xfd\x0f\x91\xbf\x00\x00\x00\xc0Q\xa7\x81\xbf\x00\x00\x00\x80s\x9a\x8c?\x00\x00\x00\x80T\x12\x93?\x00\x00\x00\xe0\xad\xae`?\x00\x00\x00\xe0%\x05\x8a\xbf\x00\x00\x00@\xd5\x12i\xbf\x00\x00\x00\xc0\xc3(q?\x00\x00\x00\xa0\xf7F\x80?\x00\x00\x00 \x17\xac\x8f\xbf\x00\x00\x00\x807q\x88?\x00\x00\x00\xc0*cX\xbf\x00\x00\x00\x00\xcd[x?\x00\x00\x00\x00la\x82\xbf\x00\x00\x00\x80E\x07y?\x00\x00\x00\xe0q\xec\x85?\x00\x00\x00\xe0f\x16e\xbf\x00\x00\x00\xc0N\xec\x85\xbf\x00\x00\x00\xa0(\xd2\x83\xbf\x00\x00\x00\xc0\x84]\x7f\xbf\x00\x00\x00\xc0\x07\xa1\x8f\xbf\x00\x00\x00\x00J\x03\x84?\x00\x00\x00 \xd7V\x85\xbf\x00\x00\x00\xa0\xff\x0c\x80\xbf\x00\x00\x00`\xeb\x9dc?\x00\x00\x00 s1\x91\xbf\x00\x00\x00\xc0\x9aLW?\x00\x00\x00@c\xd6\x8a?\x00\x00\x00\x80\xcd\xaap\xbf\x00\x00\x00\x800\xa2y\xbf\x00\x00\x00`\xb0\xbbP?\x00\x00\x00\x00\xa9\x98\x92?\x00\x00\x00\xe0\x9e?k\xbf\x00\x00\x00@\x87\xfc\x8d?\x00\x00\x00@\x03\xf6\x91?\x00\x00\x00@\xc2\x8av?\x00\x00\x00`\xceb\x91\xbf\x00\x00\x00\xe0\xbdm\\?\x00\x00\x00@}\x10d\xbf\x00\x00\x00 \xb0\xd2]?\x00\x00\x00\x00\xee\x8dz?\x00\x00\x00@\xa0\r5\xbf\x00\x00\x00`\xee\xabi\xbf\x00\x00\x00\xc0\xe8"s\xbf\x00\x00\x00\x00\xf4\xdf\x91?\x00\x00\x00`\r\\\x85\xbf\x00\x00\x00\x002\xc2\x82\xbf\x00\x00\x00\xc0\xce\x1a\x89\xbf\x00\x00\x00\xa0%\xdd\x8f?\x00\x00\x00\xc0\xd7\xf0p?\x00\x00\x00\xa0a\xd4K\xbf\x00\x00\x00\xc0\xd9\x8c\x83\xbf\x00\x00\x00\x80\xa8\x8al\xbf\x00\x00\x00\xa0\xaa\xb8\x94?\x00\x00\x00`\x8aFv?\x00\x00\x00@]\xb8\x85\xbf\x00\x00\x00\xe0\xe9\xb7m?\x00\x00\x00`I\x9fT?\x00\x00\x00\xa07c\x83\xbf\x00\x00\x00 \xcbT\x81?\x00\x00\x00\xc0\x08_\x7f?\x00\x00\x00\xc0Al\x85\xbf\x00\x00\x00 \xb8}\x80?\x00\x00\x00\x00]q^?\x00\x00\x00`h\x9cq\xbf\x00\x00\x00\xc0\'\x1a\x92\xbf\x00\x00\x00\xa0\x97\xcc\x8d\xbf\x00\x00\x00\x00\xef\xf1{?\x00\x00\x00\xa0 \xec\x8a?\x00\x00\x00@K\x85[?\x00\x00\x00\xc0\x10]Z\xbf\x00\x00\x00\xe0-K~?\x00\x00\x00\xe0s\xe8\x82\xbf\x00\x00\x00`\xeb{q?\x00\x00\x00\xa0\x96\xc7d\xbf\x00\x00\x00\x80e\xb3\x88?\x00\x00\x00\xa0\x153\x9a\xbf\x00\x00\x00@V\x15u\xbf\x00\x00\x00\xe0\xc7\xfes?\x00\x00\x00 !\x8cd\xbf\x00\x00\x00 \x80\xd9\x82\xbf\x00\x00\x00 \xb8\x04\x7f\xbf\x00\x00\x00\x00[X\x91?\x00\x00\x00\xa0\x18\x1b\x8d\xbf\x00\x00\x00`\xc0\x04\x8e?\x00\x00\x00`\xea\xa8}?\x00\x00\x00@\xc8\x1du\xbf\x00\x00\x00`\x0f\xb98\xbf\x00\x00\x00\x00Q\x17\x8b\xbf\x00\x00\x00@\x1d[\x91?\x00\x00\x00 i2\x92\xbf\x00\x00\x00 @\xa5\x90?\x00\x00\x00@s\xea|?\x00\x00\x00`\xdc)X?\x00\x00\x00\x00\xd8J\x93?\x00\x00\x00\x80\x19\xbdw?\x00\x00\x00\xc01\rj\xbf\x00\x00\x00 \xf7\xb4u?\x00\x00\x00\x00\x8b\x96|?\x00\x00\x00`\xa5ux?\x00\x00\x00 9\x85j?\x00\x00\x00@\xf9\xe1z?\x00\x00\x00`\xb2ym\xbf\x00\x00\x00\x80\t\x90\x9f?\x00\x00\x00@\xf9a\x8c?\x00\x00\x00`e\xe6Z\xbf\x00\x00\x00\xa0C\xcf\x82\xbf\x00\x00\x00\x00\x84\xcae?\x00\x00\x00\x00c.z\xbf\x00\x00\x00`\xcbo\x82?\x00\x00\x00\xe0\x9d\x8fw\xbf\x00\x00\x00\xe0\x96\xb5k\xbf\x00\x00\x00@8\x88\x86?\x00\x00\x00`2ui\xbf\x00\x00\x00\x80\xca6|?\x00\x00\x00\xc0\x89C\x81?\x00\x00\x00\xa0\x9c\x01u?\x00\x00\x00@\xfb\x12d?\x00\x00\x00 Q\x04\x82?\x00\x00\x00@\xe2,>\xbf\x00\x00\x00`\xf1\xe5\x8f\xbf\x00\x00\x00\xe0\xdb\xae}?\x00\x00\x00\xc0\xcd\x06\x83?\x00\x00\x00\x80-:\x87?\x00\x00\x00\xc0J\x06t\xbf\x00\x00\x00\x80\xba3\x8d?\x00\x00\x00\x00\xaf\xffr?\x00\x00\x00@\xb1\xfd\x80?\x00\x00\x00@B\x18v?\x00\x00\x00\xa0\x0cEu?\x00\x00\x00  \xeeR?\x00\x00\x00\xe0\x1e\xbbz\xbf\x00\x00\x00 V|k?\x00\x00\x00\xc0\xe7\xb9p?\x00\x00\x00` \x00\x92\xbf\x00\x00\x00\xe0\x7f\x12q\xbf\x00\x00\x00@\xc0u|?\x00\x00\x00\xe0\x9e\x1ai\xbf\x00\x00\x00 \x15\xe3\x81\xbf\x00\x00\x00\xe0\xed\xcbr?\x00\x00\x00`c?q?\x00\x00\x00\xe0r\xc2\x85\xbf\x00\x00\x00\x00\x08c|?\x00\x00\x00\xe0c\xfa\x91\xbf\x00\x00\x00\xa0w\xe0\x94\xbf\x00\x00\x00@z\xf9D\xbf\x00\x00\x00\xc0\xac\xf9w?\x00\x00\x00\xc08\x0bu\xbf\x00\x00\x00\xa0&\xc5\x7f\xbf\x00\x00\x00\xa0{C{\xbf\x00\x00\x00\x80\xe9\x86\x91?\x00\x00\x00\xa0{x\x85?\x00\x00\x00\xc0\xf0\x15v?\x00\x00\x00\x80an`\xbf\x00\x00\x00\xe0N\xd5\x90?\x00\x00\x00\x80\xe3\xd7q\xbf\x00\x00\x00@\xf8\xa7\x8a\xbf\x00\x00\x00\x00\x02&\x92?\x00\x00\x00\xa0uLx?\x00\x00\x00`\xcc\\{\xbf\x00\x00\x00@\x87A\x91\xbf\x00\x00\x00\xa04\x9d\x7f\xbf\x00\x00\x00\xc0c\x9as?\x00\x00\x00@\xaa\xab\x8f?\x00\x00\x00 Rg\x80\xbf\x00\x00\x00`\x0f\xef\x97?\x00\x00\x00\xa0\xda\xceu\xbf\x00\x00\x00\xc0l\xc0a?\x00\x00\x00\x80\xd6\x11\x89\xbf\x00\x00\x00 \xf4\xe1z\xbf\x00\x00\x00`@\n\x8d?\x00\x00\x00\xa0\xc1\xd9t?\x00\x00\x00@\x06\x1b\x8c?\x00\x00\x00\xe0\t\xef\x8d?\x00\x00\x00\xe07\xcdt\xbf\x00\x00\x00`b\xf0\x91\xbf\x00\x00\x00\x00\xa6\xd6o?\x00\x00\x00@\x8c\xbd\x87\xbf\x00\x00\x00\x80\\\x0c\x9a?\x00\x00\x00\xa0\xbfsc?\x00\x00\x00\xa0I\xaep?\x00\x00\x00 Kz\x8e?\x00\x00\x00\xa0\xbf\xe32?\x00\x00\x00\xe0\xbf\x81j?\x00\x00\x00\xa0^\x05\x91\xbf\x00\x00\x00 E\x88\x85\xbf\x00\x00\x00`\x0c\xd8Q\xbf\x00\x00\x00\xe0\x84\xd9l?\x00\x00\x00\x00T\x86a?\x00\x00\x00 \x84\x13\x93?\x00\x00\x00 Y-y?\x00\x00\x00\x80\x8b\xaf\x82\xbf\x00\x00\x00\xe0\x14C_\xbf\x00\x00\x00\x00\xb3L\x81\xbf\x00\x00\x00@\xbc`{\xbf\x00\x00\x00`\xcf\x97G?\x00\x00\x00\x00\x0e\xeb\x82\xbf\x00\x00\x00\xe0\xd2?w?\x00\x00\x00`\xcd\xb5x\xbf\x00\x00\x00\xe0\x93et\xbf\x00\x00\x00\x80\x92\xdae\xbf\x00\x00\x00@\xdd5\x89\xbf\x00\x00\x00`=\x0fr?\x00\x00\x00`6~\x90\xbf\x00\x00\x00@\xe3\x9c\x83?\x00\x00\x00\x80WE\x88\xbf\x00\x00\x00 e\xe0|?\x00\x00\x00\xc0\n\x9bb\xbf\x00\x00\x00\xc0R\xcc\x82\xbf\x00\x00\x00@\xf1\x10\x95?\x00\x00\x00`3\xe3\x83?\x00\x00\x00\x00J\x7f\x8a?\x00\x00\x00\x80\x93\x1af\xbf\x00\x00\x00\xa0\x80\x1e\x83?\x00\x00\x00`\xda\x9a\x82?\x00\x00\x00`\xc21|?\x00\x00\x00\xa0z\xbd\x82\xbf\x00\x00\x00@F\xe5y?\x00\x00\x00\x80\xfe\xfao?\x00\x00\x00\xe0MZl\xbf\x00\x00\x00\xc0@1h?\x00\x00\x00 \xd3\x00\x86\xbf\x00\x00\x00\xe0\xa6\x08\x82?\x00\x00\x00\x80\xe2(\x8c?\x00\x00\x00\xa0\r\xce\x91\xbf\x00\x00\x00\xc0Mv\x85\xbf\x00\x00\x00 \x18{\x91\xbf\x00\x00\x00\xe0\x93\x85\x82\xbf\x00\x00\x00@2#G?\x00\x00\x00\x00\x12L\x7f?\x00\x00\x00`\xe7\xd0Z?\x00\x00\x00\x80\xe4\xed^\xbf\x00\x00\x00\x80\xaa9u?\x00\x00\x00 y\xe3q?\x00\x00\x00 \x05\xa0\x85\xbf\x00\x00\x00\xe0\xe3m\x8e?\x00\x00\x00\xa0\xb2}\x83\xbf\x00\x00\x00@\x8dGQ?\x00\x00\x00\xe0\x975n\xbf\x00\x00\x00\xc0\xdc t?\x00\x00\x00@\x1e\xdb\x80\xbf\x00\x00\x00\x80\xde\xd4u?\x00\x00\x00\xc0\x107\x8d\xbf\x00\x00\x00\xc0\x9e\x81\x90?\x00\x00\x00\xe0B\x01\x8b?\x00\x00\x00\xc0M`r?\x00\x00\x00\x80\xf2tp?\x00\x00\x00\xa0\x87\x07~?\x00\x00\x00\x80uRu?\x00\x00\x00\xc0\xa8Q\x8f?\x00\x00\x00\xc0\x84\x0bC\xbf\x00\x00\x00\xe0\xbb\x9a/\xbf\x00\x00\x00\x00\x9d\xae\x8f\xbf\x00\x00\x00`\xba\\r?\x00\x00\x00\xa0o1r\xbf\x00\x00\x00\xe0:\x08\x93\xbf\x00\x00\x00\x00Vv\x84\xbf\x00\x00\x00\xc0\xa9\xb5\x90?\x00\x00\x00@#h\x91?\x00\x00\x00@\xe6|~?\x00\x00\x00`\x07?w?\x00\x00\x00\x80[\xc9\x84?\x00\x00\x00@\xad\x8f_\xbf\x00\x00\x00\xe0\xd7fT\xbf\x00\x00\x00\x00@\x13\x87?\x00\x00\x00\xa0\xde\xb6\x91\xbf\x00\x00\x00\x80\xf4l\x83?\x00\x00\x00\x00\x95m\x8e?\x00\x00\x00`+\x84\x95\xbf\x00\x00\x00@k>\x8a\xbf\x00\x00\x00\xc0\xd4\xae\\\xbf\x00\x00\x00@A\xa7k?\x00\x00\x00\x80u.p\xbf\x00\x00\x00\xe0\x07SP?\x00\x00\x00 \x05:\x8f\xbf\x00\x00\x00\xe0n\x15\x84?\x00\x00\x00\x00\xd0\xd7X?\x00\x00\x00`\xba\xb5}\xbf\x00\x00\x00`\xcfnP\xbf\x00\x00\x00`:hR\xbf\x00\x00\x00\xe0x\xf5"?\x00\x00\x00\x00\x80kn?\x00\x00\x00`\xf6OW\xbf\x00\x00\x00\xe0+\x08:?\x00\x00\x00\xa0y6\x87?\x00\x00\x00 \x12\x8c\x8d\xbf\x00\x00\x00\xc0\x91\xc4\x87\xbf\x00\x00\x00\xa0\x0c\xe4u?\x00\x00\x00\x80\x9eI\x91?\x00\x00\x00\x00\x12\x95\x92\xbf\x00\x00\x00\x80\xf6%y?\x00\x00\x00\x80\xaf\x87}\xbf\x00\x00\x00\xc0\xa1\x82u?\x00\x00\x00`[\x8ay?\x00\x00\x00\xc0)\xb2]\xbf\x00\x00\x00\x80\x9f\x91e?\x00\x00\x00`\x11\x8bu?\x00\x00\x00 3]t?\x00\x00\x00\xe0\n\x06r?\x00\x00\x00\x00P\x92~\xbf\x00\x00\x00`\x11gW?\x00\x00\x00\xc0Le}\xbf\x00\x00\x00@/\xdaw\xbf\x00\x00\x00\xe0\'\xcbQ\xbf\x00\x00\x00\xe0\xd0\x0fk\xbf\x00\x00\x00\x00\xb1\x00h\xbf\x00\x00\x00`\xb4\xb0\x80\xbf\x00\x00\x00\x80\xfa\x01k?\x00\x00\x00@#x\x8f?\x00\x00\x00\x00\xe9\xeai?\x00\x00\x00\x00\xa9pl?\x00\x00\x00@\x9d\x10\x81?\x00\x00\x00\xa0\xf8\xcb\x8e\xbf\x00\x00\x00@\xc4\xb0w?\x00\x00\x00\xc0\x9cu\x7f\xbf\x00\x00\x00\xc0\xa2/J\xbf\x00\x00\x00\x00\x91O\x8d\xbf\x00\x00\x00\x00=\x19\x82?\x00\x00\x00\x80\xab\x03\x91\xbf\x00\x00\x00@\xc70q\xbf\x00\x00\x00\xc0`a\x9a\xbf\x00\x00\x00@\x1dNy?\x00\x00\x00\xe0\xa6\x89h?\x00\x00\x00\x80\xa4T\x81?\x00\x00\x00\x001\xc5\x84?\x00\x00\x00\xa0\x00\xa8h\xbf\x00\x00\x00 \xe7\x86??\x00\x00\x00 \x08\x1e}?\x00\x00\x00\xa0\x9f\x14q\xbf\x00\x00\x00\x80\xd3\xe4\x93?\x00\x00\x00 \x10\x8d+\xbf\x00\x00\x00\xe0\xc9\xf5\x83\xbf\x00\x00\x00\xe0q\xbfx\xbf\x00\x00\x00 FC\x83\xbf\x00\x00\x00\xa0\xe8\xcew?\x00\x00\x00\xe0y\'\x86?\x00\x00\x00\xc0\x90\x17@\xbf\x00\x00\x00 \x87xn\xbf\x00\x00\x00\x00%\xe94?\x00\x00\x00\xa0\xf4|\x89?\x00\x00\x00\xa0\x123`?\x00\x00\x00\xa0D\x02n?\x00\x00\x00`zNp?\x00\x00\x00\x00>\x8f\x83\xbf\x00\x00\x00\xe0\x01\xdem\xbf\x00\x00\x00\xc0x2\x80\xbf\x00\x00\x00\xa0\xa6\xc6\x92?\x00\x00\x00 \xc8\xdcV\xbf\x00\x00\x00 \xe8@{\xbf\x00\x00\x00\xc0\x00\x18\x85\xbf\x00\x00\x00\x80\x17\xffw\xbf\x00\x00\x00\xa0\xeb\x96B?\x00\x00\x00\xa0\xf3\x91B?\x00\x00\x00\xc0\xc7*\x90\xbf\x00\x00\x00`\x84Y~?\x00\x00\x00\x80\xda\x92\x91\xbf\x00\x00\x00\xc0\xd7d\x99?\x00\x00\x00\x00$\xc0q\xbf\x00\x00\x00`a\xc3\x86?\x00\x00\x00@\xa9\tR?\x00\x00\x00@\xc6kE?\x00\x00\x00`\xe4\x87n?\x00\x00\x00`\x91\xc9q?\x00\x00\x00@\x0ei@\xbf\x00\x00\x00\x80\x02\x1e\x80?\x00\x00\x00\x80J\xee\x89\xbf\x00\x00\x00\xe0\x02Oe\xbf\x00\x00\x00\x80\xab\x85\x85\xbf\x00\x00\x00\xe0\xe9`p\xbf\x00\x00\x00`\x976\x1d\xbf\x00\x00\x00\xc0+\x03~\xbf\x00\x00\x00\xe0\xdb\x95p?\x00\x00\x00\xe0\xcc{&?\x00\x00\x00\xc0)2\x8e\xbf\x00\x00\x00\x80\xbd\xfag?\x00\x00\x00\xe06\xf6\x90?\x00\x00\x00@\xae\xd4K\xbf\x00\x00\x00 \x9d\xed\x8e?\x00\x00\x00\xa0z\xb2\x9b?\x00\x00\x00\xe0\x02\xecr\xbf\x00\x00\x00\xe0\x045{\xbf\x00\x00\x00@z\xc0\x8c\xbf\x00\x00\x00\xa0\xd3\xb8\x8d\xbf\x00\x00\x00@\xb9\x91\x7f\xbf\x00\x00\x00 \x02\xa8_\xbf\x00\x00\x00\xc0\xa6\x00f?\x00\x00\x00\xa0Qk6\xbf\x00\x00\x00\xc0\x88[q?\x00\x00\x00\xa0\xc6\nS\xbf\x00\x00\x00\x00*\x17A\xbf\x00\x00\x00\x80\xc0\x10n\xbf\x00\x00\x00`\xe2\xa9}\xbf\x00\x00\x00@\x93)t\xbf\x00\x00\x00\xe0\x9e\xc1Y?\x00\x00\x00 \x8b\x05n?\x00\x00\x00\xe0\xc2bj\xbf\x00\x00\x00\xa0\x86\x11h?\x00\x00\x00\xa0i$}\xbf\x00\x00\x00\x80\xa6\x0ef?\x00\x00\x00\x80E6C\xbf\x00\x00\x00@9\xd1N?\x00\x00\x00\xc0\xe7\x18\x91\xbf\x00\x00\x00 \xf3\xc8$\xbf\x00\x00\x00`;\xe9\x81?\x00\x00\x00\x80$9W\xbf\x00\x00\x00\xe0\xf6\xb8\x88\xbf\x00\x00\x00\xa0^\x86k\xbf\x00\x00\x00@\x85\xe0m?\x00\x00\x00@8\x83\x80\xbf\x00\x00\x00 /\xf5w?\x00\x00\x00\xc0I\x19\x87\xbf\x00\x00\x00`@\xaau\xbf\x00\x00\x00\x80\xe4"\x1f?\x00\x00\x00`\x035\x8a?\x00\x00\x00\x80t9q?\x00\x00\x00\xe0A\x12a?\x00\x00\x00@\x08\x9f\x9c?\x00\x00\x00 \xbd2\x83?\x00\x00\x00\xc0\xb7Ru?\x00\x00\x00 \xd8\xf3\x81?\x00\x00\x00 \xe6\xd7o?\x00\x00\x00\x00\xc7\xd0n\xbf\x00\x00\x00\x00J\x86z?\x00\x00\x00\xe0\x97\xd7\\?\x00\x00\x00\xe0\xee\xf3\x85?\x00\x00\x00`\x01%w?\x00\x00\x00\xa0/\xc8\x80?\x00\x00\x00@\x8fPv?\x00\x00\x00\xc0\xa3\xeaw?\x00\x00\x00@\xcb\xee\x8d\xbf\x00\x00\x00\x00\xf4V\x8f?\x00\x00\x00\xe0\xd9\xf8\x8d?\x00\x00\x00\xc0B\xd0c?\x00\x00\x00\xc0\xe2\xc1\x84?\x00\x00\x00\xe0\xd1\xaa\x8c?\x00\x00\x00\x00\x1d<\x85?\x00\x00\x00\xe0\xa4\xfb\x87?\x00\x00\x00\xe0_P|\xbf\x00\x00\x00`\x86$\x91\xbf\x00\x00\x00\xe0\xf1T.\xbf\x00\x00\x00 =,\x9e\xbf\x00\x00\x00`\n?\x94\xbf\x00\x00\x00 D\xb6\x92?\x00\x00\x00\x00\x87sb?\x00\x00\x00`-5s\xbf\x00\x00\x00 8DJ\xbf\x00\x00\x00\xc0\xb1o\x92?\x00\x00\x00 \xb5\xf9\x83?\x00\x00\x00\x80t\xae|?\x00\x00\x00\xc0\xa2\xbbg\xbf\x00\x00\x00`\xd8\xa5x\xbf\x00\x00\x00\xe0O\x98\x91\xbf\x00\x00\x00@\xca\x01y\xbf\x00\x00\x00 #\x1e\x81\xbf\x00\x00\x00@r\x9eQ\xbf\x00\x00\x00`)\x08y?\x00\x00\x00\xc0\xcd\x87\x81?\x00\x00\x00\xa0\x12\xb6q\xbf\x00\x00\x00`\xb3\x19D\xbf\x00\x00\x00\x80/%\x92?\x00\x00\x00\x00\xa1\xf3\x7f?\x00\x00\x00\xe0\xed\x97\x85\xbf\x00\x00\x00 1\xe2\x83?\x00\x00\x00\xc0o\xa6b?\x00\x00\x00`\xa0\x81\x81?\x00\x00\x00@\xd95\x8e?\x00\x00\x00 \xa3i\x89\xbf\x00\x00\x00\x00\xd5\xf7r\xbf\x00\x00\x00\x00\xa6\x862\xbf\x00\x00\x00 \xa9\xd9\x90\xbf\x00\x00\x00@u\x00\x82\xbf\x00\x00\x00\xe0\xb5\x89c?\x00\x00\x00 \xca\xc6D?\x00\x00\x00\x00\x1cFi\xbf\x00\x00\x00\x80ko\x7f?\x00\x00\x00\xe0\xf4\x15\x80\xbf\x00\x00\x00@\x88\xdb\x90?\x00\x00\x00`\xc3Q{\xbf\x00\x00\x00`\x94m\x80?\x00\x00\x00`-\xc8??\x00\x00\x00\x00\xdd/N?\x00\x00\x00`\x81\x86T\xbf\x00\x00\x00\x00\xa3`q\xbf\x00\x00\x00\xa0\xc0\xf3\x90?\x00\x00\x00\x80@Ru?\x00\x00\x00@\x99\xe0s\xbf\x00\x00\x00\xa0H\xcc\x8b\xbf\x00\x00\x00@\xbf#f?\x00\x00\x00\x80\x95\xd6Y?\x00\x00\x00`#/r?\x00\x00\x00\xc0\x95\x0b!?\x00\x00\x00\xc0.\xa8U\xbf\x00\x00\x00`4\xcf_?\x00\x00\x00\xc0\xf8Kq\xbf\x00\x00\x00\xe0|4\x8e?\x00\x00\x00\xa0\x06\x01[?\x00\x00\x00@\xecss\xbf\x00\x00\x00\x00]\xaf\x95?\x00\x00\x00\xa0R\xe4u\xbf\x00\x00\x00\x80}\xb3*\xbf\x00\x00\x00\x00@\x17\x84\xbf\x00\x00\x00`\x8a\x9ba\xbf\x00\x00\x00\xa0\xbb\xb5\x8d?\x00\x00\x00\xc0\xf1\x12\x89\xbf\x00\x00\x00\xe0=\xf7x?\x00\x00\x00 \xca\xdb|?\x00\x00\x00@\xcf\xc2\x82?\x00\x00\x00\xc0\xa7\xa2\x89?\x00\x00\x00\xc0#\xbb\x89?\x00\x00\x00\xe0\x96!\x81\xbf\x00\x00\x00\xc0r6[?\x00\x00\x00\x00\xf7?\x8a?\x00\x00\x00\xa0\nye\xbf\x00\x00\x00\x00\xcbw|\xbf\x00\x00\x00 :\xab\x80?\x00\x00\x00@(\xbe\x80?\x00\x00\x00\x00"Nr\xbf\x00\x00\x00@R:v\xbf\x00\x00\x00\xe0\x7f\xf7Q?\x00\x00\x00@pzz\xbf\x00\x00\x00\x00\xcdxw\xbf\x00\x00\x00\x80\xcd\xfa\x82\xbf\x00\x00\x00\xe0\xbd\xdd\x82?\x00\x00\x00@\x17iq\xbf\x00\x00\x00\xe0\xba\x01x\xbf\x00\x00\x00@\xb6\x9e\x91?\x00\x00\x00`\xc6\xe7\x82?\x00\x00\x00@\x85\xe0\x85\xbf\x00\x00\x00\x80\x1a\xbc\x97?\x00\x00\x00@-\xf3\x96?\x00\x00\x00`\x885_\xbf\x00\x00\x00\x00\x84\x95\x96?\x00\x00\x00\xe0\xb4$\x96\xbf\x00\x00\x00@\xfb3r\xbf\x00\x00\x00\x00\x19\x9ej?\x00\x00\x00 \xf9Fw\xbf\x00\x00\x00\xe0\x87\x12`\xbf\x00\x00\x00\xc0\xc1\xa7\x84\xbf\x00\x00\x00\x00\xb4\xd5\x9d\xbf\x00\x00\x00\x80\xf6As?\x00\x00\x00\xe0\xb9\x18\x87\xbf\x00\x00\x00@\x15\x05x\xbf\x00\x00\x00@\x86\x9a{\xbf\x00\x00\x00@ \x9eW?\x00\x00\x00@\xc9\xe2\x86?\x00\x00\x00\x80\xa6\x9b\x89\xbf\x00\x00\x00\x80\xe3B\x84?\x00\x00\x00 \xaeut\xbf\x00\x00\x00 m*\x8c\xbf\x00\x00\x00\xa0D\xc6v\xbf\x00\x00\x00\xe0P\x9a@\xbf\x00\x00\x00\xa05ST\xbf\x00\x00\x00\xa0w\xe2\x82\xbf\x00\x00\x00\x00\x85d\x8a\xbf\x00\x00\x00 \xb6\x97\x87\xbf\x00\x00\x00 \x1f\xdd\x81\xbf\x00\x00\x00\xe0\xa8\x16\x86?\x00\x00\x00\xe0\x0c\x90v?\x00\x00\x00\xa0\xbf.\x92?\x00\x00\x00\x00*M\x8d\xbf\x00\x00\x00`\xe7\x90\x83?\x00\x00\x00\x00;\xfdU?\x00\x00\x00@9C\x7f?\x00\x00\x00`\x16\\j?\x00\x00\x00\xc0\xbc\x03\x93\xbf\x00\x00\x00\x00&\x85\x85?\x00\x00\x00 \xcd\xd2d?\x00\x00\x00@^\x8e\x84?\x00\x00\x00\xc0\xc9\xfax?\x00\x00\x00\xc0\x93\xc4w?\x00\x00\x00\xc0\xc3pF?\x00\x00\x00\x00\xbc\xe0\x8a\xbf\x00\x00\x00@\xc4\xc2B\xbf\x00\x00\x00`\x9d5\x83\xbf\x00\x00\x00`\x94\x9e\x96\xbf\x00\x00\x00@\xa0c\x8b\xbf\x00\x00\x00\x80\xdc~\x8e\xbf\x00\x00\x00\xe0\xa9\x87\x89\xbf\x00\x00\x00 d\xe0\x86\xbf\x00\x00\x00\xa0#.\x85\xbf\x00\x00\x00 \x89\xcf\x91?\x00\x00\x00\xe0\xad\'x\xbf\x00\x00\x00\xa0\xe0\xa0\x93\xbf\x00\x00\x00\xc0\xc3g\x89\xbf\x00\x00\x00\x80\xc8=<\xbf\x00\x00\x00 *\xf8\x7f\xbf\x00\x00\x00\x80U\x12\x83\xbf\x00\x00\x00\x00\xe4$\x90?\x00\x00\x00\xc0?,E\xbf\x00\x00\x00\xc0Q\xf7{\xbf\x00\x00\x00\x00\xa9]\x7f\xbf\x00\x00\x00@\xf8M`\xbf\x00\x00\x00`W\xc1:\xbf\x00\x00\x00\x00\x89\xf9w?\x00\x00\x00\xa0\x97\xa1V\xbf\x00\x00\x00\x00\n\x97\x8c?\x00\x00\x00`\x06:v?\x00\x00\x00\x80\xd8\xd5\x81?\x00\x00\x00\x00\x1b[\x8f?\x00\x00\x00\xe0\x83\xfe`?\x00\x00\x00@\xf5)\x7f?\x00\x00\x00@u\x00|\xbf\x00\x00\x00\xa0:2{\xbf\x00\x00\x00`M\xa4J\xbf\x00\x00\x00\xa02\x9c\x7f\xbf\x00\x00\x00\x00\x97aP?\x00\x00\x00`\xd4q\x8b\xbf\x00\x00\x00\xa0oN1?\x00\x00\x00\xa0\xea\xf5\x90\xbf\x00\x00\x00\x00\xf8;b?\x00\x00\x00`\xfal\x96\xbf\x00\x00\x00@S\xe6~\xbf\x00\x00\x00\xa0\x17\xe6c\xbf\x00\x00\x00@S%j\xbf\x00\x00\x00\xc0\x15\x86\x83?\x00\x00\x00\xe0\x117r?\x00\x00\x00\xa0\xd6,t\xbf\x00\x00\x00\x00\x80\x11\x83\xbf\x00\x00\x00 {\xc7\x88?\x00\x00\x00\x00\x1a`u?\x00\x00\x00\xe0n\xa4|?\x00\x00\x00\xa0\xa8\x9d\x8f\xbf\x00\x00\x00`\x03\x0fs?\x00\x00\x00\xa00\xc0\x91?\x00\x00\x00\xe0\xda\xb6p?\x00\x00\x00@#\x85:?\x00\x00\x00\xc0?\x11z?\x00\x00\x00\xa02V\x8b?\x00\x00\x00\xc0a\xc8\x94?\x00\x00\x00`d\xe4\x8b?\x00\x00\x00\xa0;\xb3f?\x00\x00\x00 ^\x0fz\xbf\x00\x00\x00\xc0\xe3\x93\x8d\xbf\x00\x00\x00\x80*\xa6u?\x00\x00\x00\x80\x1f\xa6\\?\x00\x00\x00\xa0huu?\x00\x00\x00 [\xdf\x94?\x00\x00\x00\x80&\xfeS?\x00\x00\x00 \xdfo\x88?\x00\x00\x00\xa0$\x05\x92?\x00\x00\x00 \x80\x9e\x97?\x00\x00\x00\xc0\xb4\x12\x82\xbf\x00\x00\x00\xe0\x07/A?\x00\x00\x00\x80\xc3\xbao?\x00\x00\x00\xc0\xbf\x8d\x92?\x00\x00\x00@\xe4wx?\x00\x00\x00\x80DGz?\x00\x00\x00\xe0\xf5\x1b\x87?\x00\x00\x00@\xe73\x8a?\x00\x00\x00 \xab\xf5u?\x00\x00\x00\x80\x02ZR\xbf\x00\x00\x00`\xae\x0e\x14\xbf\x00\x00\x00\xe0W\x06p?\x00\x00\x00\x00\xe8\xd0\x97?\x00\x00\x00@+\xcbS?\x00\x00\x00\x00\xa4\x92\x83\xbf\x00\x00\x00\xc0\x0c\x05s\xbf\x00\x00\x00@):^\xbf\x00\x00\x00\xa0\x07\x86I\xbf\x00\x00\x00\xe0]\xc4d?\x00\x00\x00\xe0[8D\xbf\x00\x00\x00\xc0\x94\x84\x8e?\x00\x00\x00`\x9ei\x85\xbf\x00\x00\x00 c]S?\x00\x00\x00@\x08\xc1Q\xbf\x00\x00\x00\xa0~\xdf_\xbf\x00\x00\x00`/\x82\x7f?\x00\x00\x00\x00I\xb3w?\x00\x00\x00`\xba1p?\x00\x00\x00\x00QP\x8a?\x00\x00\x00@\xb5\xbd^\xbf\x00\x00\x00 o\xd8\x85?\x00\x00\x00\x00N\x81\x84?\x00\x00\x00\xc0\xd5\xbfz\xbf\x00\x00\x00\xe0\xea\xea\x84\xbf\x00\x00\x00\x80\xce\xeel\xbf\x00\x00\x00\xa0C\xea~?\x00\x00\x00\xa0\x9b\x13\x86\xbf\x00\x00\x00\x00\xf6\x9dn\xbf\x00\x00\x00`W\xb3\x88?\x00\x00\x00\xc0\xfa\x00\x92?\x00\x00\x00`\xb3DS?\x00\x00\x00@\xc5\xa5u?\x00\x00\x00\x80?\xa9R?\x00\x00\x00 Y\xb9\x87\xbf\x00\x00\x00\x80\x81\xc9v?\x00\x00\x00\x80O\x9b\x7f?\x00\x00\x00\x00\x87\x15\x96\xbf\x00\x00\x00\xe0G\x9b\x95\xbf\x00\x00\x00@\xe0\xf4\x8e?\x00\x00\x00 \xc9(\x91\xbf\x00\x00\x00\xe0s\xf2~\xbf\x00\x00\x00\xa0L\xc0\x87?\x00\x00\x00\xa0x\xe3j\xbf\x00\x00\x00@\xe8\xbf&\xbf\x00\x00\x00\x80\xdc9\x7f\xbf\x00\x00\x00`\x08\x96x\xbf\x00\x00\x00@\xd9\xe9q\xbf\x00\x00\x00\xc0\xfc\x8a\x97\xbf\x00\x00\x00\xe0\xe4\x7fh?\x00\x00\x00@9\x1e~\xbf\x00\x00\x00`y5\x81\xbf\x00\x00\x00\xe0`\xe2\x85\xbf\x00\x00\x00\xe0t\x1b\x80?\x00\x00\x00\x80Y\xed\x90?\x00\x00\x00\x00m\xdew?\x00\x00\x00@r\x97j?\x00\x00\x00\x00\x9b\x08\x8a?\x00\x00\x00@\xcf\xb0e?\x00\x00\x00 \xd6k\x87?\x00\x00\x00`\xb4d\x91?\x00\x00\x00\xe0\x0f\xe0\x8f\xbf\x00\x00\x00`\t\x10\x94\xbf\x00\x00\x00\xc0\x19\x1b\x86\xbf\x00\x00\x00@\x00\x83\x86?\x00\x00\x00\x80`;\x80?\x00\x00\x00 #4\x80?\x00\x00\x00@\x8d\xc1b?\x00\x00\x00\xa0\xb1u\x84\xbf\x00\x00\x00@\xfc\x0b\x81\xbf\x00\x00\x00\x00\xc7L\x92?\x00\x00\x00@L\xdfr?\x00\x00\x00\xa0={\x84\xbf\x00\x00\x00\xe0\xd1\x81v?\x00\x00\x00\x00\xb5\x8d\x85\xbf\x00\x00\x00\xc0\x1bqa\xbf\x00\x00\x00\x80\x910s\xbf\x00\x00\x00\x00\x16\xbaE\xbf\x00\x00\x00\xc0\xd4\xb7\x85?\x00\x00\x00\x00\t\xdd\x90?\x00\x00\x00\x80\xe9_u\xbf\x00\x00\x00@]w\x97?\x00\x00\x00\x00\x92r\x82\xbf\x00\x00\x00\xe0Y\x96\xd0\xbe\x00\x00\x00\xc06\xae\x91?\x00\x00\x00@\t\x8c\x94?\x00\x00\x00@d\xb2Q\xbf\x00\x00\x00\xe0C\xe6u\xbf\x00\x00\x00 \xf5xz\xbf\x00\x00\x00\xa0\x02\xbas?\x00\x00\x00@\xd4vy\xbf\x00\x00\x00`\xaf\xd8%?\x00\x00\x00 \xe6:q\xbf\x00\x00\x00\xc0\xf6\xd0{\xbf\x00\x00\x00 \xc9\x1d\x86?\x00\x00\x00 \x18\xc5b?\x00\x00\x00\xe0\x08\x85\x8b\xbf\x00\x00\x00`u\xb5q\xbf\x00\x00\x00\xa0\x9a\xd2u?\x00\x00\x00 )M\x81\xbf\x00\x00\x00\xe0\x99\x05\x93\xbf\x00\x00\x00\xe0`\xdb\x80\xbf\x00\x00\x00\x00C\x15l\xbf\x00\x00\x00\xa0\xf4\xe4_?\x00\x00\x00`;\nz\xbf\x00\x00\x00@\xce\x80~?\x00\x00\x00\x00(\xd6t?\x00\x00\x00`\x90\x9e`\xbf\x00\x00\x00\x80\x1b\xfa\x88\xbf\x00\x00\x00`\xa3\x10\x8c\xbf\x00\x00\x00@\xc9\xc0b\xbf\x00\x00\x00@\xca}\x80?\x00\x00\x00@\x90lx\xbf\x00\x00\x00\xc0\x81hm?\x00\x00\x00\xa0\xf0\xeb\x8c\xbf\x00\x00\x00\x80":\x7f\xbf\x00\x00\x00\x00\x9dGE\xbf\x00\x00\x00@KC`?\x00\x00\x00\xa0\xe09w?\x00\x00\x00\x80\xf9F\x1d\xbf\x00\x00\x00\x80/\xb7\x86\xbf\x00\x00\x00 \xc4\x03M\xbf\x00\x00\x00`Y\x8f|\xbf\x00\x00\x00 \xe6\xb9\x86\xbf\x00\x00\x00\xa0zc\x80?\x00\x00\x00@\xaa6p\xbf\x00\x00\x00\xc0M\xa3~?\x00\x00\x00\xa0b\t\x87?\x00\x00\x00\x00\x92s\x8f\xbf\x00\x00\x00\x00\xd6\xd1t\xbf\x00\x00\x00\xa0\r+\x8e\xbf\x00\x00\x00\x80\xa4ar?\x00\x00\x00\xc0q\xdd\x89?\x00\x00\x00\x80\xbf\xb3\x8f\xbf\x00\x00\x00@}i\x99\xbf\x00\x00\x00\xa0)\x9e~\xbf\x00\x00\x00\x00\x8d6\x80?\x00\x00\x00\xa0\xc34\x83\xbf\x00\x00\x00\xc0\xe1\x08\x83?\x00\x00\x00@O\x08b?\x00\x00\x00`\x01?{?\x00\x00\x00\xe0\xd4\xfch?\x00\x00\x00@\xd0%C?\x00\x00\x00\x00\x1fb\x94?\x00\x00\x00`\x7f\xe6{\xbf\x00\x00\x00\x80{\x9dr\xbf\x00\x00\x00\x800\xd1c\xbf\x00\x00\x00@\x03\x8c|\xbf\x00\x00\x00\x80\x8e\x88\x90?\x00\x00\x00\xe0J1r\xbf\x00\x00\x00\x00\xfd\x17\x83\xbf\x00\x00\x00\x00A\xb1a\xbf\x00\x00\x00 \xf5\xfd\x82?\x00\x00\x00\xc0\xc4wg\xbf\x00\x00\x00@NA\x06?\x00\x00\x00\x00\xb2,\x11?\x00\x00\x00\xe0\xabQ`\xbf\x00\x00\x00 tK\x84?\x00\x00\x00`\x93\x88\x81?\x00\x00\x00\xa0\x85\x8fO?\x00\x00\x00\x00\x11\x82\x8f\xbf\x00\x00\x00\x00\x81ZL\xbf\x00\x00\x00 \xd9\xa0\x87?\x00\x00\x00\xc0\xe5\xc2\x88?\x00\x00\x00@\xbe \x90\xbf\x00\x00\x00\xa0\x8c\x8ew?\x00\x00\x00@\xfc\xc9k\xbf\x00\x00\x00 \xf8}\x96\xbf\x00\x00\x00\x80\xde\x1d\x87?\x00\x00\x00@\xadY\x89\xbf\x00\x00\x00\xa0"\xfb~?\x00\x00\x00\x00\x9b\x93V\xbf\x00\x00\x00\x00\x08\xbd`\xbf\x00\x00\x00\xe0\xaa\xe7\x86?\x00\x00\x00`\xfe\xc4\x86\xbf\x00\x00\x00`\xb6\xbdu?\x00\x00\x00\x00_\xf4g?\x00\x00\x00\xa0\x90=\x94?\x00\x00\x00\x80e\x96o\xbf\x00\x00\x00\xa0\xcb\xd0\x90?\x00\x00\x00\x80e\xb1W?\x00\x00\x00`\xe1\x8ba\xbf\x00\x00\x00\xc0:\t\x92\xbf\x00\x00\x00\x80\xec\xf6s\xbf\x00\x00\x00\xa0C\t\x86?\x00\x00\x00 ?\xf0s\xbf\x00\x00\x00\x00\xe1\xc9\x84\xbf\x00\x00\x00@\x8d\xee\x9c?\x00\x00\x00\xa0\xe8tv\xbf\x00\x00\x00\xe0\x96\x04~?\x00\x00\x00\xc0\xb3\xad\x80?\x00\x00\x00\xc0\xe0Jx?\x00\x00\x00\xa0\xd5\xf8\x83?\x00\x00\x00\xc0\xd5.\x89?\x00\x00\x00`\xd9\x0cy\xbf\x00\x00\x00@g\xc7f\xbf\x00\x00\x00`\xa3\xe1\x83?\x00\x00\x00\xe0\x1cA\x84\xbf\x00\x00\x00`\xad~\x8b?\x00\x00\x00\x00\xe9\xb6s\xbf\x00\x00\x00`\x98\xd93?\x00\x00\x00 \nkE?\x00\x00\x00\x00\xc7p\x82\xbf\x00\x00\x00\x80\xf8\xc9O?\x00\x00\x00@\x12\x05e\xbf\x00\x00\x00\x80\x89\x1d\x94?\x00\x00\x00 K_\x91?\x00\x00\x00\xe0\xbd\xcc\x82?\x00\x00\x00`\x02lT?\x00\x00\x00 c\x9f\x84?\x00\x00\x00\x80\x02?t\xbf\x00\x00\x00`I\xe6\x8b?\x00\x00\x00`\x96\x13\x81\xbf\x00\x00\x00\xc0\xb4\xd3r\xbf\x00\x00\x00\xa0[ p\xbf\x00\x00\x00\xa0yK\x83\xbf\x00\x00\x00\xc0g\xb5\x98?\x00\x00\x00`L\x1es\xbf\x00\x00\x00\xe0\xa82l?\x00\x00\x00\xc0L?\x83?\x00\x00\x00@\\\r\x84\xbf\x00\x00\x00\xc0O\xacu?\x00\x00\x00 \xc7U]\xbf\x00\x00\x00\x80s\xfe\x86\xbf\x00\x00\x00\xe0?\x87N\xbf\x00\x00\x00\x80g\xeb\x85\xbf\x00\x00\x00`\x01M\x83?\x00\x00\x00 b ^?\x00\x00\x00`\xa8\xa6\x85?\x00\x00\x00\x80\x1dOi?\x00\x00\x00\xc0\xf8Yd?\x00\x00\x00@\x13it\xbf\x00\x00\x00\xa0\x9cga?\x00\x00\x00 |*\x8b?\x00\x00\x00@\xaa\x13\x8e\xbf\x00\x00\x00\xa0\x87\xe8\x85?\x00\x00\x00`uK\x83\xbf\x00\x00\x00\x00\x1eFg\xbf\x00\x00\x00\x80pgD\xbf\x00\x00\x00\xc0m\xb3q?\x00\x00\x00\x80\x9b\x07\x96\xbf\x00\x00\x00\xa0\xcf\xe4\x85?\x00\x00\x00 \x92LE?\x00\x00\x00\x00F\xd4\x91\xbf\x00\x00\x00\xe0\xfa\xe0\x81?\x00\x00\x00\xa0q\xe7f\xbf\x00\x00\x00 \xd5\x83\x83?\x00\x00\x00@\x1a\xbf\x90?\x00\x00\x00\xe0\x80\x06\x8f?\x00\x00\x00\x80\x8dPk\xbf\x00\x00\x00@S&9\xbf\x00\x00\x00`\x12-2\xbf\x00\x00\x00\x80\xcd\x8b\x89\xbf\x00\x00\x00@\x9f\xe9Y?\x00\x00\x00`tJn\xbf\x00\x00\x00\xa0?\xc2K\xbf\x00\x00\x00 \xeb\x98z?\x00\x00\x00\xc0\xd3\xc9\x8d\xbf\x00\x00\x00\x00\x8cC\x8b\xbf\x00\x00\x00 \x15@z\xbf\x00\x00\x00\xa0=\x0e\x89?\x00\x00\x00\xe0\xf4\rd?\x00\x00\x00\x00F\x94\x84?\x00\x00\x00\x80|\xca\x9c?\x00\x00\x00\xc0\x93\xf1\x97?\x00\x00\x00`h\xe4\x82?\x00\x00\x00\xa03\xd3q?\x00\x00\x00`wK\x8f\xbf\x00\x00\x00\xe0\x83|\x84?\x00\x00\x00\xc0<\x01\x80\xbf\x00\x00\x00\x80\xc5\xc4\x85\xbf\x00\x00\x00\xa0\xab\x8a~\xbf\x00\x00\x00 \xf4\x16\x91?\x00\x00\x00\x80\xc9\xc5\\?\x00\x00\x00`\xe0q\x8d?\x00\x00\x00\xe0"fy\xbf\x00\x00\x00\xe0\xd3\x15k\xbf\x00\x00\x00`\xac\x05\x92?\x00\x00\x00\xc0\x9b%q?\x00\x00\x00`\xcc\x964?\x00\x00\x00 [t\x8d\xbf\x00\x00\x00`W\xe1\x89?\x00\x00\x00\xe0\x90 t?\x00\x00\x00\xc0\x05?f\xbf\x00\x00\x00`\x92\xf4y\xbf\x00\x00\x00\xc0\\\tr?\x00\x00\x00`@ff\xbf\x00\x00\x00\x00Lf\x8d?\x00\x00\x00\xc0\xaf\xd6q?\x00\x00\x00@\x87\x03d\xbf\x00\x00\x00\x80P\xfdP?\x00\x00\x00@IG}\xbf\x00\x00\x00\xa0\x8a\xa3A\xbf\x00\x00\x00\x00\xe5\x91j\xbf\x00\x00\x00@\'\xa0\x80?\x00\x00\x00@\x8f7i\xbf\x00\x00\x00\xc0\xe3\x15`?\x00\x00\x00\x00\xbd%\x7f\xbf\x00\x00\x00\xc0\xd5]\x85?\x00\x00\x00\x80\xbb\x97\x8a?\x00\x00\x00\x00\x82\xf7|\xbf\x00\x00\x00@\x9bc\\?\x00\x00\x00\x00q\xcdj\xbf\x00\x00\x00`CHt\xbf\x00\x00\x00\xe0\x1atr?\x00\x00\x00\xc0\xbd\x1fe\xbf\x00\x00\x00 \xdar\x8d?\x00\x00\x00\x80\xc6\xd4\x8c\xbf\x00\x00\x00\xa0\x1b\x81|?\x00\x00\x00@k\x8et\xbf\x00\x00\x00 c\xa1d\xbf\x00\x00\x00\x00\xd1=\x8a\xbf\x00\x00\x00`"\xae`?\x00\x00\x00\x00\xc7#2?\x00\x00\x00\xe0\x14\x93s\xbf\x00\x00\x00\xe0\x0b\xbaf?\x00\x00\x00\xc0\xab\xb0\x9b?\x00\x00\x00\x00\xa0K\xe4\xbe\x00\x00\x00@\xdc!\x89?\x00\x00\x00\xc0R\xb1\x80?\x00\x00\x00 6~|\xbf\x00\x00\x00\x80u\xe8\x81?\x00\x00\x00\xc0\x88\xd9\x89?\x00\x00\x00`\'\xe0\x8a\xbf\x00\x00\x00\xc0\xae\xdf\x92?\x00\x00\x00\x80\x88|\x80\xbf\x00\x00\x00\xc0\xeb\xf2w\xbf\x00\x00\x00@\x8e\x8e\x92?\x00\x00\x00\x80~,\x93\xbf\x00\x00\x00\xa0\x19\xd9\x8b?\x00\x00\x00\xc0\xe2\x9at?\x00\x00\x00\xe0^%q\xbf\x00\x00\x00\xc0\x1e\x1e\x87?\x00\x00\x00`\xb3\x9bo?\x00\x00\x00`\xb3Pa?\x00\x00\x00\xa0\x87vo\xbf\x00\x00\x00\xe0\x0c\x96{\xbf\x00\x00\x00\xc0l\xfb\x82?\x00\x00\x00\x00,pp?\x00\x00\x00\xc0Gwp?\x00\x00\x00 r\x13d\xbf\x00\x00\x00\x80\xcd\'\x88?\x00\x00\x00@\xaa\xc4m\xbf\x00\x00\x00\xc0\xf3\xfbz?\x00\x00\x00`g\xda\x8b?\x00\x00\x00@\xbb\xd4\x81\xbf\x00\x00\x00\xa0\x82\xbdk\xbf\x00\x00\x00\x80\xe6h\x86?\x00\x00\x00\x00\n\x03\x81\xbf\x00\x00\x00 \x81\xc6_?\x00\x00\x00 \x88\x0c\x8b?\x00\x00\x00\xa0\x9b"z\xbf\x00\x00\x00 \x807\x83\xbf\x00\x00\x00\x00Dd\x82?\x00\x00\x00\xc0i|\xfc>\x00\x00\x00\x00\xdb\x07X?\x00\x00\x00\xe0\xcd\xb5\x8a?\x00\x00\x00\x00\xcb<\x89?\x00\x00\x00`\x8c\xf4\x90\xbf\x00\x00\x00 \\\x97d\xbf\x00\x00\x00`?GN?\x00\x00\x00\x00\xf7p\x88\xbf\x00\x00\x00\x80!\xa4\x7f?\x00\x00\x00\xc0U\xc6\x7f?\x00\x00\x00\xc0\xf21\x99\xbf\x00\x00\x00\x80\xcd\xf7q\xbf\x00\x00\x00\x00\xb3\x06O\xbf\x00\x00\x00\xe01\'\x89\xbf\x00\x00\x00\xc0zPI?\x00\x00\x00\x00~ n\xbf\x00\x00\x00`r\xe6z\xbf\x00\x00\x00 \x0c\x18Q\xbf\x00\x00\x00\x00\xc3-m?\x00\x00\x00\xc0[\x87\x90?\x00\x00\x00\xe0\xc5uG\xbf\x00\x00\x00`A\xceP\xbf\x00\x00\x00\x80t*B\xbf\x00\x00\x00\xc0y\xbci\xbf\x00\x00\x00\x80i\xc8\x89\xbf\x00\x00\x00`v\x04\x83\xbf\x00\x00\x00\x80\x97\x8bC?\x00\x00\x00\xa0G\xfb\x81?\x00\x00\x00\x00\x1b\xc7\x94?\x00\x00\x00\x80\xc2\x9f\x95\xbf\x00\x00\x00 /\xf6\x89?\x00\x00\x00\xc0^x\x83\xbf\x00\x00\x00\x80}\x00\x96?\x00\x00\x00\x00\xe5g\x8a\xbf\x00\x00\x00\xe0m\xb8{\xbf\x00\x00\x00\x00\x85:\x88\xbf\x00\x00\x00\xe0;\x0c\x8b\xbf\x00\x00\x00`\xb4q}\xbf\x00\x00\x00\x80\x06a\x81?\x00\x00\x00\xc0\xb36R\xbf\x00\x00\x00\xa0\x87\x06w\xbf\x00\x00\x00\xc0]ts\xbf\x00\x00\x00\xe0\x148\x93\xbf\x00\x00\x00\x00\xd9\xfch?\x00\x00\x00\xe01\xcb\x88?\x00\x00\x00`\xd6Q\x83?'
p538
tp539
basg71
I00
sg72
I00
sg73
g0
(g74
g5
Ntp540
Rp541
(dp542
g78
(I00
I00
I00
tp543
sg80
S'float64'
p544
sg82
g66
sg83
I00
sg53
Nsbsg84
Nsbsg53
g435
sg85
Nsg73
g541
sbsS'compiled_mask_logdensity_estimator'
p545
ctheano.compile.function_module
_constructor_Function
p546
(g0
(ctheano.compile.function_module
FunctionMaker
p547
g5
Ntp548
Rp549
(dp550
S'profile'
p551
NsS'inputs'
p552
(lp553
g0
(ctheano.compile.io
In
p554
g5
Ntp555
Rp556
(dp557
g53
g270
sS'update'
p558
Nsg261
NsS'borrow'
p559
Nsg71
I00
sS'implicit'
p560
I00
sS'mutable'
p561
I00
sS'variable'
p562
g0
(ctheano.tensor.var
TensorVariable
p563
g5
Ntp564
Rp565
(dp566
g14
S'auto_14129'
p567
sg16
Nsg17
g0
(g18
g5
Ntp568
Rp569
(dp570
g22
(lp571
(lp572
(g25
I306
g26
S'nade_train( * args[1:] )'
p573
tp574
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p575
tp576
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p577
tp578
a(g37
I36
g38
S'self.recompile()'
p579
tp580
a(S'/home/leondong/proj/ccnet/experiment/rnade_release/buml/NADE/OrderlessMoGNADE.py'
p581
I123
S'recompile'
p582
S"x = T.matrix('x', dtype=floatX)"
p583
tp584
aasbsg53
g270
sg85
Nsg73
g0
(g74
g5
Ntp585
Rp586
(dp587
g78
(I00
I00
tp588
sg80
g251
sg82
g66
sg83
I00
sg53
NsbsbsS'shared'
p589
I00
sg84
I01
sbag0
(g554
g5
Ntp590
Rp591
(dp592
g53
S'm'
p593
sg558
Nsg261
Nsg559
Nsg71
I00
sg560
I00
sg561
I00
sg562
g0
(g563
g5
Ntp594
Rp595
(dp596
g14
S'auto_14130'
p597
sg16
Nsg17
g0
(g18
g5
Ntp598
Rp599
(dp600
g22
(lp601
(lp602
(g25
I306
g26
S'nade_train( * args[1:] )'
p603
tp604
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p605
tp606
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p607
tp608
a(g37
I36
g38
S'self.recompile()'
p609
tp610
a(g581
I124
g582
S"m = T.matrix('m', dtype=floatX)"
p611
tp612
aasbsg53
g593
sg85
Nsg73
g0
(g74
g5
Ntp613
Rp614
(dp615
g78
(I00
I00
tp616
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbsg589
I00
sg84
I01
sbag0
(g554
g5
Ntp617
Rp618
(dp619
g53
g444
sg558
Nsg261
g0
(g49
g5
Ntp620
Rp621
(dp622
g53
g444
sg54
(lp623
g56
(g57
(I0
tp624
g59
tp625
Rp626
(I1
(I12
I100
tp627
g66
I00
S'p\xe7h\xa8\x04\xe5\xbc\xbf\xb8\x935\x19\xf3H\xc2?dr\x00\xe8"\xf7\xab\xbf\xc86\xfe\xfcz\xbd\xba?\xd0\xaf\xe3\xba\xad5\xca\xbf\xdc\xc7\xcd(\xe6s\x98?%\x9b$q\xcfnZ?9\xc8?\xcdF&h\xbf\x93(c\xbc\x19\xb4\xcd?^\xcdA\xaf\x97\xdf\xe8?\x8e8\x9f\xda1\xbd\xce\xbfb\xa8\xdaW\xbf\x9b\x91\xbf\x9c(V\xda|3\xc8?\x99k-\x7fE\x93o\xbf\xb6A\x137,~\xe2\xbf\xddO4\x0c\'f\xaf\xbfur>\x03J\xd0\xbb\xbf\x0f\x8f\xc6\x96s\xb6\xc3?\xfb\xb0q>\x1f\xbb\xe3\xbfu\x8687h\xf5\x93?\xa6\xd6\xfdS\t\xf3\xc2?lN9\xe2<\xc3\xf3?\x165\xfe\xf7\xde\x1e\xbc?\xd1/\xa1\xa6L\x87\xe1?\xd8\x82\x01\x96S\x94\xb2?\xaa\xe4h\xf5\x17\xfa\xc1??\x11?\x1aO\xab\xad?\xd2\xc6\xf7\x96\x9b\r|\xbf\x99\xfa\xfb\x10\x9dz\xb5\xbf\xc5u\x07\x18.g\xc9\xbf\xa6/\xaeG\xf0\x82\xec\xbf\xf4\xaf\xa6#9\xec\xba\xbf[\xd4\x9aw\x01V\x99?\x7fl\xef`\xc9\x1bp\xbf\x1b\xd79=\xba\x91\xbb\xbf\x13\x14aqYA\xba?\xd3\xdc\xbb\x18ZIa\xbf@;\x8c\xdf\xe4C\xa2?3\x86~\xa6/.x\xbf\x90^\x8a}\x87\xeb\x9c\xbfjR\x18XyZ\xcd?8\xcd\x9d\xb5\x16\xe2\xdf\xbf7\x9eMn\xa5\xd7\xa3\xbfbw\x12i\xa8O\xb3?s\x99\xef\x9bT\x10\xb0?\xa8\x96\x86\xdb\x81\xc6\xa4\xbf\xb3\xa4\xae\x14\x92\xd6\xd1?\xd0\xe5\x04\xea\xd0C\xb0?\xa9\x83\x19\xd0N~\xd6?\x1a\xf3\xa9\x8b\xaa7\x92\xbf\xda\xfd\xd7\xccU||\xbf\xf8ex\xfe\xfb\x0c\xae\xbf\xcc\xdaEof]\xb0?\x80\xab\x1e\x1d-\xfa\xd7?\xb4\xc5Cm\xa6\xd4t\xbf\xf6\x11u$-1\xca?H\xf5\x1a2`\xc7\xcb?\xfa\x15f\x08\xad\x13x?\xb0Ok\x93\'3\x97\xbfcX\x08qfp\xbc\xbfy\x0cK\xf8+\x03\xc1?\xa5i\xa0\x07m\xc7\x94\xbf\x00\xd7/\xc9\x16@\xa8\xbfP[\xf8_cT\xb2?k\x1e\x9f\xa4\xdaW\x83\xbf\x0ex\xf6$\xddcx?\xb0\xb5%\x8d3\x13\xce?\xdb\x96Fp\x8a\x11\xb0?\x16[\xe9\x0e\xc8\xd6\x9b\xbf\x18H\xf5w\xbd\xbd\x94?\xa6\xef\x9cY\x06\xd7\x9a?r\x97\x13>#\xa2\x95\xbf3\xaf\x81D{-\xb7\xbfj\xc0q\xa79O\x86?@&\xbcy\xf9\xe8\xbc?G%\x15\xa9q\x0c\xc9\xbf\xc3\x84\xc1\xdbM\xb5\xb1?\x92\xd9\xd5\xddA\x82\xd3\xbf\xac\xf43\xf1\x81Mu\xbf\x88\xab\xaa\xf7\xa7X\xa5\xbf\xb9r\xa1o\xb5\xd1\xa1?\xfdu\x03\x1ar\x9f\xc1\xbf\xaa\x1d\xef\x96\xa3\xa1s?\xea\xc0\xdap\xc1f\xa8?w|\x11\x94v\\\xa3\xbf\x1f\xa6\xebE\xf4\xae\xa0?\xe1\xbf\x9c\xee\x909\xe6?ow\xf7G\xe3!\xbc\xbf\xe9\xd4\x94\x98K*\x8b\xbf\x94\xb6\xbc\x97j\x1a\xb5\xbf\xb5\x18\xc1\'Tr\x91?\'\x83\xbdj\x04Z\xe5?\xdePy\x9b\xa2QS\xbf.\xc3\xc6\'\xe5\x03\xe5?\xef\x00\xcf\xdb\xe6\x87\xaa\xbf2@\xb3=\xe3F\xd8\xbf\xf3rx\x1eo\x05\xcb?\x18p[Nw\xd1\x87?g*\xc6\x02\x99\xca\x82\xbf^]LJ\xa4O\x88?-\x8e\xadXF\x8f\xa2?*!H=a\x17\xb1\xbfM|\\\xb9k\xbf\xa3?y\xa5\xf7\xe7\'L\x95?&?^\x15\xea\x9b\xcd\xbf\x15\xfdI\x9bD\xe7\x81\xbf\x91\xcb\xd6\xb7}\xfd\xc2?\x06\x97[\xe3\x93n~?\x10\x92Y\xeb\xce\x04\xa4\xbfV\xbfv\x83\xae\xd2\xda?\xaa\x1bqI\xc3\xe3\x83?\xa0hh&\xd1F\xba\xbf\xcb5\xc4\x12\xa8U\xca\xbf\xb2\x1d\xfd\x0f\xa8G\xd7?\xc5\xee\xab\xd7+w\xd2\xbf\x97\xc3\xae3m\xc7\xdc\xbf[>TR>\xaf\xaf?Y\x05;c>\xb4\xaf?+\xb2\x94\x18E\x89\xe3\xbf\xf10\xd9\xc7x\xa7\x9c?\xfe\xf5J\xffNy\xca?W\xdaD\x83\x1e\xb7\xc9?\x8d\xab\xdcj\x83\x9e\x82\xbf\xa3\x88L\xf2\x82\xac\xd7\xbfut\xad\xeb\xaa\xd5\xcd\xbf\xb2<\xcc\x03b\x8d\xb9\xbf+(h\xcd\xae\x06\xa5?\xd9\\\x8eNL\x00\xc0?\xc4\x0f\xaaI\xb4_\x9c?\x15\xcaG\xbc\xbb\x12\xc0\xbf\xd0\xfe\xeb\xf8\xfb\xd2\xe3\xbfz\x859\x8f`\xba\xf6\xbf\xd9\xc0\xc2\x9b(\x94d\xbf\xbflK\xba\xe0\x19\xd8?\x1ei\xa0p\xe98\xa0?o]Zr\xf8\xce\xe1\xbf2\xe1!U\xad\'j\xbf\x8f\xb9\xea\xd7\xd4\xd7\xb8\xbf\xc4UzK\xf3\xa6\x9d\xbf\xae\xe2\xe3s\xb3\xab\xdd\xbf\xb7\xb7\xc0\xcf:\xc0\xbf?5O\xe3\xf3\x02,\xe5\xbf\xa0\x90\xa4\xd7\xae\xec\x90\xbf>h\xab\x15\x1d\xbe\xa1?\xff\x8e\xd4\x81\xcdzP?w&7\xaa\x11\xb3\xd2\xbf7\xbek~8\xf9\xce\xbf\x0e\x14\x98\xdc\xde\xa5\xc6?\xe2\xb3l7\xcc\xff\xd8?\x0e.Ko\xb5\x1f\xe9?\x13\x7f\xba.\x85\xbdq?\t\x96\xb4\xf3\xf5\xc1\xb5?^\x86-&\xe2_\xd7\xbf%\xaf\xc7\xee\xfe\xc8\xfb?\x8f;\xe3\x05p\x04\xd0\xbf\x11\x8a\xf7\x8c\xba\x95\xcf\xbf\xd1\xc1\xbfo\x80\xdf\xe6\xbfp\xaeK\xdb\xc2\xe8\x91?N\x7f\xfa(\x82\xa0^\xbf\xb1H:G\x94\x9d\xcd\xbf\x86\xb8\x85\xbeg\xdb\x91?\xe2e&s\x9f\xe1\xbd?\xe6\xaf\xfdP\xadC\xa4?\xae2\xb4\x97\xb8\xe0\xe4\xbf[\xbb\x19\xb4\x86h\x94\xbf\xda\xbd\'\xa7xn\xd3\xbfIE\xdc\x8a\xde\xd9\xe0?\x83;/\x8d\xd0\xda\xac\xbf*0\xdabC\x95\xda\xbfu%\x1avUI`\xbf\x08\xa3\xe8\x04\x99]v?B\xb5\xb3\xf1\tJT?.0\x92\xb4J\x16\xec\xbf\x1b\x940$\xdc\x92\xc8?H\n\x12\xa4\x0b\xc2\xa3\xbf\x8b\xea\xbbk}\xb7\xef\xbf&\x9bj\xc6\x0f\xe8\xbe\xbf\xf9\x83e\x9f\xbb\xd2\x9e\xbf\xf4\x14\xc0<Z\r\xe1?\x84\x90\xcc\xa2\xdf9\x93?\x98\xd4\x02\x030Ws\xbf\x10\x9c\x95\x14ml\xab?\xec\x07\xaf\xef/-\x9d?k2\x1exn1\x8a?\xe4\x99Y\x9c\x18\xe4\xa5?\xc1\xd9\x06\x98\xe7\x1d\x9f\xbf\x9cy5\x98\t\xd6\xe3?1\xfd|;[\x19\xf4?mH\x07\xbb\xa6\xf7\xdd\xbff\xdeiH\xf6\xca\x80\xbf{\x97?\'D\xff\x92?\xf9\xf8\xe9\x99+z\xdc\xbf`I4-\xdb\xb2\xd1\xbf@\xdd\xf1\xf2\x19Q\xe9\xbf\xf06\xa8U\xc0}\x93\xbf\x1cj\xd5<"\x13\xa8?\xe6\xc8<\xd6\xcf\x97\xc0\xbfD\t\x95\xd8\xfe\xe5\xbf?0\xddP\xf9\xbbh\xcf\xbf\xcaX\xe5\xcb\xb0\x82\xa7?\x12\x1b\xdb\xb1\xc9i\xa7\xbf6j)\xbd\x14&\xc4\xbf\xfcTS|\x1e\x0e\x8f\xbf\x7fe\xd2\n1\xe4\x8f\xbf\x80q\x87j\xfa\xbc\xc5\xbfw[h\x96\x9c+\x99\xbf\xa1E\xf1\x90/\xd4\xbc\xbf)\xa0\xa8\xb0\xc2\x99\x86?@k\x15;\r\x80\xb4\xbf\x10\x896wx\xca\xaf\xbf\rkd\xa1\xb0S\xc4\xbf\x87@\xa2H)\'\xb0?X\xe8\xdbNT\xa6\xd4\xbf\xaa\xeaV y\xef\xa2\xbfG\xcbc\x1dpj\xc4\xbf\xc7vA8\t#\xc7\xbfR \xf8<\xc1\x03\xb3?\xbab\n(\x94\x0f\xc1?fV\xbc3\x8br\xcf\xbfEK\x0c\xaa\xc6Ch\xbf\xc4\xba\x90\x9f\xfb\xfe\xcd\xbfv\x0f\x0e\x15@x\xd3\xbf\xf5m`JO4\x90?z\x11\xdf\xd6\xfdL\xa3?\xcbl&\x05\xd4\xd2s?\xb3Q\xc4\xdf\x8bB\xe2?;\xe3\xf82M\xfby?\xdb\x00\\sT\x95\xac\xbf\xaa\xf13\xebJ/\xc9\xbfbn\x7fr\x80\xfb\xb2?\xed\x9e\xdc$csj\xbf\xa5\x85\r9w\xca\xc6?\xd7A\xd1C\xbf\xeb\xbe\xbf\xb7\xfc@i\xd1\xaf\xb5\xbf\xfaHTZ1\xca\x8d?]\x03\xa7\x94\x02]\xb2\xbf\x96Z\x94\xba\x8a\x0f\x89\xbf\xfa\xc7w\x80\xad\x97\xb0\xbf\x02kF\x9d\xb8Zz\xbf\xe0\x9a\xfc-O\x98\xb9?vs9\xd14\xe0\xba\xbf\x10\xa44)\x19j\xb6\xbf7r\xe8f\xf8f\xac?mD\x91\xe2o\xd4\x90?\xf7\xaeA\x1fS\xf2\x91\xbf\xcb\x1b?C\x83\xdf\x80?\xfc\xa5\x7f\xcc\x160\xc0\xbf\xbaX\x93ue\xa4\xd9\xbf\x0f\t\xe2\x17\x0e\xa4\xd9\xbf\xd7\xdaV\x15\xdc\x05\xc2?B\xba\t\x1eU\x1fs\xbf\xac1`\xab\xc6)\xb5\xbfX\x06\x82\x9f\x12\xba\xc8\xbfy\xe0\xb0\xcaJ\x1d\xca?\x1b<\xdc0Y\xb7\xc3?\xcd\xea\x85\xa5F\xff\xc4\xbfq*\x9ee\'\xb8\xc0\xbf\x85\xddep\xc0\xb9v?\xedz\xf6\xf0\x1b\x08\x80\xbf\x84\xb3?\xc5\x0ct\xb6?$t\xd9fg\x93W\xbf\xa6\xc5\xdc\xd6y~\xc8\xbf\xb4\xb5\xaa\xafF\rZ\xbf\xb9\xdc4\xbdv9\xd2?\\\x81gW\xed`\x86\xbf\xb9iGCR\xd3\xba\xbf]\xa1\xe7\x86\x93N\xd0?P\x19\'S\xcb0\xc4?XL\x86\xae\xe6:\xa6\xbfE\x8c@\x89\xd2H\x7f\xbf\x9f2\xb1b\x95\xa7\x95\xbf\xa5\xd3\xccz\'\x86v?\x90)\xb3`\x17H\xa1?\xc1\xe0W\xa4\x81_\xaa\xbf5\x8b\xa3\x98+\xe7\xc2\xbfZ\x14s\\\xd7(\xb4?\x0b\xd3\xf4\xa9\xa9\xc1\xa2\xbfN6z8\x1e\x05\xd3\xbf\xda\xa7\xc9\xac\x8c\xa1\xb9\xbf\xa0\x8c\xf4is\xe1\xb0\xbf\xdd\xcc\x87\xcd\xba\x06\xab\xbf\xc1:w(\xdf^\xe1\xbf\x9c\x17n\xd2v\xd4\xb0\xbf\xe5\n\x08\xcf\xfa$\xb9\xbfc\x02\xea.pI`\xbf`\xa4"\x19\x02\xd2\xb3?_\xcf\x07\xda\x8b\xf8\x86\xbfD2\xacg?%\xc4?\xbb,/\xe9\xde\xe3\xaa\xbfj\xf1H\x11\xccN\xab?N\x15~\x80\x1b\xdb\xa0?\x0b\xa3\xcd0\xc6\xc2\xa0\xbf\xb4z\xf2fn\xf8\xd2\xbf\xfb3\xfc\xc6\xcc\t\xa5?V\xf5\xca F\xf3\xaa\xbf\x9a\x96\xec\xdf\xb2\xef\x9b\xbfk\xdc\x19=\xa9\xbf\xb4\xbf\x8en\xe7\xb3l{\x8e?;\xc1\x94BQ\x8f\xb4\xbf\xb5\x7f1\xc6\xcd\x15e?\xbe\xe82\xcd\xbb\xfd\x97?\x17\xa0\xdbZz\xc4\xe0\xbf\xe6x\x1d\xbf{T\x9d?~\xea\xdc{R\x88\x9e\xbf%0\x0cL\xd0\xb4\xe7?\x80\x9d@\n=.}?^9 \xd1\xe6Q\x11@\xd2\x1fs\xbb\xfb\ny\xbf\x9cp\x11Fl\xea\xe9?4Y\xdfU\xa4\x91\xc7\xbfH\x18\xb6\xf7Z\x8a\xc6?\xbbw)\x11c\t\x95\xbf\x87:m\x17_|\xe3?=B,\x94\xea:\xf2\xbf\xd7\xf4\xf6\x02\x11k\x85?\\\xe1K\xa6\xe85\xf1\xbfv\x07\xdc%\xe4J\xdb?\x82\x9d\x98\xd6k\xbe\xe4?\xc6a\x92\x9cg\x07\xda?\x98\xfa/a\x91\x06\x98?\xa66V\xbf\x08z\xa0\xbf\xef.0\xd6\xc30\xd9\xbf\x01?\xe5e\xb6W\xdd?e\x8f6\xcb\xca\xa2\xd0?\xe6\xbc\xfd\xf1\x9cV\xb8?,\xe0\x99\xad3d\xb1?\x9a\x90\xf4R<0\x97\xbf\x82\xe1\x98i<\xc9\x7f\xbf\xad\xd9*\xd3c>\xc4?\xddi\x00\x02>q\xd1?\x1bxmy\xc0\x99\xe9\xbfl\xday\xc7X&\xf6\xbfW\xc3\xccd\x87<\x90\xbf\xa2A&RY5\xb3?f\xebY\xf7\xaa\xbc\x9b?tA?k\xe6\t\xd4\xbf\xfd\x97\x99\xdb!(a\xbf\x08\x05\x8a\xe9}@\xdd?aq\x18]\xcb\xb7\x88?\xefo\xec\xc9$\xa4\xdd?\xa0\xb0\xb1\x1c\x9a\t\xc5\xbfB8\xe49\xf1\xee\xe3? \xd2L\xa7\x06\xff\x8f\xbfI\xac=\xe6\xbf{\x93\xbf7\t\xf8\xe8\xfc\xe5v\xbf\xba\xf2H\xd1z\xf1\xc4?\x10\x06\xc6\xd8Mi\xd1?\xa4\n\xe0\xc2\xa0;\xda?\t\xf2|VV\xb2\xf1?\x97?\x8d\xdej\xd3\xa8\xbf\xee\xf3A0g\x1c\xa6\xbf\x17Fqi$]\xbc?\x899%_S\x9d\xf1\xbf\x1c\\\xdf\xed\xedS\xc4?\xa8Z\x88\n\x84#\t@T\xb4\xa5\xe1\xe4\x8a\xd3\xbfi"\xe4\xce0\x19\xc5?\xe7\x06\xe2^#\xe93\xbf\x90s\xd6\xda^\x97\xb3?\xfc\xfa\xa50\xe1M\xd4?\xd3~z\x1a\xaf\x9e\x9d\xbfo\x81\xd2\x05@\xfb\xcc?\xb4\xa9l\'\xce\x93\xf8?,\xb3\x84zZ\x8a\x02\xc0\xcc2\x10\xd4Q\xa9\x00\xc0\xfe\xf08m\xf8t\xc8\xbf\x17g\x15Exk\xe2?\xe2\x8aV\xce\x9a\xd3\xb5?\x93\x81o_\xd2\xcd\xf1\xbf\x9chM\xa5/\\\xe6\xbf\x80C7\x8b^d\x8f?\xdeE,\x18\x7fR\x89\xbf\x18\x16@\x0c\xa3l\x90\xbf\xe1\x1d\x04\xc6v\x02\xe1?s\xc5\t\xae*8\xfa?\xa1qr\xc2\x18\xd2\xf1\xbf@\x83\xc0\x82\xf0\xd3\xac\xbf\xd1\xaf\x9aC\x07\x96\xc1?,A\xed\xc0 9\xdf\xbf\x9a\xc0\xcb#\x85\x18\xac?Zn\x08f\xcc\xf0\xb1?,\xdc/j*V\xe3?\x94\x12q\xfa-\xf1\x89\xbf\xc3_\xd6\xdc\xd0c\x9c?\x85\x87\x844-\x8d|?\xfc\xfe\xcd\xebnh\xe0\xbf\x1dWo\x14\xfc\x98\xe3\xbf*(\xff7\xd2\xde\xcd\xbf\x1c\x1a{I\x1e\xa0\xce\xbf!w\x7fK\xd4;\xa5\xbf\x9d\xd7\xb0\x1fe7\x95\xbf\x9e.\xfe\t\xbb\x89\xf4?\x18\xcdKB\xdbG\xae\xbf\xa7z\x93\x9e\xba\xd2\xec\xbfW\x94\xf5\xc9\xb68\\\xbf\x17)\xa8\xc0\xd1\xaft?R\x90\xa4\xbb\xcfV\xd8?\x1f\xa5N\xf3\xcd/\xc1?_\x95\x10\x06\x9b\xea\xd4\xbf\xa8\x95\xee\xf2\xdfD\xc7\xbf\x04\xae/\xfdc\xa9\xd2?\xae\xb9y\xc4\x80\xc1\xd9?1\xb5? u\xfd\xb2?\x14\x01\xb3p\x95\x07n?"\xe7\xce@\xefz\xc5\xbf\xd4\xb6\xff\x89u\xf2\x93?\xe8\x9av\xa4g\xb3\xf2\xbf\xfe\xf87\xff\xea\x90\x92?.\x07|\xa27\xe7\xe3?\xdb\xda>\xcc\x06\xe2\xb7\xbf\xe6\xf9,\xc7}2\xc5?6Ws\xc8Q$\xc2\xbf\x939-\xb4\xba4\x82?G\x99]G+#\xe5\xbfUJ\x99}\x89\xc8\xd2\xbf\x19m\xca^\x16\x08\xd9\xbf\xda\x9b\xc6\x94S\xa3\xc8\xbfz#\xf6\x80\xa3"\xbd?\xc4\x8c\x8f\'N\x80\xe0\xbfH\xde\x0f\xc6/\xfev?\x81\xe9\x84:\x17\x98\xc4\xbf?mW\x92c\xa8\x98\xbf\xb9\xac\xc6\x8d\xf8\xb7\xc3?\x00\xd25y\xf8\xa8\xe4\xbfU\xad\xb9>\x02\x98\xde\xbf\x80dV#\x0f\x83\xd3\xbf\xa4\x94\x16\xf4\xa5\xd0\xa8\xbf\xaa\x15@\xe3\xf8\x14\xa1\xbf\xbb\xd2O\x15\xce}\xa3?(\n\xd3!XL\xe4?\x9fr\xef+z=\xdb\xbf\x1cv\xc9y1\xe8\xf4\xbf\xbe\xe1\x8c\xdd&$\x8e?]\xee\xbc\xc8O\'\xd7?e\x0c\xc7\xfa\xf6;\xd0?\xe8\x9f\x0f;\x93\xde\xe7?1?)\xda\xc8"u?u\xb5\xf0l\xda0\xc9?\tz\n\xaa\x16@\xbd\xbf\xd2\xedj\x1cu \xb8\xbf>j\xe2\x80\xf1\xa2\xc4\xbf\xd6\xd5Yc\xe8n\xd0\xbfa\xfaNP\x8eO\x8e\xbfx\x1fY.\x9e\x8e\x81\xbf\x0e\x04P2\x06q\x90\xbf\xe7s\xa3kO\x14\xc5\xbf\xd2\xb3\x9cz@\x80\xb9\xbf\xc9\x10Q`\x9e\xcf\xc5?\x8d\x88~\x81\x83L\xc0\xbf\'MW\x8e\x15s\xd6?j<\t\xee\xd7\x19\x81?H\x90\xb3\xff\x9dW{?j+\x85^\xc0g\xcc\xbf|\xc8\xf8\xc3\x95\xf4\xf3?\xa5\xe7Q\x98.n\xe4\xbf\x9dO\xc6\xb1\xa2S\xe3\xbf+.d\xec\xd9f\xdb\xbf\xc4\xe0D\x06\xa0\xc5{\xbf\xe78\x84\x97\x08w\x9f?"\x99\xe3\xf8S\xe7\xd5\xbf\xa8\xe2\x93\xd8\x06\xa8R\xbf\n\x1c\x82#8\xf2\xe7?\x92\xb0\x8c\xfc\xaf\x95\xb2?\x81\x9b\xa6\xe8%\x8f\xf0\xbf\xf2\xc8\xd3\xce\x9e\x85\xf2\xbf\x06\xa0\x1f\x0c\x1ey\xc2\xbfE-\xd3\xe4N\x98\xc3?\x84\x03^x"\xa6\xce\xbfv\xad>P\t\x88\xc9\xbf-\x82\xdd\xa7\x10\xea\xf5?fO\xce,\x0e+\x92?WD\xe9\xd0\x18\xf5\x86?\xed\xaf\x9f\x0f\x93~\xdb\xbf\xf7F\xe6\xe5\x1a\xb7\xe8?Q\xcbW\xb2at\xb8?\xe4\x1cw\x8c\xda1\xee\xbf\xd1\x90\x886@\xf6\xa9\xbf\xdb\xediX\x9e\xb9\xae?.\xdd\x14$\x19]\xd8\xbf\xa4 U=\x81lv?C\x8fpm\xe60\xaf?%\xcc\xad\x1fN\x99\xa2?\xaa\xdb\x9bJs\x90\xa1?\x1e\xab\xf8F\xe9v\xa9?j \xb5\xbbI+\x85\xbfo\xe0\xdbX\xd2\xca\x90?b\xef\x846\xea5\xee?\xf3T\x93\xee\x85\xdd\xed?#\xba\xa4\x8c5\xd0\xd8\xbf[s\xfc\x80vo\xb2\xbfex\xde\xfb\xe1\xe7\x81?F\x17\x96\x19\x86Q\xcc\xbf\xd1:\xc2,I\xe8\xc5\xbf\x8a\x84F\xb7A\xdc\xf0\xbf\x1f\x82W\xef)\xb3\xa0\xbf\xff\xfb\xd1p\xebF\x17?\xabx\xe9&@\x86\xb7?\xe7\x15&\xdaA/\xe3?\xe9 \xcb\x92\xca\xf6\xe5?\xc6\xa68TQ\xd7\xb4\xbfj\xc2kVXl\xd9\xbf\x8fa\xa7\xee(\x90\xcc\xbf\x8f1]J\xd1\xdb\x83?\xf5\xad\xf1\xd1\x94f\x95\xbf\xb2\xa8"[6\xff\xc8\xbf\xccb\x96\xd5[\xc0W\xbf\xe1\xac\xc3\x82\x83\x1f\xb5\xbfcn\x1f\x86\x01\xec\x97?A00\x1a\x0e3\xc7\xbf%g\xd9k\xb7\x1d\xba\xbf\x8e\xb7\x15\xe2r\x0e\x80\xbf\xaft\xe0\xd0\xf3l\xb9?\x7f\x8b;\x82|\x8f\xc4\xbfS\xc8Od\xc7Eq?\x07r\xa1NWR\xb5?\xdb\xec\xb6a^(\x90\xbf\xa4\x1e\xf4\x18\xef\x98\xcc\xbfU2 \xaf\x89\xdd\xae?\x10\xac\xc5\xd8\x15\x84\xcd?\x18=\xc4\xae\xa5\xb5\xa2\xbf\x86\x05z\x17\x11\xcc\xd7?Z\x07\x1b$$x\xda?]\x96\nJ\xc3\xf8\xcf?\xc6\x8f\xeaV:\xd5\xdd?\xbfU\xabQ\x07d\xc5?\xf8\xc6\xd3\xe9\xa8d\xd1?\x14`D\xc7\x05\xfe\xae?\xce\x0c\xe7+\xd0E\x7f\xbf-%\xe6\xb3\xd4\x8c\x97\xbf9u\xbf\x86\x01\x88\xd5?\xd3dn\x7f\x03\x0f\xe6?\xd3o/\xea\xc5Z\xa9\xbf \xf2\x9e\xd5\x84\x88\xa4\xbf\xdb\xb4\x8a\x92\xf0+\xa6?\xda#\xdf\n\xac\xf4\xc7?~\x8c7\xe4;\x0e\xc2?U\xa4w\xd9\xa8\xd0\x8c\xbfIP\xab\x9e\xa3\x0b\xb0\xbf\xdd\x8b\x05^\xbfw\x9b?\xa8\xdd-\x9a\x9b\xee\xc0\xbfB9\x8f\xd5\x00r\x8f\xbfgn?\xfc\x96\xe6\xaa\xbf5\xd9\xc7\xc1\x19se?H;\xe4\x9a\xcb\x84\xaf?\xe1b\xfe\x13\xe4P\xa3\xbf\x81\r\xe7<M\xe1\x83?\n!I\xebn\xc1\xd7\xbf\xda\xe3\xb3\xaa\xd0a\xd0\xbf\xbc\x9eJ\xc6\xc0\xda\xe8\xbf\xda{\x00)\xd8\x0e\xc5\xbf\xafE;\t\xab\xd1\x8e?\x98I\x96\xb6\xb6r\x85\xbf\x83\x00\xcb\x8c\xe4\x9d\xe3?\xef\xcb\x18\x1c^\x93\xc3\xbfu R\xdfs_\xbb?HP\xdd\xf9\x9b\\\xe2\xbf|\xb0\xd0h\xcf(\xec?t\xf4\xc2\x9a\xec\x8c\x80?\x99\x7f\\`:\x0ch\xbf\xc9iD\x9cEd@?_\xc7\xfe\xc8k\xc2\xa2?a\t\xc4h"}\xd6\xbfo\x82\x17;\x99g\xc6\xbf\xed\xf0\xee\xb8\xcbo\x8f?\xe2\x7f\x9c\xa9\x9a\xdc\x86\xbf\xde\xfa\xb0\xb7R\xcf\xac??\xb2\xde\x07(B\xca\xbfd\xcaM#\xb2\xea\xd2?b\xe3M\x96\x8aW\xc6\xbfq\x18\x90>?\'\x8f\xbf]9{\t\xe1\xc2{?d\xb9\x1e\xdd3\xb8{?WmqLd\x02\xb0\xbf\x84LD&\xafX\xc1\xbfHU\xf8#\xbc\x84\xb8\xbf\xdb\x0c\x05\x94A\x1b\xce\xbfC\xfc7\x01%\xbd\xe1?\xc7\x8a\xe5\x92\xf0H\xc5?6\xden_\\\x96\x8a?\xa7$\xd4[\xe3\xff\xa1\xbf\x05\xf3\xe1V\xb6\x83\xc2?\x13#\'\xa1-\xe8\xdd?\xf6\xb5\xbc\x15\x8a\xf3\xa2\xbfp\x1b\xc0j;\xc1\xa2?u\x98W\x97\xfe\x19\xa0?\xdc\x0eL\xfa\xeb\x06\xcb?\xbbiy\x9c]\xeb\xd2\xbf\xce\x9bS\xe6\xb3\x11\xd6\xbf\x83\x8c\x9a\xd1S\xff\xb6?\x1b\xa4\xa8\x08\x1a$\xaa\xbf0\xfd*\x13\x86,q?D\xb2f\x9c\x11v\xe6?;0\xb3]"U\xe3\xbf\xf6z4\xe12\xe1\xb8?\\\xa1M\xe2\xa4\xb4|\xbf\xdd\xbb\xdd%\x8c\xdc\xba?C\x16k\x92w\r\xd0?\xe1\xa1$#\x82\xb2\xbc?\x93\xf3\xfb\t\xf0@\xbd\xbf\x0c/\x92e\x0c\xd0\x83?\x86\xf8\x1c3\xe7\xb5\xa6?\xe3\xcc\x80\xe2\x85\xf3\xd1?\x1f\x8a\xb3\xd4\xaa\xec\x9f?\xe6t2\x08lC\xaf\xbf\xbf\x0c\xa9\xfa\x1d\xff\xff?\xb8t\xc0L,*\x90\xbf?\xd7\xc7\xa2K\xb2\xc0?s\xbe\xa1h\xd9\xe2\x86\xbfcEy\x00\xda\xbf\xb9\xbfXBfU\x10\x8c\xed\xbf\x12\x9f\x95\xd8\xe7\x99\xf9?\xceQ\x0c\x80"\x96\xb1\xbf\x8a\xc9\xf6\x8c\xfd!\xcb?\xef\xda\x8d\x96\xcd\xea\xca\xbf\x95/t\xc05\xad\x00@\x10#X\x82`\x88\xcd\xbf\x83\xab\x87%q\xa6\x9e\xbf#\x11P\x9714\xba?h\x13\x8f-\x19\x91\x05@\xf8\xedhB$K\x8c?\x07\x1fg\xdc\xc6"\xda\xbfe\xdaRD\xc7\x05\xd4?\xd2\xd9\xc0\xdb%\xc6\xca\xbf\x17M\xa0\xeeb\x02\xd7\xbf\xcaC\xcb\xady:\xd3?\xc4* \xe9\x93A\xd4?\x9e &^$0\xa3?\x90\xdcv\xfd\xc0X\xe7\xbfK\xa3P\x89\xd8e\x8f\xbfY\xd8\x8b\x03\t\x99\xbf\xbf~\x96^\x970\x82\x04@\x7f\x0f(\x9f\x1e\x11\x08\xc0\xbf\xb1\x96\xb5\x8c\xc1\xad?i\xbe]bM?\xd2\xbf\xad\xdf\x88\xd1\xc9\x96\xa7\xbfy\x17\xb5\xdc\xd9\xe9\x9b\xbf#\x90\xbe\xcf\xfb/s?w\x99\xd9\xce\xa0k\xc3?\xf0a\xe5\x80\xd6\x8b\xb2?\xde\xad\x8cm\xe9\x8b\x02\xc0\xba\xdd.\x82\x0c\x01\xe2?\x07\x8eYa\x19&\xfd?n\xfd\xb4\xf9\xc6r\x02?\x89\xcfns\x8a\xc7\xa8?S\xf5X,XG\x93?\x93a\x18`U&\xeb\xbf\x99\xe7\xd2]\xfa\x11\xf5?\xba(\xa8\x86s\xe6\xef\xbf`=\xbd\x93\x92\x89\x93?\xc5h\xf2\xbf?[\xf2\xbfio\xccX\x81\xc4\x8a?\r\xb8i\x99\xc6\xbe{\xbf\xcd\xc1\xc4\xd7|<\xc2\xbf$\xc3\x1e\xab\xccP\xef?\xea\\\x89\xf2~=\xc4\xbf\xb1\xce\xdfsu\xdf\xe2\xbf\xdd\xf5G\x0e\xd7\xc0\xee\xbf\xc0\xa3\xa3\xb2[\xc8\x95\xbff\xb4\x91\x174\x90\xae?\x89\xec*\xe1\xff\x15\xe3?\x18\xfcS07\x8eU?\xbd\x8d\xe5`-\xf8\xc6\xbf\x86\x97u*;\xe3\xcc?\xb5f\'\x06p\x9a\xe3\xbf\xe7\x92\xf82\xbe\xbc\x9a?\xac\x00Eorz\xd0\xbf\xf9\xd4\xa7\xb2\x17R\xe8?\xbb9K\xe4\xd9\xf3\xd6?u\xd0B\x03\xbe\x1f\xcd?i\xd1\xc6+j\x9fT?\\\x15`\xac\xee\x8e\x8c?^\n\xfby\xaf\xb4\x94\xbf\xd2\x1a\x8d\x8b\xa0\x87\x04\xc0\rh\xdb\x88\x90\xba\xcb?1\xf0\xb1\x17\xc4\xde\x83?\x05.\x01\x8b5\xd1\x0c\xc0t\xb3\x91;\x18t\x9e\xbf\xf76\xc2\xc68\xbf\xb2\xbf\x82\x99\x90\x9d\xa4h\xd8\xbf\xcc\xd0\xd0\xf9\x1e\xec\x8b?\x8156\xf563\x9d?\n\xc5\x12\xa0f\xa3[?\x90\xe3\x9e\xf5\xda\xa0\x82?\x19r`8\xbe\x7f\x95?\xda\x19\x7f\x9cQ\x15\x99\xbf\x85\xdd\xa8\x16\xf5\x8b\xc1?\ru.\xbek\xd6\x8d\xbf\x92`\xfc(\xea\xcf\xe9\xbf\xfa5\x86\xfc\xac\xe2\xc8?\tQl9\x81\xef\xab?\x83V\xf2\xc3\xaa\x07\x8b\xbfA\x1a\xe9l\x07\xf1\xd0?QwF\xee\x91\xed\xc5?\xfcQ\x02I$\xfd\x00\xc0\x9aok\xe4\xbae\x92?o\nr8\r{\xd3?\xd3-\xb5\x10,\x8d\xe5?\xb5\xf5\x113\xe42\xc5\xbf\x9et\x88\x06\xfc\x99\xd1?\xde\x06]\xfa\x86\xbc\xa1?)`8(\x7fe\xd4?\xedf"\t\xd1\x1d\xc7?\xa7\x95m\x13\xf2\xac\xb1?p\xae\x7f\x07xk\x99?{\x91N\xf4L\xc6\xdb?1\x91\xf9\x8a\xc3\x9e\x88?\x95\x9ef\xe1x\xf5\x8b\xbf\x0b,3\xbc\xee\xb6m?\x95\x95\xf5Gk\x1f\xd7?\xe8\xac\xe0\x92\xb8\x03\xc7?\xcd+\xe6_/\xe0\xdd?_~\xd3w\x01\xbb\xb8?\xa8\x85\x92FF\xe8\xed?\xb2F\xbe\xd8\xba\xbe\x86\xbf\xa1\xeb\xb4:\xc3\x1a\xd6?\x162\xa9\x854x\xc3\xbfe\x9d\x92\x81H\xa3\xc1\xbf\x11\xe57`u#\xc9?\xb0X3\xeb\xdb\x02\xd8?\xf7M<\xd2\x0bq\x96?\x94\x05\xebj"\xd3\xdb?\xd1\xbe:\x9a\xf4\xdd\xe5?\xbf\'\xc5;=]\x94\xbf\x86\xd0\'Z\xaf\x14\xed?\xe9ZB\x08\xa1\xa7\xd4?\xab\xcd%:\xf0\x91\xd7?\x99\x94\xed\x83\x99\xd1\x92\xbf2\xa3\x873\xc9\xbb\xa0?\xd0\xb5h\xf8\x18\xf1\xad\xbf\t\xd0\xe9t\xff\xf6\xd0\xbfZc\xbd{DW\xce?\xa2\xb5\xce\x91!?\xc9\xbf\xa3\xde\xd2z!f\xb9?\x91\xd2\xc2\x9e\xe1V|\xbf\x9d\xecTj\xfe\xa3\xda\xbff\x96\xafQ(\xce\xc7?@\xf3\x04I4\xdb{\xbf\x00\xbc\xa3d\x1d\xc2\xb4?\xa9@q\xc7\x1a\xd7\xbf?\xads4Ah\x0e\xc0\xbf6(G\xadt\xec\xbd?\x91\xef\xb7/F\xa8\xd0?bu\x18\x87\xcd*\xbb?\xf6\xd7\x07\xfb\xc1V\xaa\xbf\x9e\xc1\xaab\x81Q\xa3\xbf\xb6,\x12\xec\xd29\xb7\xbf\xf0\t\x1f\xbf\x8a\xca\xd7?\xb1w\xd7\x9f<G\xd3?\xe0\xc4\xe0IZ\xbd\xda?2\xc6qb\x948\x89?\xdb\x98\xdd[1\xab\xa0\xbf\x14e\xf3\xe3\x07C\xb0\xbf\xab:\xf7Zk\xeb\xf0?\xcb\xb1\x96\x9c\xf0F\xd2\xbfX$\xf6T\xe1\x02\x91?\x11\xbb\xf7\x18\xf0e\xeb?"bh"\x96o\xf1?\x9dL\xab\xedA\xf5\xa3?z\xc0IaIF\x95?\xb6\xf5\xe3Q\xc0\xf3\xa1?\xea\xdbX\xfe1\xb9\x80\xbf\x9dB\xae\x18AP\xbf\xbf\x96\x80\x0cM3\xda\xe2?\xdc+1r-\xa3\xb6?\x90\x81]\xf8K\xaeE\xbf\xcdR\xec\x07th\x99\xbf\x92\xe1\x02s\xe6\xf2\xd0?\x82\x9b\xe7@\x9b*\xd0?M\x8a\xces\xad\xcc\xb0\xbf\xa3:A\xf2$\x9c\x90?\x08\xf3\x1bv\xfc[\xa0\xbf\x03\x12\x97\xa5\xcaG\x82\xbfk\xb86\x13\x84a\xb6?N4o\x8as\x7f\xda?A\x11?8A\xd8\xc9?f\xd3?\\Q\x1b\xd5\xbf\xd3\x08Z\tq\x14\xe2?\xcc\xa8t\xd0\xc9M\xc3?\xabd?\x9971\x90\xbf\xf1_<rT\x15\xa2?ag\x949\xd3\xd7\xc9?\xc6i&\x10\x19\xbe\xe1\xbff\x89\xbayG\xcc\xb8?^\x8c\x9f\xf6\x0e\xe4\xae?S\x9bB\x95\xd2\xe9\xb0\xbf\xf3\x1b\xb4\xcbd%\xe2?\xcd\x02;\xea\xee\t\xe0\xbfU\x0b\xf3\xcf\xe7\x9e\xd7\xbf!i\\\xaa\xdd\xb2\x9a?/\r\xa9I\xf6]\xaf?$\xffK\xf8<\xb0\x87?\x91S\xfeR\xd8\x16\xd6?_\r\x96\xaf\xb48\xda?M\xecx\xf3B\x83s?1*\x8a@\x0ee\xb5\xbf+Q\xb4D\xe6\xda\x9c\xbf\xe3\xfeU\x9e\xa0\xe4r\xbf\x1a\xa8(\xb7\xed\xa1\xb1?\x1f\xd597\n\xa4\x90?\xec\xa7\xe2|\xf1*\x9b\xbf\xd2\x11\x13\xfd9<\xb8\xbfo/\xe8[\x16_\xd2?-\x92\xfe\xcf\xad\xdf\xa8?\xe43\xd6\xe1pj\x8e?\x9f\x92\x0bE\x8c)\xf7?Z\n.DqOu?O\x8a#\x10\x8c\x82\xa9\xbfU\xb6\x80>\x04b?\xbf:*#\x90\xc90\xb4?p<\x8ejI\xdd\xe2?~\xb6c\xa2\'9\xc7?\x92q\xbf,\x94\x11\xc0\xbf\xc3\x0f\xbd\xdc\xff\x96\xb8\xbf\x9d\xc6\xc3\xe5b\xfc\xc1?\x13\x03\x91H#\xc4\xe2?\xad\xd4\x0bZV\xa2\xda?A\x87\t\t0Z\xe3?@\x94\xaa\xc12B\xa8?sW\xfc\xc2\xbd\x14\xe5?\x96\xab\xff?\\\xa3t\xbf\xc1\xe5G\xfe\x131\xd3\xbf\x0e:\xb8\xa9F\xfe\x02@\xf4\xe6,\xf4b\x8a\xc4?\no\xfd\xe6\x15\xae\xd1?\x1b\x87\xb5\x86\x1f \xc6\xbf\x0f\xf1\xb3H\xc5\xf1\xd5\xbf\xa8\xd1i89nX?7\x96\x884M\xdd\x96?\xde\x90\x9c3t\xad\xa9\xbfQY\x96"\x1e\x1c\xb2\xbfG\x9d\xf6\xecz\xc6\xe6?\\\xf3\x91\xdd1R\x03\xc0\x1am\xc0\x1bU\x90U??\xc4\xa1\x85S\x9d\xc0\xbf\x99\xe8\xe9A\xab\xff\xc9?\x01$l\xaa6\xd1\xd0\xbf\xf2\x13<\xdd\xc7c\x85?#\xbb\x93\xde\xe8\xb5K\xbf\xc58\xff\x02\x80\xd5\xaa\xbf^WC\x8f\xb1\xd3\xfa\xbf\xc5\xa8/\xa2\xaev\xed?\xb0\n\x1b8\xdf,\xa1\xbf\xa7\xd7\xe8IZ\xf9\xa6\xbfxv\x93\xf1t\x0b\x9a?\x84"r~uXh\xbf\xab\xf8$\xe9\\\xe9\xf4\xbf\xde\x1d\xab}\x1c\x02\xf7?!xm\x1a\xa9w\xd6\xbf\xd2\xa2G\xd6wm\xdc\xbf=\xce\x7f\x9a#k\xfa\xbfQ+\xb4\xc3P\x9b\xa0\xbf\xb0.A\x95O\xdb\x92?\xc2\x81V\xe7\xae7\xe6\xbf\'\xeb9\x89\xf0\xe8\xec?f\x93R\xb4\x00X_\xbf\xd2\xbe\x03K\xcc\xb1\xda\xbf*\x86\xa50\x9b\xb6\xf2\xbf\x13\xfe \xe0\x9ebh?\xdb\x1aQ\x82\xe6\xc3>\xbf8\xe3<\xb1\xa1g\xd0\xbf\t\xb4\xe4\x8d4+\x7f\xbf\x9b\\\xa1\xcf!\xafr?\xc0\x11\x0c\xc6\xf0\xff\xa5\xbf\x83\x1d C\x01\xdd\xaf?\xe2\r.\xf9\xf0\xdc\xa6\xbf\xe7\xc9\xdd[\r\xd5\xac?\x91\x8a*\x05\xf7H\xd0?bHg\x87&%\xb3\xbf\x97\xe1R\x06\xc8\xee\xc1\xbf"h^\x85\xce\x8d\x82\xbf\x87\xf3\xb09-U\x97?\x16\xa1\x8f&;?\x80?\xbf\xc2>n\xd0\xba\x02\xc0l1\xa2\xf5\xf1c\xd7\xbf\x05\xec\xd0\xe8\xcf}\xd4?\n\x99JT\xf5J\t\xc0\xc9\xbb\\Lfi\xcd\xbf\xe9\xdc;?(\x18\xae\xbfm\x7f\x92\'2#\xc6?8\xaa\xa7C+\x809\xbf/\x0f\x167\x85\xccf?\xf4\t c\x07\xb4\xb6\xbf\x14\x8c\xa5!\xdd\x1a\xdd>\x1fCb~\xf9k\x9e?U\x8d\x1f\t\xb5\xe9\x92\xbf\xf0\xa5{\xcfx\xa4\xd3?GK(\xf7\xb7.\xd2?\xb1k\x8b@R\x8f\xeb\xbf\x9b~\xa2\xb8\x8e\xf9\xc4\xbf~\x06\xd2\xeeJ\xdc\xc9?\x02\xf724\x9f\xb8\xaf?G\xce\xaerg\x19\xc3\xbf\xb8mv\xaf\x1b\xbc\xca?d\xb2\x83Q\xc9\xdb\xe9\xbf\x96\x98C\xd3_\x82&?\xe7\x97\xa3B\xd4\xeb\xd0?\x14\x0c\x0bJ\x10\x8f\xe4?\x03a\xf3\xdf\xf5\x15\xd1?1\x01\xe9\xc1\xc6}\xd8\xbf\x9a!\xa9\x19\t\x02z?\x9bZ\xc4\x9b\xb3\xf0\xdc?\xb2\x80\xc7\xe9p|\xaa\xbfS6D\x9d\xd0\xd8\xb3?^\xa3\xe1\xb0\x95\xf4\x90\xbfH\xf6\xc3N\xf1\xf9\xe6\xbf\x1adB_\xe3\t\x8a?\x85\xffR68\xeex\xbf\xa4\xa4Y).)\x91?\xa3Y\x03\x9e\x92\xda\xd5?\x1b\xc1\xb99O@\xdb?\xb0\xd0Baq\x03\xa3\xbf\xb5\x82\xcdl\t\xe3\xc9\xbf\x15\xc8n!\xdb\xde\xc6\xbfA@\x14Y\xbek\xd2?\x1e\xf6\xdex\xc0\x06\xd1\xbf\x87\x07A\x18)I\xdc?\xcc\xe6\xe7\'\xdbK\xac\xbfgL\xc1\x96\x91w\xb3?\x9a-T\xb2\x07\x81\xe6\xbfLt\xcfI\x18\xe5\x84\xbf, M\xe0\xde\xc1\xc2?u.\x83\x92W\x18\xd6?\'\x19\xaa\xbd\xd8\x8a\xab\xbf\x12\x95\xdaY\xe2\x15\xe1\xbf\x13o7\xf9\x9c\xbe\xd4\xbf\xcb\xa1\x1c\xeb\x1a\'\xcd\xbf\x1cH\x1e\xb9\xed7\xba?\xcf\xa0\xc4\x14\xc2\x8a\xd7?\xa1\x8b\xd4\x84N\x08\x9a\xbf\xe9\x14\xb25\xc1o\xae?\x84-{z\x13\xe0\xe2\xbf8\x8fw!\xdf(\xf0\xbf,2\x9d4\xbf\x07\xb8?\x1b~/1\x8d{\xbf\xbf\x1c-\n\xee\x8b\xde\xb4\xbf\xd7\xc8\x0c\xd1\x1b\x9f\xe5\xbf\xa9\xe0\x9a:\x90\xb6m?j=\xc0\xbbn\xa4\xcd\xbf\xcd_\xd6\x81\xd8\x91\xb6\xbf\x84\x99\xd6\xb3\x83 \xcf\xbfwUu\xb5\xbd}\xba?4^\xfb\x00\xeb\xe1\xe0\xbf\xe6\xed8\x04\x99\x13c?\xa9\x8f\xaa\xc4<\xf4\x97\xbfC\xbe\xb8\x06\x8bE\x9d?AD\x96\xbd8\x1f\xbc\xbf\xfciy\xbarj\xa6?e\x1d*\xc1\x93C\xcd?i\x9c\xb5\xf4\x97[\xd1\xbf\x95B~#\x102\xd3?\xbf\x02\x8c(\xa7\xfa|?\xe0\x8a\xfc\x05"\xaf\x8d?\xff@\xaa\xec\xf4g\xa3?@\x10Bt\x0cm\xf1?\xaa\xd6\xc1\xe3\xf1\xa4\x95?l\x1b\xafek\xa0\xe2\xbf\xee\xec\xbd\xba\xc4\xd6\xba?\r\xa4\xc7\xe3\x96U\x94?Pq+]\x15\x8f\xaa?\xf8>\x80p+b\xdb\xbf\xbf\xf5\xb8\x92\xd2\xec\x90?\x87!ov\x04g\xcf?\x8aic\x8e\x10M\xdf?\xcb&\x18f\xbde\xdb\xbf07n\xe6=\xb1\x80?hm]\x98\xd3\'\xb2?\xb4r\xad\xa6\xb7\x85\xc5?\xf3W\xc0\x04M\xf1\xd5\xbfv\xe9;a\xb5\xfd\xd6\xbf\x10\x02\xc8\x1a\x9d\x0f\x86?n\xb7\x81\xc9\xa4RN\xbf\xc49\xe3\xe2\xf1\xd1\x94?\xf0X\x8dr\xbf\xf6\xde\xbf\x0c\xe3#/\xd3\xe9\x90?ec\xcb\xaf\xb2o\xa9\xbf\xe7\xc6(UN\xbe\xea\xbf1\x00\x8c\'\xf2H\xa1\xbf\xd2J Al\x90\x9c\xbf\xb4\x92\xd1\xe08\x8d\x97\xbf1p\xedH\xcb\xa5\x96?W\x01:xg)\xd2\xbf\x05=\xb64R\xcb\xb9?\x17\x12,\x81*\x01\xa4?\xa4\x1d\xb3\xa8\x0e\xe1\xb2\xbf\x12+\x16A=\x8a\x99?\xac\xe8\xcfg7\xad\xc2? \xa3\xa9\xf8/:\xdc?\xf38\x9c\xf1\x9ef\xe6?\x1a\r.\x18\xe3\x93\xe4\xbf\xeb2\xfbFc\x89\xb9\xbf\x1d\xe35\xb0\xae\'\xa8\xbf@@}\xea\xb1\x91\xda\xbfE\n\x98\xeae{\xc7\xbf\xe9\xb7\x9c\x08\xd1a\xd9\xbf\xcf\xf7\xb9\xdb\xe5\x98\xa0?/\xf6\x040;\xc3\xaa?&\xa4)rv\x81\xa3\xbf\x12\xea\xa6\x10\xfb\xef\x8f\xbf\x1fE\x9f\xd9\xa0\xd5\xd3\xbf\x87 \xcd\x9c\x19\xaao?4\x87\xa9:L\xb2\xcc\xbf\xb6\x1f\xe0\xbarE\xea?\xc1N\xf2^l*\x8b?\xf6{\x16\x17\xf3\x15\x90?\xee\r4\xa6\x90\x85\x0c@0\n\x83#\xb9Q\x89?_\x01\xa40k\xec\xc0\xbf\xf9\xd5gi\xb5\xa9t?\xe2,\x16\xaf\x11g\xc9\xbf\xa5w\x15\xefL\x9c\xf6?\x94\x922\xcae\x0c\xdd\xbfW\xbfr\x9e\xc0n\xb3\xbf6\xc5\x96\xef\xd0?\xc7?\xc7knr,\xd8\xa9\xbf\x11\xeau\xb3T \xdf?\xeb\xe4~a\xea|\xd4?r\xfa\xce\xe7\x8a\xd4\xe3\xbf\x83g\xf5\x0c\x00+\xb0?\xb8\xfc\xbb\x8c\xc0\xb4\xb5?\xf1\xfcp--\xfe\x9b\xbf\x8f\xf7\xbb\xder\t\xe0\xbf\x9fTfK\xea\xcc\x18@\xa7\xb6"\xea\x83X\xd6?cK\x05\xa0\x8d\\\xb5\xbfH@\xcd>lN\xd3?\xd0.\xe0\x0f\x01m\xd9?Um<Z\xac\xebk?\xff\xd8~\x0c\xd8H\xd4?2J\xebG!\xa4i?\x99\x1bmVq8\xd3?N<j\xdb[\x96\xb7\xbfn\xba\xac\xfe)\x9b\x13\xc0t\x11\xc0\x12H\x1d\xb0?\xaa\xd4\x89\x0cwS\xd3\xbf\x00\xfb:#\xcdl\xa4\xbf+\xd9zFD_\x97?{l\xa4u\xaalr\xbf\xab\xd5\xa3N\xafR\xf2?7IC\x8e\x94\xa8\xb2?\xcb\xd6\x98\xb1\xa4e\x01\xc0\xa2\xc0@v>F\x06@\xc9>\x91\x9di\xdd\xe0?mP\x14\xca\xe4w\x9f?\xc2\xe0D\xf3\xcd\xc0\x8e?\xcb\xe5\xe9\xa6\x97\x89}?*"\x7fP{\xd4\xfb\xbf2\xa3T\xb3\x91\xec\x0c@9y\x83Z$\x10\xfe\xbfK\xa2\xa1\x93Nx\xe4\xbf\xfc\x8d\x84\xc6#\x03\x07\xc00\xa3\x9f\xfe\x10g|\xbf\xc7\x1a\xdfs\x86\xe3\xc1?\xfb\x1e1\xb1\xc9\x8a\xfd\xbf\x00\x13\ra\x99\x98\xf7?D"\x02\xf4\xf7\xe0\xbf\xbfi\xa0O&C\x81\xe7\xbf\xd4\xb0\x0b\x8e+\xb7\xf4\xbfq\xe2r\x13\xb8pe?\xd8\xcf\xdf/\xfeT\x83?\xb3\x07\x10\x1e\xae\xf6\xd3?\xb7\xed\xed(\x90t\x8d?\x9a\xc9\x8e\xec\xab\x85\xd3\xbfh\x97.t\x96\n\xc3\xbf\xcc?\x08"\x91t\xf0\xbf?\\\xae\xaa\xdcz\x92?n\xa05\x98|\xb3\x04@IVe\x89\xea]\xfa\xbftSQRN\x0b\xc5?}j\x19\xea0\x97\xb1?\xfc\xcd\xb9\xf2~\xa8\x9c?\xd5/wx\tC\x8e?\xe5\t$~:%x? \xbc\x9b\t\x06\x05\x11\xc0%xR\xfa\x08\x12\xd5?h\xb2[\xe4[{\xd6\xbf%\xc508\xcd\x87\x18\xc0L%f\xec\x15B\xd4\xbf\xeby<]\xf7\xd2\x9e\xbf\x82\xff\x03\xe5\xfb4\xda?\xceF\xdd\xa04\x8bm\xbf\xe1\x1d\xf9\x0b<\xd1\xd7?\x94\x10\xc4\x1e\xc2\x9b\xb3\xbfb\xdd\xb3\xf2\xb6\x18\x8d?\r\x05C5+J\xa4?\xea`_u\xdd\xe9\x8d\xbf\x84\xd5\xb1|\xea&\xe1?!\x96\xad\x93\x9b\xb7\xf2?\xa0\xae\xb0 5\\\xfe\xbf\xf65\x82\x06\xb6R\xe5?\x9dl\x1e\xe5\x05\xd6\x8a?\xbd\x9a\x06F\x02\xca\xc0?\xb2\xf2`\xb0\xc8\xf9\xa4\xbf\xd9\xdf\xeb\xe6\x1d\x84\xd0?\xcc\xb3\xecj\x85X\xf4\xbf\xf9[\xc0[uc\xa8?l\x0b$\xd9\x99(\xe4?w\xee?\x84\xa0\xc6\x02@\x96\xff\x96\xdb\x0c\x84\xc1?\x1b\xa5\x11o?\xa7\xe3\xbf\xac\xbb\xfa\xbf\x0b\xf4\xb7?\xf0\xe5\xd8e\xb0\xc1\xc6?\xe4N%%\x06\x8a\xc5?\xc68O?\x12>\xa1?0;\xd4\xf2{lj\xbf\x18\x18p\x95z\xcd\x98\xbf\xa6\xec\xce\xea\x8a\xfc\x80?\x00\xb9i\xcfP\xffZ?l\xdf\xbc\xa3\xd0\x9f\x8a\xbf\xccmY~\xa6\xea\xb0\xbf\xa4{S\'$\x1a\xe2?\x1f\x0f\x0c\xe4\x90\xe7\xa8?\xa7_:\xcf\x8f\xa4\xa1?\xc2/e\xcc\xff\xe4\xa5?\xfa\r\xd3\xec\x8aX\xda\xbf\x90\xb3\\\x0c\xa9xy\xbf<;T\xd1q\xc9\xbd?\xec\x8b\xa4x\xd2p\xbe?\n\xfa[^\xa6\xa9\xec\xbf\xf0\xb1\x85\x82\t\xd2\xea\xbf\'h\xcd\xc5Pl\xa3?\xd1Xu\xad\x0c\xed\xcb?\xf3^\xed\xd9\xc0\xf7\xaa\xbfWU\x00E\xf9\xd3\xdb\xbfb+\x88f\xb7a\xad?\x15\x89\xc7\xd8\xac_\xce?Z\xbb\x8c\xeb\xeez\xd7?\x0c\x99\xbb\x8cqX\xa0?\x12\xf4\xd5\x95\x16\x03\xbd?L\x10\xda\xb6\xb5^\xf2>\x81\xa2\xfd\x84@\xed\xc6\xbfz\xe7Y\xba\x95\xf2\xe7\xbf\xdd\x86\x9e\x1b(n\xf4\xbfz\xce<\xf6\xdb\x08\xb9?M#<U\xd1\xd2\xb4\xbfZ\x94$\xfa^\xa7\xc1\xbf\x89\xd9\xccM6w\xcd?\xf3C2\xd6x\x7fl\xbf\xbb1\xb1\x81\x96\x95\xf0\xbfw(\xd9y\x88\xb4\xa8?\x9d\xaf"\xc2\xa9\xc6\xb2?}\x99\x02K\x8c\xf3\xe1?\xb3\xae3V\x04U\x97\xbf\x1ay\xed>%\n\x7f?\x97\x05a\xd1\xeb\x15d\xbf\x92\x96\xc9E\x18"\x91?\x86z\x1f\xf4\xc7\xa5\xb5?\xbd\xff\x98\xadS\x91\xdb?\x01\xb1\x08\xea\xe5`\x8b?^\x7f\xe32\xcd\x1f\xeb?\xbb\xd2\x83\t\xff\x0b\xb9?\x1am\xb7\xa6\xcd\xc3\x83?\\3\xa1B\xc9\x9c\xb7?\xb9L\x7f?\x8e\xba\xc3\xbf\xe6Jj\xe2\\\x9f\xb1?"y\xf1Z\xc4\x1e\x90?U(\xe3u\xb1<\xc1?\xb3\xee\xc0\xeeL\xbf\xd1?\x88\x18\x1fFD\xf6u\xbf\xf5\xe0\xf8\x9aK6\xc2?u\xcc\x97\x86f2\xdf?z_\xc3\x08\xc3\xea\xab?\xe9%\xc0\x0f=\xfc\xb8?\xe0\xb7V\xb4e\xc6\xf4?\xe2\xc4\x92p\x1a\xc6\xca\xbf!\xa6\xea\x1d\x01D\x96\xbf\xd2\x87E\t\xdc\xc7\xe7?\xa5\x18\x0b\xda\x07s\xaf\xbf\'\xee)J\xfe/\xd0?\xab\xaco\xe9\xce\xc2\xb3\xbf\xfb\'F\xa4X\x89\xa9?\x80-i\x04(\xa1\x88\xbf:\x0c\xd3x\xa5\x87\x82\xbfF\xf9\x10w\x90\xdf\xb0?6E\xc8w\x96\x01\xf2?\x95\xa5?l\x1d\xb6\xe1?\xb5]\xf2\xdf\x1c\xe8\xf4\xbf-\x8d\xb8\xfd2\xdc\xbd?]\xf7\x81\xdcK\xe2l\xbfe0\xb83=S\x94\xbf\xbbu)"\x130\x90?\xe7\xafyr^[\xca?2\x90\x96\x7f\xa3S\x97\xbfEm\x91\xfdfY\x99?g\xf3\xc85\x92\xc2\x91?L\xaa\xed\x1c\xfc\xb8\x8d?{\xd9\x98\xa8\x0f}\xce?\xef\x97\xb0\xec\xb3M\xe9?ii\xeb\xdd[f\xaf\xbf\x02\xd31R\xca\xb2\xd6?R\xb8\x0b\n\xf7\xc6Q\xbfMq\x9f\xae\xc2\xea\x96?\xf0U8i\x99\xa2\xde\xbf\x81\xc1\xed\xc1C\x15\xc3?\xaeT\xc6\x1f\xe1\xca\xd3\xbf\x8b\x06\x9aq\x12\x89\x96\xbf\xb8\xa2\x86\xf3\xb8X\xaa?\x8es\x80}R\x82\xe4\xbf\xb4p\xe3\x8b\x15\xbe\xb5\xbf\xc3P\xe0y\x84O\xe1?\xa2\x9c\xe6\xd6\xe1I\xbc\xbf'
p628
tp629
basg71
I00
sg72
I00
sg73
g0
(g74
g5
Ntp630
Rp631
(dp632
g78
(I00
I00
tp633
sg80
S'float64'
p634
sg82
g66
sg83
I00
sg53
Nsbsg84
Nsbsg559
I01
sg71
I00
sg560
I01
sg561
I00
sg562
g0
(g10
g5
Ntp635
Rp636
(dp637
g14
S'auto_14119'
p638
sg16
Nsg17
g0
(g18
g5
Ntp639
Rp640
(dp641
g22
(lp642
(lp643
(g25
I306
g26
S'nade_train( * args[1:] )'
p644
tp645
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p646
tp647
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p648
tp649
a(g37
I24
g38
S'self.add_parameter(TensorParameter("W1", (n_visible, n_hidden), theano=True), optimise=True, regularise=True)'
p650
tp651
a(g41
I29
g42
S'parameter.add_to_model(self)'
p652
tp653
a(g41
I167
g45
S'setattr(model, self.name, theano.shared(np.zeros(self.shape, dtype=self.theano_type), self.name))'
p654
tp655
aasbsg48
g621
sg53
g444
sg85
Nsg73
g631
sbsg589
I01
sg84
Nsbag0
(g554
g5
Ntp656
Rp657
(dp658
g53
g430
sg558
Nsg261
g495
sg559
I01
sg71
I00
sg560
I01
sg561
I00
sg562
g474
sg589
I01
sg84
Nsbag0
(g554
g5
Ntp659
Rp660
(dp661
g53
g125
sg558
Nsg261
g148
sg559
I01
sg71
I00
sg560
I01
sg561
I00
sg562
g127
sg589
I01
sg84
Nsbag0
(g554
g5
Ntp662
Rp663
(dp664
g53
g435
sg558
Nsg261
g531
sg559
I01
sg71
I00
sg560
I01
sg561
I00
sg562
g510
sg589
I01
sg84
Nsbag0
(g554
g5
Ntp665
Rp666
(dp667
g53
g449
sg558
Nsg261
g0
(g49
g5
Ntp668
Rp669
(dp670
g53
g449
sg54
(lp671
g56
(g57
(I0
tp672
g59
tp673
Rp674
(I1
(I2
I100
tp675
g66
I00
S'\xe3\xd6\x94W\xe3M\xab\xbf\x90\x15\x0bc\x14b\xbe\xbfRM9\x94\xbf{\xe0\xbf\\\xa7\xcaf\xc5\x04\x9b\xbf\x15\x88\xa1$;\xaf\xd2\xbf\xda\x88\xc0\xa3\x0c\xd5\x9f\xbf\xf5N2A\x84B\xe5\xbf^"\xc7\xb8\x99\xa5\xa2\xbf\xb5\xea\xc1\xbf\\S\xc0\xbfVl\x054\x16]\xd0\xbf\xf9;@\xecqx\xac\xbfU{nr\nR\xd6\xbfV\xd91E\xb36\xb7\xbf\x86\xbcw\xb0(\xd1\xdd\xbf\xde\xf2\x02qT#\xc3\xbf|\x9e]\xfb\xc5q\xdd?v6H\xcd\\!\xd2\xbf\x8e\xc0]\x05Kl\xd1\xbfI\x1c\xde\xf50\x83\xd4?*\xc7U\xb1?\xfe\x98\xbfs\x9aC\x84T\x07\xc0\xbf\xcf5\x10~ :\xa5\xbfX\x11n\xe3\x19\xf8\xbd\xbfl\x95\xf9\xfb\x04o\xcc\xbf],\x8dV\xfe;\xce\xbf\x82\x94\x12\xbd#\xa8\xc9\xbf\xd5\xb5\xcft\xbeP\xd4\xbft ~\xc4>\xd4\xb8\xbf7z\xa5\xf1\xfam\xa6\xbf\xf2\n\xc0\xfc\xa3\x05\xe7\xbf\xcf\xfa\xe6\xbb\x1b\xb8\xb1\xbfW\x0b\xd3\xd9NU\xad\xbf \x9e\x1c)\x9a\x94\xbc\xbft\xb8\xdd\x9f,\xc3\xb2\xbf}\xc2JA\xa9R\xa9\xbf\x8d\xd4\x8a`\'\x7f\xa2\xbfD\xb4w\x1fLe\xce\xbf_\xcb\x1d\x8duT\xd7\xbf%\'\x057\xa5\x9a\xee?u\xc6\xfe\xe0\xe5\xe7\xcb\xbfj#(R\x8c\xfb\xa4\xbf\x97\x9e\x87wG\x1d\xd0\xbf\xa1\x9b\x19zd\xf7\xbe\xbfl\xe0\x86\xed\xe3\xb5\xbd\xbf\xbc\x18\xbb\xf5X\x9a\xa3\xbf\x9d\x86Yx\x81\xd0\xcc\xbfk\x8e\xb7\xd1\xd4\xf1\xf5\xbf\r\xe1_J\x91\x9c\xd6\xbf\n\xda\xe1\xb5`\xa8\xd8\xbfw\x19D\xeb\x10?\xb4\xbf!\r\x8e)!\xba\xe7\xbf\xa8YLa\x12l\xeb\xbf\xd7%9\xf0\x9a\x95\xd4\xbf\xfe\xeeEK\xc1\xf5\xea\xbf\x1e\xc1\xca\xe7\x99\xcb\xba\xbfwU\x88q\xe0\xe8\xf3\xbf\xc5Rt\xda:h\xe4\xbf\xc0\x9e\\\xad0\x81\xb2\xbf\xc8\x9a\xbc\xc2\x19\x06\xb5\xbf\x17\xff\n\xbb5\xa7\xf1\xbf.\xe6\x82\x90Z\x01\xc0\xbf@\x04d~\xaf\xed\x94\xbfCX\x06\xe3\xbdK\xe6\xbfo\xf0pE=\x04\x9d\xbf\x8a3f\x0eE\x9a\xe0\xbf\xf5\x9au\xe1\x02\xeb\xc7\xbf\x0b\xd46\x9b\x83\xf8\xe3\xbf\x80\'+\xb1\xe3d\xa9\xbf\x8c\x92\x97\xa5\xd8-\xf1\xbf\xceO\x86?u\xab\xd0?A\x9d\xbb(\x99\x07\xb2\xbf\xc3\xd9\x0c\xfe\xcb)\xb4\xbf\n\xee\x9c\x8c\xe6\x7f\xdb\xbf\x9aa\xbb\x06\xa4l\xa5\xbf+\x02\x91\xb9\x1b\xa4\xa6\xbf\xb6\xa4\xf9\x1b\x95a\xb4\xbf@0\xa2\x83\xd5\xf7\xf0\xbf\xcax\xfa\xd4\xb5\xd7\xc8\xbf\xe0\x9d\xd6\x9c>\x86\xb1\xbf\xcd\x87\x82\xf9\xc9\x89\xec\xbf)\xa4\xccP\xab:\xb7\xbf\xa4a\xd9\xfdf\x1c\xa2\xbf\xfc.\xb6\x1b\xbc\x96\xd4\xbf\xc2\xdcL\x81\xe8\xad\xb1\xbf7$\xe42\x01\x98\xcf?!\xba\xb3\x0e\xf0\xf3\xc5\xbf\xc8\xea@\xb7\x17\x15\x9e\xbf\x86\xd6\xc9Z;{\xd4\xbfy\x85h\xffJ\x95\xd4\xbf\xd9Z)S\xc8\xdc\x9d\xbfJ\xbfz\xcb\rB\xf4\xbfq\x1ed\xb0\xf3\x95\xf1?\x86\xe6\xc4\xddf\x88\xb8\xbfY\'\xf1\xda\xe8x\xe8?_Vj3A\x84\xd1\xbf\xc7\xe1L\xb8\xf1\x9d\xa9\xbf\x1b\x98=MwX\xac\xbf,zU(\xcbc\xd4?%\xe7\xb0\x8d)\x1e\xa1\xbfJecRm\xe5\xe1\xbf\x00\x00\x00\x00{\x9e\x82\xbf\x00\x00\x00@D\xc7\x90?\x00\x00\x00\x00\x8a\xe9\x81\xbf\x00\x00\x00\x80\x0b\x89\x83?\x00\x00\x00`\x90\xb8h?\x00\x00\x00@\x8a\x00\x80?\x00\x00\x00`x\xf4\x86?\x00\x00\x00\xc0\x9e\x0co?\x00\x00\x00\x80(#z\xbf\x00\x00\x00\xc0\x1e\x96\x7f\xbf\x00\x00\x00\xa0*]\x90?\x00\x00\x00\xe0\xccLh?\x00\x00\x00\xe0\xc3\xf8t\xbf\x00\x00\x00`M\x8bh?\x00\x00\x00\x00\xf8\xe1d?\x00\x00\x00\xa0\x8e\x1ej?\x00\x00\x00`7\nn?\x00\x00\x00\xa0V\x84y?\x00\x00\x00\xc0\xddr\x8e\xbf\x00\x00\x00 \xc7\x15\x91\xbf\x00\x00\x00@\x13\xd2\x82?\x00\x00\x00 \x1e\xedn\xbf\x00\x00\x00\xc0/7\x82?\x00\x00\x00\xe0z\xc0o\xbf\x00\x00\x00\xe0n\x85\x82\xbf\x00\x00\x00\xe0m\xcd_?\x00\x00\x00@\xe7\xcaC?\x00\x00\x00\x00tp\x90\xbf\x00\x00\x00 \xc9\x12r?\x00\x00\x00\x80\x88\x86~?\x00\x00\x00\x80\x8cPw?\x00\x00\x00@J\xf0\x86?\x00\x00\x00\x80-\xf0\x8c?\x00\x00\x00 a\xc9s?\x00\x00\x00\x00>\xfe_?\x00\x00\x00\xa0\x04<c\xbf\x00\x00\x00@ \x89o\xbf\x00\x00\x00\x00xw\x80\xbf\x00\x00\x00\xe0%MV?\x00\x00\x00\xc0\xa0\xb7y?\x00\x00\x00 S\x1el\xbf\x00\x00\x00\x00\xbe\xe0h?\x00\x00\x00\xe0@\x97\x8f\xbf\x00\x00\x00\x00\xc6\x11a?\x00\x00\x00\xe0{\x16\x86?\x00\x00\x00\x00\xae\x96t?\x00\x00\x00\x80+P\x89\xbf\x00\x00\x00 \xf4\xc7\x83\xbf\x00\x00\x00\xe0\x8e\x02p?\x00\x00\x00\xa0\xa8\x81s\xbf\x00\x00\x00`\x7fNy\xbf\x00\x00\x00@k\x10r\xbf\x00\x00\x00`V\xde\x89\xbf\x00\x00\x00 \xf2Qp?\x00\x00\x00@\x9e\x89\x82\xbf\x00\x00\x00`\x81@\x13\xbf\x00\x00\x00 \x1dXf?\x00\x00\x00\xc0\xcc#\x89\xbf\x00\x00\x00\xc0\xea\x13Z?\x00\x00\x00 \xdc\x13\x7f?\x00\x00\x00 \xea\xdc\x8f\xbf\x00\x00\x00@\xe8\xc6\x84?\x00\x00\x00\xe0\xbc\x01\x86?\x00\x00\x00\xe0\x01\xddd?\x00\x00\x00\x00\xf1\xe4\x95\xbf\x00\x00\x00\x00H\x9e\x8a\xbf\x00\x00\x00\x00,\xa2.\xbf\x00\x00\x00\x00\xb9\xcd\x86\xbf\x00\x00\x00\x80\x15\x8b\x81\xbf\x00\x00\x00\xc0\xb2\xef\x88\xbf\x00\x00\x00\xa0]Kw\xbf\x00\x00\x00\xc0I\xc2y?\x00\x00\x00\xe0\xe4\xfe{\xbf\x00\x00\x00\xc0\xee\t\x81\xbf\x00\x00\x00\xe0\xd6\xa0y?\x00\x00\x00\xe0\xfdj\x8d\xbf\x00\x00\x00\xa0\x93g\x84?\x00\x00\x00\x00h\xac\x80\xbf\x00\x00\x00\xa0"~s?\x00\x00\x00\xa0\xa3U\x81\xbf\x00\x00\x00\xc0\xec\x979\xbf\x00\x00\x00\xc0\xec\x93d\xbf\x00\x00\x00`\x9dW\x82?\x00\x00\x00\x00\x0bAQ?\x00\x00\x00\x80\xa6Fq\xbf\x00\x00\x00`/=\x93?\x00\x00\x00 >\xaf\x90\xbf\x00\x00\x00\x80\xbf\xeay?\x00\x00\x00@\xfb\xfd\x8a?\x00\x00\x00\xa0\x13%\x94\xbf\x00\x00\x00\xc0_\xd2\x8c?\x00\x00\x00`w\x1e}\xbf\x00\x00\x00`/r\x82\xbf\x00\x00\x00`\x9d\xaa_?\x00\x00\x00\xe0\xf2M\x9b?\x00\x00\x00 A\xee~?\x00\x00\x00@.\x1bm?\x00\x00\x00`\xd1\xf7\x87?\x00\x00\x00\xa0 \xa6}?\x00\x00\x00`\xad\x87g\xbf'
p676
tp677
basg71
I00
sg72
I00
sg73
g0
(g74
g5
Ntp678
Rp679
(dp680
g78
(I00
I00
tp681
sg80
S'float64'
p682
sg82
g66
sg83
I00
sg53
Nsbsg84
Nsbsg559
I01
sg71
I00
sg560
I01
sg561
I00
sg562
g0
(g10
g5
Ntp683
Rp684
(dp685
g14
S'auto_14122'
p686
sg16
Nsg17
g0
(g18
g5
Ntp687
Rp688
(dp689
g22
(lp690
(lp691
(g25
I306
g26
S'nade_train( * args[1:] )'
p692
tp693
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p694
tp695
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p696
tp697
a(g37
I28
g38
S'self.add_parameter(TensorParameter("bs", (n_layers, n_hidden), theano=True), optimise=True, regularise=False)'
p698
tp699
a(g41
I29
g42
S'parameter.add_to_model(self)'
p700
tp701
a(g41
I167
g45
S'setattr(model, self.name, theano.shared(np.zeros(self.shape, dtype=self.theano_type), self.name))'
p702
tp703
aasbsg48
g669
sg53
g449
sg85
Nsg73
g679
sbsg589
I01
sg84
Nsbag0
(g554
g5
Ntp704
Rp705
(dp706
g53
g462
sg558
Nsg261
g0
(g49
g5
Ntp707
Rp708
(dp709
g53
g462
sg54
(lp710
g56
(g57
(I0
tp711
g59
tp712
Rp713
(I1
(I12
I100
I2
tp714
g66
I00
S'\xe6\xc0\xe0T\xaaZ\xa7\xbf\n\xb2\x0c\xf1:\xcc\x89?\xe2\x97\x9bF\xac\x8dW\xbf\xe0h`\x07D\xc2\x9c?\xa2V\xb5\x06\xe68%\xbf1\x96\xa5\xed\x84\x87\x88?\x87b\x12o\xa3\x0f6?\x15T\xeb)\xa0\xfe\x8d\xbf\xa2,W\xa8\x8c\xd6\xc0?\xc5\x1e\x85\x85g\x03q\xbf\x85u+\xad^\x9ds?\x10\x8c\xa0K,\xed\x89?\x9d=\x1e\xf7>}\xbf?\x91:\xe0\xd0\xab\xd7\x8e?\x7f\xa7\xa7\x95;\x97\x87?z\'iT\x06\x1br?\xd3D\x17\xb7\x86\x8b\xaa\xbf\x88\x13 \xa9\x87\xec\\\xbf\x19\xceZ\xfd9\x8fP?\xec\x15\x1b\x82\xd5\xc8\x84\xbf\x94W\x18]\xa1\x87\x7f\xbfz\xf8=\xbcx+i\xbf\x15\x91\xa7<M\xd8\xa5\xbf\x8a\xa9w\xd88\x85z?\xd3\x84\xc2i\xcd\xc7\x95\xbfC\n\xe9\x8a\x16\xdf.?\x86\n~6@\xaav?$\xbd\x9bXP\x9f\n\xbfI\x90*\xf0Xxe\xbf\trJ\xb8\xfc\xedW\xbf\x05P\xe7\xae\xd1(\x00\xbf\xf1\xf0\xeco\xbb\xb2-?#.\xe5\xa7\xec\t\xb4?\xee\xfa\xdb\xcd\xfa\xdaN?\x96q\xf9\xcb(\x17%?\xc7\xbf\xeeG2\xbei?\xdaN\xdb\xb2\x8d\xe8\xd4>\xd6X\x1c\xdc\xd0N\x84\xbf\x9ax\xd9\xc5qpc?\x04.\xebA\xe0i\x84\xbf\xdb\xfd\xe5\xa7\xe7\x13\xb3\xbf\xdb4D\xbb~\x10^?V\x87\x8e\x8a\xf3Jx?\xe3e\x8d\xcd\xf7%\x9a\xbf2D\xaf\xe1\xe7\x82\xa6\xbf\xcf\xf4\xb4/\xd8\xa8\x7f?>\xb5\x89\x05\x9e\x18u\xbf\x07\xa6\x06B\xcd4E\xbf\xa6\xe6zi=\x97\x93?J<\x1bAH>j?dS\x94\xe8\x08\x1b\xa2?\xad?\x1ah\xc6\x9fF?\xf0\xfc\x1d\x9e\xf8mE\xbf\x00\x8b\xf3\x93\xca\x9dU\xbf\xe2\x0e\xaa\xbcZ\x10\x97?5 \xa6\xce\x1c\x91S\xbfL\xcb\x85H\x16q{?\xf0\x93\x05\xcc\x02\xb9\x91\xbf \xf4\xf0\r<\x921?\x11\xd6H\xb6-)\x86?\xc6\xc5"\xa9\xd2\x8e\x91?\xd2:w5\xc3\x14i?\xbf\xd4YA%\xfc^?\xe4b\xcfZ\xa1\xf5\x8d\xbf\x17j;S\x10<\x80?\x10\x02[AU3\x98\xbf\x93\xedG\xbf\xb1\xae\x7f\xbf[\xd53}\x19\x02s?F\x06\xbf\xe6\xf4N\x8d\xbf\x1eC\xc4\xf1\x13\xf88?1\x039\xd1b\xf3G\xbf\xd5\xaa\xd1\xfdk\xde\x99\xbf\x92\x81\xd3\xa0fIX\xbf\x88\xab\xf3\xe8\x9cQ\x84?\xc6\x1e9\xed\x1ei\x9e?<r\x9eZ|\xe7\x89?\x084\xa9\xe7-\xb4\xf7>\xf8\xbd\x06\x86\x85\xf3\x94\xbf\xe5\x96\x9f\x9dyF\xa3?\x080\xfel\'\xceT\xbf\xb7$\xcfy\xacX\x82\xbfi\xb6V\xd4\x1a.\x90\xbfq8N\xfc\x04?\xb1?\xb9J\r\xb0\xa6\x1bx\xbf\xc5\xa1\x83X\xa5i\xa3\xbf\x01\n\xb1n\xe4l\x81?i\xa5\xa5\xea\xb9%\xcf\xbf\x81)\x14\xf1\xeb\xa7b\xbf(\x9a\x01\xe2\x8c\x9ar\xbf\x96\xa3\xce\x18\x19c\x8d\xbf\x14\x98;r\x9e\x0bw?\xae\xbd)\xc6\x89\x12R?\xaa\x1d\xb9\xf2w`w?\xa7W8\xe5\x03\x98\x84\xbf\xa4\xd24\x10UU\xa0?\xf1"K\xca\xbc\x8dw\xbf\tR\x89\xf3 \xa0\xbd?\xd3\x8e\rF\xd96}?\xc8\x96\x7f\x80B\xa8\xa9\xbfD[\xe8\xa9\x02f\x84\xbf\xaag\xf8\xd4=Y\x93\xbf\x95\xfa\xa69pg\x86\xbfs5\x9cX)\xbf\x1e\xbf\xf8\x98h\xba\n\xcae?\xa1J\xff\xb4FM\xb1?b\x01\x80>\x03\xc4w\xbf\x04!\xa5\xfe\xb5\x18R\xbf\x84BT\x05\xff\xd0p\xbfZ\x8e\xed@\x8fE\x84?\x93\x84HW\x86\x0ce?m1\xb0\x8a9*P\xbfD\xc0\x8f\x9f0\xff`?&\x12\xa2L4\xfeM\xbf\xe6%\xa0\xdd~pR\xbf\xf6\tB\xb3\x8e:\x8c?\nS^5\xe0\x96\xa8\xbf\x1a\xe8K\x98\xfbv\x92\xbf\xc1W/\xf3|\x9e|\xbf\xc2\x16\xbf\x80\xae\x19o?p\xcf\xbf\x9c\xfdS\x88?:q\xd7E\xf8G}?r\x0b\x8c5\xa6\r{\xbf\xa9\x0c\xa9\xb3Isy\xbf+bw\x8f\xa3\\\x83\xbfR\xc6#\x14E{g?y-\x8b1\xfax\x91\xbf\'am?\xafOp\xbf\xfag<\xb6P\x17q\xbf}\x03V\x11\xa5Uu?\xd0\x94\x10\xdbc\xd3\x84\xbf"#Y<\xa5\x82\xb2\xbf\xd23$HX\x1d6?\xd7Q\xa5\xf3\xcc\x82\x9e?\'\xb6\x91|o\xac\x86?\'\xfd\xe0\xc5\x98\x90Q\xbf\x7f\x82\xb4\x1f\x81\xd0a\xbf\xcd\xe2\xc1\xfc}F\xbf?\xf8\xa8>\xdc\x1d`\x81\xbf\xcfX\xb0T+\xa2\xe2>\\9\x14\x94\xab\xfat\xbf\x82\xad\x04\xfe\xc0?\x87?\xd8\x08\x8d\x14\x9c\xees?H\xed\xdf \xa1.m\xbf\xa24\xcf^\xf8ux?\xd0U\xfaq\xcb\xdf\x84?\xb3VH\xbc\x833\x86\xbf\xab\xbc\xad\x95\xb9!\x81?\xb9M\x8c\x0c\xc5\xbe\x8e\xbf\xefX\xcc\x96X@y\xbfkV*g\xbe\xc6\x89?\xa2\x91\xc5\x08AE\x8b\xbf\x93M\x94P\xae9\x88\xbf:\xa4eF\xb5\x9dj?d\x88>\xef\xbd6t?\x0b\xbbv\xcf\xfb\xca\xad?<b\xb1\x0b#\xa7\x86\xbf\x10\xb0`O\xed\xb2{?,\xf6\xa5\xc2\xa4\x1eg?K\x05\xf0\xa2\x9e\xf5\xb6\xbfZ\'\xc0J\'0\x88?\xd2\x03\x10Y\x93=\xa4\xbf-;\xa0\xf9_(\x97?\xa6\x89\xb8\xb8]\x18c?\xbe\xe6\x0b\x0b\xf0\x82\x7f\xbf\xcf#x\xcf\xd0\xf0I?+\xddC3\xffB\x96\xbf9\xc3\xf9k\x0ea\x80?\xca\xf2\xfa\xd2*\xa7\x86\xbf\x8edv\xe4h\xa2\xe3>\x93^\x0b\xc1\r\xb1[\xbf\x02^\x18\x9e#\xd6\xa6\xbf\xfc\x1b\xec\xe0;Cw?\xb0\x9cmnwDb\xbf\x8b3\xc9\xb0\x086\x88?\xf1Yz\xe0\t\x07"?\xa6\xf0\x1d\xd2\xfdQ_?\x01\x1c\xb9\xe5\xd4\xffr\xbf\xeb\\1E\xfeSp\xbff\xaf\x1cQ\\\xf2l?s\x17*3\x18i\x19?\xef\xd0.x\xc7y`\xbf\x98,vW\xc4\xefo?\x02\nUz\xf0u\xda>\xf3\xb0\x05*\x84`y\xbfQ\xf3\x17\xb2v\xe9q\xbf?\xa7\xbf#J`0\xbf\x0feT\xea\xae\xe0\xde>\xdfb\x84\xf7\x18H\x94?}O2\xeb\xd8\xb3\xa0\xbf\xf7t\xb1\x89oT\x80?y=\xedz\xf1\xdd\x88?\x93<\xa4yP\x02\x90?\x1f\xbb\xb7rf\xd2\xab\xbf\xf7\x9a\xab\xfag d\xbf\n$\x95\xc9%V\xe5>\xf2i\xb4\xady\xe9l\xbf8\x99\x8f\xfbw\x08l?^L\x11q\x14H\x81\xbf\x0e\r}\xee\x95x\x98\xbf\x0b,\xc6T\xb0\x7f\x80?\xb1l^\x84\xda\xf8\x92?\xe1O\n\x9cs\x0f\xae?E\xd1\xe6S\xb7\x80\xc6\xbf\x0fq\xee\xd4\x1d\x18\xb9\xbfK\x8c\xdc5G1\xb5\xbf\xfd\xd9!3\x15X\xd7?#\xf5%zH\xec\x8a?\x7f\xb4\x05:\xe2jk\xbf1\xeb\x93\xe5\xec\xa4\xbd\xbfN\xa5\xc3\x02\xfd\x9c\xc4\xbf\xa2~1\x97\xc4Jm\xbf\x90\xcd\xbaw\xa8s\x91\xbf\xc5K+\xc9\xc9<\xac?\xea{u,/Q\xe0?}\xf1\xef\xe2\na\x9b?\x883q\xa9\xb98\xc2?\x93B\xcb\xa7r9\xbe?\xab\xa2\x16\xceA\xbb\xb5?rK\xd4\x0e\xb9\xee\xba\xbf\xc6A.\x07\xbeBz\xbf\xa9\xd4\xd3\x04\x88<\xab?\x0c^Y \n\xb7c\xbf\xa9H\x1f\xe9\x16\xfdg?\xee\xe1\x11\x9eH\xd3\xb1?\xa6\xf6k\xa8\x99B\xb8?\xb0\x02\xcf6^0\xb1?g\x11\\\xd5\x8ee\xb1\xbf\x86\xd9e\x97\x9f]\x9f?\x14^\xe1\xbdu\xf6\xcc?\xbb%\xf5\x19\xd8\x96\xd0?\x14\x9em\xad\xdd\x95\xa9?\xa8SF\x12\xe1>\xd6\xbf\xc9\x7f\x17\xd5\xd0\x19\xbf\xbf\x99\x935\x82It\xc5\xbf\x8b\xd4;\xd9\xc7\x1b\xaa?\xd7\xc95qu\xf9U\xbf,\xac\xbe\x19\x88\x8d\xd3?q\x9bZ\xf6\xf3\x16\xcc\xbf\x04\x8b?\xf3\xbf\xb2k?cc\xfb\xa6V\x90c\xbf\x9a\xecI-/]\xae?v\\\xdb\x05\xe1\xdbw?\x98A\x8e\x88\xc6HL?\xb8\xee\xfc/\t}f?y\xb2\x06\xf7\x87p\xa3?!i\xe2\xc4\xc5\xd3\x9d?\x96\xb7\xe5\xd0kD\x80\xbf\xc1\xea\xee=\x8f\x12\x98?\xee\x15$\xf2^\x1f\xa4?\t+\'.\xd0\xf2\xb5?\xd2\x93Si\xda\xaaz\xbf\xbc\x08 \xe8\xef\x0b\x95?6E\xd8\x054^\xa7?%\xca\xa3\xbe\xee\x88\xbc?\x81&\x90\x1c\xfcS\x95?\xc3\x91\xfcUl\x18\xb2\xbfJ\x0cI4\xcec\x90\xbf\xe8H@\xee\xfa\xe5\x91\xbf\xfc(=/\x12\\\x86?R\x01\xb1\xe5\x99h\xd6?\x0c\x1e(\x93Q\xc4\x7f?\x939\x02\xb9mvL\xbfUua\xbey\xc2q?\x0c\x1d\xa1\xd8Z\xefV\xbf\x947\xb1\x04g\x02\xc4?\xe1\x9e6\xa4\xa8\xce\xdd\xbf|3\xdbx\xbb\xed\xb8?\x92&\x84\xb6D\xbf\x84?\x9b\xb7\xa8\xa7+\xa1{\xbfP\xcc>\xe5\x8cDz?\xbc\xdb\xc6!\xc8&\xb4?Vf^\xd0/\xe5\xb4\xbf\xc8\x9a\x12\x88\x81\x90\xbc\xbfp\xa9\xb2\xe5wv\x91\xbf\x99\xde/K\x15\xf5\xc0\xbf\x8bCh\xac \n\x8c?\xb1A?\xb7g\xc8\xe2?\x9d\xd8q\xdc\xdd\xee\xdd\xbf\x05\\\xf5\xa4c\xd5\x86?H\xaa\x1f\x9d*\xfe\xb1?\x97\xaf\xfe\x81p\xf6\x94\xbf\xbc\x8a\xcd{\xf7\x0fy?\xe6Y\xa9\xb5\xb1\xfa\xba?"\xce\xfe\xaf!\xf8\xb2?\xf7.%-\x98$\xa2?^\xc0$K\xf8\xce\xb3?\xcf\xfb\xeb\xe1\xe5\x15\xa0\xbf\xb9ab\xc68\xfft\xbf\xe4\xda\xa9\xf3^@\x80?2\xb7\xb3\xa7((\x98\xbfeeYRk\xbd\xc7?\xd3\xc22\xcaMS\xd2?\x8e\xc2La\xa2\xa7\xbc?d\xaa\x9b\xb6\x06\x14\xd8\xbfg\xa5\xf4\x05\xcb\x01\xb2\xbf#7ev\xa5%\x8d?\x11S\xf0\x9fr\x89\xbd?\xd1*\xce\x9e3*\xda?{N\x16\x8e\xca\x8d\xc0?\x88\\\xbb\x9f\x82\x1a\xd1\xbf\xceRP\x80\xe9\x82\xe3\xbf\xb7\xd3\\3\xb3\x8c\xbb\xbf.e\xfd\xbav\xd7\xd2?\x9d\xdb\xcb\x08(\xd7\xc2?\x19\xdc\xd5%\x14\xb3\xbb\xbf~:#4\xc6a\xc9\xbf\x85d\x98\xb7\xcdG\xdb\xbfG\x0cL\x95\x80\xbc\xbb\xbf5\xab\xb9\xa5\xa9\xb5\\?}\\\x03&,\xec\x95\xbf\xcd\x12\x1eJnQ\x9e?\x83\x0bu\xe5\xea\xd6\xcf?\x8d\xdb\xad\x0b\xa4Df?}O{\xb5\xd8\x1c\xa8?\x03\xc8\xba\xb1\xa4\xc0\xc9?6\xfdK\xfd\xfd\xc6j\xbf)\xa04\x0e\xf0\x94\xc2?^\xd5\xdeM\x9b\x15\xd8\xbf[\x90\xe5q\xc4e\xb8\xbf\x0eSw\xaaN\x1f\xcb\xbf\xf8}\xd5H\xddE\x92\xbf:\x1fa\xed\x03\xe8\xd8\xbf\xa9\x03\x9dD\x95\x81y\xbf\x047\xebr\xfc&D\xbf\x19\x80 \xe3S\xd4\xb3\xbf\xdft\x86.\xb3\x82\xd1\xbf+\x1f~\xfb\xb3\x95c\xbf*\x8fE\x05\x87\xb9\x95\xbf\xb0\xf4\xf1C\x01e\xb2?E\xde\xf1Q\xe9\x95\xb6\xbf\xbc\xa4\x17Yn\x97\xad?\xa4\xed=D\xd6\x08\xcd\xbf,r\xd2\x02I\x1d\x81\xbf\xddo\xd1\x9c\xe3&\xd8? \xc7\x1c\xa3\x7f\x13\x80\xbfP\xecH>\x1b\xf7Q?\xad\xb3\xd0\tlM\xc3?\xbc\xb7-V\x12\x93\xb2\xbf\xde\xfb\\\xe3\x94\x1c\xe2?\x18\xb6\x1c\x17\xdb\x16\x8a?\xbf.\x9b\xbfo\xcf\x93?\x9c\x9e\xce\x81\xbd?]?\x18oJx\x1b\x8d\x93?W\x96jV\x88-}\xbfd\xb9x\xd5h\x18\xc9\xbfA\xb4\xf0\xbcn\xc8\xae?\x8d4\x08J\xee\x1d\x83\xbfr\x06o\r\x95\x16\x96\xbf\xb1\x13%\x19@\xd8\x80?cB=\xd7g-=?\xdc\x0ec\xec\x02\xba\x96\xbf\x80\x00t\xeb\xc7\xc2\x86?\x07\xfe\xe4\xd5K$\xac?]Q\xed!\x1e\x8d\xba?7\xc4j\xa8\x88N\xc3\xbf]@\xb4A\xad:\xa7\xbfb\xb0\xc6J\x81\xd7b\xbf(\xc7\xe3\xa8Kx|?\xe92\x95\x01\x91\xa9\xb3\xbf\xed\xfa\x10\x9e_\xef\xd1\xbfP\x17B\xda \x85\xbf?n5P\x96\x99\x97\xc1\xbf\x85|\rM\x84\xb0q\xbf\x88\x0e\x1b\x95Y@9\xbf\xe7b\x919\xcb\xe8\xa3?\xf9\xe2u8\xd5i\xb2\xbf\xa7\xd7N\xdcg\x7fv\xbf\xc33\x80Rq<l\xbf\xd42\xf1p}\xa1\xd7?\x1b\xff\xbe\xc1\x0f\x0f\xc3?\xf2|(\xc4\x1e4c?\t\\J-8m\xc6\xbfa$=\x08c\xf0t\xbf\x96\x84\x8f\xc3\xb7\xb0Z?#\xfb\x80m)8\xa2\xbf(\x91\xd6q4\xcf\xba?\xe2\x87\xaa\x89\x13~\xbc\xbf\x8f\x15\xfa\xa0\xea\x10\x96\xbf\xd3\x0f\x8f\xe38\xea[\xbf(\xbe\x00\x92t+\x92?T3O\x83O\xc9\xba\xbf\x8b\x99\xdcH\xd0\xb1\xa1\xbfr\x99\xdc\x12.y\xc3?-\xfa\xb2\xf8F\xad\xc6?~\xdb\xaa\xa3\x18\x03\xba\xbf\xe3\xe0\xa9\xd7Ad\xaf\xbf\x80\xbe\xaa\xa5\x06\xd4\xe8?\x1d\xc6\'\xa7\x1a\x98\xe9?<\x1b\x1fF\x9d\xfc\xa8?\xb0\xf0\xf3\x08/{\xc6?\x83\xf7"\xeb\x8d\xc9r\xbf\x8d\xca\xde\x89-\xa5\x9d\xbfLa<%\x0bh\xa1?(3w\x96\x8d\xd7\xce\xbf\x94nD\x8e\xfdj\xd0??!\xbc\x06\xa2 \xc6?\xea8\xba\xdbZ\xbc[\xbf\xf7r3\x11\x7f\x95\x8b\xbf?(\xeb6\xbd\xea\xbe?o\xabJ7\xcb@z?~[;\x9b\x9a\xe5\xa9\xbfBssl\xf8\xeb\xa3\xbf\xbb\xae\xc8R\xcaCV?\x13\x0b\xfcE\x83\x9e\x98\xbfm\xa9\xaf*\x9c\xf3\x96\xbf\xe8-\xab\x84\x8f\x11\xcb\xbf\n\x9e\xdci\xffC\x86?\x19\xbe\xfdLf\xce\\\xbf\x1b\x1cE.;\xdbQ?K\xe3\x0c\xbc\x83\xac\xd1\xbf\\\x1a\xfb\xaeC\x9ez\xbf\xe6\x84\xfa\x89{$\x7f\xbf\xd1\x15B)\xe7\xc4m?\xd0\x8c\xeeY\xae\xde\xc5\xbf\xd0\xda\xb4\xe6\t\xfaP\xbfq$\x06\x08*\x98\xc4\xbf\xfe\xbb\xc0\xcb\xc5\x15\x82\xbf3\xc2\x80\xb46>\xd3\xbfZ\x91HrPEp?_}\xb2\xb8\xbd<\xc0\xbfa\xb1\xa2w\xe1\xe6b?\x08\x1fk\x97\r\x04\xe1\xbf\xde\x9c/\xab\x98\xb0\x82?\x87\xe4\xfe\xfc\xca\x19\xd6\xbf)\x00\x04\x9fI\xa3w?F\t\xe1\xef\x1c?\xe2\xbf-aYa\x83m\x80\xbfbRZ\x8a\x85\xd1\x98\xbf3zrYn!\xa5\xbf\x9d\xc1/67E\xcd\xbfL\x8dBg\x93\xacA\xbf3\xdfiy\x8b\xba\xbc\xbfA\xdb\x1fe\x1f\x8em?S\xb5B\x95\xad\xe2\xc3\xbf|\xcb\x92\xdeo8\x95\xbf\x7f\xdc\xb0\x9a"\xd6\xd2\xbf\'#\xe6\xe5\x93\xc5\x87\xbfpNy\xcc\x82\x14\xc5\xbf{\xbcIg\xbb\xfd\x83\xbf\xef+dw\xebeK\xbf\xb7\x899\xf4\xc51\x9e\xbfZ\x95\x8bx\xbeg\xc7\xbf\xf3\'\x8asBC\x97?\x0f=\xe6\x7fb\x17]?I\xe6\xd7\x97v\xf7\xab\xbf\xd94\xef\x15P<\x9b\xbf(d\xedT\xe9\x89l\xbfwC\x85#\x10?\xa2\xbfzj\x11\xbb\xe5\x89H\xbf\x93<\x8f\x90\x1e\xa8\xc6\xbf\xcfCi6d1`?\xfd\xdb\xfc\xbf\xae\xeb\xc2\xbf\x8a\x90\x18\xf9Q\xa80?F\xd0\x89O\x18X\xbe\xbf#\xab\x1e\x0b8\xadT?\xeb\x94\xa7\xf6\xb87\xc8\xbf\xe1\x9e\x05\' \xb5i?\xa1\x8eo55}\x99\xbfh\xb9\xa2\xbe\x8f\x08\x92\xbfM\xad\xc0\x1c\xf2\xc0\xbd\xbfY\x02\xf3h\x90\x17"\xbf\xa0>\x91?\xf5>\x8e?\x92\xa4\xcd\xd1\x18Fu\xbfT\xb1\xf7\xea\xea\xe1\x91?S\t\'\xfa\xe1#\xa1\xbfiN\xb0\xd1\xeb]\xe3\xbf\x94\xc4\x98\xe3\xc9l\x7f?\x06\xd5\x8d\n\x01\x9e\xa2\xbf.\x13?l\x04\xd7F\xbf\xa6\x1d\xca\x0cA\xdbR?C\xcf\xa7\r^y\x86\xbfg\xb7\x13\x94t\x8a\x93\xbf\xd8\x9f\xe9\x1d\xe9\xe0n\xbf1\x9b\xfd\xd2\xc5\x1e\xae\xbf\x96FX\x1e\x00j\xaa?\xc6\xf0\xaev\x7f\xef\xc9?\xe6\xce\x1c\x8c\xac\xf3x\xbf\xe5dc\xac\xdcV\x9f\xbf\x13~\n\xcc;C9?%G\x94\xadw:\xc9\xbf\xea\xddd\xd1\xa5"\x82\xbfU\xe76\x08O[\x8a\xbf!)\xe0\xca\xad\xd5r?\xa6\x9a\x98=p\xb1\xe2\xbf\xc5\x88f\x1f]~\xa7\xbf\x07\xadi\x9f\x83\x18\xa9\xbf\x80\xa1\xf0\x11\x946\x92?h\x8d\x13\x94\x94\x1f\xc0?\x8c\x1c\xf8\xd2C\x11p?Z\x9b\x1d?\xcd\xf1v?U\\b\x90m\xbd\x7f\xbfJ\x87\xc95?\xe7\x8e\xbf.\x8d\x82,\xcf\x02\x99\xbf\xe8`\xc1#\xc3{\xe5\xbfl\xb8M\x86\x93\xa2a\xbf,\xa0\xb0g[\xc3\xc1\xbf\xe1\x86\xf0|\xfa\x88q\xbf\xe6\x17\x11\xb6W\x01\xd4\xbf\xf95\x9e\xf0\xaf\xeb\x84\xbf\xb14\xcfb\x9eC\xe0\xbf0\x1f\x08\xac\xd8WV\xbf\x85\x19C\xd1\xd5\xf9\xd9\xbf\xd0W*>\xb9P\x9c\xbf\xd5\x91\xd4\xa4\x96\\\xdb\xbfH\xbdC?.G\x83\xbf\xa2j\r\x98.\x9f\xd9\xbf\xc4\x97\xd9y\xed\x0c\xac\xbf-\x13\x87\x02l\xfb\xd6\xbf\x9b"\x9ex\x87\xbb\x83?S\x0c\x8dq\x93\xc2\xf5\xbe\xa4\x07\xa0\xd7\xfc\xde\x90\xbf\x97\xe5\x86\xe8\xbc\xe6\xe1\xbfnn)\xaf\xf6\x14\x91\xbfK\x17\xd4u\xe2\xba\xd1\xbf \xb1 \xad-\x8b\xa8\xbf\xad\x90\xf5]\x890\xc1\xbf\xa5x\x9b\x82^\xd5\xab?%\xf6k!}5\xe7\xbf\xa4S\x94dX\xa3\xc6?\xa7\xf3\xa9|\xd6\x87\xb4?\x87\xe8\xa4\xeb\x0e\x92j?\xa4\x87\x8b\xf31w\xde\xbfShn%\xfb\x18\x8a\xbfR\x85\x9d\xeb\x8dx\x82\xbf\xf4\xaa\xc6k\xc9\xe4*?\xdbb\xcfuA\x87\xb0\xbfMS\xbd\x91\x1c\x95\x80\xbf-/\xd9XG`\x97\xbf\x023tQ\x00\x88\x85\xbf`bS\xbd\xae\xfe\xd9\xbf]$\xfc\x98"y\xa1\xbf?\xd2\xc5\xaa\xb0\xbf\xcf\xbf\x90\xba\xe4\x003\x8ar?\xa8P\x93\x0c\x85W\xdd\xbf\xcb\xe1v\xca\x0f\xbd=\xbf0x%\x9c>C\x91\xbf\x90\xca\xfa\x0c\x0c\'\xa7?V#)\xe2\x1e\x93\x85\xbf\x04\r\x0c}\x03l\x9f\xbf\xc2\xd9\x82v\x07\xa7\xc9\xbf\x16\x8fA\\\xd5\x8c|?\x98\\\xc0+\xffO\x8a\xbf\xa0\xec\x84\x11\xc8/s\xbf\xbf\x10\xd1\xf0\x86\xe2\x9a\xbf$\xd4\xde\x88\xc4wa?D\x91\xbb5\xcb\xcf\xb9\xbf\xb19sE^\xba\x85?\x8e\xb1bn;\x89\x8c\xbfE\x16TW\x8c\x9de\xbfB>\x9ez\xc8\x98w\xbf\xf4S\xe0W*k\x8b\xbf\t\x9f\xa4>a\xc7\x91\xbfF\x03\xe6s\x08zi\xbf\xd8r\xda\xec\xea!\xd5\xbf\xaf\xd4\xdb\xfce\x7f\x92?\xf9\x07\x0bhp#\xa5\xbfeI_\xfbjU\x92?\x04\xf3\xa2\xaaB\r\x93?\xc4\xdc\xfb\xcd>\n\x97\xbf\xb8\xb5\xca\xe8<\xdf\xdf\xbfl\xd5\xfa_\xddK_\xbf\x04J\xcd\x1f\x9c\x0f\x97?/\xbd>?N\x94v?\xc2j-\x0bX\xaf\x8f\xbf1\x8e4Y\x11\x99\x8e\xbf1A\xb8\xf0\xdf.\xdb\xbf\xa9\xe3\x1cn\xa7\xbe\x90\xbf\'\xbe\xb9\xa2\xa3\xafo?AbO\x7f\x05=\x91\xbf\t\xc8SvK\x07\xea?E\x17\xef\x15\x10\x1e\xa6\xbf\x88\'$z\x86A\xc1\xbf&\xc8\xf4U\x03\x95d\xbf\x84\xc7@\xbbL\x88x\xbfZ\x10\xf9\xa8\xf3r\x8b\xbf9Or\xafL\t\xd1\xbf\t:\xa8\xcfx\xcai?\xca+\xa9P@\xe4\xa1\xbf\x8c\x19/\xd8B\t\x83\xbf\x94\xb1\xd01\xd6\xc9\x8c\xbf\xc8\xc8\xf5\xa2tV\x7f\xbf\x89\xe53:\x05y\xd3\xbf:\x85\xd9\xf6\xfbL\x86\xbf\xf5\x11\xb9d\xa0&\xb0\xbf\xa3\xf5\xed`=6h?\xc9\xd9\xcf\xea\x93!\xbf\xbf\xd8o\xeb\xc2S\xa9\xae\xbf\xa1?\x8a`\x1fb\x92\xbf\xd9\x16\x98\xfc\xab\xc5\x83\xbf\xe5\xe3p\x85W\xa3\xb3\xbf\x06z\xab}\xc8\x11\x8c?zUBy\\i\x87\xbf\x91\xe9\xf2%\xebK\x80\xbf!\x0f\xeb\x8f K\xd4\xbf\xa5\xc9\xb8?u\x0f\x96\xbf6\xa2\x98ehQ\xa2?\xb2\xd6\xf9\xf99\xd0\x91\xbf#?\x9f\x82!\xc6`?m\xf9d\xcbhK\x80?p\xda\x9f\x8e\x80x\xe3\xbf\xba\xca\xfb\xb7\x91\x9cs?`\xa0T\xf8q\xa6\x99?o\xac\xf1U0H\xdc?\xc8\xb6\xa3f\x186\xb0\xbf;\xa6\x16\xeb*\xf5\xbc\xbf\xa5Q\xb4K\xb1\x95\xbb?\xa8\x85\x88\xc8\x84\x0e\x87\xbf\xfff\xf7\x88EQN?^\xda\xbc\xecr\x1c\xb8\xbf{\xf94\xcf\x8d"\x95\xbf0\xd6\xb2\x84b\x97\x7f\xbf\xb7Bx\x82na\x86\xbfucV\xd2\xd5\x1cp\xbf\xda\xfb9\xb3%D\xcc?\xa9\xb9E7\xd5e\x85\xbfA\x91?\x18\x94\xf5r\xbfg\x1d-\x84\x8em\x97?\x10\x879\xe9w\xd5\x94?\x83\xbb\xd9\xb4\x99=\xb1\xbf\r\x1e\xe9\x08\xf4~n?\xc4\xc3%=I,\x95?\x8c\xf0\x9bG\x08\xb0\x8d\xbf\x89\x99-\x11\\\x98\xab\xbf\x8b\xf4B\x10>\xaf\x95\xbfv\xd5q\x0b\xbf\xd3\x99?R\x0c\xbc\xafi\x82\xb3?\xd5bih\x00!\xaf\xbf\x9b\x06\xb8O\x8c9{?e~\xa1\x9d\x1ax\xb9?I&\x80\xee\x80\x98\x96?\xc6\x13&@\x83\x07\x91?c}\x1c\xd1]$\xa8\xbf\x84 \xf2\xa5\xe3>\xc1\xbf\xb6\xb3y\xb9\xbeO\x9a\xbf\xe6C`r\x92\xecx?\xa7*\xa4B\xc7h\x98\xbfV4+Sm\x11\xa7?\x1aX\xe9\x08\xc7M{?\x9c\x11\xca\xdek\xad\x8b?z\xe9\xd5\xc6+QS?\x86\x8b\x0e\xc1_\x84~?\xabX\xcf^\x1b4\x8c?<Ol6;(\x85?{\x8c\xac\x83\xda\xe0d?\xfc]\xbd\x80\x19@}\xbf\xcb\x8f\x85\xdc\x88;\xa1?,\xe6\x8c\xca\x7f\xb9\x84\xbf\xe3{ae\xb1\xf2s\xbf\xd2\xb5\xaf]7\xf9\x89?*[&\x80\x1b"\xad?\xf5\xd4#*B\x8d\x8e\xbf0\x8c5\x8f\xb0/\x83\xbf\xbd?(\xfd>\xaf\x95?\xf1X\x8e\xc3\xc8\x9c\x95?4;\xbf>3^i?\xfa\xa7\xba\xc7\xf3\xce\x94?\xdc$,\x81\x1f\x9aa\xbf=\x19\xd9\xadg0p\xbf\x0c\x95\xeb\x0f\xe7\x92\xa6\xbf\xc71\xd6\x04p\xb0\xc2?\xb50\x00\x02|\x1d\x8a\xbf\x11\xa72\xf0:\xdc\x8c\xbfaY\x18?a\xbaj?\x86\x81\x11\x82\xe97\x8e\xbf\rc\xe7\x07\x97\x0b\xaf?\xb0%\n\x04\xa7\x93\xad\xbfLcp\x14\xc85\xa5?\xf8\x05\xa4\xbf\xdb\xb8\x8b\xbf\xac\xf8\xb2"\x13wl\xbf\xfa\xea8\xffD\xf1{\xbfw8|B\x90\xb5\x93?\xc8\xf1\xdfO\x1d\xc9\x81?\xaf\xc5)Mpv\xb7\xbf\xaa\xd9\xf6\x13\x12wR\xbf:$6\x00\xf8z\xc3?\x0b\x96\xd4#w5\x92?<#\xec\xefW\xa9\xb5?\xc0\xe6\x1f\n\xfdx\xb2\xbfWs$\xbf\x13oE\xbf0^\x89\x0e\xa4g\xa1?\xe1\xfbC_"<z?\x06%\x95\x9d"\xe8x\xbf\xab\xcf\x10R\xcf\x90\x9a?\xf8J\xce\x06\xael\x98?%\xf8-\x1a$\xa3\x8c?\x10\xc0\xe7\xc3g[\x97?\xc5\x15-\x12\xf6-\xa1?H\xb9~\x91W\x91X\xbf\x9c\xe0\xb9\x1b55\x85?\x97\x10\xf7\x8c\x07Fx\xbf\xa5\x02C\xe9\xd55\xa5?\xf9\x8ez\xbd\xe1\xb7t\xbf\x98r\xb8L]\xf1\x9e?\x05\xccA\xed\x19\x97\x9d?rd\\,\xf8T\xb3\xbf-\x06\x18\xb1\xd5\x99\xb9?\xf3\xe4`\x82\x9d\xb0\x98?\xff\x13\xb9\xf5S\xc9\xc3?\x89s[\xd4\xb0\x98\xa3?\x9b\xba\xb5\x08\xce7\x9f\xbf"hYB\xa4\xd2\xdb\xbf`\x88`8\xaa\xd3\\?\xd6\x9f=\xe5\x18\xe1\xc9?q\xf1\x01\xe9\xf3w\xb2?\xa0\x10n\x16eC\xbd\xbfT\xc22\x94\xb3\xf8\x81\xbf\xa2js\xff\xc4Y\xd4\xbf\xc0\xbc\xc9\\M2\x8c?U\xb2\xd1\x0f\xbd\xe4\x85\xbfpA\xf3I(\xc4}?\xd0J\x8c\xeb\xc8GZ?\xc3\x8b#\xb1(=\x80\xbf\x98m\xf2P\x16\xf2t?\xf4\x10\x91\'\x99\x99\x9e\xbf\x0c\xdd\x009\xad\x12\xb3?\xb7,\x8a\x18\xd0\x7f\x9d\xbf\x1c1F\x99pS\xa2?\x9e\xad\xc5\x01\x00c\xa8\xbf\xd0\xe3\x80\xfb\x19\x15\xd9?\xa6;\x8e\xc5\x9d\xc9\xc1?\x15\xc6\x1cj\x9eH\xa5\xbf\x02\x83\xf8\x13\xc0\x9f\xa9\xbf\xf2\xaf\xc1\xfez\xaa\x8b\xbfC\xac\xca\x8b\x08\xccT\xbf\xf7@\xa8\x18\xc9K\xab\xbf\x07\xcbDL\x94\x80\xa1?\xe8\xf1,o\xdc\xedr?\xcdJ\xdb\xc9\xbe\x9d\x82\xbfh\xf8\x99\rd\xc9\x94?\xed\x93H\xac\x95\x1eZ?\x0c\x07\xcf\xbb\xd0\xbe\x85\xbfysOR\xb8&\xa3\xbfV\xff\n_4s\xa3\xbfJ1\xa8\xcc\xa7\xf2\xba?\x1an#\x8f\x0bOU?\xce\xa5^\xe1@\x87A?a\xb6#7\x80\xea\xc4\xbf\x82\xe3k\xf8\x11\xd7\xe2?\x0e\x81$1\xb3\x1b\xc9?\'t\xed\x01R\xda\x9a\xbf\x9dt\xf3\xfd\x8b\xc3c?]\xe5\xec?\xa9\x15e\xbfD\x93,\xbc\x93\xe6o\xbf\x00\xbf)\xe7\xe2 s?\x06\xfb\x8f\xaa\xeeT\xc8\xbf\xff\xbb\xb6s\xd6\x9d\xa7?\xc6:\x88u\xaf/\x7f\xbf\xcc\xdc\x9f\x8b\xc4Z\x8c?\xb4\xdc\xc0\xa9\xf2!g?\xc9\xc8\x88\xabOv@\xbf\xb4\x0c`\xfc{}\x81\xbf\x8d\x11\xbe\xb9s\xf1\x83\xbf\xe1M\x9f\xe0\x04\xff\xa2?r\x0b\xba\x88N\x86\x9d?\xfd/N!\xff1\xb0\xbf\t\x19\x88\xdf\xefJ\x83?\xd9a;\xc6w\xa1:\xbfK\x97\x1a\xb1\xc0&\x89\xbf\x9e\xc6\x82b\x1d<\xbb\xbfp\xe4\tPO\x14\xaa\xbf\xac\n\xb1\xbfQ\xea\xb0?{\xc9r\xab\x15o\x87?\xf4\x85q,\x91\xa2]?_\x84\xfeC<\xdds?\x13\x9c#\xcc\x80,\xbe?\xe6\x87\xfaBV/\x89?S\xd9Q\x95\xddFn?\x08\x90\xb1\xb6\xff\xb9g\xbfK#5@{\x17\xc1?X\x18\xdf:\xa7e\x7f?\xfef\x14\xc3\xfd\xf6\x84\xbf\xa5\xbd\xee\xfc\xc7\x1d\x9e\xbf\xb1}\x95\xad\x1d\x0f\x85?A\n\x04^\xb1A\x96\xbf\xee\x1a\x881\xdd{\xac\xbf\xfd\x10!\xca\xf6\xf5\xa6?\xccbJ\x95"\x0e\xbd\xbf\x86\x14\xb3\xc5\xb9\xee\x90?\xaf\x87\xc1\xba\xd9\xf1}?\x99njpF\xa3\x8d?\xfd\xde\xcb\x8a\xcf\xa5\xb8\xbfd\x952g\xb3\xa7\x8d\xbf\xe6=Q\x9fU\xc8\xa6?\x7f[\x95\x8c\xdb\xda\x90\xbf\xa4\x89\'\xa1\xba\xab\xaf\xbf \xd9\xce\xa7\xc2\xf5v?\xfa\xf2U\x82C\xbe\xd2?\x15\x16\xdf\x9d\xa4\xbf\xd2?\x94\x12\x08\xee\x15iU?\xc1<=\xbd\xb4\x02\xb0?\xa5\x1fRH\xcb\xd1\x83??\xef9\x1f\xf8\x8e\x91\xbf\xf6\xa2\xb6\xa7\x8d7\x81\xbf\x10\xaf>\x90\xdd\x11\xa6\xbfC\x8f\x7fGW\x93\xba\xbf6\xa7\x1a(\xfb\xc0\xa9?\xc0\x9br\xef\x9cRC?\xdb0\xa7\xb6\x0e8q?\'~\xc9\x1e\xd4\xfe\xa0?\x02k\xfc\xea\xec\xa3\x97?\xae\xe4\xf9\xb8o\x0f\xbd?\x11\x05\xaeS@\xb2\xa0\xbf\x0ee\xb1xEy\xbe\xbfZ\x9aw\x9fr\xf8\xca\xbf\xc7a\xae\x04\xe0#\xd9?#T\xbfHq/\xc8\xbf\x96\x97$\x87\xdf\xde\x8b?;S\x8e\xb9\x8f\xb2t\xbf1\xdb\xe6(\x92\xa3\xd2\xbf\x162\xca\xee\xb1\x19\xc4\xbftv&\xac\xf0\xc8\x8b\xbf[\xd6aC4\xfeo\xbf\xf5\x19`\xa1\x00\x90\xe2?Q \'?\x90>]\xbf\xd8\x95\xc8\x9e\xd3\x14\xb0?Q}\xb8\x0fp\xe9\x80\xbfs\x97\xe0\x0bZ\xd3\xc7?\\5\x87\xb0/3\xb3\xbf*\xe9\x9fC\xec\xac\xb7\xbfD#e\xb7x\x83\xc0\xbf\x86E-\xbfub\xa4\xbfy\xc6\x9bO\xdb\'\xa7\xbf\xb9\x98\x06T\xa8i\xa9\xbfa\x91\xce}\xd0\x1a\xa2\xbf\x0f\x1d\x0fr\x88\xa6\xd0?\xeb\xfeCu\x98\x08\x91\xbf\x7f\xa0M\xcf\x05\xbb\x9f\xbfb\xaf\xd4\x0e\xbb\xcd\xb3\xbfe\x98`\xac\x0c!\xc8?\xaf\x96\xf1\xfd\xd8@\xaf?*V\x1d\'\x88m\xd8\xbfu\x1dY\x84zW}?;\xa6\xfco\xbc\xae\xc4\xbf\xad\x13M\x072\xe1\xbe\xbfz\xb3g\xefz3\xc3\xbf\xe5\xbc\xeee=\t\xa2\xbf\tL\xc1F_\x87\xc4?]\xc5I\x7f\xb3\xfa\xd1?.\n-\xa1\xdc\x11f\xbfa\xaf\xc7\x0b\xc0\x1b\x86\xbfQ{5\xe4\xa5\x11\xb1?\xe2\xcd\x12\xbf|\x1c\xb4\xbf9\x06\x95\xa5\x1b\x07x\xbf*/\xf3\xd8Z\xedv\xbfV^\x80}\xf4\xc8\xb2?\xfa\xb7$\x8fB@\x9a\xbfg\xc9\xf2\xc7:\x8d\xa9?JE\xadhT\xcc\xa2\xbf\x81l\x08\xbd\xb7\xeb\xcc?\xc6h\xe1\xe8\xf4\t\x98\xbf\x8a9\x85\xeaU\xf6\xb0?B\x83\xa5\xd1\xb4\xc7\x9d\xbf`\x9fqY\x9f\x8a\xbf?~\xaf#N9\x1d\x81\xbfz\xad\x98\xafo)\x90?wg\n\xa0.\x9ay\xbf\x86\xb3\x10D\xf6 R?\xa2\xa8\xad\xbc\xbf\xf1\x94\xbf\x84w\xa0\x97Z\x1b\xde?]~o\x7f\xb0\x83\xb8\xbf\xc0\x0b\x045u\x84W\xbf\xac\xda\x9b1\x8a^\x81?\x06A\x1b\xba:\xf1S?f\xcd\x90\x02\xd4\xea\x98?Rm\x90\xe8\xa2\x15\xdd\xbf\xdf\x00\xdb\xcd^\x97\xb8\xbfp%\xa7\xfd\xa4\x11h\xbf\xe7\x80\x80F\x00\xcc\x90?\x93P5\x1f\x1eE\x8a\xbf\xff\xe4\xd5\xac\xa4<\x98\xbf\x93\xc1\x93\xbf\x9a\xef\xb9\xbf\x17%\xc5\xd7x\xab\xa6?\x17;s\x99\xab\x97\xc6\xbf\x84\x00\xa9\x1dPJ\xc2\xbf"\x9d"\xf2\xea\x88\x87?\xde\x88\x82!\xea\xca\xc5\xbf\x8a\xe3\x0cI\x9f\x1a\xe3\xbf,-Q\xf8-\xe2\xe2?]E\x8fE\xde\x17\xb9?\x1a\xa5\xec\x05\x82\xd4\x93\xbf"\xeb\x04\x18\xd2\xf9o\xbfWg\x00E\xeb\xf1l\xbfr\xa0-9\x86\x12\xcd?\xad\xa7\xde\x94\xe8\xaa\x9e\xbf\x0b\x00\xd7Dt\x80\xbc??\xe1\xa0\x91\x94\x8c\x98\xbf\xc7{\xdc\x02c\x8b\x98\xbf\x87l\xf7\x9c\xbf\xf9\xa4\xbf\xb9\xeeas\x8a\xc8\x8f\xbf\\ iN\xd7\x81\x97\xbf\xd7\xf1\x1d\x86\xd0\xc5\xc2?\x11\xd0\xd8\xaf\xb1C\xb4?\x19\xe8@\xa4H\xc7\xe0\xbf<{\x8b+`\x14\xbd\xbf\x94\xbe\xbd)\x8f\x87\xa2\xbf\x91\xdf\xfc\xabb-\xd1\xbf\xc9\xda6\xe1\xd3\x11\xdd?\xde\xd4n\xc8\xe3\x90\x9a?J\xb3\x8d\xceW\xe1\xb7\xbf\x02\xd2@|5\xba\xba\xbf\x059u\xa7\xf0\xf9\xe2\xbf\x9b\xeeh$\xfe/\xeb\xbf\x14\xb7!\x9d\x99\x08\xd3?\xf1\xcc\xd1\xc1\xbaO\xd4?01\xe2s\xe6@\xc7\xbf\xee\x93\xc1\xd21\xeb\xc5\xbf\x9f\x17\xe2\x92\x95c\xe6\xbf\x8c\tVvE\xfc\xe3\xbf*fw\ti\x88\x89\xbfH\xb6\xb4\xb0\xf9By\xbf\xe13D~\xeb\xf7\xa6?"\x9b\x80\xcchw\x96?\x1d\'\xf8(:!\xbf\xbf\x92\x96\x82\xa2\xba\xdf\x93\xbf\xc9\t\xc4\x07\xe0\x9a\xb2?q\x81\x8c\xf0\xc3\x80\x85?~\x85Dz|9\xd1\xbf\x04\xccr\xd6\xd7\xdb\xbd\xbf\'M|hWG\xc2\xbf\x08\xe2}\xa3\xbc`D?>/\x8ay\x1f\xa9\xdf\xbf9\xd1x\x13\x9c\xfc\xb6\xbf\xc4\x8d\x1cJ\'cy?\x0c\xf2Z\xfe~\xf5x?w\x94zk\x86&\xd5\xbf\x8d\x8c\xcc`\xf0\x88\xb7\xbfXX\x12\xf0o\x1e\x88\xbf\x16\x19\x16\x94\x14\xbca\xbf\x8f\xbc?\x94L\xd1\xc6\xbf\xdeL\x98foZ\x81?\x17\x12t\x9a\xdf\xce\xc7\xbf\xb6\\\x9f\xb92\x88\xc1\xbf\x86UQ\xcb3\xc8\xe0?\xd7\xae\xab9\x95n\xc0\xbf\xbc\xd3\xef\xa4\xeb\rO\xbf\xc24\xc2\xe5\x1b3\x92?\xf1\xf8[\xfd\x83\xf1\xa9\xbf\x0e\xcc\xd8K\xe7\xa6\xdf\xbf\x87\xc0L\xca\'\xc4\xa3\xbf\x91=\xe5\xfe\xa1\x15\xe3?\xe1\xf0t#\xcf\x91z\xbf0\xdc\x8a\xe2\x7f\x14O?}q\x15"4\xde{\xbf\xddj*\x02\xe9.g?\xc1\xbf&(\xe2q\x8e?lm\x81\x112H\xd1\xbf\xcb}@O\xf6\xdd\x96?\x87\x8f\x87\x05^)k?\x97\xfe\x85~D\x99z\xbf\xbdT\x87\xc3\x8c\x8fh?,\x88e\xab6\x7fr?\x8fg`\xbc\x934\xaf\xbf\xd6+\x9b\xa5\xc1\x96\xc7?\xac\xf3>\xf6\xfa\x03\x9d?\xc7/\xbd\x03\x08A\xca\xbf\xd5\xa3\xc1.,X\xc5\xbf\x08\x1e8\xa2\xd0Sl?^\xc5\xee\xadm\xc2v?^\x8b\xcdI\xd4\x1a\xd9\xbf\x98\xdd0!\xd1\xc1\xd1\xbf\xe9\x05\x90~PL\xd0\xbf\xc7\xba\x17\x88\x850\x8f?!n\\\x93F\xdfq?\xef\xfa2\x9a\x13\x8d\x8c\xbf\xf3e\xfa\x9c4\xc4\xb3?H\x98\x86\x08\xf4\x0c^\xbf\x8a\xd6\xc2\xf3\x177y\xbf\x8b$m\x95~P\x8d?\x1b\xf4\xd9\x89\xfeh\xbd?/\x02#\xc5\xe3\xca\xd7?9g\x03\xd5\x86\'\xc5\xbf\xc6\x05\xd9\xb2\\\xfd\xb9\xbf\\\x04\x18[\xba5u\xbf\xed\x9c\xfd\x0c7\xaa\x86\xbf\xc0T\xfa\xf6\x99\xab\xbc?Ur\x00I\xee\x96\xa0\xbf\xfaSc\x0f\x12\xec\xc7\xbf\x9cD\xf0\x93\xee\x88\xcc\xbf\xcc\xb4\x9a\xe8\r\t\xe5>\x7f\x10\x8f\t\xc4\xe7\x90\xbf0\x02.\x04\xcf\t\x85\xbf\x05\xae\xb2\xf4\x07?\xbf\xbf\xc3#\x17N(\xbd\x8a?6\x82V\xe7S\xdc\x9d?\x0c\xb6:VK!\xc2\xbft\x1d/S35\xb9\xbf\xf1\xb650\xb8\x06\xf0?\x1a\xd3\xe5\xb0"\xfe\xf2?\xc2|\x0e\x8f\x81\xb4\xd2?\xa1\xfa\xf6\x10\xd61\x1b?\xea\xac\x05\xdd\xd1\xb9\x82\xbf\xbeA\x9b\xbck0\x8b?\x16\xc2\xd1\t\xaf\xe3\xd0\xbf\xb7\x11\xe7Y\xb6\x9a\xc1\xbf\xef\x13\xc4f\x8d\xa1\xca?q\xd1g\x89\r\xc0\xd3?D#\xe6\tH\xbb\x84\xbf\x8e\xae\x92\xed(\xc1u\xbf\xaf(\xab/\xb1\xe6\xc6?F\x1d5\xbd\xd3\xba\xb0\xbf%\xef\x1dJy\xaf\xa1?\x16\xb0pO\x90\xb3\x9c\xbf\'o\xf9\x94\xea\xc9\xa3?\x98\x0c\xf5\xd9D\x05|\xbf5\x0b\xa7\xedD#\xd7?\x8f\x94\xf6e\x80\xf2\xbd?\xdd7\x86\xa7d\x96T\xbfZ\xfa\xf4#a\xfbz?\xd3\x13\x837\x149\xc1\xbfi"w\xfb\x82\xf3\x93\xbf\x96\x1a\xc0\xf4\xa7\xd5X\xbf\xcd\x97\xc5\xc1_Y^\xbf\x05\x06\'.\xb9\x13\xd7?\xa0`>\x8e_\xc5y?\xaf8\xed)`\xb8\xc1?\xd6\xd6/\x9a\xeb\xc0\xa6\xbff\x8f\x80\x8d\x16L\xc7?.\xb0\x94z_1\xc1\xbf\x02\xa0\x0f\x1a\xd9\xb3\xa1\xbfN\x8c\x88:g\xf4\x81?\x89F\xf3]\xcc\x98\xc9\xbfD\xe7\x11\x9d\x9a\x8f\xbc\xbf4\x19Z\x88\x00y\xd2?"b\xed=\xaf\x02d?\xa4\x1d\xc2(\x19\xa0\xc0?t\xcfy\xa0\x9d\xac\xb5\xbf\xe50\xfd\x89Nk\x9d?\x82wxke`.?3(\x07\xde\xa2$\xd6\xbf\x19g\x85\x8f\x7ft\xd1\xbf\xb9\xe6\xa3\xc7+\x9c\xa3?\x1a\xcei\xb1\xda_\xd4\xbf,\xbd\xe8\xc33\xed\xb6?{\xbeeW\x9c\xae\x98\xbf\xb27\x0b\x1cS6\xb5\xbf>\xfe\xb0-\xe2V\xc9\xbf<\x1e_s\x1f5\xe5\xbf\xfd!\xa9&\xc7\xe8\xe9\xbf\xb5\xa2(\xaf\xc7\x06\xa0\xbf\xd4P\xd7\x14\xbb@\x83\xbf\xb0=\x87\xbf\xa6|\xd1?\xa0/N\x97V\xa9\xb5\xbf\x8c`\xd4\x1aH>\x83\xbfI\x17\xfe\xc9]~c?\x80K\xdc1%\x1d\x9a?7O\x17\xd7(X\xa5\xbfQ~\xa8>\xa7\x1f\xab\xbfl\x02\x0f\xa9\x03d[\xbf\x89\xcc[\xd3\xfc\xe9\xc1?{\xee\xb8ZC\x07y\xbf\xbdx\x88\x08\x9eq\xcb\xbf\x1a>\xc8J\x14\xc9w\xbf\x00T\x06\x1d^\xbf\xd2\xbf\x04\xec\x11\xd0\xe3\xbd\x9f\xbf\x868\xffWI\x1d\xbc\xbf]/\x0fO\xdeV\xa6\xbf\xa1\x7f!tMh\x9b\xbfB\x0ej\xc8\x1a(f\xbf\x81)\x04`(\xe2\xcd?\xd1|\xaa\x98\x97P\xb0?yv\x90\x97<0v\xbf\xbcp\x19\xd0\x1b\xfd\x12?\x87\xce$\xa0\x04\x0ev\xbfH\xa8~ s\xf5w\xbf\xd7X\x10\xc2\x9f\xcf\xd8\xbf\x9fZ\r\x88{\xab\xe1\xbf\x8bVm|d\xbd\xc6\xbf\xc7\xa9{\xb1\xad\x80\xb0\xbf\xe3\x19\xbbT\x08!n?\xe8\xa7\x97\xfeG\x9f\x83?\xe5\xd7z\x83\x1a\xd4\xcc\xbf"\x12Yv}_\xc2\xbf*\x1a\xf9_\xc9\x18\x8d\xbf|\xd3\xa9g\xa3\x83\x90??\xcd \xbdU\xb1\x9a\xbf\x8c\x03JXW#v?\xde\x8e\xff.\xb4\x19\xdc\xbf\xf6\xe9\xb6_\x08\xbc\xf1\xbf\x13\xe9=\xfe\x8a\xa2\xb9\xbfZ\xe7\n}\xcb\xc8\x87\xbf\x9ao\x0e\xfa\xae\xbfB\xbf\x85\xbd\x89\xdff\x85|\xbf\x0c\t\xe9\x94\x88\x99\xde\xbf\x03\xb9-(\xc2\x00\xc0\xbf\xec\xf8\xda\x07\xc2l~\xbf\xf9,VrG\xfe\xa0\xbf5\xe5\xbe\x96&}\x82?\x93\x830\x87#\xef\x94?:ar$\x89/\xa1\xbf\x13\\\xf2\xbb\xf3Q\x8a\xbf\xe4\x8ev*\xeb\xd9\xea?\xbb\xc0\x9c\xc8@\xbf\xbd?\xf5\'UM\xd82\x9d\xbf/`\xdbYY\xb1\xe0\xbf\xab\xe6^\xf0\x129\x95\xbf\xbb\x95\xa4\xee&\x06\xa9?\xdbL\x17(\x894\xda?\x0b\xf5\xfa\xcdL\xe9\x94\xbf\x1c\xd8\x1d\xb63g\xd3\xbf\xb3\x87vd\xf9\xce\xcc\xbf1I\n\x08\x14\x91\x99\xbfh>\xe1\x83\xb1\xa7\xba?\x1d\xc9\x85B\x1c\xa1\xf8\xbfg\xf0\xab\xd8|\xda\xe1\xbf#\xa2\x00P\x99\x10\xae?\xb6_\xae7@\x8f\xb6\xbf\xb5\xee\x7f$\xe3R\x88\xbf\xbc0\x0b\xaf\xc87\xc0?\xdc9W\xf1\x14\xdb\x80?X\x9f\xe3\xd9\x00\xe8\x86?\x82\xe0\xb9\x9a\x0bo\xed?TZ|w\xfc\x1d\xb7\xbf\x8b\x81FtJ\xb5\xc3?\xac2\xef\x91\xfe\xa4\xb8\xbfb\xc4u\xdb+)\xd0\xbf\xc3%\xe5\x94sj\xd2\xbfV\xe2P@\xc1O\xcc\xbf\x14\x06\xa2*\x01\x96\xd4\xbf\xde\x19K*\xa7W\x84?1\x94\x13\x14\x08\xa5\xa8\xbfP\x98\x00\xc6\x1b_\xc8\xbf\xc0\xd4\xd3\x08\x8d\x84\xd1\xbf \x06z\xf9\x9a\xa3\x89?\x99\x92\xaaR \xbc[?\xe7j\xab\xdcW\xe6\xc0\xbf|\xa4\xa7!n_\xc3\xbf\xdd,\xfdxpt\x94\xbf\xacA\x02y1&\x82?\xf5\x8d\x19\x1d\xe3A\xc1\xbf\xc0\xb6\xd54\x9b\xba\xc9\xbf\x8b\x1c\x8d\xd1\xba\xee\xc2\xbf>\xd5\x0f\xe7\xf7\xf3\xbd\xbf&\x98\x18\xd5;\x19\xda?\xb4\r\xe7\xe2\x0f+v?R\x99\x9avS^\x92?\xc4\x1fM;rp\x98\xbf\xc9\x12\'\xe0P\n\xb6\xbfQ\xabG\xd7\xedA\xbb\xbf\xe0\xf5\x07L\t\xe1\xc9?=\x9by\xa0d\x1a\x90\xbf\xa4\xcdc7Z\xa4\x8c?\x0f\xf1\x1d\xf13,}\xbf\xe1\x81L\r\xb9W\x9a\xbf\xa1k\x1f\\\xcf\xef\x80?\xd1\xac\xe2\xec+\xe0\x9c?\xba\xf0]g\xd2\xb4\x84?\x19\x9c\x8aT7H{?\xe4n\xe1S\xd7\xc9\x8d?\xe6GB\xea\xcc\xe6|\xbf\x0f"*C\xda\x97z\xbf\x17\xa7Lmx\x8b\x92?\xa5o\xdc\xb8c\xefw\xbf_O\x12xGy\xd5\xbfz\xb1\xd9\xeaP\xf1\xb1\xbf\\\x13\xdd\xb7d\x8f\x9b?\xc3KF=\xdd\xfb\x96?`\x992\x01\xb5d\x8b\xbfSFY\xbe\xfbFU\xbf4\xffb\x0b\xbe\x1d\xdc\xbf\xcb\x94_b\xed\xab\xaf\xbfO\x17\x0f\xe8\xad\x15\xae?@"\xf8\x8c\xc5^\xc9\xbfx\xfd\x9b\xae\xa6$G\xbf\x12\x93;3]\xd3g?yFi\xd9\x04\x18\xba\xbf\xf6=,\x1f\x16\xc6\xb0\xbf\xc6\xc4\xf6\xe7\x9bo\x93\xbf\x94~\x17\x07B_F?\x055\xddR\xe1\xb0\xe2\xbf\x17b\x08\xe5\x98Q\xcc\xbf\xef&\x00tq\xce\xc5\xbf\xe9\x06\xcf\xb1\x1bL\xb2\xbfZ\xa99U\x02\x13Z\xbf2\xa7\x8aMz\xb4\x99\xbf\xb7\xb1f\'N\x16\xad?\x91\x02<$Y\xb8\x84?R+\x1b\t\x14\x06\xa0\xbfHl\xb3+\xff\x05L?\xc1e\x15\\!\x90\x8d?\xb1\x012\xaf)\x8a~?\x87\x0f\xb9\x0c\xa0\x04\xd5?\xfd\xefL\xe9\xf6\x88\xb0\xbf\x8f\x80\x03\x10\xf3:\xc6\xbf\'(\t|Sq\xdf\xbfH\xf3\xcbKB\x0fn\xbf\xc0\xe1\xde{F%\x8e\xbf3\x9f\n\x8b\x8dC\xf0?<2"\xb8\x87\x1b\xd0?p\x14\xd2\xc0\x18\x93\xaf?{\xe3\xf2\xc7\x94\x82\x7f\xbf\r\xd1\xcaE:\xed\x91\xbf\'0 \x19\x82\x17~?\x14\xf4\xf3\xd7W\xa7\xc5\xbf\xad\xff^y\x8a\xc5\xc0\xbf\xc0,DwI\xf9\xcf\xbf\xe0\xfe[uJ\xb2\xc5\xbf?L\x1a>\xf5\xc6\x95?o5j\x83\xdd\xd4w?\xb2\x9c\xc2\xc6\x80%\xdc?\xd0\xbd\x80\xac\x19\xe0\xcb\xbf\x95\x13\x01C\'\x83\xae\xbf\xecBM6|N\x9f\xbf\x02\xdfc\xbb\x13\xa7\xc1?\n\xd12k\x83\xed\xc9\xbff\xd5a \xaf\xec\xd0\xbf\x01\xaa\xfey\x12\xeb\xd4\xbf\x82c\x8a\xaf\xdbc\x82?\xe2Rn\xf0\xf6\xc3\x89\xbf\xe7\xdd[+\xb10\xcf?\xaf\x9c\xd3U\x9c)\xd1\xbfXm\x87\xedd6\x95\xbfA\x05\x1cN\xd2kt?_vC\x1c\x9b\x0e\xb9\xbf\xabu\x8c\x8cV\xa2\xbb\xbf\xa4\xc5\x1e\x038\xe8\xca\xbf\xfa\x1c\xb5\xff\x8f\x8e\x8f\xbfr\xf5\x97\xe0i\x1d\xc8\xbf[\x87\x14\xf6\xb4\xba\xbe\xbf\xe6\xcb\xb7\x04?\xfc\xb7\xbfJ\x14N\x04\xa3#\xc6\xbfQ\xe1h\xd0\x00\xf5\xc3?lcD\x94\xd6H\x84\xbfrhDX}\xe4\xc0?\xbe\x9b\xa9\xf9\xa4pz?{/\xa3j\x89\x95\xc7\xbf\xe7%\xd5\x04=\xe4\xb5\xbf\\\xa7\x04\xd1\xb7\x89\xb5\xbf\x01N\xe5\xee,\x81\xb1\xbf\r\xe8(\xe9zZ\xd5\xbf]\xda\'<\xa5\xe4\xb3\xbf%\xd0%\x87M\xfa\xe8?\xfaA\x98\xdcE\xc5\xdb?\xa2-\xcd\xe0\xe9\x08[?W\x03>0\xd6i\xd5\xbf\xbc3\xabh\xfc\r\xbd?i>\xd6=\xb0\xb2\xa0?9X\xe1\x0e\xef\x19\xaa\xbf\xec>\xec>\x13z\xd2?\x14\xfc<\x0c\x92\x93\x80\xbf\xbc\xae\xbc\xae\x03#\x82?\xbb\xd3\xe0\x84\x0c\xbb\xb6\xbfe}+\x87\x1b\x91\xb9\xbf\xed\x8f,\xc6\xe0\xae\x80?5\xef\xa5Q7y\x85\xbf\x08\xefn>\x9f3\xa7\xbf?\xd8\xe6\xc8\x1aX\xa5\xbf\xa7n\xdeF\xc6\xa6\x98\xbf\x19b\x9a\xa5\xe5\xee\xac\xbf\x15\xa8\xc1\x15s!\xaf\xbf\xccz\x81\xc7\x05o\xab\xbf\xc2zb0N\x8d\x89\xbf\xdf\xdf\xff\x18\x9d\xde\xa1\xbfB\x00\x97\x19\xb0\xac\x95\xbf\xa0\xfdL\xa68\xc2\xa4\xbf\xac\xce.Q\x89~X\xbfr\xb7\x85W\x1fw\xa0\xbf\x04Um\x87"a|\xbf\xc8\x97\x03\x14>#\x87?\x07R\xe3\x19;T\xc7\xbf\xc4&\x01n\xe7.\xd0\xbf\xecu\xa9\x86\xc27w\xbfO3,Q\xae\xf8C?\xfb\x15\x97H\x11\xd1q?g6\xb27\xed\xcem?\xb7\xe7*\xd8\xfd\xdd\xe7?C\x8c\x8dk\xd6\n\xd1?D\xf2\xad\x85\xa7@\xcc?\xd9\x10\xceJM\xaf\xaa?\xfaPC\xb7\xd1\xc4\x9f\xbfVB\x89\x8bXf\x97\xbf,\x11\\\x9b7\xf1\xc2?\x83\xe30\xc4j\x89\xcc?\x03?\x1e\'se\xc7\xbf\xb2\xab\xa96\x15@\xc8\xbfz\xc1\xd7\x89ug\x7f\xbf\x88\xed\x04\x81<~\xd0\xbfe-W\xeeb\x91\xe5?\xf4\xf0\x03\xa6\xce[\x00@\x06W\x1cpl\x87\xa8\xbfA\xc8\xf8R\xe9\xfc\xa8\xbf\n\xe7\xb4\xe7I5\x80\xbf\x92\xe9\xd7cf\x81w?.\xdbE\xe3\xedx\xcb\xbfl\xcd\xce\xc9;\xbb\xb6\xbf\xbd\xe4\xd8\x03\xf3\xcb\xa2\xbf5uA\x89\x8b;\xaf\xbf~\xee.Nv\xec\x95\xbf\x98\x12)[\x15\x01\xb8\xbf\xac\x92\xe6k\xc0\x86\x87?\xab*\xb8\x141\'\x86\xbf(|\xcb\x17\r\x96\xe1\xbf4\x87\xf68\xeeC\xad\xbf\x0c\xad;|\x87\x9b\xe4?\xb6\x03\xc1,z\x9b\xd4?\xdb\xfe\xcf\x97\xe8\x90\xc6\xbf\xefN\x9dh\xddJ\xcc\xbf?Z\xf1?\x01@\xd1\xbf1gXl\x83j\xba\xbf\xca\xff?\xa7\xdag\xd0?6\\\x07g\xe0\xba\xb7\xbf\xde\xa5\xcf\xf3dy\xe2\xbf\xda\xe9\r\xc6\x1c\x9e\xef\xbf\xae\xe2\xcb\x8bHu\xd7\xbf^\x04\x06\xf0\xbd}\xcc?\xe5\x10\x81O[\x00\xb0?\x1bP\x7f\xb6\xcd\x91\xcd\xbf\xbbw\xd3q\xb4\x1a\xe5\xbf\xf3O\x84\x19\xe8\x0b\xf1\xbf\xaf\xbcA\xbc\x97\xc1v?\xb5\xee\xb2<\xc9\xe3~?\x81\x03\xdf\xab\x11\x9e\xd7\xbf\x05\xe3\xdf\x16d \xb7\xbf\x02\xcfC\xba`\x93\xcc\xbf\r\xeb\x13\xc7\xf2\x9bk?\xf2U"bJg\xbe?q3\x1c\xdf\xf8\xc9k\xbf\x87\xf9\x94pU\xd9\xe2?\x02\xe1\x9d\xca\xb0\x87\x98?\xab\x11\xcc\xe5\xfa\xef\x97?\xc0\x86\xd0[\xd9\xa4\xc1\xbf\xdeq\xf2\x8bg|\xe8?\xc2\xfc\x89\xed\xab\xda\xbb?Y\xff\xd3EE1b\xbf\xaa\xe0\xee\xd121y\xbfl\xd6\x97\xdb\xd0q\xe5?\xfc\xe3\xb2\x88o<\xa1?\x0f\xa1\x05\x85\xf6\x95\x85\xbfC<V\x17\xc6:t\xbf\xe3\xa58bv;\xae?\t\xb5\xe7\x07"O\xb9?S!\x89n\xb5\x8f\xd3?5)\xa9U>\x1c\xc1\xbf+\xb0K`U\xdf\xcf\xbfV\xe5\xc2\xdd\xbd\xed\xc8\xbf22\x06\x1ay\xbe\x93?\x18\x8f~\xbf\xc7{|?(\xad\xb0\x1e\x19O\xaf?\x04\xd1#\x9b0\x83\xdf\xbf\t\xdeR\xbf\xbf\xab\xd5\xbf\xd3\xea\xb0\xf0\t(\xea?F\x0c\\\x13%\xeeW?\xcc\xfc\xd1\x90\xb35\x7f?\xe2;\xc6\xf7\xb6G}\xbf}<\xc3Y\x15\xba\x90\xbfL7\xef\xf5\xea\t\xd9\xbf0\xb6i\'\xb5\xe7\xdb\xbf\xefG\x11e\xa6\xafs\xbf"]M\xe5\xc3\x8e\x84\xbfa\xba\xcdH,\x12\x8a?\xe4\x1f\xe3I%Ix?\x0f\x18#o/s\x87?\n\x07\x00\xea\xf0\x8d\x98\xbfG\xb2[-\xff\x95\xbf\xbf\xde||\xdc\xea0\x9c\xbf\xf8\xe6\xdc\x07\nz\xba\xbf\x88\x14\xf9G\x83\'\xd1\xbft+\x90\xf61\x19k\xbfI3\xf2B0S\x8a?\xa29L.\x0e\x83\xdc?\x0c\x9bCY\x1c\xa2\xd5\xbf\xe2\xfe\xeb\x8e\xe0e\xc8?\x17\x80\xc9\xc4\x97\xce\xc2?In\x10[T\x0es?-\x83\x02\xd4x\x8d\x97?\t\x1e\x1a\xc8r\xc7i\xbf\xc8\xb8\xbfZ\xe2\x04\xa2\xbf+\x87\xa3\x94\x01\xfaO?Z\x07$\xdb\x01c\x89\xbfaS\xad\x7fD\xf5\xc1?w\xbe\xdb\x19;\x04\xe3?/\xf1\xedl\xa4/\xc8?WJ\xcc\xde]\xdf\xb9\xbf\xd4n\xbc[\x10\x95\x81?}\xfe\x8f}K\xcb}?[\x17\xcd\xa8\xde\xcex\xbf\xb4\x1a.\xc9\'\xbd\xb9\xbf\x93(R\x05\x8a/\xca\xbf:/t\xe5^\x8a\xd0\xbf\xca\xc6ji\xb5W\x9f\xbf[\x04_\x02\xcd9\x93\xbf\xa0\xda\xf9\x8dxo\xc6\xbf{\xc5r\xa0w\xc7\xc1\xbf\x04\xc3\x05\xf1\xc8\xbc\xdd\xbf\xf6\xca!W\xf8\xb1\xc8?\xc5b\xd4R\x1f\x0f\xb9?d\x97\xb2\xe4\t\xc6\xc0\xbf#P_:$\xe0\xe1\xbf|\xff7b"\x9c\xd2?^r\xdf\x89\nh\xb9\xbf\xe6B\xba\x17\xd8\x0c\xae\xbf\xea?\xf9J5"\x83?\x8a\x1e\x02\xb3J\xc7\x92\xbf\xee1\xa2\xed\xe1\xf2\xd7?\xbe{\xe7\xaa1\xc2\xc1\xbf\x95"\xcc|\xd1i\xd1\xbf\x8e\x0e\x1f\x99e\x00\xe2?\x82R\x0eO\xcef\x8a?7\xf2D\x7f\xd3\xe4\x81?\x03\xbb1\xc2\\L\xb4\xbf\x05V\xdc\r?\xd0\xb8\xbf\xea\xbe5\xbfw\x9e\xa6\xbf*\x9c(\x14\x0bU\x90?B\xc8\xa4\xa5\xe2\xf5\x81?Nfd\x95\xe5\xe7\x81?\xf5\x8es\xfd\x8c\x07\x80?S\xc0\x92\xd1\x1d\xa6\xb1?\x18"\x81\xe6\xa8\xbev\xbfX\x19\xd2\x1b?\xf1x?\xc6\xbb\x01e;_r\xbfx\xc9\xf2\x9e\xc7\x1a\xc0\xbf\x97\x92\xa7\xd5+ht\xbfn\xf7p\x9d\xc3\xeb\x88?\xfa\xb1\x9e\xe1\x1d\x89X?\xcc|\xdb\xc1\x84\xc0\x91?\xb0&\xf4+\x18\x08\x82?\x9aP\xef0\x0b\xb7\xbf?d\x8e\x05\x85\xe7\x10\xc0\xbfy\x03\x03\x9d\xff\t\xbe?\x13\x13\xbb\xaf\xe2\xe8\x95\xbf\xd5g\xcc\xd8\xef\xa1e?\xbc%\x98\xff\t\xf7\x9d\xbf *\x89\x94\x12\x8a\xc0\xbf\xc0\x07\xf5\x1b\r\xae\\\xbf\xca\x1b\xb4G1\x9f\xc3?.P\x9eaMP\xae\xbf^[\xb0\x00\x1d\xf9\xbb?\xc6\xe2u\x0b\xdb\'u\xbf\xd3\xeeD\xac\x89\xe3\x85?\xd8p}\xa9\xfb\xb3S?\xe3\xff\x0bMkn\xb9\xbf@\xd8\xf5x\x88N\xb2>\x93q~K\x80\xc1\xcf\xbf!Mh\x92\x00.o\xbfyj\xfe\xf5O:\xb1?\xcd\x0c\x88{v{8\xbfu\x01\xcb\xc0>\x7f\xa9?Q\x1a\xa6\xeat\xc4\xc1>\xd2\x16\xbc\x84\xac\x95\xbb\xbf\xfc\xcc;\xdd|~$?\xa1\x1a\xa2\x05\x92\xaeI\xbf\xb0\xf7\xcaQo\xe9\xc1\xbf5OHl\xf6,\xbb?\xe2\xf75k\xca\x1fk?\xf4\xc7]\xe8B\x9ax?qLz^\xd1R\xb4\xbf\x8e\xfe\xf4\xa4\xf1\xc9\x81?\xd8(\xba?Ly\x99\xbfS\xd0\xebX=\x04e?\x87Q\x86_\x04\xab\x9d\xbfYhl\xd9\xcd*\xa4?i\x83n]|\xe1\x95\xbf3\x88v\xdfw1\x9c\xbf\xa6\x102s\x8a\x8f\xa0\xbf\xf1\x9d\x98\xa97\xb7K?.\xc0C\xae\x86\x12\x95\xbf\x1c\xf1\xbd-\xcb\xf4\x95\xbf\x88\x8f\xe7L#\x04\x88\xbf\xcdl\x1d\xc0\x01\x1by\xbf\xc0\xa9\xbe\xfb\xda\xac%?\x10.a\xf9o\xb6\xb9?\x1d\x99\xde\x18\x15\x95\x89?\x1a\x82\x8aQ\xe5\xe7u\xbf\x8c\xa33<Dc\x82\xbf\xf6ks\xa1\xf1\xd6Q\xbf\x0e2\x85!q\xe5\xa8\xbfP`\x08a\x18O\xd8\xbfI\x9f\xe3\xda\xec\x8cV\xbfk\x92A\x01\xaa\x86\xab\xbf\x9c\x0c\xdf\x05\x04{\x82?m\xd6*\x7f\x98P}\xbf\xf7G\x02Z\xca\xacI\xbf\xc1\xeb\xa1(\x1e\t\xc4\xbfP\x13\x1e\xe5\xc55\x81\xbf\x93a\xde\x10\x84\x0b\x95\xbf\tg\xbb\xba\x8d\xd9\xa5?\x99\xe3LX;\x92)\xbf\xa3\x11\xd9\xc8\x9f\xd5\xc7\xbe\xd5\xf7\x96\xc2\x8a\xc6\xda\xbf\x95\x80\'\xc9\xb4e\x98\xbfU\xa0L\x04\x84zn?\x16\xd7j>\xbf/L\xbf]\xb64V):v\xbf\x8733L!\x0e\xb4\xbf\xc4t(\xfbYYx\xbf\x9dtD\xc3\x1a\xc6\x9e\xbf\xa6G\xeb\xf7*\xa0\x81?\x1e\x92\xf8r\'\xeaV\xbfuTh+\xe1\xba\x91\xbf\xc2\x02m}\xc7\tq?\xf2\xe3jH\xd1\nw?%:\xc6\x8f\x8e]\t?\x98c\x91\x89\xc5\x92\xb2?\x93\x02W\xa1\xc8\xb3[?\xc8\xfd\x10\xed\x1a\xb7\xba\xbf9d\xc1\xce\xf1%\x8b?\x1f\xc2M|w<\xa4\xbf\xd5\x13P\xe9\xeb.\xa3\xbf\x1e\x08:H\xb1\x91\xbc?g_\xbc\x01\x8b\x9d\xc2\xbf\xb9N\xc1\nG\xd2\xc5\xbf\x18%\x97\xc4\xac7\xa3\xbf9J\x89\x95H\xceu\xbfV\xdf\x88\x9c\xcc\xc2\x99?Xa\x91\xe0\xad\xe1\xcb\xbf\x84\xc4\xea#\xbc\xb4\x83\xbf5\xe4\x80w\xb7\x16\xbf?+!s\\\xc7\xa94?u\x92\x9f\xe8\xc9\xf5m?\xcd\x80\xc8\xe2\x9aS\x93\xbf\xbe\x19\xa5\xed\xc7\xb5^\xbf\xae\\\xb9$\xc7B8?\x1b\x86\xca\x12\xcd\x97\xd0?1]\x12\x06\xc1*2?\xc9\xea\xcf\x1b\x0e/\xc4?\x9f;\xd5Z[s\xab\xbfs!1\x14\xec`\xad\xbftbF\xe3\xbb\xfb\xa9\xbf\xd4[\xea\xdeo.\xd2\xbf\x84:\xb2\xaa\xaca\x80\xbf\xe2\x94\xf1\xa9\xbb\xa9\xbc?z\x1c\xce\xfd\x89\x1db\xbf\x87\xdeg2\xe1\xad\xd3\xbfu\xc5\xef\xdab\xda@?\xe2\x0f\xe9\xd4z\x99w\xbf\x91\xdb\x93\x05\xa4\xb9W\xbf\xff\x99\x908\x14\x15\xc1\xbf\x071\x11\x12\xaaj6\xbf\xd4\xec\x1a]=\xfa\x8d\xbf\xd1[\xde\xc8\x98~^?i?\xb8i\xc8\x7f\xc2\xbfd:%^\xe8\x8f\xbe\xbf;O\xf6\\\xc6.\xc0\xbf@G\xf2^\xd9\x90\xb1\xbf.\xaa\xad<>\x90\xc4?s\'\xa3u\nZ\x83?\x80\xadn\xc6\xfe\xa1\x80?z\xb2sE\xb0\xfa\xb2?\x11\xed\xff\x08\xaf\x1b\xc9\xbf -H\x0cjT\xba\xbe\x7f\xd8\xe5\xcd\xec\xbb\xd4?<\xb3\x80)6\xb3\x7f\xbf\x0eV@\xabG]\x9b?\xb1<\x95\xf1?N\x8a?\xa8\xf7\x95"\x02\x9a\x83\xbf%\xb3\x02\xc8\x97v\x7f\xbf\x9f\x83\'\xb5\xf5\x1c\xb1?_\x84U\xe3\x86\xfc\x96\xbf\x01\xeb?\xd1\xbf{k\xbf\x98\x19\xb3\xd4\x10\x9ar?\xa6\x95\x0bB\x9cpW?i\xf6t\xb5\x0fb\x84\xbf\xc0z\xb9\xbe\x1b\x92\x8f?\xd7\x83N1\xe7@:?\x02\xe6H\xf8Dl\xac?Q7\xc5 \xf2\xb2z\xbf\xacem\xf5\r\x8d\x9b?\xe9!\xec\xc7^(\x96\xbf\xbf\xfeX\xdcUNn\xbfT\xa9\xa9[\xda\x18x\xbf\xaa\x8ej\x8cGB\xc5\xbfm\xac~\xc9tZ\x99?\xe9\x1a#\x96\xc0\xd0\xb7\xbf\x17\xeb/|\x01\xf9o\xbf\x9ej\xb7\xcc\xad\xe3\x83?\xb5\xe5T\xeb5\x8d\x9f\xbf\x90\xee\x1b<l\x16\xb9?V\xc3\xd2\xd2\xdc\tt\xbf\x9d\x0f\xf5n\x1a\x0e\x92\xbfJ\xa5\xd2\x0b_\xa8\xc0>\xbe\xa7\x0c\xc5P\x83\xa2\xbf\x01o\xbb\xa8\xa8o\xb1\xbf\xa0\xaccM\x88V\xb3\xbf\x81i\x8b\xe61\x10l\xbf\x08\x91\xc3\x02\xd9\x03v\xbf.\xfd\xb4\x12\xdfw\xa6\xbf\xd4\xd4\xdb#c\x89\xb4?\x912\x97\xfa\xe2\xd1\x89\xbf\xda\x9c\x16\x05\xd20y?\xdbY\xc1\xa8\xbf\x00\x8e\xbfB\x047Y.\nq?v\xd0M\x18\xde\x81i\xbfLU\x01\x97b\xe2\xd4?AX\xdc4\xb3\x13\x96\xbe2Qo/\xaeE\xca\xbfp\xf2axV]\x91\xbfl\xf5\xc0\x00\xee\xe1\xa4\xbf\xae\xe4k\x05\xc8J\x96>\xde\xc228q\xe2\xc9?\x00 \xd2\x19\xcb\xcb\xa7\xbf\x96\xd2!?\xe9\xcf\xa2?V\xe4Y\xa1H\x93o?s\xd4\x03\xd8\x94\xad\x8a?iJ\xd8\xa0K\xa0\xc1\xbf\x0f\x13\x94S\x02\xfe\xbc\xbf\xccf\x82*5\x06\xa1>\x14r5\x12\xca!\xbb\xbf\x8c\xf8\x87d\xd17t?ey\xda\xcd\xf0&l?\xd2\xd7\xbe\tp\xee\xb4\xbflP\xe8\x7f\xc8m\xb4?\xb8\x0c\xbf\xc6\xa6\x84\x8d?3{Dd\xc3\xec\x89?&BS\xe0\xc4\xe2\xc2\xbf\xb5\x1b\x0e\x86\xc5\xbb\xa8\xbfG?5A\x98\x90\xb8\xbf\'\x84\xbej|r\xcd?\x15\xa5\x11\xe8\xdaMN\xbf\xcaD\xdd\xef$Ow?\xdbl\xc1\x08\xd8k\xc3\xbfi|Y\x88\xa2\xef\xba\xbfY$\xb2<u\xc7\x84\xbf\x197-&26\x95?\xca.`b\xaf\xce\xb5?\xf2\xc2\x11\x92\x99\xe4\xe0?j\x19\xd3"9\x15\xa9?\x14\xff`oQH\xaa\xbf\xaa\xe6\xdf}x\xd3\xc1?=\xc5&\x92\x11\x819\xbfI\x1d\xd2G\x0c\xe4\xc1\xbf\xfax\xad\\\x18(\x9b\xbf\xc3w_ \xea_\xb0?\r\x18\x08l\x9c\xf2\xb2?\x01Z\x86\x15d\xe4\xb4?\xdb\xd4V\x83W\x07\xd3\xbf\xfc#\x8a\xa9\x12l\xbb?\xcd\x05\x9eI\xcf\xb7\xce?\x96\xfcl\xe8[\x95\xa9\xbf\x17\xc1\x17\xf0$\xc1p\xbf\xc7\xd1x\x99\x17\xc8\xd2?\xce\x03\xc7_u)\xcf?\x07\x1d\xed\xec\x11\xdd\xc2?\x05\x04\xcb\xb600\xce?\xd7\x17*\xfa\x9a\x18\xc2\xbf\xc7x\x95&\x03\xb3\xdc\xbf\xde\xde\xea)\xb25\xb4?\x03\x02\xbb\x98\x0b\xf1\xca\xbf\xd6T4\xb1\xdb\x17\xe2?\xa3\n\x12_\xde\x13\xe4?\xf8v\x05\xb8\x00\xfb_\xbfg\xbcTF\xba\xe4\x00\xbf]\xe0\xed\x16\xdb\xa3\xbd?N\xeai@%\x16\xc0\xbf\xc4\xc2\x96\xcb\xb4\x04\x98?\x95\xbew\xf3\xa4\xb5U\xbf a\xcdGh\xc5\xa3?-\x06\xb9M|\xca\xa6?1\xa4\xca\xfa\xfdp\x91\xbf\x8e\xd5\x16\xb9\xa1H\xaa?L|\xcb\xe1\xf9\xbc\xa5?\'\xa4H\x08\x7f\xde\xc2?\xd4=\x99\xc1\x9e$f?W|\x87\xcc\xb7Lr?\xff/@M\'Q\xa7?\x9d\x93B\xc4\xb0\x9d\xc0?5\xa1\xe4\x84!j\x86\xbf\xed.\x0f\xc2]\x97\x9d?y"\x01\xae\xa5\xe9\x82?c)\xa1\xfc\xe7#\x94\xbf&\xd8D\x06\x12\xca\x89?\xff#\x82!\xfb\xd4\xd1?\x99\xad\x89\xe2\x1cW\x84\xbf\xb0M\x11\x154F\x85?\x89\xfe\x92\xe8k\xd3u?>\x82J\x01\xe6cy?\x1eH\xe8\xdf+\xa3\xc2?\xc2l\xae\xb1\xb3\x1c\xc4\xbf\xfc\xd53\x1dZ\xb7\xac?\x03s\xb6P\xbe\xee\xc3?Q\xeb@\xa7,\xc6\x86\xbfmc\x18@\x1b\xf6~\xbf\x04FU\xedn\xae\xbf?7>\x1e\x14Qf\xae\xbf\xea\xc9K\xf8\x80\xf7\xc3\xbf\xb4\x1a-\xfa\x87\xb2\xb1\xbfB\xe2\xe8E\xf2\x83\xc4\xbfY\x10W\r\xe8\x00\x81?,S\xef\xd2K\xb2\xea?]M\xc7_\xa8E\xd9\xbf\xc4\t\x1dR\x07\xb7\xa0\xbf`\x1bh\x89J\x97\xab? (%Y\x0f\x06\x8b?\\r\x99\x8a\t\xd2n?\x90K\x82\x9a\xaah\xc0?\xcf\x80\xf7tp\xff\xd1?\xc2}\xea\x03\x1a!\xa2?\xd4\xc75Qj\x05\x98?\xe8\x825\x9f\xcd\x00\x91\xbf\xa5X\x9f\x0c\x85\xc0\x83\xbf\xc3\x93,\x02\x9f\x9cj?\xe9\xb8\xaf\x0b+\xabs\xbf\x93\x87\x9d\xe8\r!\xd3?m\xc9\xf9m\x88\xc9\xc4?/\\;\x1f\x92$\xc5?\xe8\xc57\xae"i\xe9\xbfP\xf6\n\xfb\xb4\xea\xb7\xbfw1\\?o\xdd\xa4?R\xdb\x07\xab\x1b\xba\xc2?\xf0\x87\x96\xc0}\'\xd8?\x91I\xdaw\x8a\xe3\xc0?\x13q- \xb8\xb7\xb7\xbf\xc2\x0f\xech\xb0h\xe3\xbfy\x9b\xe0\xdc\xc2\xd2\xc9\xbf\x8e\x8a\xe5\xca}\x10\xd6?\xea\xaa\xa5\x9b\xd3b\xd9?\x05.7^\x85\xda\xc1\xbfYDn\xebs\xb8\xe1\xbf\xbe\x8b7\xb6\xc9\xc5\xdd\xbf\x0cN\x1c\xda\xfd\x0c\xc4\xbf\xad\xf0\x96)@\xb1\x84\xbf\x7f\x13>\x16\x89\xda\x85?\xcf2\xa7l\x89y\xc6?\x94\x001\x1a\x97\xfd\xd9\xbf\xd6\xe4\xfc\xf7=\x8e\xb4?\xf7H\x1c{\x16\x10\xd4\xbft\x04^\xe5?,\xd1?\x00^\xecXW\xfe\xbf?A\xadR\x83@\xe0\xc0?\xea\xd9\xee\x17\xbd\xf0\xb0\xbf\xdf\x82m\xb5\x90\xfd\xc1\xbf\x92\x04k\xf7\xe6\x86\xc4\xbf\xa8\x93\xbbJ\xb7\x93\x9f\xbf~\x8a4\x8ff\x82\xcd\xbf$\xe7\xfa\xc4\n\xdd\x85?\x87Qt\x7fY\xf8v\xbf\xc9\xe4\x91x\xab8\xa7\xbfw\x00Y\xde\xf7\x1b\xcf\xbf\x125P\x15\x18\xd9\x80?\xf5\x1a\x93\x84;fu\xbf;\'\xdem\x18\xe8\xc0?\xb0\xbc\x88\xdcU\xe2\xc9?\xd9\x083\xa0\xbb\xe2\x96?\n\xe2\x17\xfa]\xb5\xc7\xbf5"AT\xea\x89p?\xe1\x1d\xacK\x15\xb6\xd0?]\xc6\xaa\xbb\xc3Sv?rQ\xff\x9d\xefYm\xbf6A\x95l\x90i\xc8\xbf\xfc\x07\xdc-\xb7\xd4\xa5\xbf\x9a\xb6w\xa3\xc2U\xec?\x14\x19\x9d\xff\xab\x98\xdc\xbf\xe8\xcc\xc5\xd7\xcd\xb4\x97?\xfc\xedT`6\x0ff\xbff\x13\x12-\xe4\x94\x8d\xbf\xa3\xff3\xab\x1dC\x9d?\xc0\xb6\x18\xe6U#\xc9\xbf\x99}\x1cE\x93\xc1\x91?\xf0ZVhc\xd2\x86\xbf\x93\x94Pn\x18\x820\xbf\x1b\x86H\x848\xaa\x87\xbf\x00h\x03\x83C-\x87\xbf\xfbX\xc9%9\xcf\x90\xbf\xde\xc6\x16\xb5\xde\x9c\x93?y8P\xf2KB\xb2?K\xa9\xa7v>\x87\xc2?\xc6sG\xdd\x92~\xc6\xbf\x1a\xa9j\xd1\x8d\xd0\xb6\xbf\xd4M\xb0+\xac&s\xbf\x96xQ\x1c\x13\xaa:?\xb4\xb1\x7f}c\x16\xc8\xbf\x0c\xc5|\x1e;\xa2\xc0\xbf\x03\xb43\x83\xf2\x9c\xc4?\xb0\xe3\x9c!@\xed\xae\xbf`\xfd\xb6Y\xed\xabq\xbfV\xa7\xbdK\xc6[`\xbfh]]*r\x1e\x9b?\xcb\xc0i*\xc9l\xca\xbfA\x01[C\x95Ab?\xc9\x0f\xf2\xf7\x91\xf0\x8b\xbf}\xb26\x96\xfa\xf2\xe3?\xd6/a\xd4*r\xd6?Ca!V\xb3\xd4\x87\xbf\x1e\xce4\xd1\xbb3\xbd\xbf\x9f\x1d"\xac\xc5t\x85?\x85\xadN/\xa1\xb7p\xbf\x0eLdm\xad\xec\x96\xbf\xcf\xd6\xed\xc1\xdc\xd4\xa6\xbfQ2\x0b\xda\x1a\x0e\xc0\xbf\xb0\x9f?i\x1bB\xae\xbf\xee\xa9uK~PK\xbf\xd4j\x93\xd3\xda\'\x9f?\x8b\xf8TR\xd0\x14|?"\xa3m\xef\xdf\xa2\xe1\xbf\xe5\xe2n\xde\xac\xc0\xd5?\xe04\xaf\x17\xb5\xbd\xdf?!\x83\xc7r\xef\xed\xb8\xbf\x07\xe4\xc1. \xfa\xbb\xbf\'\xb1\x91\x192\\\xe8?\x95 f\xaf`\xbb\xea?<\x8bD\xd7f\xb6\xa9?\x99h\x85\xdaJ"\xc9?\xe0\xabOr\xd9\xdai?<S\xe4\x05\x82f\x82\xbf\x92h\xe7\xf0\xaf`\x9a?\xf1\xa2\xc4V/|\xd3\xbf\x83\xd8+\xac\x0e<\xcb\xbfp\x1b|\xe1.\xc8\xdf?>%\xce\xd9\xe5J\x94?\xac\xb9\xfb\xf7\xd9Y\x8c?\xc6\xfd\x86\xa6\x04\xfc\xc4?\x98p\x8c\x81\xf7\xf4\x93?\xe7\xaa\x13\x8d2\xc1\xa9?\xff\x19b\x16\xc5;\x8d\xbfY\x18n\xaen9\xbd\xbf\x96\xba\xd27\xad\x17\xc3\xbf\x07y\xee\xc5\x88&\xd9?$,\x05\xa0J&\xab\xbf\x87\x81\x86\xd7\xfe4\x84?\xef\x1fr\xda\x0b\x9f\x8d?\xba\xfc/N\n\x99\xcd\xbfu\xc61\x83\x1ad\xbd\xbf\x90,\x99h\xc9yg\xbfQ\xfd\xd5\xdb90Y\xbf)\x8a\x1c[\xf2\xa6\xe2?\x81\xfe\x9a;=\x96\xc2?\x02\xfa\'}\xb4\xf2\xc4??\x04h\x05\xc1\x14\xa6?\xddR\xb8\xd6\x8fC\xd0?5E\x17\xfa\x86\xb1\x96\xbf\x8d\x10Du\x1f\xbc\xba\xbf\x93}\xa2\x7fB_\xac\xbfM6\xe4\x99\x19\xe7\xb2\xbfc\x98o\xdc\xbc\xac\xa8\xbf\x08\xfea\x96*\x07\xb7?u\xb8\xd6\xce\x90[}\xbf;\xfef\xb7Px\xc2?\xfa\xd4\xcd\xf31\xf1\xa0?,\xb3\x16Z\xa3}\xa8\xbf]RQ\x16\\a\x8a\xbf\xc2^2@\xbe\xb0\xd8?%\xd6\x89\xccA\x04\xbe?\x9b2T\x00\xfd\xa2\xc5\xbf\xef\xbb\x04\xe2\t\xf0\xc8\xbf\x89\x13b\xb0N5\xd1\xbf6vj(I\x05\xb4\xbf\xf6\x94\rn\x13|V\xbfp\x96\xfb\xf5\xb4\xb2\xa4\xbfC\x1cFL\x8c\xba\xce\xbf_ms\x94\xc7A\xcd\xbf\xf8A\x83\x025:|\xbf^\xca\xf3\xefb\xfbl\xbf\x11h\x9aH.\x11\xc1?>\xc7G\xfa\xa0\xca\xaf\xbf=\x91\x90\x9c\xa9j\x90?r(\xeb\x9d\x16^w\xbf\xd6]\xf6d\xeb@\xae?~\x8dnp\x1c\xb7\x9b\xbf,S\x93\xa0\xb8\xa5\xa0?\xe4\xa4\xcd1\xe2\xf1\x8d\xbfV\x05J\x1f\x88p\xca?+\x8f\xa3\xb3&\xc1\xa4?&\xed\x18\x01i$\xa0?qy\x8d\xaa\xfb}\x90\xbf\xd2\x10c\x0en\xf1\xb8?\xdb\x80\x19\xe7\x8f\xbb\x8b\xbf\x18\\\x13Th\x94\xb1\xbf\xc5w\xe5\x9e%\xb7\x84\xbfg\xe2\xbc\x10(zs\xbf\x9e7X\xd2?\n\x82?\xea\xf1\xf6qe\x08\xe1?\xc2\xb8\x86\xe2\x1al\x8b\xbf\xfb\xcc\xb1\xc8D\xe5\x80?\x0e\x9b\xc9\x95\xc4\xc5\x8a\xbffpjcC\x15\x83?\x7f\xc6\xf0Q0\x8b\x94?\x8c!ZX\xc1\x85\xe2\xbf\x8b\x01v\xb9Z\xeb\xcf\xbf>\xf0\x13\xba\xc8\x16\x88\xbf\x83R=Nl_\xf4\xbee\xaeiG\xa3\x99\x91\xbf\xcb\xa9\xbd\xd1\xac=Q\xbf\x0f\x10\x17\x99\xa2h\x84\xbf\x84z\xd4\xf1\x1b\xf7\x94\xbfI2\xec\xf8&-\xc4\xbfhr\x84\xb4\x93#\xa6\xbf>W\xfc\xdfy*\xc1\xbft\xe9\x95\xfc\x01k\xc1\xbf-\x0b\xfe3<Z\xb0?\xbc\x7f\x0cR\xf9\x16\xd8\xbf\x0e\xe3N\xda\x91\x9a\xb6?\xbdb\xf3\x86,\xd5_?XS\xa5|\xb5\xde\x8b?\xffow\x96\xc5\xe9b\xbf.\xcc\xa5\xd2<\x08\xb8?H$+g\xe8\x0e\x8a\xbf\xb6\x17\x9e\xab\x94\'\xb1?\x8c\xf6\xb6M\xcd2t\xbf\xff\x7f\x1b\t\x8d\x8c\xb2\xbfKEj\xbdJ\n\x92\xbf\xdd{\x9b&\x10\x90\x99\xbf\x0b\rsu\xd2]v\xbf\xf2\xa5\xf1_\xd5\xe3\xe0?\xc3.k\xb6\xa6\xf3\xd9?P\x00\xf99tv\xd9\xbf\x96\x14\xef\xaf1*\xcb\xbfE\x1cj\xda\xc7:\xbd\xbf\xfb\xcb \xf1\xe9\xe4\x96\xbf\xcdlM\x06O9\xe2?\x9e\xfbb\xb6`h\xc6?\xf1\xe0\x00\x9f\x98\xcb\xc8\xbf\xec\xf39\\\xce\x8a\xc3\xbf\xf9\x0c\xa0\xf6rm\xe4\xbfJ\x19\x16~\xac[\xcf\xbf\x80o\x9a\x0b\x05\x0e\xe6?\xf6J\xbaY\xab_\xc5?\x11\x1c\nrV\x90\xcc\xbf\x86\xc8u\xd5]7\xbd\xbf\x1a\xe7bs\xa4M\xe0\xbfPNj\xb8$|\xd1\xbf\xeb\xee\x98\x1e\xc8;{?>\xf9l\xb6`\xf6w\xbf\x96\x04\xa4B\x98*\xe1?\xbf\xf8\xb5\xe7\xda9\xc3?\xf6\xcb\xce\xbff/\xc0?\xc4\x80G|\x02\xfd\x8d?"\xf7\x9cZ\\\xc5\xab?\x1b\xa9\xf8\xcbk7\xa8?r\x9e\x10\xb4\x0b%\xdd\xbf\x9a[X)A\xa2\xcc\xbft\xf5\x9a\xa0\xbf\\\xdc?\x13\x12\xb7\x84xu\xb4\xbf\x13\xe4\xd7\x9c\xab\xb1\xd9\xbf\xfb\xfd\xc4^\x9a.\xc8\xbf\x12\x81T\x07\xf5-p\xbf6[\xf2\xbf\xd9\xa2\x80?\xfb\xb7U\x1a^\xa3\xd4\xbf\xb5L\xe6\x98v\x92\xbe\xbf\\p\x90\x8f\xe4\xa9z?R5\xd0K\x99=s?2h\x00\xd8 Hi\xbf/\x82S\xedx\x12\xa0?\x1f\xc5\xaca\x9as\xc8\xbfc\xa0*\x0b\xe2"\xc2\xbf\x93\x83{]\x03c\xe1?\x04:\x92 \xf34\xae?\xfdb\xa0\xfbv\xfa\x1b\xbf\xe7O\x9a\x9a\xdb\xcbw\xbf\xfb\xdd\x87\xc8"\xd5\xa9?qQ\xe1\xa7q\xb8{\xbfP\xe2o\xa5\x99\x1e\xdd?a\x82.\x04\xae\x8f\xdc?\xe2\x8c\xda\xfe\xc4\x1ej?L\xb3\x82iO\x02\x87?+\xde\x07{\xa0\xe7\x97\xbfn\x88\xb0\x86Tfk\xbf\xaf\xa5\xf7\xd0m\xa2\xd0\xbf\xda\xf7GJ\x06\xc3\xba\xbf\xf7\xf1=\xade\xd6\x82?d\xef\xb6&\'S\x85?\x1d\n\xec\x96\x81m\x93?\xe9i+\xe4\x8f\xab\x87\xbf\x88\xb8\\\xb2"[\x7f\xbf\xe5\x9a\xbd\xe2{4\x8d\xbf-\x03\xa6\x81\'i\xbb?^-\xf8\ry[\xa3?\xf7FH\xeeJ;\xc4\xbfZ\x17\xaa\xc6\x8a\xeb\xb0\xbf\x10\xab\x83S\xa3?2?\xe2!vu\x15\xd3\x8a\xbf3\x1f"\xb0F\xa5\xd7\xbfY\x95qE\xa3\xe2\xd0\xbf\x98r\\\xddR\x96\xcf\xbf\x10\x1f\xef\xb2)\xc6\x82?\xbc\xa4\x81\x90y\x15~?@\x03\xfd\xd8\xc8\x97\x94?\x9f\x0f\xcf\x01\xf5>\xa6?\t#\xd4\xf0\xb3\x8d\xac?$\xb6\xbe\x84?qK\xbfq\x87\xa7\x7f:\xb0\x8b?\xfaC\x03z;\xda\xc2?\x19X\x1c:^\x0f\xa1\xbf\x18\xcc\x13\x9d\xfb\x14\xc6\xbf\xeb1(\x97 z\xbd\xbf\xf3\x1d\'~w\xee\x80\xbf\xe4\xb0\x81\xe3\xa0\xa6^?cc\xdf\xa8^X\xcf?;\xb0e\xf61!\x97?\xe9\xeaMc6\xdd\xc7\xbfp\x16\x81\x15@Q\xb4\xbf\xf3\xa8\xf0\x97\xaf\xba\x95?\xb7v\xb2i_\xc2\x8c?\xb3\x08\xae\xce|s\xbf?s\x96\x08L\xd5\xb8Q?\xa7B\x00\xa2\n\x80\xd6?q\x12\x98\x80!4\x84\xbf\xac\xce\x84 \xa6\'\xbb\xbf\xcc_\xc09\xaam\xa9\xbfnV57$E\xfd?:\x7f\x8d\xc3.\xae\xef?\xd20\xa0L\x84\xe2\xd1?\xfd\xc8\xd3+1a\xb3?\x1b\x1a\xdd\xe0\x0b\xd5\x8d?\xc3\\\xbd\x93\xd8\xd4g?vg\x8f\xfe\x8c\xf8\xc8\xbf@t\x07/\xder\xc8\xbf\xcd1\x11#\x10f\xe1? \xd8\x14\n\xf8y\xc4?\x991h\xe2\xb6\xaf\x80?\xdd(\x8d\xff{l\x9a\xbf:R,\xe7\xeb\xdd\xc3?\xeb\x85\x1fd\t\xb9\xa9\xbf\xc1Z\x9ayD|~\xbf\x7f\xc5\xe9\xf6=\xf3\x92?\xa5\x1eD\xdb\x1a\xb1\x92\xbf\x1b\xac\xfdZ)=\xa8\xbf\xde\xc9\xe6\xd2\xa7\x98\xcb\xbfI\xc4\xd8J+\x16\x96?\xd8R\xdf\x8d~\xaf\x91?\xa3\x1ad\xbe!H\x86?f\xfb\xcd\xa5l\xb9\xbd\xbf\x99M\xfa\xfa\xf8\xb6\xb2?u\xaa\xd9\x08\xca\xc6o\xbf\x08c6Qp\x7fZ\xbf\'\x97\xf7\x99"@\x84\xbfE\xf6\xfcg\xf9\xf2\x94?/a\x92\x88\xf5:\x7f\xbf\xb3i\x8ee\xb7\x13\xb0\xbfF\xc7\xe3d\x8f\x16\x82\xbf?\x1b(\xe0\x1e\xa9\x9d?\xc5\x05\xb7\xe7\xff\xce\xa8\xbf\x8f\xa8\xd8U\x9c\xa4|?I^-\x1e\'\xdbb\xbfI\xf05np\xb2\xad?\xb8\x07\xf0\xdd\x8d\x1c\xa6\xbf\nH\x1e\xa3\x9d\x11\xc1\xbf\xd9]\xb5\xeex\xc2\x87\xbf6\x08L\xcaA\xae\xbf?\xfa2\x9a\xc2\xe8\xf2\xa6\xbfe\xc2L3Y`b\xbfm\xbf\xe0yo\xb3~?|-\x94\xd6\xebL\xb4\xbf\x98\xbd\xf5<\xec\xa7\x93\xbf\xca<\xff\x0f\xa8\xe0\xb9?\xa6nJg\x0c\xc1\xa3\xbf\xc7\x82\xf8\xfbc\x1d\xbb\xbf\x81\xe4&:\xb5\xd8y?O\xb4\xc0J\xe2\xd1\xc0\xbf\x0f\x9aU\xb6\x9cN\x93\xbfA\xf5\xbdnA.\xe0?e\x1e\x92j\xbf\x0bi?\xce\n\xe0lPZ\x88?\x83\x99Vg\\\xd2Y?\x83\xf8\x08\x9cy\\\x9d\xbf\xfa"i\xe5\xcf\xe9\x85?\xd94GFE\xf5h\xbf"{\xc8\xf9@\x83\x80\xbf\xa3\x07\xd7[\x82\x05\xa3?\xc5`N\xb6\xefI\xa4\xbf\xfaW\x9fw\x13\x0eX?!\xea!\xd3\xc9\xa2\x94\xbf\xf5et\xb1\x92\x80\x99?\xa6qly\xe2\xe6\x8f\xbf\x7fG\x11\x10)\xd2x?D\x1e\xca\xbc\x81\xd9p\xbfH\xd1\xbaA@\x07\xa1?\xb2\x1bx\x1co\x0c\x9e\xbf\xe52\xc7\x1c\x9c\xc7\xad?\x18\xc4K\x08\xfe\x1b\x98?y\x068Uf\xeb\x8c\xbf\xf7\xbb\xc3\xf0B\x8d\xc1\xbf \xcf\x95\xca\x189\xa0?b\x9f\xae%\x07\xded\xbf\x9bhY\xdckY\x90?b\xa3ww\xaaHJ?\xccjN\xbb\xa1w<?\x8dNO\xd5J\x19\xb4\xbf\xa0\xdc\x81b\x1f\x8d\xbe?&\x8d\x0c\x1e\xa5\xc7\x95\xbf\x0fl\x9a\xe6\x07\x9b\xb5?f91\xedt\xf0\x8f\xbf\xe8|\x8c\x85`\x99O\xbfD\xcb\xbb\xdc\xceG\x88?Z(W\xef"\xa1w\xbf\xb4\xee\x99\x80\xa6\x06\x82?\xb5d\xb9\xed\x92\xfe\x93?s\xf7\x92\x17\xdc9\xbd\xbf\x84\x05\xbc\\\xc4]\x96\xbf\x17\xdd\xe8\x82\xb8\xf7\x96?j\x86\xcc\x92\xb7"\xbc\xbfb\x00\xed\t\xc4\xf4\xa3\xbf\xf0P\xce\x1f\xe7\xf3\x9d?\xa1\xaes4\xb2\x80w?\xa1/\xb4V\x8e\x05n?K\x86gs\x07\xb7\x86?\\\xe0\xa59a\xf9\xc1?\xc9\xff0\x82,`\x94\xbf\x89\xa9o\xc5:\x84\x8b?\xa6qY\x8c\xe4\x89S\xbfj\x88\xe4\x9e\x87PI\xbf/\t\xdf\xc7\xa5=\x86?\xb3\x91e\x93\xe6\x04\x8f?\xc1\xaa\x15x\xb5\xed\x9c\xbfJ\xc4\x1e\xa9\x9e\x1e\xb9\xbft\x01\x85tz\x1d\x9e\xbf\xc8\xd8TKj2\xc0\xbf\x87>\x95\xc7N\xd3\xbc\xbf\x1f\xac8\xe0\xae\x91\x9e?\x0e\xab:s\xec\x93c?\xc5\xc3\x9b+\xfa\x10\xa2\xbf\xe0\xf7B\xab\xd7f\x95\xbf\x8d#\xcd\x96]\x86\xc0?\x0b\xf4\xaa\xe8\xbc\x13\xd3\xbf\xb9\x94Ei\x84\x82\xa0?\xca\xf3\x06\x06\xcd\xa0t\xbf\xc3\x7fP\x92YW\xa7?%\x03\xec~\x86e\xb0\xbf\xa4\xd3iXZ\xb1\xb4\xbf8|\x1bh\xe5\x7f\xc6\xbf\xcf\xac\x17\xba\x90\xd5\xa9\xbfF\x1f\x90nn\x1f\x94?\x04f\xb7\xde\x0f\x89\x8d?\x96qh\xf85/t\xbfB\x15\x01\xe3\xb2b\xc2\xbf\xfe.~\xe9\xfa\xb2u\xbf\xf6T\xf5\xda\x8a\xe3\xb6\xbf1\x10\x84\xb0WU\x95?rB\x00\xd5\xd4\xb0\xb7?\xfeMn\x9d\xd9,\x8f\xbf\xd8\x06\x84\x98t\xd3\xc7?W\xc3\xc8\xe3\x7f\xd4\xc2?l4\xb56h\xfb\xca?.9\xf3\xa0qH\xb7\xbf\xeeY?k\xe3p\xba\xbf\xc0\xd5w\xa0\xcb\x9cI\xbf\x14\xb4K\xc0\x17\xb8\x8b\xbf\xd4\xb9y\xe7\\\x95\x9e\xbf@\x10\xbe4\xeb\xa0\xb1\xbf\x08\xfb\x12\xaf\x08\x00g?\xf1\x7f.\xe3\x86\x8bq\xbf\x92\xd9q\xfea\x82\x8d\xbf\xe8e\xdb\xd9\xe7\xde\xc4\xbf\x00\xb4\x86\x90\xd5\xfb\xa1\xbf\x9f\xd9\xc5\xfd\x9e\xa5\x8a\xbfl\x88SI\xf9\x99\xb6\xbfr3jh;lr\xbf\xe8\xd1m\xb6\xab\xbfw?\x9ew\xd8\xac#\x9bD\xbf\x94\x98\x94)?~\xb8\xbf\x92\xd0\xce\x84N\xb2\x90?\x11\xf8o\x16\xb0r\xad\xbf\xd1\xf7y\xa9\x7f\x99\xbe\xbf\xd4\x8b\x96\xb94\x8fn?_\x93\xb6\xe1\xa8\x86\x91?\xabs\x86\xe9\x16jE\xbf\xf7\xa0%7\xe5\x89n\xbf\xe0:,\xcd^\xa6\xbf\xbf\xfd\xfc\x0f\xc9]M\xa2?\x8e\x93\x0c\xd1F\xfa5?\xae`(\xb7\xe0\xf0{\xbf\xce\xfb!\t\xd9\xd4d\xbf\xb2(\xfd\xd7\xdc\xcf\x90?\x01Z\xff\xc5\x90\x1e\x8b\xbf\xa7\x92\xc2^T\x88\x90\xbf=\x13\xc6Z\xfeNu?H_V\x1b\xb8\xaf\x97?&\x03\xd5\xc6k:\x9f?\xa7\xdb\xef\xc6\x04\xc9\x93\xbfI\x96\xc2&b\xfd\x8e\xbf\xc6\x81\r]8\x05\x92\xbf\xdd\xf1\xfe\xf61\x1a\xd3\xbf\x1cm{y{\x13c?0:\tab\xdb\x8d\xbf\x97?\xd1"G\xe4\xb4\xbf\xb8\xbd\xc9\x10R\x9fJ\xbf\x98\x1by\xa7:\xbfa?\xa8\xff\xea\x87\x95\x10\x8c\xbf^J\xb3\x90\xd4\x97\xb7?WJ\'4\x9f\xa7v?\x9fF\xf1\x97\xe0Fu?\x03:~\x7f\xe5h\x94\xbf\xaf\xb7b\xb9\xc7M\x98?Z\xc0\xa9\x8f\xe1\xae\xa8\xbf\x1a\xf4\xb6U\x08b\x8f?\xee\t\xf1\t\x9a\x9fF\xbf\x9c\xef\xdaH\xee\xael\xbf?\xe9\xf8e\xa5\x82\x9f\xbfQ\x0f\xa5:\xca\xd7\xad\xbf\xf2\x91\xe1\xa5\x9b]\xbd\xbfIN\xa9\xe9\x88\xe6n?k\x14\xbf\x1b\x1a\xd9\x86?\xeez\x05D\x82\x11\x8e\xbfi*\xd24$\xa2\xa5\xbf-\xc3IN8\x07\xb5\xbf\x17-E\xdc\x9b\xb2\x8f\xbf\x01BY\xf9\xe3^\xad\xbf\xd4O\xc6\x88\xd2\xf8\xb9\xbf\x1d-\x04,d\xde\xa5\xbf\xe6\x81~\xd6\x8e`\x80?\x00\xd7v\xcc\xe0\x96\x87\xbf\x82Z\xe7\xfbO\xc0\x82\xbf\x97\r\xffy\x86P]?}\xf6\x1b\xde\xf1zc?\x92G,\xf2lCq\xbf\xb0\xd0e\xb7)\xa3\xa1\xbf(\xb0~\x0e\x88)\xb9\xbf\xd4\x12\xba0Y\xab\x81\xbfi\xdb\xbc\t\xbd\x18\xa9?)\xe5\xc8\xaf\xbb:\x89?F\x9a\xcd\x92Y0\x83?\xe7\x8e\xb2=<\x83x?\x14SW\x86z\xa8\xa6?\x9c\xa9\xb3\x10\x85\xf1\x9a\xbf\xef\x830\xa5\xd10\x8f?*3\xc2\xd0\x90\x06\x97\xbf\x95`\xfe\xa0\x13r\x8b?\xab\xcb\xef\xca\x8c\xfb\xce\xbfK%\xe2=k\x17\xaf\xbfl\xef\x86\xee\xb8ir?S\x0c\xfc\xfd\xb5\xa0\x81?\xe3\x16\xe2\x91\x93.\xc2\xbf\xf0\xa3\xe9-*\x15\xb7?\x9c\xf6\xf3\xe5\x91\xb3n\xbf\xf5\xbb\x8er\xb0\x0c\x7f\xbf\xb0\xd7R\xdbk\xa0\xa1\xbf\xb7\n\xc2rO\x05\xb9?\xd1\xdd\xd2\xd0Z<\x93\xbf2\n\xfa\x004"\xc1??.\xcbjS\xb3\x93?\x17&`P-x\x9d?z\x97\xd7\x01\xb6*\xb5\xbf\x03FXb*\xb2\xa0\xbfA\x10\'\xd4\xc9.t?\x8c\n\x84r\xa3E\x93\xbf=\x9f\tOt4\xb1\xbf\x97\x1b;o\xe7\x0b\xb0?=Y\xe3sM\xa1s?\xa3\x99\x11!M\x88\xab\xbf\xee\xa7l\xc5\\\xaa\xa2\xbf\x06>{\x01\xd7hj\xbf\xdf\xd2" \xf0\x16\xa4?\x0f\x8bi\xd2\'\xb3\xd1?\x1eP\x18/\xd9\xaa\xa0\xbf+m\xca\rMp\xd5?~\xaf\x90\xab\xeb\x99\xcd\xbf\xc5\xa0\xe3\xbdP\x12\xc0\xbf\x86\xad\xae\xcdf\xfd\x90\xbfbE\x05\x89\x94f\xc0?\xfc\x18\x9cA{f\x9b?n\x15\xf9\x01O\x11\xe3\xbf\xc8\xd1\x0cR0\xdb{\xbff{\x07P4{V\xbf F#\'U^\x83\xbf\xd7~V\x8d\xff\x00\x90?\xba\xf7\x16\x95\xc5\xb3\x90?\xab\r\x913\xc6\xb4\x87\xbf\x9b\x130Izz\x84?N\xed\x08\r\xb1]v?a\xc4S\xdf\xfd\xb0\xab\xbf\xfe\xf82\xa3(\xf9\x94\xbf\x95\xd5\x1d\x08\xc1\xbd\x81\xbf\xf3|&ZL[\x8e\xbf\x07\xe69r\x86\xdd\xa6\xbfI\xc73\x8c\xd0\tp?\x15\x9f\x1a\x80b\xabo\xbf?\xb0\x9b\xe6\xeb\x05x\xbf\xc3h\x7f\xe5\xc5\xcc\x90\xbf\xb2\x0cv\x95\x1eM\xad\xbfj\xab\xdf\x0e\xec\x8b\x93\xbf{\x1e\x99\x05\'\x98s?t\xd93W\x0eY\xc0\xbf\xe9/\xfdhN-\xa6\xbf\xef\x90\xf3\xa8"]\x89\xbf?\x19\xa4\x9b\x11P\x8e? \xc2\x0f\xa3y\x03\x84\xbf\xbc\x14|\x1a\x127y?.\x88R\xf5\x07r\xa4\xbf\xcaf\x85\x04\\\xac\xa8?\xd9\x1a\xdf\xdby\xcc\x81\xbf\x0f\x86\x17\xe3\x84\xbe\xa4\xbf\xd9\xf8\xe3\x0f\x0bOY\xbf\n\x92BP\x8d\x9f|\xbf\xd0\xfa\xce%\x01\xe6\x9a\xbfJ\x14z\x079\xe7\xa7?7\xb3\x98S\xb7~\xba\xbf(\xfa\x9c\xc1i\xb9\x8a\xbf\xc9U:\x10\xc2X\xb5?]\x12 \xb9\xea\x88\xa3?x\xe1\xaf\xbf\x94E\x8f?\\.+\x9b*\x07\xa1?\x8b7\x99\x8b\xa5\xe0\xa1\xbf2`d\xceoCv?\x80\xa5\x00Z\xb1gl?\xa8\x97)\xc9\x11\x80;?!7\x0fA\xdd<\x92?\xd1&\x1aF\xfa\xf9\xb3\xbf\xed\x94\xbf}B\x81\x7f?\x16\x86e\xc4\xd6\x12\x95?\x14P6\x85s\\v?\nX\x19j\xe1\x7f\x8a\xbf\xba\xc6\x16\x87\xa39$\xbf\xb6\xc4\x98A\r.p\xbf\x84U\x7f.w\x1e\x85\xbf(\xf5\xdf\x99\xf8s\xd6?\x06\x00{\x92\xa5\xbf\xa2\xbf2\x916\x08\xe7I\xbd?\xa9Z\xacM\x9aD\xb2\xbf\x80\x924\x90\x0c\x81\x81\xbf\xfa\xed\xc6r\xe8\xad\x90?\xc8@b\x987<\xb2?!j\x0e\xdbI\x9b\x90?\x19\xf4\xcf\xb5\xb2\xc7\x9a\xbf\x9d\xa1_\xbc\x16\x00\xd6\xbf\xdfS\xe4\xe3h4\xb5\xbf\xed>\xf7M]uv?\xb8U\xeco\xf3\xde\xc0?,y\xbf=\xaa/\xc1\xbf1\xe4\x08\xb3y\xed\xbe\xbf\x99\xcd\x1c\x11\x07\x0f\xce\xbf!\xeb-V?\x13\xb2\xbf\x86\x9fIx$3\x85\xbf\x8fco\x8c\xd1\xdf\x9a?\x19\xc7>>\xee\xb9\x9f\xbf\xb8!g\xa4\xe7i\xd2?\xa1\xe1\xdf%\xf6\x0fu\xbf\xd5\x8e\x9b\xb85\xd1\xb1?\xedU"\xc2\xc1y\x9b?\xcf\x17\x89c\xda\xf9\xa7?\xdeK\xc1\xc9\xab\xba\x86?R?v\nx1\x80\xbf\x1e\x9e\xc3\xe8\x1b*\x97?-\x82\x8aX\xfc-\xc2\xbf^y\xe9p\x9cy\xbf\xbf\xabI\x8f,\xc5\xde\xc2?.\r@\x10 \x0bz?\xfb{\xc6y1\x81\x83?\xc6\xbb\xf7\xea+\xaf\xba\xbf\x91E\xb4{\x9b0\xa2\xbfB\xff\x8a;\xb6wy?\xac\x8cfA\xa6)|?\xb9\r\xcd\xf7\x1f\x05\x99\xbf\x96:ud\xe6\xf0\xc3\xbfi\x91l\xc2\xf64\xa0\xbf|P\xfa!\xc8\xe3\xa1?Z\xc2\xee7\xf4\x9e\xb9\xbfm\\\x1c\x87R\xac\x95?\xa3\xb64\xefvAq?\xe2\xdd\n0d\xc8r?\x85&p0\xf8\xcb\xd0\xbf\xa0\xf7\x05\xe5\x10\xc9\xce\xbf\xfc_\x06\x8dd\x07\xb1\xbf\xa0\xd21\xb8!*\x9e?E9j]\xed\x19v?n\x8f~$h%\x80\xbf\x8d\x9f\xc1\r\xbb\x12b\xbfdx\xdftd\xd3J\xbf;\x1e\x7f9N\xec\xc6\xbf\x05f\x8aH,?r?\xaf.\x0b<\xbf\x9e\x8c?>\xa0jK\xf1\xdc|?\xdf\xb8\xb2\x84\xe5\x87Z\xbf6d\xbc#\x89od\xbf\xbfd\t\xa5r\x98\x98\xbf\xca\x96\xe4\x00\x10p\x84\xbf\xbc\xf9Z\xa8Z\rs\xbf4\xd9\xb8\xc6\xb7Z\x9e\xbfA\x8end7\xb3\xa4?%t\x03z\x91\xad\xa0\xbf\xde\xd6\xe4\xc7\x86c\x91\xbf\x18\xa1"\xf7!nw?v\xd3\x99y\xee\xc1\xd4\xbf\xd6\xa6\xbe\xfd\x9dUp?\x929@\\+c\x89\xbfL\xe1\xc5\xe3&\x04\x9e?\x88\xca\xb9\xaan7\x9e\xbf\xff\x93p\xb6oge?Ua\x1aS2\xcc\xa8?2\xc7\xae\x81t>\xc3\xbfK\xce\x07Ko\xb7g\xbf\x81\x07\x9cIa()?\x07\x87C\xc1\xd0|\x91\xbf\xd0\x86\xcb\xb6\xd8\x11\xb2\xbf\x18=\x03\x17\x9aC\xa0\xbf\xda\xdb%\xcf\xf1*\x96?\xdbs\xf1\xfc\xb3\xef\x87\xbff\xb5\x96Q\x9d\xa8P\xbf\xf2\xd6bZ}V\xa2\xbfZ\x86\r\xbfZ\xe0\xab?\xbb\xcft\xf2\xddh\xbf\xbf,SJL#J\xa2\xbf&\xa6\xd8#0\xa4\\?mQ&\x8ew\xe5\x98\xbf\xf6\xcdO\x01v&\xb4\xbfv\x012\x86W\xbd\xc5\xbf\x0b\x13a=\xc9\xbd\x91\xbf\xd7\xa5\x9eZ\xd5g\xd8?\xda\xc8O\x10Au\xb4\xbf\x8a7=\r\xdd\xa6\x93\xbf\xdd\xd2u\xbd\xb9\x08{?i\xcb.d\x80Q\xc2?"\xfaR\x8aP\xdfj\xbf0\x04\x89\xa8\xca1\x96?~\xfaX\x94z\x13<\xbf\x91\x16\x02iU\xabt?\x92\xc2(Pl#\x9d\xbf\xa9\xf8\xff\x99\x91\xcc\xad?\xf1\xcb\x0f<\xd7\x19z\xbfe\xd4\xc6\xb2\x8a{\xbb?\x0fT\x17hP\xdc}\xbf\xed\xba\x9d\x85a\x16\x7f?\xc9\xc5h\xcc)|\x97?>\x8cS\xd4\xae\xbb\xbb\xbf'
p715
tp716
basg71
I00
sg72
I00
sg73
g0
(g74
g5
Ntp717
Rp718
(dp719
g78
(I00
I00
I00
tp720
sg80
S'float64'
p721
sg82
g66
sg83
I00
sg53
Nsbsg84
Nsbsg559
I01
sg71
I00
sg560
I01
sg561
I00
sg562
g0
(g10
g5
Ntp722
Rp723
(dp724
g14
S'auto_14123'
p725
sg16
Nsg17
g0
(g18
g5
Ntp726
Rp727
(dp728
g22
(lp729
(lp730
(g25
I306
g26
S'nade_train( * args[1:] )'
p731
tp732
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p733
tp734
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p735
tp736
a(g37
I29
g38
S'self.add_parameter(TensorParameter("V_mu", (n_visible, n_hidden, n_components), theano=True), optimise=True, regularise=False)'
p737
tp738
a(g41
I29
g42
S'parameter.add_to_model(self)'
p739
tp740
a(g41
I167
g45
S'setattr(model, self.name, theano.shared(np.zeros(self.shape, dtype=self.theano_type), self.name))'
p741
tp742
aasbsg48
g708
sg53
g462
sg85
Nsg73
g718
sbsg589
I01
sg84
Nsbag0
(g554
g5
Ntp743
Rp744
(dp745
g53
g203
sg558
Nsg261
g226
sg559
I01
sg71
I00
sg560
I01
sg561
I00
sg562
g205
sg589
I01
sg84
Nsbag0
(g554
g5
Ntp746
Rp747
(dp748
g53
g162
sg558
Nsg261
g185
sg559
I01
sg71
I00
sg560
I01
sg561
I00
sg562
g164
sg589
I01
sg84
Nsbag0
(g554
g5
Ntp749
Rp750
(dp751
g53
g9
sg558
Nsg261
g51
sg559
I01
sg71
I00
sg560
I01
sg561
I00
sg562
g12
sg589
I01
sg84
Nsbag0
(g554
g5
Ntp752
Rp753
(dp754
g53
g88
sg558
Nsg261
g111
sg559
I01
sg71
I00
sg560
I01
sg561
I00
sg562
g90
sg589
I01
sg84
Nsbag0
(g554
g5
Ntp755
Rp756
(dp757
g53
g418
sg558
Nsg261
g0
(g49
g5
Ntp758
Rp759
(dp760
g53
g418
sg54
(lp761
g56
(g57
(I0
tp762
g59
tp763
Rp764
(I1
(I12
I2
tp765
g66
I00
S"8Q\x05\xa1(\x81\xee\xbf;Q\x05\xa1(\x81\xee?M\x99f\xff:\x18\xca?N\x99f\xff:\x18\xca\xbf\xee\x18\xbc),\xe8\xf7\xbf\xef\x18\xbc),\xe8\xf7?\xa6\x08\xf2r\xf5C\xca?\x9c\x08\xf2r\xf5C\xca\xbf\xa6\xd4\x1d^\xd8\n\xd0\xbf\xa5\xd4\x1d^\xd8\n\xd0?\xa34\x1d\xcd\xfe\xb4\xcc?\xa84\x1d\xcd\xfe\xb4\xcc\xbf\x17\xc1_\x17\x03r\xe0\xbf\x15\xc1_\x17\x03r\xe0?o\xa5\xaa\xf2\xc3\xc4\xe6\xbfs\xa5\xaa\xf2\xc3\xc4\xe6?\x96\x14\xaf#\x92\xb3\xd1?\x99\x14\xaf#\x92\xb3\xd1\xbfN\xfaE\xd1'\x16\xed?J\xfaE\xd1'\x16\xed\xbf]\x1c\xdf\xa9\r\xd0\xc8?d\x1c\xdf\xa9\r\xd0\xc8\xbf\x18\xee\r\xb9r\x8f\xca?\x12\xee\r\xb9r\x8f\xca\xbf"
p766
tp767
basg71
I00
sg72
I00
sg73
g0
(g74
g5
Ntp768
Rp769
(dp770
g78
(I00
I00
tp771
sg80
S'float64'
p772
sg82
g66
sg83
I00
sg53
Nsbsg84
Nsbsg559
I01
sg71
I00
sg560
I01
sg561
I00
sg562
g0
(g10
g5
Ntp773
Rp774
(dp775
g14
S'auto_14128'
p776
sg16
Nsg17
g0
(g18
g5
Ntp777
Rp778
(dp779
g22
(lp780
(lp781
(g25
I306
g26
S'nade_train( * args[1:] )'
p782
tp783
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p784
tp785
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p786
tp787
a(g37
I34
g38
S'self.add_parameter(TensorParameter("b_alpha", (n_visible, n_components), theano=True), optimise=True, regularise=False)'
p788
tp789
a(g41
I29
g42
S'parameter.add_to_model(self)'
p790
tp791
a(g41
I167
g45
S'setattr(model, self.name, theano.shared(np.zeros(self.shape, dtype=self.theano_type), self.name))'
p792
tp793
aasbsg48
g759
sg53
g418
sg85
Nsg73
g769
sbsg589
I01
sg84
NsbasS'required'
p794
(lp795
I01
aI01
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
asS'unpack_single'
p796
I01
sS'output_keys'
p797
NsS'fgraph'
p798
g0
(ctheano.gof.fg
FunctionGraph
p799
g5
Ntp800
Rp801
(dp802
g551
Nsg552
(lp803
g0
(g563
g5
Ntp804
Rp805
(dp806
g16
Nsg53
g270
sg798
g801
sS'clients'
p807
(lp808
(g0
(ctheano.gof.graph
Apply
p809
g5
Ntp810
Rp811
(dp812
g552
(lp813
g805
asg798
g801
sS'outputs'
p814
(lp815
g0
(g563
g5
Ntp816
Rp817
(dp818
g16
I0
sg53
S'x.T'
p819
sg798
g801
sg807
(lp820
(g0
(g809
g5
Ntp821
Rp822
(dp823
g552
(lp824
g817
ag0
(g563
g5
Ntp825
Rp826
(dp827
g16
I0
sg53
S'm.T'
p828
sg798
g801
sg807
(lp829
(g0
(g809
g5
Ntp830
Rp831
(dp832
g552
(lp833
g826
asg798
g801
sg814
(lp834
g0
(g563
g5
Ntp835
Rp836
(dp837
g16
I0
sg53
Nsg798
g801
sg807
(lp838
(g0
(g809
g5
Ntp839
Rp840
(dp841
g552
(lp842
g0
(ctheano.tensor.var
TensorConstant
p843
g5
Ntp844
Rp845
(dp846
g16
Nsg53
Nsg798
g801
sg73
g0
(g74
g5
Ntp847
Rp848
(dp849
g78
(I01
tp850
sg80
S'float64'
p851
sg82
g66
sg83
I00
sg53
Nsbsg807
(lp852
(g840
I0
tp853
asg14
S'auto_15625'
p854
sg17
g0
(g18
g5
Ntp855
Rp856
(dp857
g22
(lp858
(lp859
(g25
I306
g26
S'nade_train( * args[1:] )'
p860
tp861
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p862
tp863
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p864
tp865
a(g37
I36
g38
S'self.recompile()'
p866
tp867
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p868
tp869
a(S'/home/leondong/proj/ccnet/experiment/rnade_release/buml/NADE/OrderlessMoGNADE.py'
p870
I237
S'sym_mask_logdensity_estimator'
p871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p872
tp873
a(S'/home/leondong/proj/ccnet/experiment/rnade_release/buml/NADE/OrderlessMoGNADE.py'
p874
I232
S'sym_mask_logdensity_estimator_intermediate'
p875
S'logdensity = (log_sum_exp(Phi + T.log(Alpha), axis=2) * output_mask).sum(1) * D / (D - d)'
p876
tp877
aasS'unique_value'
p878
cnumpy.core.multiarray
scalar
p879
(g66
S'\x00\x00\x00\x00\x00\x00(@'
p880
tp881
Rp882
sbsS'data'
p883
g56
(g57
(I0
tp884
g59
tp885
Rp886
(I1
(I1
tp887
g66
I00
S'\x00\x00\x00\x00\x00\x00(@'
p888
tp889
bsbag0
(g563
g5
Ntp890
Rp891
(dp892
g16
I0
sg53
Nsg798
g801
sg807
(lp893
(g840
I1
tp894
asg14
S'auto_14840'
p895
sg17
g0
(g18
g5
Ntp896
Rp897
(dp898
g22
(lp899
(lp900
(g25
I306
g26
S'nade_train( * args[1:] )'
p901
tp902
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p903
tp904
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p905
tp906
a(g37
I36
g38
S'self.recompile()'
p907
tp908
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p909
tp910
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p911
tp912
a(g874
I232
g875
S'logdensity = (log_sum_exp(Phi + T.log(Alpha), axis=2) * output_mask).sum(1) * D / (D - d)'
p913
tp914
aasbsg85
g0
(g809
g5
Ntp915
Rp916
(dp917
g552
(lp918
g0
(g563
g5
Ntp919
Rp920
(dp921
g16
I0
sg53
Nsg798
g801
sg807
(lp922
(g916
I0
tp923
asg14
S'auto_16835'
p924
sg17
g0
(g18
g5
Ntp925
Rp926
(dp927
g22
(lp928
sbsg85
g0
(g809
g5
Ntp929
Rp930
(dp931
g552
(lp932
g0
(g563
g5
Ntp933
Rp934
(dp935
g16
I0
sg53
S'max'
p936
sg798
g801
sg807
(lp937
(g0
(g809
g5
Ntp938
Rp939
(dp940
g552
(lp941
g934
asg798
g801
sg814
(lp942
g0
(g563
g5
Ntp943
Rp944
(dp945
g16
I0
sg53
Nsg798
g801
sg807
(lp946
(g0
(g809
g5
Ntp947
Rp948
(dp949
g552
(lp950
g0
(g563
g5
Ntp951
Rp952
(dp953
g16
I0
sg53
Nsg798
g801
sg807
(lp954
(g0
(g809
g5
Ntp955
Rp956
(dp957
g552
(lp958
g952
ag0
(g563
g5
Ntp959
Rp960
(dp961
g16
I0
sg53
Nsg798
g801
sg807
(lp962
(g956
I1
tp963
a(g948
I1
tp964
asg14
S'auto_16713'
p965
sg17
g0
(g18
g5
Ntp966
Rp967
(dp968
g22
(lp969
sbsg85
g0
(g809
g5
Ntp970
Rp971
(dp972
g552
(lp973
g0
(g563
g5
Ntp974
Rp975
(dp976
g16
I0
sg53
Nsg798
g801
sg807
(lp977
(g971
I0
tp978
a(g0
(g809
g5
Ntp979
Rp980
(dp981
g552
(lp982
g0
(g843
g5
Ntp983
Rp984
(dp985
g16
Nsg53
Nsg798
g801
sg73
g0
(g74
g5
Ntp986
Rp987
(dp988
g78
(I01
I01
I01
tp989
sg80
S'float64'
p990
sg82
g66
sg83
I00
sg53
Nsbsg807
(lp991
(g980
I0
tp992
asg14
S'auto_15681'
p993
sg17
g0
(g18
g5
Ntp994
Rp995
(dp996
g22
(lp997
sg878
g879
(g66
S'\xb4\xbed\xc8\xf1g\xed\xbf'
p998
tp999
Rp1000
sbsg883
g56
(g57
(I0
tp1001
g59
tp1002
Rp1003
(I1
(I1
I1
I1
tp1004
g66
I00
S'\xb4\xbed\xc8\xf1g\xed\xbf'
p1005
tp1006
bsbag0
(g843
g5
Ntp1007
Rp1008
(dp1009
g16
Nsg53
Nsg798
g801
sg73
g0
(g74
g5
Ntp1010
Rp1011
(dp1012
g78
(I01
I01
I01
tp1013
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsg807
(lp1014
(g980
I1
tp1015
asg14
S'auto_15673'
p1016
sg17
g0
(g18
g5
Ntp1017
Rp1018
(dp1019
g22
(lp1020
sg878
g879
(g66
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
p1021
tp1022
Rp1023
sbsg883
g56
(g57
(I0
tp1024
g59
tp1025
Rp1026
(I1
(I1
I1
I1
tp1027
g66
I00
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
p1028
tp1029
bsbag0
(g563
g5
Ntp1030
Rp1031
(dp1032
g16
I0
sg53
Nsg798
g801
sg807
(lp1033
(g980
I2
tp1034
asg14
S'auto_14819'
p1035
sg17
g0
(g18
g5
Ntp1036
Rp1037
(dp1038
g22
(lp1039
(lp1040
(g25
I306
g26
S'nade_train( * args[1:] )'
p1041
tp1042
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p1043
tp1044
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p1045
tp1046
a(g37
I36
g38
S'self.recompile()'
p1047
tp1048
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p1049
tp1050
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p1051
tp1052
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p1053
tp1054
aasbsg85
g0
(g809
g5
Ntp1055
Rp1056
(dp1057
g552
(lp1058
g0
(g563
g5
Ntp1059
Rp1060
(dp1061
g16
I0
sg53
Nsg798
g801
sg807
(lp1062
(g1056
I0
tp1063
asg14
S'auto_15860'
p1064
sg17
g0
(g18
g5
Ntp1065
Rp1066
(dp1067
g22
(lp1068
(lp1069
(g25
I306
g26
S'nade_train( * args[1:] )'
p1070
tp1071
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p1072
tp1073
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p1074
tp1075
a(g37
I36
g38
S'self.recompile()'
p1076
tp1077
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p1078
tp1079
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p1080
tp1081
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p1082
tp1083
aasbsg85
g0
(g809
g5
Ntp1084
Rp1085
(dp1086
g552
(lp1087
g0
(g563
g5
Ntp1088
Rp1089
(dp1090
g16
I0
sg53
Nsg798
g801
sg807
(lp1091
(g0
(g809
g5
Ntp1092
Rp1093
(dp1094
g552
(lp1095
g1089
ag0
(g563
g5
Ntp1096
Rp1097
(dp1098
g16
I0
sg53
Nsg798
g801
sg807
(lp1099
(g1093
I1
tp1100
asg14
S'auto_14765'
p1101
sg17
g0
(g18
g5
Ntp1102
Rp1103
(dp1104
g22
(lp1105
(lp1106
(g25
I306
g26
S'nade_train( * args[1:] )'
p1107
tp1108
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p1109
tp1110
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p1111
tp1112
a(g37
I36
g38
S'self.recompile()'
p1113
tp1114
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p1115
tp1116
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p1117
tp1118
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p1119
tp1120
aasbsg85
g0
(g809
g5
Ntp1121
Rp1122
(dp1123
g552
(lp1124
g0
(g563
g5
Ntp1125
Rp1126
(dp1127
g16
I0
sg53
Nsg798
g801
sg807
(lp1128
(g1122
I0
tp1129
asg14
S'auto_14741'
p1130
sg17
g0
(g18
g5
Ntp1131
Rp1132
(dp1133
g22
(lp1134
(lp1135
(g25
I306
g26
S'nade_train( * args[1:] )'
p1136
tp1137
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p1138
tp1139
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p1140
tp1141
a(g37
I36
g38
S'self.recompile()'
p1142
tp1143
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p1144
tp1145
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p1146
tp1147
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p1148
tp1149
aasbsg85
g0
(g809
g5
Ntp1150
Rp1151
(dp1152
g552
(lp1153
g0
(g10
g5
Ntp1154
Rp1155
(dp1156
g16
Nsg48
g185
sg53
g162
sg798
g801
sg807
(lp1157
(g1151
I0
tp1158
a(g0
(g809
g5
Ntp1159
Rp1160
(dp1161
g552
(lp1162
g1155
asg798
g801
sg814
(lp1163
g0
(g563
g5
Ntp1164
Rp1165
(dp1166
g16
I0
sg53
Nsg798
g801
sg807
(lp1167
(g0
(g809
g5
Ntp1168
Rp1169
(dp1170
g552
(lp1171
g0
(g563
g5
Ntp1172
Rp1173
(dp1174
g16
I0
sg53
Nsg798
g801
sg807
(lp1175
(g0
(g809
g5
Ntp1176
Rp1177
(dp1178
g552
(lp1179
g1173
ag0
(g563
g5
Ntp1180
Rp1181
(dp1182
g16
I0
sg53
Nsg798
g801
sg807
(lp1183
(g1177
I1
tp1184
a(g0
(g809
g5
Ntp1185
Rp1186
(dp1187
g552
(lp1188
g0
(g563
g5
Ntp1189
Rp1190
(dp1191
g16
I0
sg53
Nsg798
g801
sg807
(lp1192
(g1177
I2
tp1193
a(g1186
I0
tp1194
asg14
S'auto_15238'
p1195
sg17
g0
(g18
g5
Ntp1196
Rp1197
(dp1198
g22
(lp1199
sbsg85
g0
(g809
g5
Ntp1200
Rp1201
(dp1202
g552
(lp1203
g0
(g10
g5
Ntp1204
Rp1205
(dp1206
g16
Nsg48
g708
sg53
g462
sg798
g801
sg807
(lp1207
(g0
(g809
g5
Ntp1208
Rp1209
(dp1210
g552
(lp1211
g1205
asg798
g801
sg814
(lp1212
g0
(g563
g5
Ntp1213
Rp1214
(dp1215
g16
I0
sg53
Nsg798
g801
sg807
(lp1216
(g0
(g809
g5
Ntp1217
Rp1218
(dp1219
g552
(lp1220
g1214
ag0
(g563
g5
Ntp1221
Rp1222
(dp1223
g16
I0
sg53
Nsg798
g801
sg807
(lp1224
(g1218
I1
tp1225
asg14
S'auto_14806'
p1226
sg17
g0
(g18
g5
Ntp1227
Rp1228
(dp1229
g22
(lp1230
(lp1231
(g25
I306
g26
S'nade_train( * args[1:] )'
p1232
tp1233
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p1234
tp1235
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p1236
tp1237
a(g37
I36
g38
S'self.recompile()'
p1238
tp1239
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p1240
tp1241
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p1242
tp1243
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p1244
tp1245
aasbsg85
g0
(g809
g5
Ntp1246
Rp1247
(dp1248
g552
(lp1249
g0
(g563
g5
Ntp1250
Rp1251
(dp1252
g16
I0
sg53
Nsg798
g801
sg807
(lp1253
(g1247
I0
tp1254
asg14
S'auto_15237'
p1255
sg17
g0
(g18
g5
Ntp1256
Rp1257
(dp1258
g22
(lp1259
sbsg85
g0
(g809
g5
Ntp1260
Rp1261
(dp1262
g552
(lp1263
g1205
asg798
g801
sg814
(lp1264
g1251
asg17
g0
(g18
g5
Ntp1265
Rp1266
(dp1267
S'imported_by'
p1268
(lp1269
S'local_shape_to_shape_i'
p1270
aS'init'
p1271
asbsS'deps'
p1272
(dp1273
sS'op'
p1274
g0
(ctheano.compile.ops
Shape_i
p1275
g5
Ntp1276
Rp1277
(dp1278
S'i'
p1279
I1
sbsbsg73
g0
(g74
g5
Ntp1280
Rp1281
(dp1282
g78
(tsg80
S'int64'
p1283
sg82
g63
(S'i8'
p1284
I0
I1
tp1285
Rp1286
(I3
S'<'
p1287
NNNI-1
I-1
I0
tp1288
bsg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp1289
Rp1290
(dp1291
g16
I0
sg53
Nsg798
g801
sg807
(lp1292
(g1247
I1
tp1293
asg14
S'auto_16733'
p1294
sg17
g0
(g18
g5
Ntp1295
Rp1296
(dp1297
g22
(lp1298
sbsg85
g1186
sg73
g0
(g74
g5
Ntp1299
Rp1300
(dp1301
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp1302
g1222
asg17
g0
(g18
g5
Ntp1303
Rp1304
(dp1305
g1268
(lp1306
g1271
ag1271
asbsg1272
(dp1307
sg1274
g0
(ctheano.tensor.opt
MakeVector
p1308
g5
Ntp1309
Rp1310
(dp1311
g80
S'int64'
p1312
sbsbsg73
g0
(g74
g5
Ntp1313
Rp1314
(dp1315
g78
(I00
tp1316
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp1317
g0
(g563
g5
Ntp1318
Rp1319
(dp1320
g16
I0
sg53
Nsg798
g801
sg807
(lp1321
(g1085
I1
tp1322
asg14
S'auto_14807'
p1323
sg17
g0
(g18
g5
Ntp1324
Rp1325
(dp1326
g22
(lp1327
(lp1328
(g25
I306
g26
S'nade_train( * args[1:] )'
p1329
tp1330
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p1331
tp1332
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p1333
tp1334
a(g37
I36
g38
S'self.recompile()'
p1335
tp1336
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p1337
tp1338
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p1339
tp1340
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p1341
tp1342
aasbsg85
g1218
sg73
g0
(g74
g5
Ntp1343
Rp1344
(dp1345
g78
(I00
I00
tp1346
sg80
g721
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp1347
Rp1348
(dp1349
g1268
(lp1350
g1271
ag1271
asbsg1272
(dp1351
sg1274
g0
(ctheano.tensor.basic
Reshape
p1352
g5
Ntp1353
Rp1354
(dp1355
S'ndim'
p1356
I2
sbsbI0
tp1357
asg14
S'auto_14783'
p1358
sg17
g0
(g18
g5
Ntp1359
Rp1360
(dp1361
g22
(lp1362
(lp1363
(g25
I306
g26
S'nade_train( * args[1:] )'
p1364
tp1365
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p1366
tp1367
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p1368
tp1369
a(g37
I36
g38
S'self.recompile()'
p1370
tp1371
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p1372
tp1373
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p1374
tp1375
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p1376
tp1377
aasbsg85
g1209
sg73
g0
(g74
g5
Ntp1378
Rp1379
(dp1380
g78
(I00
I00
I00
tp1381
sg80
g721
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp1382
Rp1383
(dp1384
g1268
(lp1385
g1271
ag1271
asbsg1272
(dp1386
sg1274
g0
(ctheano.tensor.elemwise
DimShuffle
p1387
g5
Ntp1388
Rp1389
(dp1390
S'drop'
p1391
(lp1392
sS'shuffle'
p1393
(lp1394
I1
aI0
aI2
asS'augment'
p1395
(lp1396
sS'func_name'
p1397
S'APPLY_SPECIFIC(cpu_dimshuffle)'
p1398
sS'input_broadcastable'
p1399
(I00
I00
I00
tp1400
sS'func_files'
p1401
(lp1402
S'c_code/dimshuffle.c'
p1403
asS'inplace'
p1404
I01
sS'new_order'
p1405
(I1
I0
I2
tp1406
sS'code_sections'
p1407
(dp1408
S'support_code_apply'
p1409
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1410
ssS'view_map'
p1411
(dp1412
I0
(lp1413
I0
assS'func_codes'
p1414
(lp1415
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1416
asbsbI0
tp1417
a(g1201
I0
tp1418
a(g0
(g809
g5
Ntp1419
Rp1420
(dp1421
g552
(lp1422
g1205
asg798
g801
sg814
(lp1423
g1181
asg17
g0
(g18
g5
Ntp1424
Rp1425
(dp1426
g1268
(lp1427
g1270
ag1271
asbsg1272
(dp1428
sg1274
g0
(g1275
g5
Ntp1429
Rp1430
(dp1431
g1279
I0
sbsbI0
tp1432
a(g1261
I0
tp1433
asg14
S'auto_14657'
p1434
sg17
g0
(g18
g5
Ntp1435
Rp1436
(dp1437
g22
g729
sbsg85
Nsg73
g718
sbasg798
g801
sg814
(lp1438
g1190
asg17
g0
(g18
g5
Ntp1439
Rp1440
(dp1441
g1268
(lp1442
g1270
ag1271
asbsg1272
(dp1443
sg1274
g0
(g1275
g5
Ntp1444
Rp1445
(dp1446
g1279
I2
sbsbsg73
g1281
sbag1181
asg798
g801
sg814
(lp1447
g1290
asg17
g0
(g18
g5
Ntp1448
Rp1449
(dp1450
S'fake_node'
p1451
g0
(g809
g5
Ntp1452
Rp1453
(dp1454
g552
(lp1455
g0
(ctheano.scalar.basic
ScalarVariable
p1456
g5
Ntp1457
Rp1458
(dp1459
g14
S'auto_17004'
p1460
sg16
Nsg17
g0
(g18
g5
Ntp1461
Rp1462
sg53
Nsg85
Nsg73
g0
(ctheano.scalar.basic
Scalar
p1463
g5
Ntp1464
Rp1465
(dp1466
g80
g1283
sbsbag0
(g1456
g5
Ntp1467
Rp1468
(dp1469
g14
S'auto_17005'
p1470
sg16
Nsg17
g0
(g18
g5
Ntp1471
Rp1472
sg53
Nsg85
Nsg73
g1465
sbasg17
g0
(g18
g5
Ntp1473
Rp1474
sg814
(lp1475
g0
(g1456
g5
Ntp1476
Rp1477
(dp1478
g14
S'auto_17006'
p1479
sg16
I0
sg17
g0
(g18
g5
Ntp1480
Rp1481
sg53
Nsg85
g1453
sg73
g1465
sbasg1274
g0
(ctheano.scalar.basic
Mul
p1482
g5
Ntp1483
Rp1484
(dp1485
g327
g0
(ctheano.scalar.basic
transfer_type
p1486
g5
Ntp1487
Rp1488
(dp1489
S'transfer'
p1490
(I0
tp1491
sbsg53
Nsbsbsg1268
(lp1492
S'inplace_elemwise_optimizer'
p1493
ag1271
asbsg1272
(dp1494
sg1274
g0
(g318
g5
Ntp1495
Rp1496
(dp1497
g53
Nsg322
g1484
sg330
(dp1498
I0
(lp1499
I0
assg332
(S'multiply'
p1500
I2
I1
tp1501
sg333
g0
(g334
g5
Ntp1502
Rp1503
(dp1504
g338
I3713080549408328131
sg339
(dp1505
I0
I0
ssbsg341
I00
sbsbI1
tp1506
asg14
S'auto_15236'
p1507
sg17
g0
(g18
g5
Ntp1508
Rp1509
(dp1510
g22
(lp1511
sbsg85
g1420
sg73
g1281
sbag1190
asg798
g801
sg814
(lp1512
g0
(g563
g5
Ntp1513
Rp1514
(dp1515
g16
I0
sg53
Nsg798
g801
sg807
(lp1516
(g1056
I1
tp1517
asg14
S'auto_15755'
p1518
sg17
g0
(g18
g5
Ntp1519
Rp1520
(dp1521
g22
(lp1522
(lp1523
(g25
I306
g26
S'nade_train( * args[1:] )'
p1524
tp1525
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p1526
tp1527
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p1528
tp1529
a(g37
I36
g38
S'self.recompile()'
p1530
tp1531
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p1532
tp1533
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p1534
tp1535
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p1536
tp1537
aag1523
asbsg85
g1177
sg73
g0
(g74
g5
Ntp1538
Rp1539
(dp1540
g78
(I00
tp1541
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp1542
Rp1543
(dp1544
g1268
(lp1545
S'local_join_make_vector'
p1546
ag1271
asbsg1272
(dp1547
sg1274
g0
(g1308
g5
Ntp1548
Rp1549
(dp1550
g80
g1283
sbsbI0
tp1551
a(g0
(g809
g5
Ntp1552
Rp1553
(dp1554
g552
(lp1555
g1173
ag0
(g563
g5
Ntp1556
Rp1557
(dp1558
g16
I0
sg53
Nsg798
g801
sg807
(lp1559
(g1553
I1
tp1560
a(g0
(g809
g5
Ntp1561
Rp1562
(dp1563
g552
(lp1564
g0
(g563
g5
Ntp1565
Rp1566
(dp1567
g16
I0
sg53
Nsg798
g801
sg807
(lp1568
(g1553
I2
tp1569
a(g1562
I0
tp1570
asg14
S'auto_14850'
p1571
sg17
g0
(g18
g5
Ntp1572
Rp1573
(dp1574
g22
(lp1575
sbsg85
g0
(g809
g5
Ntp1576
Rp1577
(dp1578
g552
(lp1579
g0
(g10
g5
Ntp1580
Rp1581
(dp1582
g16
Nsg48
g111
sg53
g88
sg798
g801
sg807
(lp1583
(g0
(g809
g5
Ntp1584
Rp1585
(dp1586
g552
(lp1587
g1581
asg798
g801
sg814
(lp1588
g0
(g563
g5
Ntp1589
Rp1590
(dp1591
g16
I0
sg53
Nsg798
g801
sg807
(lp1592
(g0
(g809
g5
Ntp1593
Rp1594
(dp1595
g552
(lp1596
g1590
ag0
(g563
g5
Ntp1597
Rp1598
(dp1599
g16
I0
sg53
Nsg798
g801
sg807
(lp1600
(g1594
I1
tp1601
asg14
S'auto_14718'
p1602
sg17
g0
(g18
g5
Ntp1603
Rp1604
(dp1605
g22
(lp1606
(lp1607
(g25
I306
g26
S'nade_train( * args[1:] )'
p1608
tp1609
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p1610
tp1611
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p1612
tp1613
a(g37
I36
g38
S'self.recompile()'
p1614
tp1615
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p1616
tp1617
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p1618
tp1619
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p1620
tp1621
aasbsg85
g0
(g809
g5
Ntp1622
Rp1623
(dp1624
g552
(lp1625
g0
(g563
g5
Ntp1626
Rp1627
(dp1628
g16
I0
sg53
Nsg798
g801
sg807
(lp1629
(g1623
I0
tp1630
asg14
S'auto_14849'
p1631
sg17
g0
(g18
g5
Ntp1632
Rp1633
(dp1634
g22
(lp1635
sbsg85
g0
(g809
g5
Ntp1636
Rp1637
(dp1638
g552
(lp1639
g1581
asg798
g801
sg814
(lp1640
g1627
asg17
g0
(g18
g5
Ntp1641
Rp1642
(dp1643
g1268
(lp1644
g1270
ag1271
asbsg1272
(dp1645
sg1274
g0
(g1275
g5
Ntp1646
Rp1647
(dp1648
g1279
I1
sbsbsg73
g1281
sbag0
(g563
g5
Ntp1649
Rp1650
(dp1651
g16
I0
sg53
Nsg798
g801
sg807
(lp1652
(g1623
I1
tp1653
asg14
S'auto_16717'
p1654
sg17
g0
(g18
g5
Ntp1655
Rp1656
(dp1657
g22
(lp1658
sbsg85
g1562
sg73
g0
(g74
g5
Ntp1659
Rp1660
(dp1661
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp1662
g1598
asg17
g0
(g18
g5
Ntp1663
Rp1664
(dp1665
g1268
(lp1666
g1271
ag1271
asbsg1272
(dp1667
sg1274
g0
(g1308
g5
Ntp1668
Rp1669
(dp1670
g80
S'int64'
p1671
sbsbsg73
g0
(g74
g5
Ntp1672
Rp1673
(dp1674
g78
(I00
tp1675
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp1676
g0
(g563
g5
Ntp1677
Rp1678
(dp1679
g16
I0
sg53
Nsg798
g801
sg807
(lp1680
(g0
(g809
g5
Ntp1681
Rp1682
(dp1683
g552
(lp1684
g1089
ag1678
asg798
g801
sg814
(lp1685
g0
(g563
g5
Ntp1686
Rp1687
(dp1688
g16
I0
sg53
Nsg798
g801
sg807
(lp1689
(g0
(g809
g5
Ntp1690
Rp1691
(dp1692
g552
(lp1693
g1687
ag0
(g563
g5
Ntp1694
Rp1695
(dp1696
g16
I0
sg53
Nsg798
g801
sg807
(lp1697
(g1691
I1
tp1698
asg14
S'auto_15773'
p1699
sg17
g0
(g18
g5
Ntp1700
Rp1701
(dp1702
g22
(lp1703
(lp1704
(g25
I306
g26
S'nade_train( * args[1:] )'
p1705
tp1706
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p1707
tp1708
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p1709
tp1710
a(g37
I36
g38
S'self.recompile()'
p1711
tp1712
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p1713
tp1714
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p1715
tp1716
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p1717
tp1718
aag1704
asbsg85
g1553
sg73
g0
(g74
g5
Ntp1719
Rp1720
(dp1721
g78
(I00
tp1722
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp1723
g0
(g563
g5
Ntp1724
Rp1725
(dp1726
g16
I0
sg53
Nsg798
g801
sg807
(lp1727
(g0
(g809
g5
Ntp1728
Rp1729
(dp1730
g552
(lp1731
g1725
ag0
(g563
g5
Ntp1732
Rp1733
(dp1734
g16
I0
sg53
Nsg798
g801
sg807
(lp1735
(g1729
I1
tp1736
asg14
S'auto_14672'
p1737
sg17
g0
(g18
g5
Ntp1738
Rp1739
(dp1740
g22
(lp1741
(lp1742
(g25
I306
g26
S'nade_train( * args[1:] )'
p1743
tp1744
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p1745
tp1746
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p1747
tp1748
a(g37
I36
g38
S'self.recompile()'
p1749
tp1750
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p1751
tp1752
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p1753
tp1754
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p1755
tp1756
aasbsg85
g0
(g809
g5
Ntp1757
Rp1758
(dp1759
g552
(lp1760
g0
(g10
g5
Ntp1761
Rp1762
(dp1763
g16
Nsg48
g759
sg53
g418
sg798
g801
sg807
(lp1764
(g1758
I0
tp1765
asg14
S'auto_14662'
p1766
sg17
g0
(g18
g5
Ntp1767
Rp1768
(dp1769
g22
g780
sbsg85
Nsg73
g769
sbasg798
g801
sg814
(lp1770
g1733
asg17
g0
(g18
g5
Ntp1771
Rp1772
(dp1773
g1268
(lp1774
g1271
ag1271
asbsg1272
(dp1775
sg1274
g0
(g1387
g5
Ntp1776
Rp1777
(dp1778
g1391
(lp1779
sg1393
(lp1780
I0
aI1
asg1395
(lp1781
I0
asg1397
g1398
sg1399
g771
sg1401
(lp1782
g1403
asg1404
I01
sg1405
(g270
I0
I1
tp1783
sg1407
(dp1784
S'support_code_apply'
p1785
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1786
ssg1411
(dp1787
I0
(lp1788
I0
assg1414
(lp1789
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1790
asbsbsg73
g0
(g74
g5
Ntp1791
Rp1792
(dp1793
g78
(I01
I00
I00
tp1794
sg80
g772
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp1795
g0
(g563
g5
Ntp1796
Rp1797
(dp1798
g16
I0
sg53
Nsg798
g801
sg807
(lp1799
(g0
(g809
g5
Ntp1800
Rp1801
(dp1802
g552
(lp1803
g1797
asg798
g801
sg814
(lp1804
g0
(g563
g5
Ntp1805
Rp1806
(dp1807
g16
I0
sg53
Nsg798
g801
sg807
(lp1808
(g0
(g809
g5
Ntp1809
Rp1810
(dp1811
g552
(lp1812
g1806
asg798
g801
sg814
(lp1813
g0
(g563
g5
Ntp1814
Rp1815
(dp1816
g16
I0
sg53
Nsg798
g801
sg807
(lp1817
(g980
I7
tp1818
asg14
S'auto_14735'
p1819
sg17
g0
(g18
g5
Ntp1820
Rp1821
(dp1822
g22
(lp1823
(lp1824
(g25
I306
g26
S'nade_train( * args[1:] )'
p1825
tp1826
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p1827
tp1828
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p1829
tp1830
a(g37
I36
g38
S'self.recompile()'
p1831
tp1832
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p1833
tp1834
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p1835
tp1836
a(g874
I222
g875
S'Alpha = temp / T.shape_padright(temp.sum(2))  # BxDxC'
p1837
tp1838
aasbsg85
g1810
sg73
g0
(g74
g5
Ntp1839
Rp1840
(dp1841
g78
(I00
I00
I01
tp1842
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp1843
Rp1844
(dp1845
g1268
(lp1846
g1271
ag1271
asbsg1272
(dp1847
sg1274
g0
(g1387
g5
Ntp1848
Rp1849
(dp1850
g1391
(lp1851
sg1393
(lp1852
I0
aI1
asg1395
(lp1853
I2
asg1397
g1398
sg1399
(I00
I00
tp1854
sg1401
(lp1855
g1403
asg1404
I01
sg1405
(I0
I1
g270
tp1856
sg1407
(dp1857
S'support_code_apply'
p1858
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1859
ssg1411
(dp1860
I0
(lp1861
I0
assg1414
(lp1862
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1863
asbsbI0
tp1864
asg14
S'auto_14734'
p1865
sg17
g0
(g18
g5
Ntp1866
Rp1867
(dp1868
g22
(lp1869
(lp1870
(g25
I306
g26
S'nade_train( * args[1:] )'
p1871
tp1872
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p1873
tp1874
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p1875
tp1876
a(g37
I36
g38
S'self.recompile()'
p1877
tp1878
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p1879
tp1880
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p1881
tp1882
a(g874
I222
g875
S'Alpha = temp / T.shape_padright(temp.sum(2))  # BxDxC'
p1883
tp1884
aasbsg85
g1801
sg73
g0
(g74
g5
Ntp1885
Rp1886
(dp1887
g78
g1854
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp1888
Rp1889
(dp1890
g1268
(lp1891
g1271
ag1271
asbsg1272
(dp1892
sg1274
g0
(ctheano.tensor.elemwise
Sum
p1893
g5
Ntp1894
Rp1895
(dp1896
g80
g251
sg322
g0
(ctheano.scalar.basic
Add
p1897
g5
Ntp1898
Rp1899
(dp1900
g327
ctheano.scalar.basic
upcast_out
p1901
sg53
S'add'
p1902
sbsS'axis'
p1903
(I2
tp1904
sS'acc_dtype'
p1905
g251
sbsbI0
tp1906
a(g980
I6
tp1907
asg14
S'auto_16729'
p1908
sg17
g0
(g18
g5
Ntp1909
Rp1910
(dp1911
g22
(lp1912
sbsg85
g1729
sg73
g0
(g74
g5
Ntp1913
Rp1914
(dp1915
g78
(I00
I00
I00
tp1916
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp1917
Rp1918
(dp1919
g1451
g0
(g809
g5
Ntp1920
Rp1921
(dp1922
g552
(lp1923
g0
(g1456
g5
Ntp1924
Rp1925
(dp1926
g14
S'auto_17140'
p1927
sg16
Nsg17
g0
(g18
g5
Ntp1928
Rp1929
sg53
Nsg85
Nsg73
g0
(g1463
g5
Ntp1930
Rp1931
(dp1932
g80
g251
sbsbag0
(g1456
g5
Ntp1933
Rp1934
(dp1935
g14
S'auto_17141'
p1936
sg16
Nsg17
g0
(g18
g5
Ntp1937
Rp1938
sg53
Nsg85
Nsg73
g1931
sbasg17
g0
(g18
g5
Ntp1939
Rp1940
sg814
(lp1941
g0
(g1456
g5
Ntp1942
Rp1943
(dp1944
g14
S'auto_17142'
p1945
sg16
I0
sg17
g0
(g18
g5
Ntp1946
Rp1947
sg53
Nsg85
g1921
sg73
g1931
sbasg1274
g0
(ctheano.scalar.basic
Composite
p1948
g5
Ntp1949
Rp1950
(dp1951
g552
(lp1952
g0
(g1456
g5
Ntp1953
Rp1954
(dp1955
g14
S'auto_16718'
p1956
sg16
Nsg17
g0
(g18
g5
Ntp1957
Rp1958
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp1959
Rp1960
(dp1961
g14
S'auto_16719'
p1962
sg16
Nsg17
g0
(g18
g5
Ntp1963
Rp1964
sg53
Nsg85
Nsg73
g1931
sbasS'nin'
p1965
I2
sg53
NsS'inputs_type'
p1966
(g1931
g1931
tp1967
sg814
(lp1968
g0
(g1456
g5
Ntp1969
Rp1970
(dp1971
g14
S'auto_16721'
p1972
sg16
I0
sg17
g0
(g18
g5
Ntp1973
Rp1974
(dp1975
g22
(lp1976
sbsg53
Nsg85
g0
(g809
g5
Ntp1977
Rp1978
(dp1979
g552
(lp1980
g0
(g1456
g5
Ntp1981
Rp1982
(dp1983
g14
S'auto_16720'
p1984
sg16
I0
sg17
g0
(g18
g5
Ntp1985
Rp1986
(dp1987
g22
(lp1988
sbsg53
Nsg85
g0
(g809
g5
Ntp1989
Rp1990
(dp1991
g552
(lp1992
g1954
ag1960
asg17
g0
(g18
g5
Ntp1993
Rp1994
sg814
(lp1995
g1982
asg1274
g1899
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp1996
Rp1997
sg814
(lp1998
g1970
asg1274
g383
sbsg73
g1931
sbasS'_c_code'
p1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = exp((npy_float64)V%(id)s_tmp1);\n}\n'
p2000
sS'outputs_type'
p2001
(g1931
tp2002
sg327
g0
(g1486
g5
Ntp2003
Rp2004
(dp2005
g1490
(I0
tp2006
sbsS'nodenames'
p2007
(lp2008
S'%(nodename)s_subnode0'
p2009
aS'%(nodename)s_subnode1'
p2010
asS'nout'
p2011
I1
sbsbsg1268
(lp2012
g1493
ag1271
asbsg1272
(dp2013
sg1274
g0
(g318
g5
Ntp2014
Rp2015
(dp2016
g53
Nsg322
g1950
sg330
(dp2017
I0
(lp2018
I0
assg332
Nsg333
g0
(g334
g5
Ntp2019
Rp2020
(dp2021
g338
I3713080549408328131
sg339
(dp2022
I0
I0
ssbsg341
I00
sbsbI0
tp2023
asg14
S'auto_14731'
p2024
sg17
g0
(g18
g5
Ntp2025
Rp2026
(dp2027
g22
(lp2028
(lp2029
(g25
I306
g26
S'nade_train( * args[1:] )'
p2030
tp2031
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p2032
tp2033
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p2034
tp2035
a(g37
I36
g38
S'self.recompile()'
p2036
tp2037
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p2038
tp2039
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p2040
tp2041
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p2042
tp2043
aasbsg85
g1691
sg73
g0
(g74
g5
Ntp2044
Rp2045
(dp2046
g78
(I00
I00
I00
tp2047
sg80
S'float64'
p2048
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp2049
Rp2050
(dp2051
g1268
(lp2052
g1271
ag1271
asbsg1272
(dp2053
sg1274
g0
(g1352
g5
Ntp2054
Rp2055
(dp2056
g1356
I3
sbsbI0
tp2057
asg14
S'auto_15859'
p2058
sg17
g0
(g18
g5
Ntp2059
Rp2060
(dp2061
g22
(lp2062
(lp2063
(g25
I306
g26
S'nade_train( * args[1:] )'
p2064
tp2065
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p2066
tp2067
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p2068
tp2069
a(g37
I36
g38
S'self.recompile()'
p2070
tp2071
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p2072
tp2073
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p2074
tp2075
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p2076
tp2077
aasbsg85
g1682
sg73
g0
(g74
g5
Ntp2078
Rp2079
(dp2080
g78
(I00
I00
tp2081
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp2082
Rp2083
(dp2084
g1268
(lp2085
S'local_dot_to_dot22'
p2086
ag1271
asbsg1272
(dp2087
sg1274
g0
(ctheano.tensor.blas
Dot22
p2088
g5
Ntp2089
Rp2090
sbI1
tp2091
asg14
S'auto_14719'
p2092
sg17
g0
(g18
g5
Ntp2093
Rp2094
(dp2095
g22
(lp2096
(lp2097
(g25
I306
g26
S'nade_train( * args[1:] )'
p2098
tp2099
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p2100
tp2101
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p2102
tp2103
a(g37
I36
g38
S'self.recompile()'
p2104
tp2105
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p2106
tp2107
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p2108
tp2109
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p2110
tp2111
aasbsg85
g1594
sg73
g0
(g74
g5
Ntp2112
Rp2113
(dp2114
g78
(I00
I00
tp2115
sg80
g124
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp2116
Rp2117
(dp2118
g1268
(lp2119
g1271
ag1271
asbsg1272
(dp2120
sg1274
g0
(g1352
g5
Ntp2121
Rp2122
(dp2123
g1356
I2
sbsbI0
tp2124
asg14
S'auto_14673'
p2125
sg17
g0
(g18
g5
Ntp2126
Rp2127
(dp2128
g22
(lp2129
(lp2130
(g25
I306
g26
S'nade_train( * args[1:] )'
p2131
tp2132
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p2133
tp2134
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p2135
tp2136
a(g37
I36
g38
S'self.recompile()'
p2137
tp2138
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p2139
tp2140
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p2141
tp2142
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p2143
tp2144
aasbsg85
g1585
sg73
g0
(g74
g5
Ntp2145
Rp2146
(dp2147
g78
(I00
I00
I00
tp2148
sg80
g124
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp2149
Rp2150
(dp2151
g1268
(lp2152
g1271
ag1271
asbsg1272
(dp2153
sg1274
g0
(g1387
g5
Ntp2154
Rp2155
(dp2156
g1391
(lp2157
sg1393
(lp2158
I1
aI0
aI2
asg1395
(lp2159
sg1397
g1398
sg1399
(I00
I00
I00
tp2160
sg1401
(lp2161
g1403
asg1404
I01
sg1405
(I1
I0
I2
tp2162
sg1407
(dp2163
S'support_code_apply'
p2164
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p2165
ssg1411
(dp2166
I0
(lp2167
I0
assg1414
(lp2168
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p2169
asbsbI0
tp2170
a(g1577
I0
tp2171
a(g0
(g809
g5
Ntp2172
Rp2173
(dp2174
g552
(lp2175
g1581
asg798
g801
sg814
(lp2176
g1557
asg17
g0
(g18
g5
Ntp2177
Rp2178
(dp2179
g1268
(lp2180
g1270
ag1271
asbsg1272
(dp2181
sg1274
g0
(g1275
g5
Ntp2182
Rp2183
(dp2184
g1279
I0
sbsbI0
tp2185
a(g1637
I0
tp2186
asg14
S'auto_14661'
p2187
sg17
g0
(g18
g5
Ntp2188
Rp2189
(dp2190
g22
g96
sbsg85
Nsg73
g121
sbasg798
g801
sg814
(lp2191
g1566
asg17
g0
(g18
g5
Ntp2192
Rp2193
(dp2194
g1268
(lp2195
g1270
ag1271
asbsg1272
(dp2196
sg1274
g0
(g1275
g5
Ntp2197
Rp2198
(dp2199
g1279
I2
sbsbsg73
g1281
sbag1557
asg798
g801
sg814
(lp2200
g1650
asg17
g0
(g18
g5
Ntp2201
Rp2202
(dp2203
g1451
g0
(g809
g5
Ntp2204
Rp2205
(dp2206
g552
(lp2207
g0
(g1456
g5
Ntp2208
Rp2209
(dp2210
g14
S'auto_17016'
p2211
sg16
Nsg17
g0
(g18
g5
Ntp2212
Rp2213
sg53
Nsg85
Nsg73
g1465
sbag0
(g1456
g5
Ntp2214
Rp2215
(dp2216
g14
S'auto_17017'
p2217
sg16
Nsg17
g0
(g18
g5
Ntp2218
Rp2219
sg53
Nsg85
Nsg73
g1465
sbasg17
g0
(g18
g5
Ntp2220
Rp2221
sg814
(lp2222
g0
(g1456
g5
Ntp2223
Rp2224
(dp2225
g14
S'auto_17018'
p2226
sg16
I0
sg17
g0
(g18
g5
Ntp2227
Rp2228
sg53
Nsg85
g2205
sg73
g1465
sbasg1274
g0
(g1482
g5
Ntp2229
Rp2230
(dp2231
g327
g0
(g1486
g5
Ntp2232
Rp2233
(dp2234
g1490
(I0
tp2235
sbsg53
Nsbsbsg1268
(lp2236
g1493
ag1271
asbsg1272
(dp2237
sg1274
g0
(g318
g5
Ntp2238
Rp2239
(dp2240
g53
Nsg322
g2230
sg330
(dp2241
I0
(lp2242
I0
assg332
g1501
sg333
g0
(g334
g5
Ntp2243
Rp2244
(dp2245
g338
I3713080549408328131
sg339
(dp2246
I0
I0
ssbsg341
I00
sbsbI1
tp2247
asg14
S'auto_14848'
p2248
sg17
g0
(g18
g5
Ntp2249
Rp2250
(dp2251
g22
(lp2252
sbsg85
g2173
sg73
g1281
sbag1566
asg798
g801
sg814
(lp2253
g1695
asg17
g0
(g18
g5
Ntp2254
Rp2255
(dp2256
g1268
(lp2257
g1546
ag1271
asbsg1272
(dp2258
sg1274
g1549
sbI0
tp2259
a(g1169
I0
tp2260
asg14
S'auto_14879'
p2261
sg17
g0
(g18
g5
Ntp2262
Rp2263
(dp2264
g22
(lp2265
sbsg85
g0
(g809
g5
Ntp2266
Rp2267
(dp2268
g552
(lp2269
g805
asg798
g801
sg814
(lp2270
g1173
asg17
g0
(g18
g5
Ntp2271
Rp2272
(dp2273
g1268
(lp2274
g1270
ag1271
asbsg1272
(dp2275
sg1274
g0
(g1275
g5
Ntp2276
Rp2277
(dp2278
g1279
I1
sbsbsg73
g1281
sbag0
(g563
g5
Ntp2279
Rp2280
(dp2281
g16
I0
sg53
Nsg798
g801
sg807
(lp2282
(g1169
I1
tp2283
a(g0
(g809
g5
Ntp2284
Rp2285
(dp2286
g552
(lp2287
g1165
ag2280
asg798
g801
sg814
(lp2288
g0
(g563
g5
Ntp2289
Rp2290
(dp2291
g16
I0
sg53
Nsg798
g801
sg807
(lp2292
(g0
(g809
g5
Ntp2293
Rp2294
(dp2295
g552
(lp2296
g0
(g563
g5
Ntp2297
Rp2298
(dp2299
g16
I0
sg53
Nsg798
g801
sg807
(lp2300
(g2294
I0
tp2301
asg14
S'auto_15081'
p2302
sg17
g0
(g18
g5
Ntp2303
Rp2304
(dp2305
g22
(lp2306
sbsg85
g0
(g809
g5
Ntp2307
Rp2308
(dp2309
g552
(lp2310
g1155
asg798
g801
sg814
(lp2311
g2298
asg17
g0
(g18
g5
Ntp2312
Rp2313
(dp2314
g1268
(lp2315
g1270
ag1271
asbsg1272
(dp2316
sg1274
g0
(g1275
g5
Ntp2317
Rp2318
(dp2319
g1279
I1
sbsbsg73
g1281
sbag2290
asg798
g801
sg814
(lp2320
g0
(g563
g5
Ntp2321
Rp2322
(dp2323
g16
I0
sg53
Nsg798
g801
sg807
(lp2324
(g1122
I1
tp2325
asg14
S'auto_14764'
p2326
sg17
g0
(g18
g5
Ntp2327
Rp2328
(dp2329
g22
(lp2330
(lp2331
(g25
I306
g26
S'nade_train( * args[1:] )'
p2332
tp2333
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p2334
tp2335
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p2336
tp2337
a(g37
I36
g38
S'self.recompile()'
p2338
tp2339
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p2340
tp2341
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p2342
tp2343
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p2344
tp2345
aasbsg85
g2294
sg73
g0
(g74
g5
Ntp2346
Rp2347
(dp2348
g78
(I00
tp2349
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp2350
Rp2351
(dp2352
g1268
(lp2353
g1271
ag1271
asbsg1272
(dp2354
sg1274
g0
(g1308
g5
Ntp2355
Rp2356
(dp2357
g80
S'int64'
p2358
sbsbI1
tp2359
asg14
S'auto_16656'
p2360
sg17
g0
(g18
g5
Ntp2361
Rp2362
(dp2363
g22
(lp2364
sbsg85
g2285
sg73
g0
(g74
g5
Ntp2365
Rp2366
(dp2367
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp2368
Rp2369
(dp2370
g1451
g0
(g809
g5
Ntp2371
Rp2372
(dp2373
g552
(lp2374
g0
(g1456
g5
Ntp2375
Rp2376
(dp2377
g14
S'auto_17028'
p2378
sg16
Nsg17
g0
(g18
g5
Ntp2379
Rp2380
sg53
Nsg85
Nsg73
g1465
sbag0
(g1456
g5
Ntp2381
Rp2382
(dp2383
g14
S'auto_17029'
p2384
sg16
Nsg17
g0
(g18
g5
Ntp2385
Rp2386
sg53
Nsg85
Nsg73
g1465
sbasg17
g0
(g18
g5
Ntp2387
Rp2388
sg814
(lp2389
g0
(g1456
g5
Ntp2390
Rp2391
(dp2392
g14
S'auto_17030'
p2393
sg16
I0
sg17
g0
(g18
g5
Ntp2394
Rp2395
sg53
Nsg85
g2372
sg73
g1465
sbasg1274
g0
(g1482
g5
Ntp2396
Rp2397
(dp2398
g327
g0
(g1486
g5
Ntp2399
Rp2400
(dp2401
g1490
(I0
tp2402
sbsg53
Nsbsbsg1268
(lp2403
g1493
ag1271
asbsg1272
(dp2404
sg1274
g0
(g318
g5
Ntp2405
Rp2406
(dp2407
g53
Nsg322
g2397
sg330
(dp2408
I0
(lp2409
I0
assg332
g1501
sg333
g0
(g334
g5
Ntp2410
Rp2411
(dp2412
g338
I3713080549408328131
sg339
(dp2413
I0
I0
ssbsg341
I00
sbsbI1
tp2414
asg14
S'auto_15080'
p2415
sg17
g0
(g18
g5
Ntp2416
Rp2417
(dp2418
g22
(lp2419
sbsg85
g0
(g809
g5
Ntp2420
Rp2421
(dp2422
g552
(lp2423
g1155
asg798
g801
sg814
(lp2424
g2280
asg17
g0
(g18
g5
Ntp2425
Rp2426
(dp2427
g1268
(lp2428
g1270
ag1271
asbsg1272
(dp2429
sg1274
g0
(g1275
g5
Ntp2430
Rp2431
(dp2432
g1279
I0
sbsbsg73
g1281
sbag1165
asg798
g801
sg814
(lp2433
g0
(g563
g5
Ntp2434
Rp2435
(dp2436
g16
I0
sg53
Nsg798
g801
sg807
(lp2437
(g0
(g809
g5
Ntp2438
Rp2439
(dp2440
g552
(lp2441
g0
(g563
g5
Ntp2442
Rp2443
(dp2444
g16
I0
sg53
Nsg798
g801
sg807
(lp2445
(g2439
I0
tp2446
asg14
S'auto_15858'
p2447
sg17
g0
(g18
g5
Ntp2448
Rp2449
(dp2450
g22
(lp2451
(lp2452
(g25
I306
g26
S'nade_train( * args[1:] )'
p2453
tp2454
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p2455
tp2456
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p2457
tp2458
a(g37
I36
g38
S'self.recompile()'
p2459
tp2460
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p2461
tp2462
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p2463
tp2464
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p2465
tp2466
aasbsg85
g1093
sg73
g0
(g74
g5
Ntp2467
Rp2468
(dp2469
g78
(I00
I00
tp2470
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag2435
asg798
g801
sg814
(lp2471
g0
(g563
g5
Ntp2472
Rp2473
(dp2474
g16
I0
sg53
Nsg798
g801
sg807
(lp2475
(g0
(g809
g5
Ntp2476
Rp2477
(dp2478
g552
(lp2479
g2473
ag0
(g563
g5
Ntp2480
Rp2481
(dp2482
g16
I0
sg53
Nsg798
g801
sg807
(lp2483
(g2477
I1
tp2484
asg14
S'auto_14740'
p2485
sg17
g0
(g18
g5
Ntp2486
Rp2487
(dp2488
g22
(lp2489
(lp2490
(g25
I306
g26
S'nade_train( * args[1:] )'
p2491
tp2492
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p2493
tp2494
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p2495
tp2496
a(g37
I36
g38
S'self.recompile()'
p2497
tp2498
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p2499
tp2500
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p2501
tp2502
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p2503
tp2504
aasbsg85
g0
(g809
g5
Ntp2505
Rp2506
(dp2507
g552
(lp2508
g0
(g10
g5
Ntp2509
Rp2510
(dp2511
g16
Nsg48
g51
sg53
g9
sg798
g801
sg807
(lp2512
(g2506
I0
tp2513
asg14
S'auto_14660'
p2514
sg17
g0
(g18
g5
Ntp2515
Rp2516
(dp2517
g22
g23
sbsg85
Nsg73
g76
sbasg798
g801
sg814
(lp2518
g2481
asg17
g0
(g18
g5
Ntp2519
Rp2520
(dp2521
g1268
(lp2522
g1271
ag1271
asbsg1272
(dp2523
sg1274
g0
(g1387
g5
Ntp2524
Rp2525
(dp2526
g1391
(lp2527
sg1393
(lp2528
I0
aI1
asg1395
(lp2529
I0
asg1397
g1398
sg1399
g79
sg1401
(lp2530
g1403
asg1404
I01
sg1405
(g270
I0
I1
tp2531
sg1407
(dp2532
S'support_code_apply'
p2533
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p2534
ssg1411
(dp2535
I0
(lp2536
I0
assg1414
(lp2537
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p2538
asbsbsg73
g0
(g74
g5
Ntp2539
Rp2540
(dp2541
g78
(I01
I00
I00
tp2542
sg80
g81
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp2543
g975
asg17
g0
(g18
g5
Ntp2544
Rp2545
(dp2546
g1451
g0
(g809
g5
Ntp2547
Rp2548
(dp2549
g552
(lp2550
g0
(g1456
g5
Ntp2551
Rp2552
(dp2553
g14
S'auto_17152'
p2554
sg16
Nsg17
g0
(g18
g5
Ntp2555
Rp2556
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp2557
Rp2558
(dp2559
g14
S'auto_17153'
p2560
sg16
Nsg17
g0
(g18
g5
Ntp2561
Rp2562
sg53
Nsg85
Nsg73
g1931
sbasg17
g0
(g18
g5
Ntp2563
Rp2564
sg814
(lp2565
g0
(g1456
g5
Ntp2566
Rp2567
(dp2568
g14
S'auto_17154'
p2569
sg16
I0
sg17
g0
(g18
g5
Ntp2570
Rp2571
sg53
Nsg85
g2548
sg73
g1931
sbasg1274
g0
(g1948
g5
Ntp2572
Rp2573
(dp2574
g552
(lp2575
g0
(g1456
g5
Ntp2576
Rp2577
(dp2578
g14
S'auto_16699'
p2579
sg16
Nsg17
g0
(g18
g5
Ntp2580
Rp2581
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp2582
Rp2583
(dp2584
g14
S'auto_16700'
p2585
sg16
Nsg17
g0
(g18
g5
Ntp2586
Rp2587
sg53
Nsg85
Nsg73
g1931
sbasg1965
I2
sg53
Nsg1966
(g1931
g1931
tp2588
sg814
(lp2589
g0
(g1456
g5
Ntp2590
Rp2591
(dp2592
g14
S'auto_16702'
p2593
sg16
I0
sg17
g0
(g18
g5
Ntp2594
Rp2595
(dp2596
g22
(lp2597
sbsg53
Nsg85
g0
(g809
g5
Ntp2598
Rp2599
(dp2600
g552
(lp2601
g0
(g1456
g5
Ntp2602
Rp2603
(dp2604
g14
S'auto_16701'
p2605
sg16
I0
sg17
g0
(g18
g5
Ntp2606
Rp2607
(dp2608
g22
(lp2609
sbsg53
Nsg85
g0
(g809
g5
Ntp2610
Rp2611
(dp2612
g552
(lp2613
g2577
ag2583
asg17
g0
(g18
g5
Ntp2614
Rp2615
sg814
(lp2616
g2603
asg1274
g1899
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp2617
Rp2618
sg814
(lp2619
g2591
asg1274
g383
sbsg73
g1931
sbasg1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = exp((npy_float64)V%(id)s_tmp1);\n}\n'
p2620
sg2001
(g1931
tp2621
sg327
g0
(g1486
g5
Ntp2622
Rp2623
(dp2624
g1490
(I0
tp2625
sbsg2007
(lp2626
S'%(nodename)s_subnode0'
p2627
aS'%(nodename)s_subnode1'
p2628
asg2011
I1
sbsbsg1268
(lp2629
g1493
ag1271
asbsg1272
(dp2630
sg1274
g0
(g318
g5
Ntp2631
Rp2632
(dp2633
g53
Nsg322
g2573
sg330
(dp2634
I0
(lp2635
I0
assg332
Nsg333
g0
(g334
g5
Ntp2636
Rp2637
(dp2638
g338
I3713080549408328131
sg339
(dp2639
I0
I0
ssbsg341
I00
sbsbI0
tp2640
asg14
S'auto_14777'
p2641
sg17
g0
(g18
g5
Ntp2642
Rp2643
(dp2644
g22
(lp2645
(lp2646
(g25
I306
g26
S'nade_train( * args[1:] )'
p2647
tp2648
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p2649
tp2650
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p2651
tp2652
a(g37
I36
g38
S'self.recompile()'
p2653
tp2654
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p2655
tp2656
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p2657
tp2658
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p2659
tp2660
aasbsg85
g2439
sg73
g0
(g74
g5
Ntp2661
Rp2662
(dp2663
g78
(I00
I00
I00
tp2664
sg80
S'float64'
p2665
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp2666
Rp2667
(dp2668
g1268
(lp2669
g1271
ag1271
asbsg1272
(dp2670
sg1274
g0
(g1352
g5
Ntp2671
Rp2672
(dp2673
g1356
I3
sbsbI1
tp2674
asg14
S'auto_15791'
p2675
sg17
g0
(g18
g5
Ntp2676
Rp2677
(dp2678
g22
(lp2679
(lp2680
(g25
I306
g26
S'nade_train( * args[1:] )'
p2681
tp2682
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p2683
tp2684
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p2685
tp2686
a(g37
I36
g38
S'self.recompile()'
p2687
tp2688
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p2689
tp2690
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p2691
tp2692
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p2693
tp2694
aag2680
asbsg85
g1169
sg73
g0
(g74
g5
Ntp2695
Rp2696
(dp2697
g78
(I00
tp2698
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp2699
Rp2700
(dp2701
g1268
(lp2702
g1546
ag1271
asbsg1272
(dp2703
sg1274
g1549
sbI2
tp2704
a(g2285
I0
tp2705
asg14
S'auto_15082'
p2706
sg17
g0
(g18
g5
Ntp2707
Rp2708
(dp2709
g22
(lp2710
sbsg85
g1160
sg73
g1281
sbasg17
g0
(g18
g5
Ntp2711
Rp2712
(dp2713
g1268
(lp2714
g1270
ag1271
asbsg1272
(dp2715
sg1274
g0
(g1275
g5
Ntp2716
Rp2717
(dp2718
g1279
I2
sbsbI0
tp2719
a(g2421
I0
tp2720
a(g2308
I0
tp2721
asg14
S'auto_14659'
p2722
sg17
g0
(g18
g5
Ntp2723
Rp2724
(dp2725
g22
g170
sbsg85
Nsg73
g195
sbasg798
g801
sg814
(lp2726
g1126
asg17
g0
(g18
g5
Ntp2727
Rp2728
(dp2729
g1268
(lp2730
g1271
ag1271
asbsg1272
(dp2731
sg1274
g0
(g1387
g5
Ntp2732
Rp2733
(dp2734
g1391
(lp2735
sg1393
(lp2736
I1
aI0
aI2
asg1395
(lp2737
sg1397
g1398
sg1399
(I00
I00
I00
tp2738
sg1401
(lp2739
g1403
asg1404
I01
sg1405
(I1
I0
I2
tp2740
sg1407
(dp2741
S'support_code_apply'
p2742
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p2743
ssg1411
(dp2744
I0
(lp2745
I0
assg1414
(lp2746
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p2747
asbsbsg73
g0
(g74
g5
Ntp2748
Rp2749
(dp2750
g78
(I00
I00
I00
tp2751
sg80
g198
sg82
g66
sg83
I00
sg53
Nsbsbag2322
asg798
g801
sg814
(lp2752
g1097
asg17
g0
(g18
g5
Ntp2753
Rp2754
(dp2755
g1268
(lp2756
g1271
ag1271
asbsg1272
(dp2757
sg1274
g0
(g1352
g5
Ntp2758
Rp2759
(dp2760
g1356
I2
sbsbsg73
g0
(g74
g5
Ntp2761
Rp2762
(dp2763
g78
(I00
I00
tp2764
sg80
g198
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp2765
g2443
asg17
g0
(g18
g5
Ntp2766
Rp2767
(dp2768
g1268
(lp2769
g2086
ag1271
asbsg1272
(dp2770
sg1274
g2090
sbI0
tp2771
a(g1682
I0
tp2772
a(g1085
I0
tp2773
asg14
S'auto_16698'
p2774
sg17
g0
(g18
g5
Ntp2775
Rp2776
(dp2777
g22
(lp2778
sbsg85
g0
(g809
g5
Ntp2779
Rp2780
(dp2781
g552
(lp2782
g0
(g563
g5
Ntp2783
Rp2784
(dp2785
g16
I0
sg53
Nsg798
g801
sg807
(lp2786
(g2780
I0
tp2787
asg14
S'auto_15857'
p2788
sg17
g0
(g18
g5
Ntp2789
Rp2790
(dp2791
g22
(lp2792
(lp2793
(g25
I306
g26
S'nade_train( * args[1:] )'
p2794
tp2795
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p2796
tp2797
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p2798
tp2799
a(g37
I36
g38
S'self.recompile()'
p2800
tp2801
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p2802
tp2803
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p2804
tp2805
a(g874
I216
g875
S'h = self.nonlinearity(T.dot(h, self.Ws[l]) + self.bs[l])  # BxH'
p2806
tp2807
aasbsg85
g0
(g809
g5
Ntp2808
Rp2809
(dp2810
g552
(lp2811
g0
(g563
g5
Ntp2812
Rp2813
(dp2814
g16
I0
sg53
Nsg798
g801
sg807
(lp2815
(g2809
I0
tp2816
asg14
S'auto_16681'
p2817
sg17
g0
(g18
g5
Ntp2818
Rp2819
(dp2820
g22
(lp2821
sbsg85
g0
(g809
g5
Ntp2822
Rp2823
(dp2824
g552
(lp2825
g0
(g563
g5
Ntp2826
Rp2827
(dp2828
g16
I0
sg53
Nsg798
g801
sg807
(lp2829
(g2823
I0
tp2830
asg14
S'auto_14686'
p2831
sg17
g0
(g18
g5
Ntp2832
Rp2833
(dp2834
g22
(lp2835
(lp2836
(g25
I306
g26
S'nade_train( * args[1:] )'
p2837
tp2838
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p2839
tp2840
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p2841
tp2842
a(g37
I36
g38
S'self.recompile()'
p2843
tp2844
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p2845
tp2846
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p2847
tp2848
a(g874
I214
g875
S'h = self.nonlinearity(T.dot(masked_input, self.W1) + T.dot(mask, self.Wflags) + self.b1)  # BxH'
p2849
tp2850
aasbsg85
g0
(g809
g5
Ntp2851
Rp2852
(dp2853
g552
(lp2854
g0
(g10
g5
Ntp2855
Rp2856
(dp2857
g16
Nsg48
g148
sg53
g125
sg798
g801
sg807
(lp2858
(g2852
I0
tp2859
asg14
S'auto_14654'
p2860
sg17
g0
(g18
g5
Ntp2861
Rp2862
(dp2863
g22
g133
sbsg85
Nsg73
g158
sbasg798
g801
sg814
(lp2864
g2827
asg17
g0
(g18
g5
Ntp2865
Rp2866
(dp2867
g1268
(lp2868
g1271
ag1271
asbsg1272
(dp2869
sg1274
g0
(g1387
g5
Ntp2870
Rp2871
(dp2872
g1391
(lp2873
sg1393
(lp2874
I0
asg1395
(lp2875
I0
asg1397
g1398
sg1399
g160
sg1401
(lp2876
g1403
asg1404
I01
sg1405
(g270
I0
tp2877
sg1407
(dp2878
S'support_code_apply'
p2879
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p2880
ssg1411
(dp2881
I0
(lp2882
I0
assg1414
(lp2883
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p2884
asbsbsg73
g0
(g74
g5
Ntp2885
Rp2886
(dp2887
g78
(I01
I00
tp2888
sg80
g161
sg82
g66
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp2889
Rp2890
(dp2891
g16
I0
sg53
Nsg798
g801
sg807
(lp2892
(g2823
I1
tp2893
asg14
S'auto_16652'
p2894
sg17
g0
(g18
g5
Ntp2895
Rp2896
(dp2897
g22
(lp2898
sbsg85
g0
(g809
g5
Ntp2899
Rp2900
(dp2901
g552
(lp2902
g0
(g563
g5
Ntp2903
Rp2904
(dp2905
g16
I0
sg53
Nsg798
g801
sg807
(lp2906
(g2900
I0
tp2907
asg14
S'auto_15856'
p2908
sg17
g0
(g18
g5
Ntp2909
Rp2910
(dp2911
g22
(lp2912
(lp2913
(g25
I306
g26
S'nade_train( * args[1:] )'
p2914
tp2915
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p2916
tp2917
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p2918
tp2919
a(g37
I36
g38
S'self.recompile()'
p2920
tp2921
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p2922
tp2923
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p2924
tp2925
a(g874
I214
g875
S'h = self.nonlinearity(T.dot(masked_input, self.W1) + T.dot(mask, self.Wflags) + self.b1)  # BxH'
p2926
tp2927
aasbsg85
g0
(g809
g5
Ntp2928
Rp2929
(dp2930
g552
(lp2931
g0
(g563
g5
Ntp2932
Rp2933
(dp2934
g16
I0
sg53
Nsg798
g801
sg807
(lp2935
(g2929
I0
tp2936
asg14
S'auto_14689'
p2937
sg17
g0
(g18
g5
Ntp2938
Rp2939
(dp2940
g22
(lp2941
(lp2942
(g25
I306
g26
S'nade_train( * args[1:] )'
p2943
tp2944
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p2945
tp2946
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p2947
tp2948
a(g37
I36
g38
S'self.recompile()'
p2949
tp2950
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p2951
tp2952
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p2953
tp2954
a(g874
I213
g875
S'masked_input = x * mask  # BxD'
p2955
tp2956
aasbsg85
g822
sg73
g0
(g74
g5
Ntp2957
Rp2958
(dp2959
g78
(I00
I00
tp2960
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag0
(g10
g5
Ntp2961
Rp2962
(dp2963
g16
Nsg48
g621
sg53
g444
sg798
g801
sg807
(lp2964
(g2929
I1
tp2965
asg14
S'auto_14652'
p2966
sg17
g0
(g18
g5
Ntp2967
Rp2968
(dp2969
g22
g642
sbsg85
Nsg73
g631
sbasg798
g801
sg814
(lp2970
g2904
asg17
g0
(g18
g5
Ntp2971
Rp2972
(dp2973
g1268
(lp2974
g2086
ag1271
asbsg1272
(dp2975
sg1274
g2090
sbsg73
g0
(g74
g5
Ntp2976
Rp2977
(dp2978
g78
(I00
I00
tp2979
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp2980
Rp2981
(dp2982
g16
Nsg53
Nsg798
g801
sg73
g0
(g74
g5
Ntp2983
Rp2984
(dp2985
g78
(tsg80
g251
sg82
g66
sg83
I00
sg53
Nsbsg807
(lp2986
(g2900
I1
tp2987
a(g2900
I4
tp2988
asg14
S'auto_16017'
p2989
sg17
g0
(g18
g5
Ntp2990
Rp2991
(dp2992
g22
(lp2993
sg878
Nsbsg883
g56
(g57
(I0
tp2994
g59
tp2995
Rp2996
(I1
(tg66
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p2997
tp2998
bsbag826
ag0
(g10
g5
Ntp2999
Rp3000
(dp3001
g16
Nsg48
g495
sg53
g430
sg798
g801
sg807
(lp3002
(g2900
I3
tp3003
asg14
S'auto_14653'
p3004
sg17
g0
(g18
g5
Ntp3005
Rp3006
(dp3007
g22
g480
sbsg85
Nsg73
g505
sbag2981
asg798
g801
sg814
(lp3008
g2890
asg17
g0
(g18
g5
Ntp3009
Rp3010
(dp3011
g1268
(lp3012
S'LocalOptGroup(local_inplace_gemm,local_inplace_gemv,local_inplace_ger)'
p3013
ag1271
asbsg1272
(dp3014
sg1274
g0
(ctheano.tensor.blas
Gemm
p3015
g5
Ntp3016
Rp3017
(dp3018
g1404
I01
sg330
(dp3019
I0
(lp3020
I0
assbsbsg73
g2977
sbag0
(g843
g5
Ntp3021
Rp3022
(dp3023
g16
Nsg53
Nsg798
g801
sg73
g0
(g74
g5
Ntp3024
Rp3025
(dp3026
g78
(I01
I01
tp3027
sg80
S'int8'
p3028
sg82
g63
(S'i1'
p3029
I0
I1
tp3030
Rp3031
(I3
S'|'
p3032
NNNI-1
I-1
I0
tp3033
bsg83
I00
sg53
Nsbsg807
(lp3034
(g2823
I2
tp3035
a(g2780
I2
tp3036
asg14
S'auto_15644'
p3037
sg17
g0
(g18
g5
Ntp3038
Rp3039
(dp3040
g22
(lp3041
(lp3042
(g25
I306
g26
S'nade_train( * args[1:] )'
p3043
tp3044
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p3045
tp3046
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p3047
tp3048
a(g37
I36
g38
S'self.recompile()'
p3049
tp3050
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p3051
tp3052
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p3053
tp3054
a(g874
I216
g875
S'h = self.nonlinearity(T.dot(h, self.Ws[l]) + self.bs[l])  # BxH'
p3055
tp3056
a(g41
I231
g272
S'"RLU": [lambda x: x * (x > 0), lambda x: x * (x > 0)],'
p3057
tp3058
aasg878
g879
(g3031
S'\x00'
p3059
tp3060
Rp3061
sbsg883
g56
(g57
(I0
tp3062
g59
tp3063
Rp3064
(I1
(I1
I1
tp3065
g3031
I00
g3059
tp3066
bsbasg798
g801
sg814
(lp3067
g2813
asg17
g0
(g18
g5
Ntp3068
Rp3069
(dp3070
g1451
g0
(g809
g5
Ntp3071
Rp3072
(dp3073
g552
(lp3074
g0
(g1456
g5
Ntp3075
Rp3076
(dp3077
g14
S'auto_17075'
p3078
sg16
Nsg17
g0
(g18
g5
Ntp3079
Rp3080
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3081
Rp3082
(dp3083
g14
S'auto_17076'
p3084
sg16
Nsg17
g0
(g18
g5
Ntp3085
Rp3086
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3087
Rp3088
(dp3089
g14
S'auto_17077'
p3090
sg16
Nsg17
g0
(g18
g5
Ntp3091
Rp3092
sg53
Nsg85
Nsg73
g0
(g1463
g5
Ntp3093
Rp3094
(dp3095
g80
S'int8'
p3096
sbsbasg17
g0
(g18
g5
Ntp3097
Rp3098
sg814
(lp3099
g0
(g1456
g5
Ntp3100
Rp3101
(dp3102
g14
S'auto_17078'
p3103
sg16
I0
sg17
g0
(g18
g5
Ntp3104
Rp3105
sg53
Nsg85
g3072
sg73
g1931
sbasg1274
g0
(g1948
g5
Ntp3106
Rp3107
(dp3108
g552
(lp3109
g0
(g1456
g5
Ntp3110
Rp3111
(dp3112
g14
S'auto_16665'
p3113
sg16
Nsg17
g0
(g18
g5
Ntp3114
Rp3115
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3116
Rp3117
(dp3118
g14
S'auto_16666'
p3119
sg16
Nsg17
g0
(g18
g5
Ntp3120
Rp3121
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3122
Rp3123
(dp3124
g14
S'auto_16667'
p3125
sg16
Nsg17
g0
(g18
g5
Ntp3126
Rp3127
sg53
Nsg85
Nsg73
g3094
sbasg1965
I3
sg53
Nsg1966
(g1931
g1931
g3094
tp3128
sg814
(lp3129
g0
(g1456
g5
Ntp3130
Rp3131
(dp3132
g14
S'auto_16670'
p3133
sg16
I0
sg17
g0
(g18
g5
Ntp3134
Rp3135
(dp3136
g22
(lp3137
sbsg53
Nsg85
g0
(g809
g5
Ntp3138
Rp3139
(dp3140
g552
(lp3141
g0
(g1456
g5
Ntp3142
Rp3143
(dp3144
g14
S'auto_16668'
p3145
sg16
I0
sg17
g0
(g18
g5
Ntp3146
Rp3147
(dp3148
g22
(lp3149
sbsg53
Nsg85
g0
(g809
g5
Ntp3150
Rp3151
(dp3152
g552
(lp3153
g3111
ag3117
asg17
g0
(g18
g5
Ntp3154
Rp3155
sg814
(lp3156
g3143
asg1274
g1899
sbsg73
g1931
sbag0
(g1456
g5
Ntp3157
Rp3158
(dp3159
g14
S'auto_16669'
p3160
sg16
I0
sg17
g0
(g18
g5
Ntp3161
Rp3162
(dp3163
g22
(lp3164
sbsg53
Nsg85
g0
(g809
g5
Ntp3165
Rp3166
(dp3167
g552
(lp3168
g3143
ag3123
asg17
g0
(g18
g5
Ntp3169
Rp3170
sg814
(lp3171
g3158
asg1274
g0
(ctheano.scalar.basic
GT
p3172
g5
Ntp3173
Rp3174
(dp3175
S'bool'
p3176
I01
sg53
Nsbsbsg73
g0
(g1463
g5
Ntp3177
Rp3178
(dp3179
g80
g3176
sbsbasg17
g0
(g18
g5
Ntp3180
Rp3181
sg814
(lp3182
g3131
asg1274
g0
(g1482
g5
Ntp3183
Rp3184
(dp3185
g327
g1901
sg53
S'mul'
p3186
sbsbsg73
g1931
sbasg1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\nnpy_bool V%(id)s_tmp2;\nV%(id)s_tmp2 = (V%(id)s_tmp1 > %(i2)s);\n%(o0)s = V%(id)s_tmp1 * V%(id)s_tmp2;\n}\n'
p3187
sg2001
(g1931
tp3188
sg327
g0
(g1486
g5
Ntp3189
Rp3190
(dp3191
g1490
(I1
tp3192
sbsg2007
(lp3193
S'%(nodename)s_subnode0'
p3194
aS'%(nodename)s_subnode1'
p3195
aS'%(nodename)s_subnode2'
p3196
asg2011
I1
sbsbsg1268
(lp3197
g1493
ag1271
asbsg1272
(dp3198
sg1274
g0
(g318
g5
Ntp3199
Rp3200
(dp3201
g53
Nsg322
g3107
sg330
(dp3202
I0
(lp3203
I1
assg332
Nsg333
g0
(g334
g5
Ntp3204
Rp3205
(dp3206
g338
I3713080549409410656
sg339
(dp3207
I0
I1
ssbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp3208
Rp3209
(dp3210
g78
(I00
I00
tp3211
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp3212
Rp3213
(dp3214
g16
I0
sg53
Nsg798
g801
sg807
(lp3215
(g2809
I1
tp3216
asg14
S'auto_14684'
p3217
sg17
g0
(g18
g5
Ntp3218
Rp3219
(dp3220
g22
(lp3221
(lp3222
(g25
I306
g26
S'nade_train( * args[1:] )'
p3223
tp3224
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p3225
tp3226
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p3227
tp3228
a(g37
I36
g38
S'self.recompile()'
p3229
tp3230
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p3231
tp3232
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p3233
tp3234
a(g874
I216
g875
S'h = self.nonlinearity(T.dot(h, self.Ws[l]) + self.bs[l])  # BxH'
p3235
tp3236
aasbsg85
g0
(g809
g5
Ntp3237
Rp3238
(dp3239
g552
(lp3240
g0
(g10
g5
Ntp3241
Rp3242
(dp3243
g16
Nsg48
g531
sg53
g435
sg798
g801
sg807
(lp3244
(g3238
I0
tp3245
asg14
S'auto_14655'
p3246
sg17
g0
(g18
g5
Ntp3247
Rp3248
(dp3249
g22
g516
sbsg85
Nsg73
g541
sbag0
(ctheano.scalar.basic
ScalarConstant
p3250
g5
Ntp3251
Rp3252
(dp3253
g16
Nsg53
Nsg798
g801
sg73
g1465
sg807
(lp3254
(g0
(g809
g5
Ntp3255
Rp3256
(dp3257
g552
(lp3258
g0
(g10
g5
Ntp3259
Rp3260
(dp3261
g16
Nsg48
g669
sg53
g449
sg798
g801
sg807
(lp3262
(g3256
I0
tp3263
asg14
S'auto_14656'
p3264
sg17
g0
(g18
g5
Ntp3265
Rp3266
(dp3267
g22
g690
sbsg85
Nsg73
g679
sbag3252
asg798
g801
sg814
(lp3268
g0
(g563
g5
Ntp3269
Rp3270
(dp3271
g16
I0
sg53
Nsg798
g801
sg807
(lp3272
(g0
(g809
g5
Ntp3273
Rp3274
(dp3275
g552
(lp3276
g3270
asg798
g801
sg814
(lp3277
g0
(g563
g5
Ntp3278
Rp3279
(dp3280
g16
I0
sg53
Nsg798
g801
sg807
(lp3281
(g2780
I1
tp3282
asg14
S'auto_14682'
p3283
sg17
g0
(g18
g5
Ntp3284
Rp3285
(dp3286
g22
(lp3287
(lp3288
(g25
I306
g26
S'nade_train( * args[1:] )'
p3289
tp3290
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p3291
tp3292
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p3293
tp3294
a(g37
I36
g38
S'self.recompile()'
p3295
tp3296
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p3297
tp3298
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p3299
tp3300
a(g874
I216
g875
S'h = self.nonlinearity(T.dot(h, self.Ws[l]) + self.bs[l])  # BxH'
p3301
tp3302
aasbsg85
g3274
sg73
g0
(g74
g5
Ntp3303
Rp3304
(dp3305
g78
(I01
I00
tp3306
sg80
g682
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp3307
Rp3308
(dp3309
g1268
(lp3310
g1271
ag1271
asbsg1272
(dp3311
sg1274
g0
(g1387
g5
Ntp3312
Rp3313
(dp3314
g1391
(lp3315
sg1393
(lp3316
I0
asg1395
(lp3317
I0
asg1397
g1398
sg1399
(I00
tp3318
sg1401
(lp3319
g1403
asg1404
I01
sg1405
(g270
I0
tp3320
sg1407
(dp3321
S'support_code_apply'
p3322
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p3323
ssg1411
(dp3324
I0
(lp3325
I0
assg1414
(lp3326
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p3327
asbsbI0
tp3328
asg14
S'auto_14681'
p3329
sg17
g0
(g18
g5
Ntp3330
Rp3331
(dp3332
g22
(lp3333
(lp3334
(g25
I306
g26
S'nade_train( * args[1:] )'
p3335
tp3336
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p3337
tp3338
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p3339
tp3340
a(g37
I36
g38
S'self.recompile()'
p3341
tp3342
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p3343
tp3344
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p3345
tp3346
a(g874
I216
g875
S'h = self.nonlinearity(T.dot(h, self.Ws[l]) + self.bs[l])  # BxH'
p3347
tp3348
aasbsg85
g3256
sg73
g0
(g74
g5
Ntp3349
Rp3350
(dp3351
g78
g3318
sg80
g682
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp3352
Rp3353
(dp3354
g1268
(lp3355
g1271
ag1271
asbsg1272
(dp3356
sg1274
g0
(ctheano.tensor.subtensor
Subtensor
p3357
g5
Ntp3358
Rp3359
(dp3360
S'idx_list'
p3361
(g1465
tp3362
sbsbI1
tp3363
a(g3238
I1
tp3364
asg14
S'auto_14680'
p3365
sg17
g0
(g18
g5
Ntp3366
Rp3367
(dp3368
g22
(lp3369
(lp3370
(g25
I306
g26
S'nade_train( * args[1:] )'
p3371
tp3372
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p3373
tp3374
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p3375
tp3376
a(g37
I36
g38
S'self.recompile()'
p3377
tp3378
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p3379
tp3380
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p3381
tp3382
a(g874
I216
g875
S'h = self.nonlinearity(T.dot(h, self.Ws[l]) + self.bs[l])  # BxH'
p3383
tp3384
aasbsg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p3385
tp3386
Rp3387
sbasg798
g801
sg814
(lp3388
g3213
asg17
g0
(g18
g5
Ntp3389
Rp3390
(dp3391
g1268
(lp3392
g1271
ag1271
asbsg1272
(dp3393
sg1274
g0
(g3357
g5
Ntp3394
Rp3395
(dp3396
g3361
(g1465
tp3397
sbsbsg73
g0
(g74
g5
Ntp3398
Rp3399
(dp3400
g78
(I00
I00
tp3401
sg80
g544
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp3402
g2784
asg17
g0
(g18
g5
Ntp3403
Rp3404
(dp3405
g1268
(lp3406
g2086
ag1271
asbsg1272
(dp3407
sg1274
g2090
sbsg73
g0
(g74
g5
Ntp3408
Rp3409
(dp3410
g78
(I00
I00
tp3411
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag3279
ag3022
asg798
g801
sg814
(lp3412
g1089
asg17
g0
(g18
g5
Ntp3413
Rp3414
(dp3415
g1451
g0
(g809
g5
Ntp3416
Rp3417
(dp3418
g552
(lp3419
g0
(g1456
g5
Ntp3420
Rp3421
(dp3422
g14
S'auto_17094'
p3423
sg16
Nsg17
g0
(g18
g5
Ntp3424
Rp3425
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3426
Rp3427
(dp3428
g14
S'auto_17095'
p3429
sg16
Nsg17
g0
(g18
g5
Ntp3430
Rp3431
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3432
Rp3433
(dp3434
g14
S'auto_17096'
p3435
sg16
Nsg17
g0
(g18
g5
Ntp3436
Rp3437
sg53
Nsg85
Nsg73
g3094
sbasg17
g0
(g18
g5
Ntp3438
Rp3439
sg814
(lp3440
g0
(g1456
g5
Ntp3441
Rp3442
(dp3443
g14
S'auto_17097'
p3444
sg16
I0
sg17
g0
(g18
g5
Ntp3445
Rp3446
sg53
Nsg85
g3417
sg73
g1931
sbasg1274
g0
(g1948
g5
Ntp3447
Rp3448
(dp3449
g552
(lp3450
g0
(g1456
g5
Ntp3451
Rp3452
(dp3453
g14
S'auto_16682'
p3454
sg16
Nsg17
g0
(g18
g5
Ntp3455
Rp3456
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3457
Rp3458
(dp3459
g14
S'auto_16683'
p3460
sg16
Nsg17
g0
(g18
g5
Ntp3461
Rp3462
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3463
Rp3464
(dp3465
g14
S'auto_16684'
p3466
sg16
Nsg17
g0
(g18
g5
Ntp3467
Rp3468
sg53
Nsg85
Nsg73
g3094
sbasg1965
I3
sg53
S'Composite{((i0 + i1) * GT((i0 + i1), i2))}'
p3469
sg1966
(g1931
g1931
g3094
tp3470
sg814
(lp3471
g0
(g1456
g5
Ntp3472
Rp3473
(dp3474
g14
S'auto_16687'
p3475
sg16
I0
sg17
g0
(g18
g5
Ntp3476
Rp3477
(dp3478
g22
(lp3479
sbsg53
Nsg85
g0
(g809
g5
Ntp3480
Rp3481
(dp3482
g552
(lp3483
g0
(g1456
g5
Ntp3484
Rp3485
(dp3486
g14
S'auto_16685'
p3487
sg16
I0
sg17
g0
(g18
g5
Ntp3488
Rp3489
(dp3490
g22
(lp3491
sbsg53
Nsg85
g0
(g809
g5
Ntp3492
Rp3493
(dp3494
g552
(lp3495
g3452
ag3458
asg17
g0
(g18
g5
Ntp3496
Rp3497
sg814
(lp3498
g3485
asg1274
g1899
sbsg73
g1931
sbag0
(g1456
g5
Ntp3499
Rp3500
(dp3501
g14
S'auto_16686'
p3502
sg16
I0
sg17
g0
(g18
g5
Ntp3503
Rp3504
(dp3505
g22
(lp3506
sbsg53
Nsg85
g0
(g809
g5
Ntp3507
Rp3508
(dp3509
g552
(lp3510
g3485
ag3464
asg17
g0
(g18
g5
Ntp3511
Rp3512
sg814
(lp3513
g3500
asg1274
g3174
sbsg73
g3178
sbasg17
g0
(g18
g5
Ntp3514
Rp3515
sg814
(lp3516
g3473
asg1274
g3184
sbsg73
g1931
sbasg1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\nnpy_bool V%(id)s_tmp2;\nV%(id)s_tmp2 = (V%(id)s_tmp1 > %(i2)s);\n%(o0)s = V%(id)s_tmp1 * V%(id)s_tmp2;\n}\n'
p3517
sg2001
(g1931
tp3518
sg327
g0
(g1486
g5
Ntp3519
Rp3520
(dp3521
g1490
(I0
tp3522
sbsg2007
(lp3523
S'%(nodename)s_subnode0'
p3524
aS'%(nodename)s_subnode1'
p3525
aS'%(nodename)s_subnode2'
p3526
asg2011
I1
sbsbsg1268
(lp3527
g1493
ag1271
asbsg1272
(dp3528
sg1274
g0
(g318
g5
Ntp3529
Rp3530
(dp3531
g53
Nsg322
g3448
sg330
(dp3532
I0
(lp3533
I0
assg332
Nsg333
g0
(g334
g5
Ntp3534
Rp3535
(dp3536
g338
I3713080549408328131
sg339
(dp3537
I0
I0
ssbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp3538
Rp3539
(dp3540
g78
(I00
I00
tp3541
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag1319
asg798
g801
sg814
(lp3542
g1060
asg17
g0
(g18
g5
Ntp3543
Rp3544
(dp3545
g1268
(lp3546
g2086
ag1271
asbsg1272
(dp3547
sg1274
g2090
sbsg73
g0
(g74
g5
Ntp3548
Rp3549
(dp3550
g78
(I00
I00
tp3551
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag1514
asg798
g801
sg814
(lp3552
g1031
asg17
g0
(g18
g5
Ntp3553
Rp3554
(dp3555
g1268
(lp3556
g1271
ag1271
asbsg1272
(dp3557
sg1274
g0
(g1352
g5
Ntp3558
Rp3559
(dp3560
g1356
I3
sbsbsg73
g0
(g74
g5
Ntp3561
Rp3562
(dp3563
g78
(I00
I00
I00
tp3564
sg80
S'float64'
p3565
sg82
g66
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp3566
Rp3567
(dp3568
g16
I0
sg53
Nsg798
g801
sg807
(lp3569
(g980
I3
tp3570
asg14
S'auto_14782'
p3571
sg17
g0
(g18
g5
Ntp3572
Rp3573
(dp3574
g22
(lp3575
(lp3576
(g25
I306
g26
S'nade_train( * args[1:] )'
p3577
tp3578
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p3579
tp3580
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p3581
tp3582
a(g37
I36
g38
S'self.recompile()'
p3583
tp3584
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p3585
tp3586
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p3587
tp3588
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p3589
tp3590
aasbsg85
g0
(g809
g5
Ntp3591
Rp3592
(dp3593
g552
(lp3594
g0
(g10
g5
Ntp3595
Rp3596
(dp3597
g16
Nsg48
g226
sg53
g203
sg798
g801
sg807
(lp3598
(g3592
I0
tp3599
asg14
S'auto_14658'
p3600
sg17
g0
(g18
g5
Ntp3601
Rp3602
(dp3603
g22
g211
sbsg85
Nsg73
g236
sbasg798
g801
sg814
(lp3604
g3567
asg17
g0
(g18
g5
Ntp3605
Rp3606
(dp3607
g1268
(lp3608
g1271
ag1271
asbsg1272
(dp3609
sg1274
g0
(g1387
g5
Ntp3610
Rp3611
(dp3612
g1391
(lp3613
sg1393
(lp3614
I0
aI1
asg1395
(lp3615
I0
asg1397
g1398
sg1399
g238
sg1401
(lp3616
g1403
asg1404
I01
sg1405
(g270
I0
I1
tp3617
sg1407
(dp3618
S'support_code_apply'
p3619
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p3620
ssg1411
(dp3621
I0
(lp3622
I0
assg1414
(lp3623
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p3624
asbsbsg73
g0
(g74
g5
Ntp3625
Rp3626
(dp3627
g78
(I01
I00
I00
tp3628
sg80
g239
sg82
g66
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp3629
Rp3630
(dp3631
g16
I0
sg53
Nsg798
g801
sg807
(lp3632
(g980
I4
tp3633
asg14
S'auto_15476'
p3634
sg17
g0
(g18
g5
Ntp3635
Rp3636
(dp3637
g22
(lp3638
(lp3639
(g25
I306
g26
S'nade_train( * args[1:] )'
p3640
tp3641
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p3642
tp3643
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p3644
tp3645
a(g37
I36
g38
S'self.recompile()'
p3646
tp3647
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p3648
tp3649
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p3650
tp3651
a(g874
I231
g875
S'Phi = -constantX(0.5) * T.sqr((Mu - T.shape_padright(x)) / Sigma) - T.log(Sigma) - constantX(0.5 * np.log(2 * np.pi))  # BxDxC'
p3652
tp3653
aasbsg85
g0
(g809
g5
Ntp3654
Rp3655
(dp3656
g552
(lp3657
g805
asg798
g801
sg814
(lp3658
g3630
asg17
g0
(g18
g5
Ntp3659
Rp3660
(dp3661
g1268
(lp3662
S'local_dimshuffle_lift'
p3663
ag1271
asbsg1272
(dp3664
sg1274
g0
(g1387
g5
Ntp3665
Rp3666
(dp3667
g1391
(lp3668
sg1393
(lp3669
I1
aI0
asg1395
(lp3670
I2
asg1397
g1398
sg1399
g588
sg1401
(lp3671
g1403
asg1404
I01
sg1405
(I1
I0
g270
tp3672
sg1407
(dp3673
S'support_code_apply'
p3674
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p3675
ssg1411
(dp3676
I0
(lp3677
I0
assg1414
(lp3678
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p3679
asbsbsg73
g0
(g74
g5
Ntp3680
Rp3681
(dp3682
g78
(I00
I00
I01
tp3683
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag975
ag1797
ag1815
asg798
g801
sg814
(lp3684
g952
asg17
g0
(g18
g5
Ntp3685
Rp3686
(dp3687
g1451
g0
(g809
g5
Ntp3688
Rp3689
(dp3690
g552
(lp3691
g0
(g1456
g5
Ntp3692
Rp3693
(dp3694
g14
S'auto_17175'
p3695
sg16
Nsg17
g0
(g18
g5
Ntp3696
Rp3697
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3698
Rp3699
(dp3700
g14
S'auto_17176'
p3701
sg16
Nsg17
g0
(g18
g5
Ntp3702
Rp3703
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3704
Rp3705
(dp3706
g14
S'auto_17177'
p3707
sg16
Nsg17
g0
(g18
g5
Ntp3708
Rp3709
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3710
Rp3711
(dp3712
g14
S'auto_17178'
p3713
sg16
Nsg17
g0
(g18
g5
Ntp3714
Rp3715
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3716
Rp3717
(dp3718
g14
S'auto_17179'
p3719
sg16
Nsg17
g0
(g18
g5
Ntp3720
Rp3721
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3722
Rp3723
(dp3724
g14
S'auto_17180'
p3725
sg16
Nsg17
g0
(g18
g5
Ntp3726
Rp3727
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3728
Rp3729
(dp3730
g14
S'auto_17181'
p3731
sg16
Nsg17
g0
(g18
g5
Ntp3732
Rp3733
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3734
Rp3735
(dp3736
g14
S'auto_17182'
p3737
sg16
Nsg17
g0
(g18
g5
Ntp3738
Rp3739
sg53
Nsg85
Nsg73
g1931
sbasg17
g0
(g18
g5
Ntp3740
Rp3741
sg814
(lp3742
g0
(g1456
g5
Ntp3743
Rp3744
(dp3745
g14
S'auto_17183'
p3746
sg16
I0
sg17
g0
(g18
g5
Ntp3747
Rp3748
sg53
Nsg85
g3689
sg73
g1931
sbasg1274
g0
(g1948
g5
Ntp3749
Rp3750
(dp3751
g552
(lp3752
g0
(g1456
g5
Ntp3753
Rp3754
(dp3755
g14
S'auto_16734'
p3756
sg16
Nsg17
g0
(g18
g5
Ntp3757
Rp3758
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3759
Rp3760
(dp3761
g14
S'auto_16735'
p3762
sg16
Nsg17
g0
(g18
g5
Ntp3763
Rp3764
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3765
Rp3766
(dp3767
g14
S'auto_16736'
p3768
sg16
Nsg17
g0
(g18
g5
Ntp3769
Rp3770
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3771
Rp3772
(dp3773
g14
S'auto_16737'
p3774
sg16
Nsg17
g0
(g18
g5
Ntp3775
Rp3776
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3777
Rp3778
(dp3779
g14
S'auto_16738'
p3780
sg16
Nsg17
g0
(g18
g5
Ntp3781
Rp3782
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3783
Rp3784
(dp3785
g14
S'auto_16739'
p3786
sg16
Nsg17
g0
(g18
g5
Ntp3787
Rp3788
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3789
Rp3790
(dp3791
g14
S'auto_16740'
p3792
sg16
Nsg17
g0
(g18
g5
Ntp3793
Rp3794
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp3795
Rp3796
(dp3797
g14
S'auto_16741'
p3798
sg16
Nsg17
g0
(g18
g5
Ntp3799
Rp3800
sg53
Nsg85
Nsg73
g1931
sbasg1965
I8
sg53
Nsg1966
(g1931
g1931
g1931
g1931
g1931
g1931
g1931
g1931
tp3801
sg814
(lp3802
g0
(g1456
g5
Ntp3803
Rp3804
(dp3805
g14
S'auto_16749'
p3806
sg16
I0
sg17
g0
(g18
g5
Ntp3807
Rp3808
(dp3809
g22
(lp3810
sbsg53
Nsg85
g0
(g809
g5
Ntp3811
Rp3812
(dp3813
g552
(lp3814
g3754
ag0
(g1456
g5
Ntp3815
Rp3816
(dp3817
g14
S'auto_16748'
p3818
sg16
I0
sg17
g0
(g18
g5
Ntp3819
Rp3820
(dp3821
g22
(lp3822
sbsg53
Nsg85
g0
(g809
g5
Ntp3823
Rp3824
(dp3825
g552
(lp3826
g3760
ag0
(g1456
g5
Ntp3827
Rp3828
(dp3829
g14
S'auto_16747'
p3830
sg16
I0
sg17
g0
(g18
g5
Ntp3831
Rp3832
(dp3833
g22
(lp3834
sbsg53
Nsg85
g0
(g809
g5
Ntp3835
Rp3836
(dp3837
g552
(lp3838
g0
(g1456
g5
Ntp3839
Rp3840
(dp3841
g14
S'auto_16746'
p3842
sg16
I0
sg17
g0
(g18
g5
Ntp3843
Rp3844
(dp3845
g22
(lp3846
sbsg53
Nsg85
g0
(g809
g5
Ntp3847
Rp3848
(dp3849
g552
(lp3850
g0
(g1456
g5
Ntp3851
Rp3852
(dp3853
g14
S'auto_16745'
p3854
sg16
I0
sg17
g0
(g18
g5
Ntp3855
Rp3856
(dp3857
g22
(lp3858
sbsg53
Nsg85
g0
(g809
g5
Ntp3859
Rp3860
(dp3861
g552
(lp3862
g0
(g1456
g5
Ntp3863
Rp3864
(dp3865
g14
S'auto_16744'
p3866
sg16
I0
sg17
g0
(g18
g5
Ntp3867
Rp3868
(dp3869
g22
(lp3870
sbsg53
Nsg85
g0
(g809
g5
Ntp3871
Rp3872
(dp3873
g552
(lp3874
g3766
ag3772
asg17
g0
(g18
g5
Ntp3875
Rp3876
sg814
(lp3877
g3864
asg1274
g1899
sbsg73
g1931
sbag3778
asg17
g0
(g18
g5
Ntp3878
Rp3879
sg814
(lp3880
g3852
asg1274
g0
(ctheano.scalar.basic
Sub
p3881
g5
Ntp3882
Rp3883
(dp3884
g327
ctheano.scalar.basic
upcast_out_nobool
p3885
sg53
S'sub'
p3886
sbsbsg73
g1931
sbag3784
asg17
g0
(g18
g5
Ntp3887
Rp3888
sg814
(lp3889
g3840
asg1274
g0
(ctheano.scalar.basic
TrueDiv
p3890
g5
Ntp3891
Rp3892
(dp3893
g327
g1901
sg53
S'true_div'
p3894
sbsbsg73
g1931
sbasg17
g0
(g18
g5
Ntp3895
Rp3896
sg814
(lp3897
g3828
asg1274
g0
(ctheano.scalar.basic
Sqr
p3898
g5
Ntp3899
Rp3900
(dp3901
g327
ctheano.scalar.basic
same_out
p3902
sg53
S'sqr'
p3903
sbsbsg73
g1931
sbasg17
g0
(g18
g5
Ntp3904
Rp3905
sg814
(lp3906
g3816
asg1274
g3184
sbsg73
g1931
sbag0
(g1456
g5
Ntp3907
Rp3908
(dp3909
g14
S'auto_16743'
p3910
sg16
I0
sg17
g0
(g18
g5
Ntp3911
Rp3912
(dp3913
g22
(lp3914
sbsg53
Nsg85
g0
(g809
g5
Ntp3915
Rp3916
(dp3917
g552
(lp3918
g0
(g1456
g5
Ntp3919
Rp3920
(dp3921
g14
S'auto_16742'
p3922
sg16
I0
sg17
g0
(g18
g5
Ntp3923
Rp3924
(dp3925
g22
(lp3926
sbsg53
Nsg85
g0
(g809
g5
Ntp3927
Rp3928
(dp3929
g552
(lp3930
g3790
ag3796
asg17
g0
(g18
g5
Ntp3931
Rp3932
sg814
(lp3933
g3920
asg1274
g3892
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp3934
Rp3935
sg814
(lp3936
g3908
asg1274
g0
(ctheano.scalar.basic
Log
p3937
g5
Ntp3938
Rp3939
(dp3940
g327
g328
sg53
S'log'
p3941
sbsbsg73
g1931
sbasg17
g0
(g18
g5
Ntp3942
Rp3943
sg814
(lp3944
g3804
asg1274
g1899
sbsg73
g1931
sbasg1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i6)s / %(i7)s;\nnpy_float64 V%(id)s_tmp2;\nV%(id)s_tmp2 = log((npy_float64)V%(id)s_tmp1);\nnpy_float64 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i2)s + %(i3)s;\nnpy_float64 V%(id)s_tmp4;\nV%(id)s_tmp4 = V%(id)s_tmp3 - %(i4)s;\nnpy_float64 V%(id)s_tmp5;\nV%(id)s_tmp5 = V%(id)s_tmp4 / %(i5)s;\nnpy_float64 V%(id)s_tmp6;\nV%(id)s_tmp6 = V%(id)s_tmp5 * V%(id)s_tmp5;\nnpy_float64 V%(id)s_tmp7;\nV%(id)s_tmp7 = %(i1)s * V%(id)s_tmp6;\n%(o0)s = %(i0)s + V%(id)s_tmp7 + V%(id)s_tmp2;\n}\n'
p3945
sg2001
(g1931
tp3946
sg327
g0
(g1486
g5
Ntp3947
Rp3948
(dp3949
g1490
(I2
tp3950
sbsg2007
(lp3951
S'%(nodename)s_subnode0'
p3952
aS'%(nodename)s_subnode1'
p3953
aS'%(nodename)s_subnode2'
p3954
aS'%(nodename)s_subnode3'
p3955
aS'%(nodename)s_subnode4'
p3956
aS'%(nodename)s_subnode5'
p3957
aS'%(nodename)s_subnode6'
p3958
aS'%(nodename)s_subnode7'
p3959
asg2011
I1
sbsbsg1268
(lp3960
g1493
ag1271
asbsg1272
(dp3961
sg1274
g0
(g318
g5
Ntp3962
Rp3963
(dp3964
g53
Nsg322
g3750
sg330
(dp3965
I0
(lp3966
I2
assg332
Nsg333
g0
(g334
g5
Ntp3967
Rp3968
(dp3969
g338
I3713080549410493181
sg339
(dp3970
I0
I2
ssbsg341
I00
sbsbI5
tp3971
asg14
S'auto_16710'
p3972
sg17
g0
(g18
g5
Ntp3973
Rp3974
(dp3975
g22
(lp3976
sbsg85
g2477
sg73
g0
(g74
g5
Ntp3977
Rp3978
(dp3979
g78
(I00
I00
I00
tp3980
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp3981
g960
asg17
g0
(g18
g5
Ntp3982
Rp3983
(dp3984
g1451
g0
(g809
g5
Ntp3985
Rp3986
(dp3987
g552
(lp3988
g0
(g1456
g5
Ntp3989
Rp3990
(dp3991
g14
S'auto_17211'
p3992
sg16
Nsg17
g0
(g18
g5
Ntp3993
Rp3994
sg53
Nsg85
Nsg73
g1931
sbasg17
g0
(g18
g5
Ntp3995
Rp3996
sg814
(lp3997
g0
(g1456
g5
Ntp3998
Rp3999
(dp4000
g14
S'auto_17212'
p4001
sg16
I0
sg17
g0
(g18
g5
Ntp4002
Rp4003
sg53
Nsg85
g3986
sg73
g1931
sbasg1274
g0
(g3937
g5
Ntp4004
Rp4005
(dp4006
g327
g0
(g1486
g5
Ntp4007
Rp4008
(dp4009
g1490
(I0
tp4010
sbsg53
Nsbsbsg1268
(lp4011
g1493
ag1271
asbsg1272
(dp4012
sg1274
g0
(g318
g5
Ntp4013
Rp4014
(dp4015
g53
Nsg322
g4005
sg330
(dp4016
I0
(lp4017
I0
assg332
(g3941
I1
I1
tp4018
sg333
g0
(g334
g5
Ntp4019
Rp4020
(dp4021
g338
I3713080549408328131
sg339
(dp4022
I0
I0
ssbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp4023
Rp4024
(dp4025
g78
(I00
I00
I00
tp4026
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp4027
g0
(g563
g5
Ntp4028
Rp4029
(dp4030
g16
I0
sg53
Nsg798
g801
sg807
(lp4031
(g0
(g809
g5
Ntp4032
Rp4033
(dp4034
g552
(lp4035
g4029
asg798
g801
sg814
(lp4036
g934
asg17
g0
(g18
g5
Ntp4037
Rp4038
(dp4039
g1268
(lp4040
S'local_max_and_argmax'
p4041
ag1271
asbsg1272
(dp4042
sg1274
g0
(ctheano.tensor.elemwise
CAReduce
p4043
g5
Ntp4044
Rp4045
(dp4046
g322
g0
(ctheano.scalar.basic
Maximum
p4047
g5
Ntp4048
Rp4049
(dp4050
g327
g1901
sg53
S'maximum'
p4051
sbsg1903
(I2
tp4052
sbsbI0
tp4053
asg14
S'auto_15427'
p4054
sg17
g0
(g18
g5
Ntp4055
Rp4056
(dp4057
S'values_eq_approx'
p4058
ctheano.tensor.type
values_eq_approx_remove_inf_nan
p4059
sg22
(lp4060
sbsg85
g956
sg73
g0
(g74
g5
Ntp4061
Rp4062
(dp4063
g78
(I00
I00
I00
tp4064
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp4065
Rp4066
(dp4067
g1451
g0
(g809
g5
Ntp4068
Rp4069
(dp4070
g552
(lp4071
g0
(g1456
g5
Ntp4072
Rp4073
(dp4074
g14
S'auto_17219'
p4075
sg16
Nsg17
g0
(g18
g5
Ntp4076
Rp4077
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4078
Rp4079
(dp4080
g14
S'auto_17220'
p4081
sg16
Nsg17
g0
(g18
g5
Ntp4082
Rp4083
sg53
Nsg85
Nsg73
g1931
sbasg17
g0
(g18
g5
Ntp4084
Rp4085
sg814
(lp4086
g0
(g1456
g5
Ntp4087
Rp4088
(dp4089
g14
S'auto_17221'
p4090
sg16
I0
sg17
g0
(g18
g5
Ntp4091
Rp4092
sg53
Nsg85
g4069
sg73
g1931
sbasg1274
g3883
sbsS'removed_by'
p4093
(lp4094
g1493
ag1493
asg1268
(lp4095
S'local_add_canonizer'
p4096
aS"('Revert', 'inplace_elemwise_optimizer')"
p4097
aS"('Revert', 'inplace_elemwise_optimizer')"
p4098
ag1271
asbsg1272
(dp4099
sg1274
g0
(g318
g5
Ntp4100
Rp4101
(dp4102
g379
g380
sg322
g3883
sg53
S'Elemwise{sub,no_inplace}'
p4103
sg330
(dp4104
sg332
(S'subtract'
p4105
I2
I1
tp4106
sg333
g0
(g334
g5
Ntp4107
Rp4108
(dp4109
g338
I0
sg339
(dp4110
sbsg341
I00
sg307
S"elementwise subtraction\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p4111
sbsbI0
tp4112
a(g948
I0
tp4113
asg14
S'auto_16775'
p4114
sg17
g0
(g18
g5
Ntp4115
Rp4116
(dp4117
g22
(lp4118
sbsg85
g980
sg73
g0
(g74
g5
Ntp4119
Rp4120
(dp4121
g78
(I00
I00
I00
tp4122
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag960
ag944
asg798
g801
sg814
(lp4123
g0
(g563
g5
Ntp4124
Rp4125
(dp4126
g16
I0
sg53
Nsg798
g801
sg807
(lp4127
(g0
(g809
g5
Ntp4128
Rp4129
(dp4130
g552
(lp4131
g4125
asg798
g801
sg814
(lp4132
g0
(g563
g5
Ntp4133
Rp4134
(dp4135
g16
I0
sg53
g936
sg798
g801
sg807
(lp4136
(g0
(g809
g5
Ntp4137
Rp4138
(dp4139
g552
(lp4140
g4134
asg798
g801
sg814
(lp4141
g0
(g563
g5
Ntp4142
Rp4143
(dp4144
g16
I0
sg53
Nsg798
g801
sg807
(lp4145
(g0
(g809
g5
Ntp4146
Rp4147
(dp4148
g552
(lp4149
g4125
ag4143
asg798
g801
sg814
(lp4150
g0
(g563
g5
Ntp4151
Rp4152
(dp4153
g16
I0
sg53
Nsg798
g801
sg807
(lp4154
(g0
(g809
g5
Ntp4155
Rp4156
(dp4157
g552
(lp4158
g4152
asg798
g801
sg814
(lp4159
g0
(g563
g5
Ntp4160
Rp4161
(dp4162
g16
I0
sg53
Nsg798
g801
sg807
(lp4163
(g930
I2
tp4164
asg14
S'auto_15847'
p4165
sg17
g0
(g18
g5
Ntp4166
Rp4167
(dp4168
g22
(lp4169
sbsg85
g4156
sg73
g0
(g74
g5
Ntp4170
Rp4171
(dp4172
g78
(I00
I00
tp4173
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp4174
Rp4175
(dp4176
g1268
(lp4177
S'local_log_sum_exp'
p4178
ag1271
asbsg1272
(dp4179
sg1274
g0
(g1893
g5
Ntp4180
Rp4181
(dp4182
g80
g251
sg322
g1899
sg1903
(I2
tp4183
sg1905
g251
sbsbI0
tp4184
asg14
S'auto_16810'
p4185
sg17
g0
(g18
g5
Ntp4186
Rp4187
(dp4188
g22
(lp4189
sbsg85
g4147
sg73
g0
(g74
g5
Ntp4190
Rp4191
(dp4192
g78
(I00
I00
I00
tp4193
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp4194
Rp4195
(dp4196
g1451
g0
(g809
g5
Ntp4197
Rp4198
(dp4199
g552
(lp4200
g0
(g1456
g5
Ntp4201
Rp4202
(dp4203
g14
S'auto_17269'
p4204
sg16
Nsg17
g0
(g18
g5
Ntp4205
Rp4206
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4207
Rp4208
(dp4209
g14
S'auto_17270'
p4210
sg16
Nsg17
g0
(g18
g5
Ntp4211
Rp4212
sg53
Nsg85
Nsg73
g1931
sbasg17
g0
(g18
g5
Ntp4213
Rp4214
sg814
(lp4215
g0
(g1456
g5
Ntp4216
Rp4217
(dp4218
g14
S'auto_17271'
p4219
sg16
I0
sg17
g0
(g18
g5
Ntp4220
Rp4221
sg53
Nsg85
g4198
sg73
g1931
sbasg1274
g0
(g1948
g5
Ntp4222
Rp4223
(dp4224
g552
(lp4225
g0
(g1456
g5
Ntp4226
Rp4227
(dp4228
g14
S'auto_16799'
p4229
sg16
Nsg17
g0
(g18
g5
Ntp4230
Rp4231
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4232
Rp4233
(dp4234
g14
S'auto_16800'
p4235
sg16
Nsg17
g0
(g18
g5
Ntp4236
Rp4237
sg53
Nsg85
Nsg73
g1931
sbasg1965
I2
sg53
Nsg1966
(g1931
g1931
tp4238
sg814
(lp4239
g0
(g1456
g5
Ntp4240
Rp4241
(dp4242
g14
S'auto_16802'
p4243
sg16
I0
sg17
g0
(g18
g5
Ntp4244
Rp4245
(dp4246
g22
(lp4247
sbsg53
Nsg85
g0
(g809
g5
Ntp4248
Rp4249
(dp4250
g552
(lp4251
g0
(g1456
g5
Ntp4252
Rp4253
(dp4254
g14
S'auto_16801'
p4255
sg16
I0
sg17
g0
(g18
g5
Ntp4256
Rp4257
(dp4258
g22
(lp4259
sbsg53
Nsg85
g0
(g809
g5
Ntp4260
Rp4261
(dp4262
g552
(lp4263
g4227
ag4233
asg17
g0
(g18
g5
Ntp4264
Rp4265
sg814
(lp4266
g4253
asg1274
g3883
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp4267
Rp4268
sg814
(lp4269
g4241
asg1274
g383
sbsg73
g1931
sbasg1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s - %(i1)s;\n%(o0)s = exp((npy_float64)V%(id)s_tmp1);\n}\n'
p4270
sg2001
(g1931
tp4271
sg327
g0
(g1486
g5
Ntp4272
Rp4273
(dp4274
g1490
(I0
tp4275
sbsg2007
(lp4276
S'%(nodename)s_subnode0'
p4277
aS'%(nodename)s_subnode1'
p4278
asg2011
I1
sbsbsg1268
(lp4279
g1493
ag1271
asbsg1272
(dp4280
sg1274
g0
(g318
g5
Ntp4281
Rp4282
(dp4283
g53
Nsg322
g4223
sg330
(dp4284
I0
(lp4285
I0
assg332
Nsg333
g0
(g334
g5
Ntp4286
Rp4287
(dp4288
g338
I3713080549408328131
sg339
(dp4289
I0
I0
ssbsg341
I00
sbsbI1
tp4290
asg14
S'auto_15839'
p4291
sg17
g0
(g18
g5
Ntp4292
Rp4293
(dp4294
g22
(lp4295
sbsg85
g4138
sg73
g0
(g74
g5
Ntp4296
Rp4297
(dp4298
g78
(I00
I00
I01
tp4299
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp4300
Rp4301
(dp4302
g1268
(lp4303
g4178
ag1271
asbsg1272
(dp4304
sg1274
g0
(g1387
g5
Ntp4305
Rp4306
(dp4307
g1391
(lp4308
sg1393
(lp4309
I0
aI1
asg1395
(lp4310
I2
asg1397
g1398
sg1399
(I00
I00
tp4311
sg1401
(lp4312
g1403
asg1404
I01
sg1405
(I0
I1
g270
tp4313
sg1407
(dp4314
S'support_code_apply'
p4315
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p4316
ssg1411
(dp4317
I0
(lp4318
I0
assg1414
(lp4319
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p4320
asbsbI0
tp4321
a(g930
I1
tp4322
asg14
S'auto_16042'
p4323
sg17
g0
(g18
g5
Ntp4324
Rp4325
(dp4326
g22
(lp4327
sbsg85
g4129
sg73
g0
(g74
g5
Ntp4328
Rp4329
(dp4330
g78
(I00
I00
tp4331
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp4332
Rp4333
(dp4334
g1268
(lp4335
g4041
ag1271
asbsg1272
(dp4336
sg1274
g0
(g4043
g5
Ntp4337
Rp4338
(dp4339
g322
g4049
sg1903
(I2
tp4340
sbsbI0
tp4341
a(g4147
I0
tp4342
asg14
S'auto_16798'
p4343
sg17
g0
(g18
g5
Ntp4344
Rp4345
(dp4346
g22
(lp4347
sbsg85
g948
sg73
g0
(g74
g5
Ntp4348
Rp4349
(dp4350
g78
(I00
I00
I00
tp4351
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp4352
Rp4353
(dp4354
g1451
g0
(g809
g5
Ntp4355
Rp4356
(dp4357
g552
(lp4358
g0
(g1456
g5
Ntp4359
Rp4360
(dp4361
g14
S'auto_17242'
p4362
sg16
Nsg17
g0
(g18
g5
Ntp4363
Rp4364
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4365
Rp4366
(dp4367
g14
S'auto_17243'
p4368
sg16
Nsg17
g0
(g18
g5
Ntp4369
Rp4370
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4371
Rp4372
(dp4373
g14
S'auto_17244'
p4374
sg16
Nsg17
g0
(g18
g5
Ntp4375
Rp4376
sg53
Nsg85
Nsg73
g1931
sbasg17
g0
(g18
g5
Ntp4377
Rp4378
sg814
(lp4379
g0
(g1456
g5
Ntp4380
Rp4381
(dp4382
g14
S'auto_17245'
p4383
sg16
I0
sg17
g0
(g18
g5
Ntp4384
Rp4385
sg53
Nsg85
g4356
sg73
g1931
sbasg1274
g0
(g1948
g5
Ntp4386
Rp4387
(dp4388
g552
(lp4389
g0
(g1456
g5
Ntp4390
Rp4391
(dp4392
g14
S'auto_16784'
p4393
sg16
Nsg17
g0
(g18
g5
Ntp4394
Rp4395
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4396
Rp4397
(dp4398
g14
S'auto_16785'
p4399
sg16
Nsg17
g0
(g18
g5
Ntp4400
Rp4401
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4402
Rp4403
(dp4404
g14
S'auto_16786'
p4405
sg16
Nsg17
g0
(g18
g5
Ntp4406
Rp4407
sg53
Nsg85
Nsg73
g1931
sbasg1965
I3
sg53
Nsg1966
(g1931
g1931
g1931
tp4408
sg814
(lp4409
g0
(g1456
g5
Ntp4410
Rp4411
(dp4412
g14
S'auto_16788'
p4413
sg16
I0
sg17
g0
(g18
g5
Ntp4414
Rp4415
(dp4416
g22
(lp4417
sbsg53
Nsg85
g0
(g809
g5
Ntp4418
Rp4419
(dp4420
g552
(lp4421
g4391
ag0
(g1456
g5
Ntp4422
Rp4423
(dp4424
g14
S'auto_16787'
p4425
sg16
I0
sg17
g0
(g18
g5
Ntp4426
Rp4427
(dp4428
g22
(lp4429
sbsg53
Nsg85
g0
(g809
g5
Ntp4430
Rp4431
(dp4432
g552
(lp4433
g4397
ag4403
asg17
g0
(g18
g5
Ntp4434
Rp4435
sg814
(lp4436
g4423
asg1274
g1899
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp4437
Rp4438
sg814
(lp4439
g4411
asg1274
g3883
sbsg73
g1931
sbasg1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i1)s + %(i2)s;\n%(o0)s = %(i0)s - V%(id)s_tmp1;\n}\n'
p4440
sg2001
(g1931
tp4441
sg327
g0
(g1486
g5
Ntp4442
Rp4443
(dp4444
g1490
(I0
tp4445
sbsg2007
(lp4446
S'%(nodename)s_subnode0'
p4447
aS'%(nodename)s_subnode1'
p4448
asg2011
I1
sbsbsg1268
(lp4449
g1493
ag1271
asbsg1272
(dp4450
sg1274
g0
(g318
g5
Ntp4451
Rp4452
(dp4453
g53
Nsg322
g4387
sg330
(dp4454
I0
(lp4455
I0
assg332
Nsg333
g0
(g334
g5
Ntp4456
Rp4457
(dp4458
g338
I3713080549408328131
sg339
(dp4459
I0
I0
ssbsg341
I00
sbsbI2
tp4460
asg14
S'auto_14833'
p4461
sg17
g0
(g18
g5
Ntp4462
Rp4463
(dp4464
g22
(lp4465
(lp4466
(g25
I306
g26
S'nade_train( * args[1:] )'
p4467
tp4468
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p4469
tp4470
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p4471
tp4472
a(g37
I36
g38
S'self.recompile()'
p4473
tp4474
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p4475
tp4476
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p4477
tp4478
a(g874
I232
g875
S'logdensity = (log_sum_exp(Phi + T.log(Alpha), axis=2) * output_mask).sum(1) * D / (D - d)'
p4479
tp4480
a(S'/home/leondong/proj/ccnet/experiment/rnade_release/buml/Utils/theano_helpers.py'
p4481
I53
S'log_sum_exp'
p4482
S'return max_x + T.log(T.sum(T.exp(x - T.shape_padright(max_x, 1)), axis))'
p4483
tp4484
aasbsg85
g939
sg73
g0
(g74
g5
Ntp4485
Rp4486
(dp4487
g78
(I00
I00
I01
tp4488
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp4489
Rp4490
(dp4491
g1268
(lp4492
g1271
ag1271
asbsg1272
(dp4493
sg1274
g0
(g1387
g5
Ntp4494
Rp4495
(dp4496
g1391
(lp4497
sg1393
(lp4498
I0
aI1
asg1395
(lp4499
I2
asg1397
g1398
sg1399
(I00
I00
tp4500
sg1401
(lp4501
g1403
asg1404
I01
sg1405
(I0
I1
g270
tp4502
sg1407
(dp4503
S'support_code_apply'
p4504
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p4505
ssg1411
(dp4506
I0
(lp4507
I0
assg1414
(lp4508
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p4509
asbsbI0
tp4510
a(g930
I0
tp4511
asg14
S'auto_16043'
p4512
sg17
g0
(g18
g5
Ntp4513
Rp4514
(dp4515
g22
(lp4516
(lp4517
(g25
I306
g26
S'nade_train( * args[1:] )'
p4518
tp4519
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p4520
tp4521
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p4522
tp4523
a(g37
I36
g38
S'self.recompile()'
p4524
tp4525
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p4526
tp4527
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p4528
tp4529
a(g874
I232
g875
S'logdensity = (log_sum_exp(Phi + T.log(Alpha), axis=2) * output_mask).sum(1) * D / (D - d)'
p4530
tp4531
a(g4481
I52
g4482
S'max_x = T.max(x, axis)'
p4532
tp4533
aasbsg85
g4033
sg73
g0
(g74
g5
Ntp4534
Rp4535
(dp4536
g78
(I00
I00
tp4537
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag4134
ag4161
ag0
(g843
g5
Ntp4538
Rp4539
(dp4540
g16
Nsg53
Nsg798
g801
sg73
g0
(g74
g5
Ntp4541
Rp4542
(dp4543
g78
(I01
I01
tp4544
sg80
S'float64'
p4545
sg82
g66
sg83
I00
sg53
Nsbsg807
(lp4546
(g930
I3
tp4547
asg14
S'auto_15633'
p4548
sg17
g0
(g18
g5
Ntp4549
Rp4550
(dp4551
g22
(lp4552
(lp4553
(g25
I306
g26
S'nade_train( * args[1:] )'
p4554
tp4555
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p4556
tp4557
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p4558
tp4559
a(g37
I36
g38
S'self.recompile()'
p4560
tp4561
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p4562
tp4563
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p4564
tp4565
a(g874
I210
g875
S'output_mask = constantX(1) - mask  # BxD'
p4566
tp4567
aasg878
g879
(g66
S'\x00\x00\x00\x00\x00\x00\xf0?'
p4568
tp4569
Rp4570
sbsg883
g56
(g57
(I0
tp4571
g59
tp4572
Rp4573
(I1
(I1
I1
tp4574
g66
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p4575
tp4576
bsbag826
asg798
g801
sg814
(lp4577
g920
asg17
g0
(g18
g5
Ntp4578
Rp4579
(dp4580
g1451
g0
(g809
g5
Ntp4581
Rp4582
(dp4583
g552
(lp4584
g0
(g1456
g5
Ntp4585
Rp4586
(dp4587
g14
S'auto_17285'
p4588
sg16
Nsg17
g0
(g18
g5
Ntp4589
Rp4590
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4591
Rp4592
(dp4593
g14
S'auto_17286'
p4594
sg16
Nsg17
g0
(g18
g5
Ntp4595
Rp4596
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4597
Rp4598
(dp4599
g14
S'auto_17287'
p4600
sg16
Nsg17
g0
(g18
g5
Ntp4601
Rp4602
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4603
Rp4604
(dp4605
g14
S'auto_17288'
p4606
sg16
Nsg17
g0
(g18
g5
Ntp4607
Rp4608
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4609
Rp4610
(dp4611
g14
S'auto_17289'
p4612
sg16
Nsg17
g0
(g18
g5
Ntp4613
Rp4614
sg53
Nsg85
Nsg73
g1931
sbasg17
g0
(g18
g5
Ntp4615
Rp4616
sg814
(lp4617
g0
(g1456
g5
Ntp4618
Rp4619
(dp4620
g14
S'auto_17290'
p4621
sg16
I0
sg17
g0
(g18
g5
Ntp4622
Rp4623
sg53
Nsg85
g4582
sg73
g1931
sbasg1274
g0
(g1948
g5
Ntp4624
Rp4625
(dp4626
g552
(lp4627
g0
(g1456
g5
Ntp4628
Rp4629
(dp4630
g14
S'auto_16811'
p4631
sg16
Nsg17
g0
(g18
g5
Ntp4632
Rp4633
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4634
Rp4635
(dp4636
g14
S'auto_16812'
p4637
sg16
Nsg17
g0
(g18
g5
Ntp4638
Rp4639
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4640
Rp4641
(dp4642
g14
S'auto_16813'
p4643
sg16
Nsg17
g0
(g18
g5
Ntp4644
Rp4645
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4646
Rp4647
(dp4648
g14
S'auto_16814'
p4649
sg16
Nsg17
g0
(g18
g5
Ntp4650
Rp4651
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4652
Rp4653
(dp4654
g14
S'auto_16815'
p4655
sg16
Nsg17
g0
(g18
g5
Ntp4656
Rp4657
sg53
Nsg85
Nsg73
g1931
sbasg1965
I5
sg53
Nsg1966
(g1931
g1931
g1931
g1931
g1931
tp4658
sg814
(lp4659
g0
(g1456
g5
Ntp4660
Rp4661
(dp4662
g14
S'auto_16819'
p4663
sg16
I0
sg17
g0
(g18
g5
Ntp4664
Rp4665
(dp4666
g22
(lp4667
sbsg53
Nsg85
g0
(g809
g5
Ntp4668
Rp4669
(dp4670
g552
(lp4671
g0
(g1456
g5
Ntp4672
Rp4673
(dp4674
g14
S'auto_16818'
p4675
sg16
I0
sg17
g0
(g18
g5
Ntp4676
Rp4677
(dp4678
g22
(lp4679
sbsg53
Nsg85
g0
(g809
g5
Ntp4680
Rp4681
(dp4682
g552
(lp4683
g4629
ag4635
ag0
(g1456
g5
Ntp4684
Rp4685
(dp4686
g14
S'auto_16817'
p4687
sg16
I0
sg17
g0
(g18
g5
Ntp4688
Rp4689
(dp4690
g22
(lp4691
sbsg53
Nsg85
g0
(g809
g5
Ntp4692
Rp4693
(dp4694
g552
(lp4695
g4641
asg17
g0
(g18
g5
Ntp4696
Rp4697
sg814
(lp4698
g4685
asg1274
g3939
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp4699
Rp4700
sg814
(lp4701
g4673
asg1274
g1899
sbsg73
g1931
sbag0
(g1456
g5
Ntp4702
Rp4703
(dp4704
g14
S'auto_16816'
p4705
sg16
I0
sg17
g0
(g18
g5
Ntp4706
Rp4707
(dp4708
g22
(lp4709
sbsg53
Nsg85
g0
(g809
g5
Ntp4710
Rp4711
(dp4712
g552
(lp4713
g4647
ag4653
asg17
g0
(g18
g5
Ntp4714
Rp4715
sg814
(lp4716
g4703
asg1274
g3883
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp4717
Rp4718
sg814
(lp4719
g4661
asg1274
g3184
sbsg73
g1931
sbasg1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i3)s - %(i4)s;\nnpy_float64 V%(id)s_tmp2;\nV%(id)s_tmp2 = log((npy_float64)%(i2)s);\nnpy_float64 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i0)s + %(i1)s + V%(id)s_tmp2;\n%(o0)s = V%(id)s_tmp3 * V%(id)s_tmp1;\n}\n'
p4720
sg2001
(g1931
tp4721
sg327
g0
(g1486
g5
Ntp4722
Rp4723
(dp4724
g1490
(I0
tp4725
sbsg2007
(lp4726
S'%(nodename)s_subnode0'
p4727
aS'%(nodename)s_subnode1'
p4728
aS'%(nodename)s_subnode2'
p4729
aS'%(nodename)s_subnode3'
p4730
asg2011
I1
sbsbsg1268
(lp4731
g1493
ag1271
asbsg1272
(dp4732
sg1274
g0
(g318
g5
Ntp4733
Rp4734
(dp4735
g53
Nsg322
g4625
sg330
(dp4736
I0
(lp4737
I0
assg332
Nsg333
g0
(g334
g5
Ntp4738
Rp4739
(dp4740
g338
I3713080549408328131
sg339
(dp4741
I0
I0
ssbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp4742
Rp4743
(dp4744
g78
(I00
I00
tp4745
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp4746
g891
asg17
g0
(g18
g5
Ntp4747
Rp4748
(dp4749
g1268
(lp4750
g1271
ag1271
asbsg1272
(dp4751
sg1274
g0
(g1893
g5
Ntp4752
Rp4753
(dp4754
g80
g251
sg322
g1899
sg1903
(I1
tp4755
sg1905
g251
sbsbsg73
g0
(g74
g5
Ntp4756
Rp4757
(dp4758
g78
(I00
tp4759
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag836
asg798
g801
sg814
(lp4760
g0
(g563
g5
Ntp4761
Rp4762
(dp4763
g16
I0
sg53
Nsg798
g801
sg807
(lp4764
(S'output'
p4765
I0
tp4766
asg14
S'auto_16852'
p4767
sg17
g0
(g18
g5
Ntp4768
Rp4769
(dp4770
g22
(lp4771
sbsg85
g840
sg73
g0
(g74
g5
Ntp4772
Rp4773
(dp4774
g78
(I00
tp4775
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp4776
Rp4777
(dp4778
g1451
g0
(g809
g5
Ntp4779
Rp4780
(dp4781
g552
(lp4782
g0
(g1456
g5
Ntp4783
Rp4784
(dp4785
g14
S'auto_17313'
p4786
sg16
Nsg17
g0
(g18
g5
Ntp4787
Rp4788
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4789
Rp4790
(dp4791
g14
S'auto_17314'
p4792
sg16
Nsg17
g0
(g18
g5
Ntp4793
Rp4794
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4795
Rp4796
(dp4797
g14
S'auto_17315'
p4798
sg16
Nsg17
g0
(g18
g5
Ntp4799
Rp4800
sg53
Nsg85
Nsg73
g1931
sbasg17
g0
(g18
g5
Ntp4801
Rp4802
sg814
(lp4803
g0
(g1456
g5
Ntp4804
Rp4805
(dp4806
g14
S'auto_17316'
p4807
sg16
I0
sg17
g0
(g18
g5
Ntp4808
Rp4809
sg53
Nsg85
g4780
sg73
g1931
sbasg1274
g0
(g1948
g5
Ntp4810
Rp4811
(dp4812
g552
(lp4813
g0
(g1456
g5
Ntp4814
Rp4815
(dp4816
g14
S'auto_16836'
p4817
sg16
Nsg17
g0
(g18
g5
Ntp4818
Rp4819
(dp4820
S'test_value'
p4821
g879
(g66
S'\x00\x00\x00\x00\x00\x00(@'
p4822
tp4823
Rp4824
sbsg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4825
Rp4826
(dp4827
g14
S'auto_16837'
p4828
sg16
Nsg17
g0
(g18
g5
Ntp4829
Rp4830
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp4831
Rp4832
(dp4833
g14
S'auto_16838'
p4834
sg16
Nsg17
g0
(g18
g5
Ntp4835
Rp4836
sg53
Nsg85
Nsg73
g1931
sbasg1965
I3
sg53
Nsg1966
(g1931
g1931
g1931
tp4837
sg814
(lp4838
g0
(g1456
g5
Ntp4839
Rp4840
(dp4841
g14
S'auto_16841'
p4842
sg16
I0
sg17
g0
(g18
g5
Ntp4843
Rp4844
(dp4845
g22
(lp4846
sbsg53
Nsg85
g0
(g809
g5
Ntp4847
Rp4848
(dp4849
g552
(lp4850
g0
(g1456
g5
Ntp4851
Rp4852
(dp4853
g14
S'auto_16840'
p4854
sg16
I0
sg17
g0
(g18
g5
Ntp4855
Rp4856
(dp4857
g22
(lp4858
sbsg53
Nsg85
g0
(g809
g5
Ntp4859
Rp4860
(dp4861
g552
(lp4862
g4815
ag4826
asg17
g0
(g18
g5
Ntp4863
Rp4864
sg814
(lp4865
g4852
asg1274
g3184
sbsg73
g1931
sbag0
(g1456
g5
Ntp4866
Rp4867
(dp4868
g14
S'auto_16839'
p4869
sg16
I0
sg17
g0
(g18
g5
Ntp4870
Rp4871
(dp4872
g22
(lp4873
sbsg53
Nsg85
g0
(g809
g5
Ntp4874
Rp4875
(dp4876
g552
(lp4877
g4815
ag4832
asg17
g0
(g18
g5
Ntp4878
Rp4879
sg814
(lp4880
g4867
asg1274
g3883
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp4881
Rp4882
sg814
(lp4883
g4840
asg1274
g3892
sbsg73
g1931
sbasg1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s - %(i2)s;\nnpy_float64 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp2 / V%(id)s_tmp1;\n}\n'
p4884
sg2001
(g1931
tp4885
sg327
g0
(g1486
g5
Ntp4886
Rp4887
(dp4888
g1490
(I1
tp4889
sbsg2007
(lp4890
S'%(nodename)s_subnode0'
p4891
aS'%(nodename)s_subnode1'
p4892
aS'%(nodename)s_subnode2'
p4893
asg2011
I1
sbsbsg1268
(lp4894
g1493
ag1271
asbsg1272
(dp4895
sg1274
g0
(g318
g5
Ntp4896
Rp4897
(dp4898
g53
Nsg322
g4811
sg330
(dp4899
I0
(lp4900
I1
assg332
Nsg333
g0
(g334
g5
Ntp4901
Rp4902
(dp4903
g338
I3713080549409410656
sg339
(dp4904
I0
I1
ssbsg341
I00
sbsbI2
tp4905
asg14
S'auto_14664'
p4906
sg17
g0
(g18
g5
Ntp4907
Rp4908
(dp4909
g22
(lp4910
(lp4911
(g25
I306
g26
S'nade_train( * args[1:] )'
p4912
tp4913
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p4914
tp4915
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p4916
tp4917
a(g37
I36
g38
S'self.recompile()'
p4918
tp4919
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p4920
tp4921
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p4922
tp4923
a(g874
I212
g875
S'd = mask.sum(1)  # d is the 1-based index of the dimension whose value to infer (not the size of the context)'
p4924
tp4925
aasbsg85
g831
sg73
g0
(g74
g5
Ntp4926
Rp4927
(dp4928
g78
(I00
tp4929
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp4930
Rp4931
(dp4932
g1268
(lp4933
g1271
ag1271
asbsg1272
(dp4934
sg1274
g0
(g1893
g5
Ntp4935
Rp4936
(dp4937
g80
g251
sg322
g1899
sg1903
(I1
tp4938
sg1905
g251
sbsbI0
tp4939
a(g2900
I2
tp4940
a(g822
I1
tp4941
a(g930
I4
tp4942
asg14
S'auto_14663'
p4943
sg17
g0
(g18
g5
Ntp4944
Rp4945
(dp4946
g22
(lp4947
(lp4948
(g25
I306
g26
S'nade_train( * args[1:] )'
p4949
tp4950
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p4951
tp4952
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p4953
tp4954
a(g37
I36
g38
S'self.recompile()'
p4955
tp4956
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p4957
tp4958
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p4959
tp4960
a(g874
I209
g875
S'mask = mask.T  # BxD'
p4961
tp4962
aasbsg85
g0
(g809
g5
Ntp4963
Rp4964
(dp4965
g552
(lp4966
g0
(g563
g5
Ntp4967
Rp4968
(dp4969
g16
Nsg53
g593
sg798
g801
sg807
(lp4970
(g4964
I0
tp4971
asg14
S'auto_14651'
p4972
sg17
g0
(g18
g5
Ntp4973
Rp4974
(dp4975
g22
g601
sbsg85
Nsg73
g614
sbasg798
g801
sg814
(lp4976
g826
asg17
g0
(g18
g5
Ntp4977
Rp4978
(dp4979
g1268
(lp4980
g1271
ag1271
asbsg1272
(dp4981
sg1274
g0
(g1387
g5
Ntp4982
Rp4983
(dp4984
g1391
(lp4985
sg1393
(lp4986
I1
aI0
asg1395
(lp4987
sg1397
g1398
sg1399
g616
sg1401
(lp4988
g1403
asg1404
I01
sg1405
(I1
I0
tp4989
sg1407
(dp4990
S'support_code_apply'
p4991
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p4992
ssg1411
(dp4993
I0
(lp4994
I0
assg1414
(lp4995
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p4996
asbsbsg73
g0
(g74
g5
Ntp4997
Rp4998
(dp4999
g78
(I00
I00
tp5000
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp5001
g2933
asg17
g0
(g18
g5
Ntp5002
Rp5003
(dp5004
g1451
g0
(g809
g5
Ntp5005
Rp5006
(dp5007
g552
(lp5008
g0
(g1456
g5
Ntp5009
Rp5010
(dp5011
g14
S'auto_16977'
p5012
sg16
Nsg17
g0
(g18
g5
Ntp5013
Rp5014
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp5015
Rp5016
(dp5017
g14
S'auto_16978'
p5018
sg16
Nsg17
g0
(g18
g5
Ntp5019
Rp5020
sg53
Nsg85
Nsg73
g1931
sbasg17
g0
(g18
g5
Ntp5021
Rp5022
sg814
(lp5023
g0
(g1456
g5
Ntp5024
Rp5025
(dp5026
g14
S'auto_16979'
p5027
sg16
I0
sg17
g0
(g18
g5
Ntp5028
Rp5029
sg53
Nsg85
g5006
sg73
g1931
sbasg1274
g3184
sbsg4093
(lp5030
g1493
ag1493
asg1268
(lp5031
g1271
aS"('Revert', 'inplace_elemwise_optimizer')"
p5032
aS"('Revert', 'inplace_elemwise_optimizer')"
p5033
ag1271
asbsg1272
(dp5034
sg1274
g0
(g318
g5
Ntp5035
Rp5036
(dp5037
g379
g380
sg322
g3184
sg53
S'Elemwise{mul,no_inplace}'
p5038
sg330
(dp5039
sg332
g1501
sg333
g0
(g334
g5
Ntp5040
Rp5041
(dp5042
g338
I0
sg339
(dp5043
sbsg341
I00
sg307
S"elementwise multiplication\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p5044
sbsbI0
tp5045
asg14
S'auto_14688'
p5046
sg17
g0
(g18
g5
Ntp5047
Rp5048
(dp5049
g22
(lp5050
(lp5051
(g25
I306
g26
S'nade_train( * args[1:] )'
p5052
tp5053
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p5054
tp5055
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p5056
tp5057
a(g37
I36
g38
S'self.recompile()'
p5058
tp5059
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p5060
tp5061
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p5062
tp5063
a(g874
I208
g875
S'x = x.T  # BxD'
p5064
tp5065
aasbsg85
g811
sg73
g0
(g74
g5
Ntp5066
Rp5067
(dp5068
g78
(I00
I00
tp5069
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp5070
Rp5071
(dp5072
g1268
(lp5073
g1271
ag1271
asbsg1272
(dp5074
sg1274
g0
(g1387
g5
Ntp5075
Rp5076
(dp5077
g1391
(lp5078
sg1393
(lp5079
I1
aI0
asg1395
(lp5080
sg1397
g1398
sg1399
g588
sg1401
(lp5081
g1403
asg1404
I01
sg1405
(I1
I0
tp5082
sg1407
(dp5083
S'support_code_apply'
p5084
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p5085
ssg1411
(dp5086
I0
(lp5087
I0
assg1414
(lp5088
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p5089
asbsbI0
tp5090
a(g3655
I0
tp5091
a(g2267
I0
tp5092
asg14
S'auto_14650'
p5093
sg17
g0
(g18
g5
Ntp5094
Rp5095
(dp5096
g22
g571
sbsg85
Nsg73
g586
sbag4968
ag2962
ag3000
ag2856
ag3242
ag3260
ag1205
ag3596
ag1155
ag2510
ag1581
ag1762
asg814
(lp5097
g4762
asS'update_mapping'
p5098
(dp5099
sS'merge_feature'
p5100
g0
(ctheano.gof.opt
MergeFeature
p5101
g5
Ntp5102
Rp5103
(dp5104
S'scheduled'
p5105
(lp5106
sS'nodes_seen'
p5107
c__builtin__
set
p5108
((lp5109
g1801
ag1810
ag3274
ag831
ag1160
ag2308
ag1201
ag2477
ag840
ag2506
ag4138
ag2929
ag1151
ag2780
ag3655
ag948
ag971
ag1247
ag1186
ag3256
ag916
ag2439
ag1682
ag2267
ag3238
ag4129
ag1758
ag1691
ag1577
ag1420
ag2173
ag4033
ag2809
ag3592
ag1594
ag1209
ag811
ag2852
ag1085
ag2421
ag822
ag2285
ag4156
ag1585
ag1637
ag956
ag1093
ag1056
ag1729
ag1177
ag980
ag4147
ag1169
ag2900
ag4964
ag1122
ag1218
ag930
ag1261
ag2823
ag1553
ag1562
ag2294
ag1623
ag939
atp5110
Rp5111
sS'const_sig_inv'
p5112
(itheano.gof.opt
_metadict
p5113
(dp5114
S'd'
p5115
(dp5116
g0
(ctheano.tensor.var
TensorConstantSignature
p5117
g2
(S'TupleType'
p5118
tp5119
Rp5120
(g2984
g2996
tp5121
tp5122
Rp5123
(dp5124
S'has_nan'
p5125
I00
sS'_sum'
p5126
g879
(g66
S'\x00\x00\x00\x00\x00\x00\xf0?'
p5127
tp5128
Rp5129
sS'_no_nan'
p5130
g2996
sbg2981
sg0
(g5117
g5120
(g987
g1003
tp5131
tp5132
Rp5133
(dp5134
g5125
I00
sg5126
g879
(g66
S'\xb4\xbed\xc8\xf1g\xed\xbf'
p5135
tp5136
Rp5137
sg5130
g1003
sbg984
sg0
(g5117
g5120
(g3025
g3064
tp5138
tp5139
Rp5140
(dp5141
g5125
I00
sg5126
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p5142
tp5143
Rp5144
sg5130
g3064
sbg3022
sg0
(g5117
g5120
(g1011
g1026
tp5145
tp5146
Rp5147
(dp5148
g5125
I00
sg5126
g879
(g66
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
p5149
tp5150
Rp5151
sg5130
g1026
sbg1008
sg0
(g5117
g5120
(g4542
g4573
tp5152
tp5153
Rp5154
(dp5155
g5125
I00
sg5126
g879
(g66
S'\x00\x00\x00\x00\x00\x00\xf0?'
p5156
tp5157
Rp5158
sg5130
g4573
sbg4539
sg0
(g5117
g5120
(g848
g886
tp5159
tp5160
Rp5161
(dp5162
g5125
I00
sg5126
g879
(g66
S'\x00\x00\x00\x00\x00\x00(@'
p5163
tp5164
Rp5165
sg5130
g886
sbg845
s(g1465
g3387
tp5166
g3252
ssS'l'
p5167
(lp5168
sbsS'noinput_nodes'
p5169
g0
(ctheano.misc.ordered_set
OrderedSet
p5170
g5
Ntp5171
Rp5172
(dp5173
S'_OrderedSet__root'
p5174
g0
(ctheano.misc.ordered_set
Link
p5175
g5
Ntp5176
Rp5177
(lp5178
g5177
ag5177
absS'_OrderedSet__map'
p5179
(dp5180
sbsS'blacklist'
p5181
(lp5182
sS'seen_constants'
p5183
g5108
((lp5184
I140318531232848
aI140318521670544
aI140318522039888
aI140318523067536
aI140318587699792
aI140318532364944
aI140318523601680
atp5185
Rp5186
sS'const_sig'
p5187
(itheano.gof.opt
_metadict
p5188
(dp5189
g5115
(dp5190
g2981
g5123
sg4539
g5154
sg3022
g5140
sg3252
g5166
sg1008
g5147
sg845
g5161
sg984
g5133
ssg5167
(lp5191
sbsbsS'destroy_handler'
p5192
g0
(ctheano.gof.destroyhandler
DestroyHandler
p5193
g5
Ntp5194
Rp5195
(dp5196
S'impact'
p5197
(dp5198
g1165
g0
(g5170
g5
Ntp5199
Rp5200
(dp5201
g5174
g0
(g5175
g5
Ntp5202
Rp5203
(lp5204
g0
(g5175
g5
Ntp5205
Rp5206
(lp5207
g5203
ag5203
ag1165
abag5206
absg5179
(dp5208
g1165
g5206
ssbsg934
g0
(g5170
g5
Ntp5209
Rp5210
(dp5211
g5174
g0
(g5175
g5
Ntp5212
Rp5213
(lp5214
g0
(g5175
g5
Ntp5215
Rp5216
(lp5217
g0
(g5175
g5
Ntp5218
Rp5219
(lp5220
g5213
ag5216
ag944
abag5213
ag934
abag5219
absg5179
(dp5221
g944
g5219
sg934
g5216
ssbsg4125
g0
(g5170
g5
Ntp5222
Rp5223
(dp5224
g5174
g0
(g5175
g5
Ntp5225
Rp5226
(lp5227
g0
(g5175
g5
Ntp5228
Rp5229
(lp5230
g5226
ag5226
ag4125
abag5229
absg5179
(dp5231
g4125
g5229
ssbsg2890
g0
(g5170
g5
Ntp5232
Rp5233
(dp5234
g5174
g0
(g5175
g5
Ntp5235
Rp5236
(lp5237
g0
(g5175
g5
Ntp5238
Rp5239
(lp5240
g5236
ag5236
ag2890
abag5239
absg5179
(dp5241
g2890
g5239
ssbsg1566
g0
(g5170
g5
Ntp5242
Rp5243
(dp5244
g5174
g0
(g5175
g5
Ntp5245
Rp5246
(lp5247
g0
(g5175
g5
Ntp5248
Rp5249
(lp5250
g5246
ag5246
ag1566
abag5249
absg5179
(dp5251
g1566
g5249
ssbsg1190
g0
(g5170
g5
Ntp5252
Rp5253
(dp5254
g5174
g0
(g5175
g5
Ntp5255
Rp5256
(lp5257
g0
(g5175
g5
Ntp5258
Rp5259
(lp5260
g5256
ag5256
ag1190
abag5259
absg5179
(dp5261
g1190
g5259
ssbsg891
g0
(g5170
g5
Ntp5262
Rp5263
(dp5264
g5174
g0
(g5175
g5
Ntp5265
Rp5266
(lp5267
g0
(g5175
g5
Ntp5268
Rp5269
(lp5270
g5266
ag5266
ag891
abag5269
absg5179
(dp5271
g891
g5269
ssbsg2443
g0
(g5170
g5
Ntp5272
Rp5273
(dp5274
g5174
g0
(g5175
g5
Ntp5275
Rp5276
(lp5277
g0
(g5175
g5
Ntp5278
Rp5279
(lp5280
g0
(g5175
g5
Ntp5281
Rp5282
(lp5283
g5276
ag5279
ag2473
abag5276
ag2443
abag5282
absg5179
(dp5284
g2473
g5282
sg2443
g5279
ssbsg1687
g0
(g5170
g5
Ntp5285
Rp5286
(dp5287
g5174
g0
(g5175
g5
Ntp5288
Rp5289
(lp5290
g0
(g5175
g5
Ntp5291
Rp5292
(lp5293
g0
(g5175
g5
Ntp5294
Rp5295
(lp5296
g5289
ag5292
ag1725
abag5289
ag1687
abag5295
absg5179
(dp5297
g1687
g5292
sg1725
g5295
ssbsg2784
g0
(g5170
g5
Ntp5298
Rp5299
(dp5300
g5174
g0
(g5175
g5
Ntp5301
Rp5302
(lp5303
g0
(g5175
g5
Ntp5304
Rp5305
(lp5306
g5302
ag5302
ag2784
abag5305
absg5179
(dp5307
g2784
g5305
ssbsg1060
g0
(g5170
g5
Ntp5308
Rp5309
(dp5310
g5174
g0
(g5175
g5
Ntp5311
Rp5312
(lp5313
g0
(g5175
g5
Ntp5314
Rp5315
(lp5316
g0
(g5175
g5
Ntp5317
Rp5318
(lp5319
g5312
ag5315
ag1031
abag5312
ag1060
abag5318
absg5179
(dp5320
g1060
g5315
sg1031
g5318
ssbsg2904
g0
(g5170
g5
Ntp5321
Rp5322
(dp5323
g5174
g0
(g5175
g5
Ntp5324
Rp5325
(lp5326
g0
(g5175
g5
Ntp5327
Rp5328
(lp5329
g5325
ag5325
ag2904
abag5328
absg5179
(dp5330
g2904
g5328
ssbsg975
g0
(g5170
g5
Ntp5331
Rp5332
(dp5333
g5174
g0
(g5175
g5
Ntp5334
Rp5335
(lp5336
g0
(g5175
g5
Ntp5337
Rp5338
(lp5339
g5335
ag5335
ag975
abag5338
absg5179
(dp5340
g975
g5338
ssbsg952
g0
(g5170
g5
Ntp5341
Rp5342
(dp5343
g5174
g0
(g5175
g5
Ntp5344
Rp5345
(lp5346
g0
(g5175
g5
Ntp5347
Rp5348
(lp5349
g5345
ag5345
ag952
abag5348
absg5179
(dp5350
g952
g5348
ssbssS'droot'
p5351
(dp5352
g1165
g1165
sg934
g934
sg4125
g4125
sg2890
g2890
sg944
g934
sg2473
g2443
sg1190
g1190
sg1031
g1060
sg891
g891
sg2443
g2443
sg1687
g1687
sg975
g975
sg1060
g1060
sg2904
g2904
sg1725
g1687
sg1566
g1566
sg2784
g2784
sg952
g952
ssS'view_o'
p5353
(dp5354
g805
g0
(g5170
g5
Ntp5355
Rp5356
(dp5357
g5174
g0
(g5175
g5
Ntp5358
Rp5359
(lp5360
g0
(g5175
g5
Ntp5361
Rp5362
(lp5363
g0
(g5175
g5
Ntp5364
Rp5365
(lp5366
g5359
ag5362
ag817
abag5359
ag3630
abag5365
absg5179
(dp5367
g817
g5365
sg3630
g5362
ssbsg4134
g0
(g5170
g5
Ntp5368
Rp5369
(dp5370
g5174
g0
(g5175
g5
Ntp5371
Rp5372
(lp5373
g0
(g5175
g5
Ntp5374
Rp5375
(lp5376
g5372
ag5372
ag4143
abag5375
absg5179
(dp5377
g4143
g5375
ssbsg934
g0
(g5170
g5
Ntp5378
Rp5379
(dp5380
g5174
g0
(g5175
g5
Ntp5381
Rp5382
(lp5383
g0
(g5175
g5
Ntp5384
Rp5385
(lp5386
g5382
ag5382
ag944
abag5385
absg5179
(dp5387
g944
g5385
ssbsg1205
g0
(g5170
g5
Ntp5388
Rp5389
(dp5390
g5174
g0
(g5175
g5
Ntp5391
Rp5392
(lp5393
g0
(g5175
g5
Ntp5394
Rp5395
(lp5396
g5392
ag5392
ag1214
abag5395
absg5179
(dp5397
g1214
g5395
ssbsg1155
g0
(g5170
g5
Ntp5398
Rp5399
(dp5400
g5174
g0
(g5175
g5
Ntp5401
Rp5402
(lp5403
g0
(g5175
g5
Ntp5404
Rp5405
(lp5406
g5402
ag5402
ag1126
abag5405
absg5179
(dp5407
g1126
g5405
ssbsg3242
g0
(g5170
g5
Ntp5408
Rp5409
(dp5410
g5174
g0
(g5175
g5
Ntp5411
Rp5412
(lp5413
g0
(g5175
g5
Ntp5414
Rp5415
(lp5416
g5412
ag5412
ag3213
abag5415
absg5179
(dp5417
g3213
g5415
ssbsg1581
g0
(g5170
g5
Ntp5418
Rp5419
(dp5420
g5174
g0
(g5175
g5
Ntp5421
Rp5422
(lp5423
g0
(g5175
g5
Ntp5424
Rp5425
(lp5426
g5422
ag5422
ag1590
abag5425
absg5179
(dp5427
g1590
g5425
ssbsg3260
g0
(g5170
g5
Ntp5428
Rp5429
(dp5430
g5174
g0
(g5175
g5
Ntp5431
Rp5432
(lp5433
g0
(g5175
g5
Ntp5434
Rp5435
(lp5436
g5432
ag5432
ag3270
abag5435
absg5179
(dp5437
g3270
g5435
ssbsg1687
g0
(g5170
g5
Ntp5438
Rp5439
(dp5440
g5174
g0
(g5175
g5
Ntp5441
Rp5442
(lp5443
g0
(g5175
g5
Ntp5444
Rp5445
(lp5446
g5442
ag5442
ag1725
abag5445
absg5179
(dp5447
g1725
g5445
ssbsg2510
g0
(g5170
g5
Ntp5448
Rp5449
(dp5450
g5174
g0
(g5175
g5
Ntp5451
Rp5452
(lp5453
g0
(g5175
g5
Ntp5454
Rp5455
(lp5456
g5452
ag5452
ag2481
abag5455
absg5179
(dp5457
g2481
g5455
ssbsg1060
g0
(g5170
g5
Ntp5458
Rp5459
(dp5460
g5174
g0
(g5175
g5
Ntp5461
Rp5462
(lp5463
g0
(g5175
g5
Ntp5464
Rp5465
(lp5466
g5462
ag5462
ag1031
abag5465
absg5179
(dp5467
g1031
g5465
ssbsg1806
g0
(g5170
g5
Ntp5468
Rp5469
(dp5470
g5174
g0
(g5175
g5
Ntp5471
Rp5472
(lp5473
g0
(g5175
g5
Ntp5474
Rp5475
(lp5476
g5472
ag5472
ag1815
abag5475
absg5179
(dp5477
g1815
g5475
ssbsg2443
g0
(g5170
g5
Ntp5478
Rp5479
(dp5480
g5174
g0
(g5175
g5
Ntp5481
Rp5482
(lp5483
g0
(g5175
g5
Ntp5484
Rp5485
(lp5486
g5482
ag5482
ag2473
abag5485
absg5179
(dp5487
g2473
g5485
ssbsg3270
g0
(g5170
g5
Ntp5488
Rp5489
(dp5490
g5174
g0
(g5175
g5
Ntp5491
Rp5492
(lp5493
g0
(g5175
g5
Ntp5494
Rp5495
(lp5496
g5492
ag5492
ag3279
abag5495
absg5179
(dp5497
g3279
g5495
ssbsg1590
g0
(g5170
g5
Ntp5498
Rp5499
(dp5500
g5174
g0
(g5175
g5
Ntp5501
Rp5502
(lp5503
g0
(g5175
g5
Ntp5504
Rp5505
(lp5506
g5502
ag5502
ag1678
abag5505
absg5179
(dp5507
g1678
g5505
ssbsg3596
g0
(g5170
g5
Ntp5508
Rp5509
(dp5510
g5174
g0
(g5175
g5
Ntp5511
Rp5512
(lp5513
g0
(g5175
g5
Ntp5514
Rp5515
(lp5516
g5512
ag5512
ag3567
abag5515
absg5179
(dp5517
g3567
g5515
ssbsg1762
g0
(g5170
g5
Ntp5518
Rp5519
(dp5520
g5174
g0
(g5175
g5
Ntp5521
Rp5522
(lp5523
g0
(g5175
g5
Ntp5524
Rp5525
(lp5526
g5522
ag5522
ag1733
abag5525
absg5179
(dp5527
g1733
g5525
ssbsg1126
g0
(g5170
g5
Ntp5528
Rp5529
(dp5530
g5174
g0
(g5175
g5
Ntp5531
Rp5532
(lp5533
g0
(g5175
g5
Ntp5534
Rp5535
(lp5536
g5532
ag5532
ag1097
abag5535
absg5179
(dp5537
g1097
g5535
ssbsg1214
g0
(g5170
g5
Ntp5538
Rp5539
(dp5540
g5174
g0
(g5175
g5
Ntp5541
Rp5542
(lp5543
g0
(g5175
g5
Ntp5544
Rp5545
(lp5546
g5542
ag5542
ag1319
abag5545
absg5179
(dp5547
g1319
g5545
ssbsg2856
g0
(g5170
g5
Ntp5548
Rp5549
(dp5550
g5174
g0
(g5175
g5
Ntp5551
Rp5552
(lp5553
g0
(g5175
g5
Ntp5554
Rp5555
(lp5556
g5552
ag5552
ag2827
abag5555
absg5179
(dp5557
g2827
g5555
ssbsg4968
g0
(g5170
g5
Ntp5558
Rp5559
(dp5560
g5174
g0
(g5175
g5
Ntp5561
Rp5562
(lp5563
g0
(g5175
g5
Ntp5564
Rp5565
(lp5566
g5562
ag5562
ag826
abag5565
absg5179
(dp5567
g826
g5565
ssbssS'view_i'
p5568
(dp5569
g1590
g1581
sg2827
g2856
sg3567
g3596
sg1678
g1590
sg1815
g1806
sg1214
g1205
sg1319
g1214
sg817
g805
sg1725
g1687
sg1733
g1762
sg3270
g3260
sg826
g4968
sg2473
g2443
sg3279
g3270
sg4143
g4134
sg3213
g3242
sg944
g934
sg2481
g2510
sg1031
g1060
sg1097
g1126
sg1126
g1155
sg3630
g805
ssg798
g801
sS'do_imports_on_attach'
p5570
I01
sg807
ccollections
OrderedDict
p5571
((lp5572
(lp5573
g4968
ag5571
((lp5574
(lp5575
g4964
aI1
aatp5576
Rp5577
aa(lp5578
g826
ag5571
((lp5579
(lp5580
g831
aI1
aa(lp5581
g2900
aI1
aa(lp5582
g822
aI1
aa(lp5583
g930
aI1
aatp5584
Rp5585
aa(lp5586
g836
ag5571
((lp5587
(lp5588
g840
aI1
aatp5589
Rp5590
aa(lp5591
g2510
ag5571
((lp5592
(lp5593
g2506
aI1
aatp5594
Rp5595
aa(lp5596
g2481
ag5571
((lp5597
(lp5598
g2477
aI1
aatp5599
Rp5600
aa(lp5601
g1155
ag5571
((lp5602
(lp5603
g1160
aI1
aa(lp5604
g2421
aI1
aa(lp5605
g2308
aI1
aa(lp5606
g1151
aI1
aatp5607
Rp5608
aa(lp5609
g1165
ag5571
((lp5610
(lp5611
g1169
aI1
aa(lp5612
g2285
aI1
aatp5613
Rp5614
aa(lp5615
g2280
ag5571
((lp5616
(lp5617
g1169
aI1
aa(lp5618
g2285
aI1
aatp5619
Rp5620
aa(lp5621
g805
ag5571
((lp5622
(lp5623
g2267
aI1
aa(lp5624
g811
aI1
aa(lp5625
g3655
aI1
aatp5626
Rp5627
aa(lp5628
g1173
ag5571
((lp5629
(lp5630
g1169
aI1
aa(lp5631
g1553
aI1
aa(lp5632
g1177
aI1
aatp5633
Rp5634
aa(lp5635
g2435
ag5571
((lp5636
(lp5637
g2439
aI1
aatp5638
Rp5639
aa(lp5640
g0
(g563
g5
Ntp5641
Rp5642
(dp5643
g16
I0
sg53
Nsg798
g801
sg807
(lp5644
sg14
S'auto_15506'
p5645
sg17
g0
(g18
g5
Ntp5646
Rp5647
(dp5648
g4058
g4059
sg22
(lp5649
sbsg85
g0
(g809
g5
Ntp5650
Rp5651
(dp5652
g552
(lp5653
g1165
ag2280
asg798
g801
sg814
(lp5654
g5642
asg17
g0
(g18
g5
Ntp5655
Rp5656
(dp5657
g4093
(lp5658
g1493
asg1268
(lp5659
S'local_mul_canonizer'
p5660
asbsg1272
(dp5661
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp5662
Rp5663
(dp5664
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag5571
((lp5665
tp5666
Rp5667
aa(lp5668
g2298
ag5571
((lp5669
(lp5670
g2294
aI1
aatp5671
Rp5672
aa(lp5673
g2322
ag5571
((lp5674
(lp5675
g1122
aI1
aatp5676
Rp5677
aa(lp5678
g1126
ag5571
((lp5679
(lp5680
g1122
aI1
aatp5681
Rp5682
aa(lp5683
g1097
ag5571
((lp5684
(lp5685
g1093
aI1
aatp5686
Rp5687
aa(lp5688
g3260
ag5571
((lp5689
(lp5690
g3256
aI1
aatp5691
Rp5692
aa(lp5693
g3252
ag5571
((lp5694
(lp5695
g3256
aI1
aa(lp5696
g3238
aI1
aatp5697
Rp5698
aa(lp5699
g3270
ag5571
((lp5700
(lp5701
g3274
aI1
aatp5702
Rp5703
aa(lp5704
g3279
ag5571
((lp5705
(lp5706
g2780
aI1
aatp5707
Rp5708
aa(lp5709
g3242
ag5571
((lp5710
(lp5711
g3238
aI1
aatp5712
Rp5713
aa(lp5714
g3213
ag5571
((lp5715
(lp5716
g2809
aI1
aatp5717
Rp5718
aa(lp5719
g817
ag5571
((lp5720
(lp5721
g822
aI1
aatp5722
Rp5723
aa(lp5724
g2933
ag5571
((lp5725
(lp5726
g2929
aI1
aatp5727
Rp5728
aa(lp5729
g2962
ag5571
((lp5730
(lp5731
g2929
aI1
aatp5732
Rp5733
aa(lp5734
g2904
ag5571
((lp5735
(lp5736
g2900
aI1
aatp5737
Rp5738
aa(lp5739
g2981
ag5571
((lp5740
(lp5741
g2900
aI2
aatp5742
Rp5743
aa(lp5744
g3000
ag5571
((lp5745
(lp5746
g2900
aI1
aatp5747
Rp5748
aa(lp5749
g0
(g563
g5
Ntp5750
Rp5751
(dp5752
g16
I0
sg53
Nsg798
g801
sg807
(lp5753
sg14
S'auto_15902'
p5754
sg17
g0
(g18
g5
Ntp5755
Rp5756
(dp5757
g22
(lp5758
sbsg85
g0
(g809
g5
Ntp5759
Rp5760
(dp5761
g552
(lp5762
g2904
ag2981
ag826
ag3000
ag2981
asg798
g801
sg814
(lp5763
g5751
asg17
g0
(g18
g5
Ntp5764
Rp5765
(dp5766
g4093
(lp5767
S'LocalOptGroup(local_inplace_gemm,local_inplace_gemv,local_inplace_ger)'
p5768
asg1268
(lp5769
S'GemmOptimizer'
p5770
asbsg1272
(dp5771
sg1274
g0
(g3015
g5
Ntp5772
Rp5773
(dp5774
g1404
I00
sbsbsg73
g2977
sbag5571
((lp5775
tp5776
Rp5777
aa(lp5778
g2856
ag5571
((lp5779
(lp5780
g2852
aI1
aatp5781
Rp5782
aa(lp5783
g2827
ag5571
((lp5784
(lp5785
g2823
aI1
aatp5786
Rp5787
aa(lp5788
g3022
ag5571
((lp5789
(lp5790
g2823
aI1
aa(lp5791
g2780
aI1
aatp5792
Rp5793
aa(lp5794
g0
(g563
g5
Ntp5795
Rp5796
(dp5797
g16
I0
sg53
Nsg798
g801
sg807
(lp5798
sg14
S'auto_16602'
p5799
sg17
g0
(g18
g5
Ntp5800
Rp5801
(dp5802
g22
(lp5803
sbsg85
g0
(g809
g5
Ntp5804
Rp5805
(dp5806
g552
(lp5807
g2827
ag2890
ag3022
asg798
g801
sg814
(lp5808
g5796
asg17
g0
(g18
g5
Ntp5809
Rp5810
(dp5811
g4093
(lp5812
g1493
asg1268
(lp5813
S'FusionOptimizer'
p5814
asbsg1272
(dp5815
sg1274
g0
(g318
g5
Ntp5816
Rp5817
(dp5818
g53
Nsg322
g0
(g1948
g5
Ntp5819
Rp5820
(dp5821
g552
(lp5822
g0
(g1456
g5
Ntp5823
Rp5824
(dp5825
g14
S'auto_16585'
p5826
sg16
Nsg17
g0
(g18
g5
Ntp5827
Rp5828
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp5829
Rp5830
(dp5831
g14
S'auto_16586'
p5832
sg16
Nsg17
g0
(g18
g5
Ntp5833
Rp5834
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp5835
Rp5836
(dp5837
g14
S'auto_16587'
p5838
sg16
Nsg17
g0
(g18
g5
Ntp5839
Rp5840
sg53
Nsg85
Nsg73
g3094
sbasg1965
I3
sg53
Nsg1966
(g1931
g1931
g3094
tp5841
sg814
(lp5842
g0
(g1456
g5
Ntp5843
Rp5844
(dp5845
g14
S'auto_16591'
p5846
sg16
I0
sg17
g0
(g18
g5
Ntp5847
Rp5848
(dp5849
g22
g3137
sbsg53
Nsg85
g0
(g809
g5
Ntp5850
Rp5851
(dp5852
g552
(lp5853
g0
(g1456
g5
Ntp5854
Rp5855
(dp5856
g14
S'auto_16589'
p5857
sg16
I0
sg17
g0
(g18
g5
Ntp5858
Rp5859
(dp5860
g22
g3149
sbsg53
Nsg85
g0
(g809
g5
Ntp5861
Rp5862
(dp5863
g552
(lp5864
g5824
ag5830
asg17
g0
(g18
g5
Ntp5865
Rp5866
sg814
(lp5867
g5855
asg1274
g1899
sbsg73
g1931
sbag0
(g1456
g5
Ntp5868
Rp5869
(dp5870
g14
S'auto_16590'
p5871
sg16
I0
sg17
g0
(g18
g5
Ntp5872
Rp5873
(dp5874
g22
g3164
sbsg53
Nsg85
g0
(g809
g5
Ntp5875
Rp5876
(dp5877
g552
(lp5878
g5855
ag5836
asg17
g0
(g18
g5
Ntp5879
Rp5880
sg814
(lp5881
g5869
asg1274
g3174
sbsg73
g3178
sbasg17
g0
(g18
g5
Ntp5882
Rp5883
sg814
(lp5884
g5844
asg1274
g3184
sbsg73
g1931
sbasg1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\nnpy_bool V%(id)s_tmp2;\nV%(id)s_tmp2 = (V%(id)s_tmp1 > %(i2)s);\n%(o0)s = V%(id)s_tmp1 * V%(id)s_tmp2;\n}\n'
p5885
sg2001
(g1931
tp5886
sg2007
(lp5887
S'%(nodename)s_subnode0'
p5888
aS'%(nodename)s_subnode1'
p5889
aS'%(nodename)s_subnode2'
p5890
asg2011
I1
sbsg330
(dp5891
sg332
Nsg333
g0
(g334
g5
Ntp5892
Rp5893
(dp5894
g338
I0
sg339
(dp5895
sbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp5896
Rp5897
(dp5898
g78
(I00
I00
tp5899
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag5571
((lp5900
tp5901
Rp5902
aa(lp5903
g2784
ag5571
((lp5904
(lp5905
g2780
aI1
aatp5906
Rp5907
aa(lp5908
g0
(g563
g5
Ntp5909
Rp5910
(dp5911
g16
I0
sg53
Nsg798
g801
sg807
(lp5912
sg14
S'auto_16576'
p5913
sg17
g0
(g18
g5
Ntp5914
Rp5915
(dp5916
g22
(lp5917
sbsg85
g0
(g809
g5
Ntp5918
Rp5919
(dp5920
g552
(lp5921
g2784
ag3279
ag3022
asg798
g801
sg814
(lp5922
g5910
asg17
g0
(g18
g5
Ntp5923
Rp5924
(dp5925
g4093
(lp5926
g1493
asg1268
(lp5927
g5814
asbsg1272
(dp5928
sg1274
g0
(g318
g5
Ntp5929
Rp5930
(dp5931
g53
Nsg322
g0
(g1948
g5
Ntp5932
Rp5933
(dp5934
g552
(lp5935
g0
(g1456
g5
Ntp5936
Rp5937
(dp5938
g14
S'auto_16559'
p5939
sg16
Nsg17
g0
(g18
g5
Ntp5940
Rp5941
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp5942
Rp5943
(dp5944
g14
S'auto_16560'
p5945
sg16
Nsg17
g0
(g18
g5
Ntp5946
Rp5947
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp5948
Rp5949
(dp5950
g14
S'auto_16561'
p5951
sg16
Nsg17
g0
(g18
g5
Ntp5952
Rp5953
sg53
Nsg85
Nsg73
g3094
sbasg1965
I3
sg53
Nsg1966
(g1931
g1931
g3094
tp5954
sg814
(lp5955
g0
(g1456
g5
Ntp5956
Rp5957
(dp5958
g14
S'auto_16565'
p5959
sg16
I0
sg17
g0
(g18
g5
Ntp5960
Rp5961
(dp5962
g22
g3479
sbsg53
Nsg85
g0
(g809
g5
Ntp5963
Rp5964
(dp5965
g552
(lp5966
g0
(g1456
g5
Ntp5967
Rp5968
(dp5969
g14
S'auto_16563'
p5970
sg16
I0
sg17
g0
(g18
g5
Ntp5971
Rp5972
(dp5973
g22
g3491
sbsg53
Nsg85
g0
(g809
g5
Ntp5974
Rp5975
(dp5976
g552
(lp5977
g5937
ag5943
asg17
g0
(g18
g5
Ntp5978
Rp5979
sg814
(lp5980
g5968
asg1274
g1899
sbsg73
g1931
sbag0
(g1456
g5
Ntp5981
Rp5982
(dp5983
g14
S'auto_16564'
p5984
sg16
I0
sg17
g0
(g18
g5
Ntp5985
Rp5986
(dp5987
g22
g3506
sbsg53
Nsg85
g0
(g809
g5
Ntp5988
Rp5989
(dp5990
g552
(lp5991
g5968
ag5949
asg17
g0
(g18
g5
Ntp5992
Rp5993
sg814
(lp5994
g5982
asg1274
g3174
sbsg73
g3178
sbasg17
g0
(g18
g5
Ntp5995
Rp5996
sg814
(lp5997
g5957
asg1274
g3184
sbsg73
g1931
sbasg1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\nnpy_bool V%(id)s_tmp2;\nV%(id)s_tmp2 = (V%(id)s_tmp1 > %(i2)s);\n%(o0)s = V%(id)s_tmp1 * V%(id)s_tmp2;\n}\n'
p5998
sg2001
(g1931
tp5999
sg2007
(lp6000
S'%(nodename)s_subnode0'
p6001
aS'%(nodename)s_subnode1'
p6002
aS'%(nodename)s_subnode2'
p6003
asg2011
I1
sbsg330
(dp6004
sg332
Nsg333
g0
(g334
g5
Ntp6005
Rp6006
(dp6007
g338
I0
sg339
(dp6008
sbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp6009
Rp6010
(dp6011
g78
(I00
I00
tp6012
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag5571
((lp6013
tp6014
Rp6015
aa(lp6016
g2443
ag5571
((lp6017
(lp6018
g2439
aI1
aatp6019
Rp6020
aa(lp6021
g2473
ag5571
((lp6022
(lp6023
g2477
aI1
aatp6024
Rp6025
aa(lp6026
g0
(g563
g5
Ntp6027
Rp6028
(dp6029
g16
I0
sg53
Nsg798
g801
sg807
(lp6030
sg14
S'auto_16475'
p6031
sg17
g0
(g18
g5
Ntp6032
Rp6033
(dp6034
g22
(lp6035
sbsg85
g0
(g809
g5
Ntp6036
Rp6037
(dp6038
g552
(lp6039
g2473
ag2481
asg798
g801
sg814
(lp6040
g6028
asg17
g0
(g18
g5
Ntp6041
Rp6042
(dp6043
g4093
(lp6044
g1493
asg1268
(lp6045
g5814
asbsg1272
(dp6046
sg1274
g0
(g318
g5
Ntp6047
Rp6048
(dp6049
g53
Nsg322
g0
(g1948
g5
Ntp6050
Rp6051
(dp6052
g552
(lp6053
g0
(g1456
g5
Ntp6054
Rp6055
(dp6056
g14
S'auto_16464'
p6057
sg16
Nsg17
g0
(g18
g5
Ntp6058
Rp6059
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp6060
Rp6061
(dp6062
g14
S'auto_16465'
p6063
sg16
Nsg17
g0
(g18
g5
Ntp6064
Rp6065
sg53
Nsg85
Nsg73
g1931
sbasg1965
I2
sg53
Nsg1966
(g1931
g1931
tp6066
sg814
(lp6067
g0
(g1456
g5
Ntp6068
Rp6069
(dp6070
g14
S'auto_16467'
p6071
sg16
I0
sg17
g0
(g18
g5
Ntp6072
Rp6073
(dp6074
g22
g2597
sbsg53
Nsg85
g0
(g809
g5
Ntp6075
Rp6076
(dp6077
g552
(lp6078
g0
(g1456
g5
Ntp6079
Rp6080
(dp6081
g14
S'auto_16466'
p6082
sg16
I0
sg17
g0
(g18
g5
Ntp6083
Rp6084
(dp6085
g22
g2609
sbsg53
Nsg85
g0
(g809
g5
Ntp6086
Rp6087
(dp6088
g552
(lp6089
g6055
ag6061
asg17
g0
(g18
g5
Ntp6090
Rp6091
sg814
(lp6092
g6080
asg1274
g1899
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp6093
Rp6094
sg814
(lp6095
g6069
asg1274
g383
sbsg73
g1931
sbasg1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = exp((npy_float64)V%(id)s_tmp1);\n}\n'
p6096
sg2001
(g1931
tp6097
sg2007
(lp6098
S'%(nodename)s_subnode0'
p6099
aS'%(nodename)s_subnode1'
p6100
asg2011
I1
sbsg330
(dp6101
sg332
Nsg333
g0
(g334
g5
Ntp6102
Rp6103
(dp6104
g338
I0
sg339
(dp6105
sbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp6106
Rp6107
(dp6108
g78
(I00
I00
I00
tp6109
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag5571
((lp6110
tp6111
Rp6112
aa(lp6113
g0
(g563
g5
Ntp6114
Rp6115
(dp6116
g16
I0
sg53
Nsg798
g801
sg807
(lp6117
sg14
S'auto_14780'
p6118
sg17
g0
(g18
g5
Ntp6119
Rp6120
(dp6121
g22
(lp6122
(lp6123
(g25
I306
g26
S'nade_train( * args[1:] )'
p6124
tp6125
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p6126
tp6127
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p6128
tp6129
a(g37
I36
g38
S'self.recompile()'
p6130
tp6131
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p6132
tp6133
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p6134
tp6135
a(g874
I231
g875
S'Phi = -constantX(0.5) * T.sqr((Mu - T.shape_padright(x)) / Sigma) - T.log(Sigma) - constantX(0.5 * np.log(2 * np.pi))  # BxDxC'
p6136
tp6137
aasbsg85
g0
(g809
g5
Ntp6138
Rp6139
(dp6140
g552
(lp6141
g975
asg798
g801
sg814
(lp6142
g6115
asg17
g0
(g18
g5
Ntp6143
Rp6144
(dp6145
g4093
(lp6146
g1493
asg1268
(lp6147
g1271
asbsg1272
(dp6148
sg1274
g0
(g318
g5
Ntp6149
Rp6150
(dp6151
g379
g380
sg322
g3939
sg53
S'Elemwise{log,no_inplace}'
p6152
sg330
(dp6153
sg332
g4018
sg333
g0
(g334
g5
Ntp6154
Rp6155
(dp6156
g338
I0
sg339
(dp6157
sbsg341
I00
sg307
S"base e logarithm of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p6158
sbsbsg73
g0
(g74
g5
Ntp6159
Rp6160
(dp6161
g78
(I00
I00
I00
tp6162
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag5571
((lp6163
tp6164
Rp6165
aa(lp6166
g1762
ag5571
((lp6167
(lp6168
g1758
aI1
aatp6169
Rp6170
aa(lp6171
g1733
ag5571
((lp6172
(lp6173
g1729
aI1
aatp6174
Rp6175
aa(lp6176
g1581
ag5571
((lp6177
(lp6178
g1577
aI1
aa(lp6179
g2173
aI1
aa(lp6180
g1637
aI1
aa(lp6181
g1585
aI1
aatp6182
Rp6183
aa(lp6184
g1566
ag5571
((lp6185
(lp6186
g1553
aI1
aa(lp6187
g1562
aI1
aatp6188
Rp6189
aa(lp6190
g1557
ag5571
((lp6191
(lp6192
g1553
aI1
aa(lp6193
g1562
aI1
aatp6194
Rp6195
aa(lp6196
g1695
ag5571
((lp6197
(lp6198
g1691
aI1
aatp6199
Rp6200
aa(lp6201
g0
(g563
g5
Ntp6202
Rp6203
(dp6204
g16
I0
sg53
Nsg798
g801
sg807
(lp6205
sg14
S'auto_15611'
p6206
sg17
g0
(g18
g5
Ntp6207
Rp6208
(dp6209
g4058
g4059
sg22
(lp6210
sbsg85
g0
(g809
g5
Ntp6211
Rp6212
(dp6213
g552
(lp6214
g1566
ag1557
asg798
g801
sg814
(lp6215
g6203
asg17
g0
(g18
g5
Ntp6216
Rp6217
(dp6218
g4093
(lp6219
g1493
asg1268
(lp6220
g5660
asbsg1272
(dp6221
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp6222
Rp6223
(dp6224
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag5571
((lp6225
tp6226
Rp6227
aa(lp6228
g1627
ag5571
((lp6229
(lp6230
g1623
aI1
aatp6231
Rp6232
aa(lp6233
g1598
ag5571
((lp6234
(lp6235
g1594
aI1
aatp6236
Rp6237
aa(lp6238
g1590
ag5571
((lp6239
(lp6240
g1594
aI1
aatp6241
Rp6242
aa(lp6243
g1678
ag5571
((lp6244
(lp6245
g1682
aI1
aatp6246
Rp6247
aa(lp6248
g1687
ag5571
((lp6249
(lp6250
g1691
aI1
aatp6251
Rp6252
aa(lp6253
g1725
ag5571
((lp6254
(lp6255
g1729
aI1
aatp6256
Rp6257
aa(lp6258
g0
(g563
g5
Ntp6259
Rp6260
(dp6261
g16
I0
sg53
Nsg798
g801
sg807
(lp6262
sg14
S'auto_16454'
p6263
sg17
g0
(g18
g5
Ntp6264
Rp6265
(dp6266
g22
(lp6267
sbsg85
g0
(g809
g5
Ntp6268
Rp6269
(dp6270
g552
(lp6271
g1725
ag1733
asg798
g801
sg814
(lp6272
g6260
asg17
g0
(g18
g5
Ntp6273
Rp6274
(dp6275
g4093
(lp6276
g1493
asg1268
(lp6277
g5814
asbsg1272
(dp6278
sg1274
g0
(g318
g5
Ntp6279
Rp6280
(dp6281
g53
Nsg322
g0
(g1948
g5
Ntp6282
Rp6283
(dp6284
g552
(lp6285
g0
(g1456
g5
Ntp6286
Rp6287
(dp6288
g14
S'auto_16443'
p6289
sg16
Nsg17
g0
(g18
g5
Ntp6290
Rp6291
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp6292
Rp6293
(dp6294
g14
S'auto_16444'
p6295
sg16
Nsg17
g0
(g18
g5
Ntp6296
Rp6297
sg53
Nsg85
Nsg73
g1931
sbasg1965
I2
sg53
Nsg1966
(g1931
g1931
tp6298
sg814
(lp6299
g0
(g1456
g5
Ntp6300
Rp6301
(dp6302
g14
S'auto_16446'
p6303
sg16
I0
sg17
g0
(g18
g5
Ntp6304
Rp6305
(dp6306
g22
g1976
sbsg53
Nsg85
g0
(g809
g5
Ntp6307
Rp6308
(dp6309
g552
(lp6310
g0
(g1456
g5
Ntp6311
Rp6312
(dp6313
g14
S'auto_16445'
p6314
sg16
I0
sg17
g0
(g18
g5
Ntp6315
Rp6316
(dp6317
g22
g1988
sbsg53
Nsg85
g0
(g809
g5
Ntp6318
Rp6319
(dp6320
g552
(lp6321
g6287
ag6293
asg17
g0
(g18
g5
Ntp6322
Rp6323
sg814
(lp6324
g6312
asg1274
g1899
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp6325
Rp6326
sg814
(lp6327
g6301
asg1274
g383
sbsg73
g1931
sbasg1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s + %(i1)s;\n%(o0)s = exp((npy_float64)V%(id)s_tmp1);\n}\n'
p6328
sg2001
(g1931
tp6329
sg2007
(lp6330
S'%(nodename)s_subnode0'
p6331
aS'%(nodename)s_subnode1'
p6332
asg2011
I1
sbsg330
(dp6333
sg332
Nsg333
g0
(g334
g5
Ntp6334
Rp6335
(dp6336
g338
I0
sg339
(dp6337
sbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp6338
Rp6339
(dp6340
g78
(I00
I00
I00
tp6341
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag5571
((lp6342
tp6343
Rp6344
aa(lp6345
g1806
ag5571
((lp6346
(lp6347
g1810
aI1
aatp6348
Rp6349
aa(lp6350
g1815
ag5571
((lp6351
(lp6352
g980
aI1
aatp6353
Rp6354
aa(lp6355
g3630
ag5571
((lp6356
(lp6357
g980
aI1
aatp6358
Rp6359
aa(lp6360
g3596
ag5571
((lp6361
(lp6362
g3592
aI1
aatp6363
Rp6364
aa(lp6365
g3567
ag5571
((lp6366
(lp6367
g980
aI1
aatp6368
Rp6369
aa(lp6370
g1205
ag5571
((lp6371
(lp6372
g1201
aI1
aa(lp6373
g1420
aI1
aa(lp6374
g1261
aI1
aa(lp6375
g1209
aI1
aatp6376
Rp6377
aa(lp6378
g1190
ag5571
((lp6379
(lp6380
g1177
aI1
aa(lp6381
g1186
aI1
aatp6382
Rp6383
aa(lp6384
g1181
ag5571
((lp6385
(lp6386
g1177
aI1
aa(lp6387
g1186
aI1
aatp6388
Rp6389
aa(lp6390
g1514
ag5571
((lp6391
(lp6392
g1056
aI1
aatp6393
Rp6394
aa(lp6395
g0
(g563
g5
Ntp6396
Rp6397
(dp6398
g16
I0
sg53
Nsg798
g801
sg807
(lp6399
sg14
S'auto_15473'
p6400
sg17
g0
(g18
g5
Ntp6401
Rp6402
(dp6403
g4058
g4059
sg22
(lp6404
sbsg85
g0
(g809
g5
Ntp6405
Rp6406
(dp6407
g552
(lp6408
g1190
ag1181
asg798
g801
sg814
(lp6409
g6397
asg17
g0
(g18
g5
Ntp6410
Rp6411
(dp6412
g4093
(lp6413
g1493
asg1268
(lp6414
g5660
asbsg1272
(dp6415
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp6416
Rp6417
(dp6418
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag5571
((lp6419
tp6420
Rp6421
aa(lp6422
g1251
ag5571
((lp6423
(lp6424
g1247
aI1
aatp6425
Rp6426
aa(lp6427
g1222
ag5571
((lp6428
(lp6429
g1218
aI1
aatp6430
Rp6431
aa(lp6432
g1214
ag5571
((lp6433
(lp6434
g1218
aI1
aatp6435
Rp6436
aa(lp6437
g1319
ag5571
((lp6438
(lp6439
g1085
aI1
aatp6440
Rp6441
aa(lp6442
g1060
ag5571
((lp6443
(lp6444
g1056
aI1
aatp6445
Rp6446
aa(lp6447
g1031
ag5571
((lp6448
(lp6449
g980
aI1
aatp6450
Rp6451
aa(lp6452
g984
ag5571
((lp6453
(lp6454
g980
aI1
aatp6455
Rp6456
aa(lp6457
g1008
ag5571
((lp6458
(lp6459
g980
aI1
aatp6460
Rp6461
aa(lp6462
g0
(g563
g5
Ntp6463
Rp6464
(dp6465
g16
I0
sg53
Nsg798
g801
sg807
(lp6466
sg14
S'auto_16396'
p6467
sg17
g0
(g18
g5
Ntp6468
Rp6469
(dp6470
g22
(lp6471
sbsg85
g0
(g809
g5
Ntp6472
Rp6473
(dp6474
g552
(lp6475
g984
ag1008
ag1031
ag3567
ag3630
ag975
ag1797
ag1815
asg798
g801
sg814
(lp6476
g6464
asg17
g0
(g18
g5
Ntp6477
Rp6478
(dp6479
g4093
(lp6480
g1493
asg1268
(lp6481
g5814
asbsg1272
(dp6482
sg1274
g0
(g318
g5
Ntp6483
Rp6484
(dp6485
g53
Nsg322
g0
(g1948
g5
Ntp6486
Rp6487
(dp6488
g552
(lp6489
g0
(g1456
g5
Ntp6490
Rp6491
(dp6492
g14
S'auto_16354'
p6493
sg16
Nsg17
g0
(g18
g5
Ntp6494
Rp6495
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp6496
Rp6497
(dp6498
g14
S'auto_16355'
p6499
sg16
Nsg17
g0
(g18
g5
Ntp6500
Rp6501
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp6502
Rp6503
(dp6504
g14
S'auto_16356'
p6505
sg16
Nsg17
g0
(g18
g5
Ntp6506
Rp6507
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp6508
Rp6509
(dp6510
g14
S'auto_16357'
p6511
sg16
Nsg17
g0
(g18
g5
Ntp6512
Rp6513
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp6514
Rp6515
(dp6516
g14
S'auto_16358'
p6517
sg16
Nsg17
g0
(g18
g5
Ntp6518
Rp6519
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp6520
Rp6521
(dp6522
g14
S'auto_16359'
p6523
sg16
Nsg17
g0
(g18
g5
Ntp6524
Rp6525
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp6526
Rp6527
(dp6528
g14
S'auto_16360'
p6529
sg16
Nsg17
g0
(g18
g5
Ntp6530
Rp6531
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp6532
Rp6533
(dp6534
g14
S'auto_16361'
p6535
sg16
Nsg17
g0
(g18
g5
Ntp6536
Rp6537
sg53
Nsg85
Nsg73
g1931
sbasg1965
I8
sg53
Nsg1966
(g1931
g1931
g1931
g1931
g1931
g1931
g1931
g1931
tp6538
sg814
(lp6539
g0
(g1456
g5
Ntp6540
Rp6541
(dp6542
g14
S'auto_16370'
p6543
sg16
I0
sg17
g0
(g18
g5
Ntp6544
Rp6545
(dp6546
g22
g3810
sbsg53
Nsg85
g0
(g809
g5
Ntp6547
Rp6548
(dp6549
g552
(lp6550
g6491
ag0
(g1456
g5
Ntp6551
Rp6552
(dp6553
g14
S'auto_16367'
p6554
sg16
I0
sg17
g0
(g18
g5
Ntp6555
Rp6556
(dp6557
g22
g3822
sbsg53
Nsg85
g0
(g809
g5
Ntp6558
Rp6559
(dp6560
g552
(lp6561
g6497
ag0
(g1456
g5
Ntp6562
Rp6563
(dp6564
g14
S'auto_16366'
p6565
sg16
I0
sg17
g0
(g18
g5
Ntp6566
Rp6567
(dp6568
g22
g3834
sbsg53
Nsg85
g0
(g809
g5
Ntp6569
Rp6570
(dp6571
g552
(lp6572
g0
(g1456
g5
Ntp6573
Rp6574
(dp6575
g14
S'auto_16365'
p6576
sg16
I0
sg17
g0
(g18
g5
Ntp6577
Rp6578
(dp6579
g22
g3846
sbsg53
Nsg85
g0
(g809
g5
Ntp6580
Rp6581
(dp6582
g552
(lp6583
g0
(g1456
g5
Ntp6584
Rp6585
(dp6586
g14
S'auto_16364'
p6587
sg16
I0
sg17
g0
(g18
g5
Ntp6588
Rp6589
(dp6590
g22
g3858
sbsg53
Nsg85
g0
(g809
g5
Ntp6591
Rp6592
(dp6593
g552
(lp6594
g0
(g1456
g5
Ntp6595
Rp6596
(dp6597
g14
S'auto_16363'
p6598
sg16
I0
sg17
g0
(g18
g5
Ntp6599
Rp6600
(dp6601
g22
g3870
sbsg53
Nsg85
g0
(g809
g5
Ntp6602
Rp6603
(dp6604
g552
(lp6605
g6503
ag6509
asg17
g0
(g18
g5
Ntp6606
Rp6607
sg814
(lp6608
g6596
asg1274
g1899
sbsg73
g1931
sbag6515
asg17
g0
(g18
g5
Ntp6609
Rp6610
sg814
(lp6611
g6585
asg1274
g3883
sbsg73
g1931
sbag6521
asg17
g0
(g18
g5
Ntp6612
Rp6613
sg814
(lp6614
g6574
asg1274
g3892
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp6615
Rp6616
sg814
(lp6617
g6563
asg1274
g3900
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp6618
Rp6619
sg814
(lp6620
g6552
asg1274
g3184
sbsg73
g1931
sbag0
(g1456
g5
Ntp6621
Rp6622
(dp6623
g14
S'auto_16369'
p6624
sg16
I0
sg17
g0
(g18
g5
Ntp6625
Rp6626
(dp6627
g22
g3914
sbsg53
Nsg85
g0
(g809
g5
Ntp6628
Rp6629
(dp6630
g552
(lp6631
g0
(g1456
g5
Ntp6632
Rp6633
(dp6634
g14
S'auto_16368'
p6635
sg16
I0
sg17
g0
(g18
g5
Ntp6636
Rp6637
(dp6638
g22
g3926
sbsg53
Nsg85
g0
(g809
g5
Ntp6639
Rp6640
(dp6641
g552
(lp6642
g6527
ag6533
asg17
g0
(g18
g5
Ntp6643
Rp6644
sg814
(lp6645
g6633
asg1274
g3892
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp6646
Rp6647
sg814
(lp6648
g6622
asg1274
g3939
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp6649
Rp6650
sg814
(lp6651
g6541
asg1274
g1899
sbsg73
g1931
sbasg1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i6)s / %(i7)s;\nnpy_float64 V%(id)s_tmp2;\nV%(id)s_tmp2 = log((npy_float64)V%(id)s_tmp1);\nnpy_float64 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i2)s + %(i3)s;\nnpy_float64 V%(id)s_tmp4;\nV%(id)s_tmp4 = V%(id)s_tmp3 - %(i4)s;\nnpy_float64 V%(id)s_tmp5;\nV%(id)s_tmp5 = V%(id)s_tmp4 / %(i5)s;\nnpy_float64 V%(id)s_tmp6;\nV%(id)s_tmp6 = V%(id)s_tmp5 * V%(id)s_tmp5;\nnpy_float64 V%(id)s_tmp7;\nV%(id)s_tmp7 = %(i1)s * V%(id)s_tmp6;\n%(o0)s = %(i0)s + V%(id)s_tmp7 + V%(id)s_tmp2;\n}\n'
p6652
sg2001
(g1931
tp6653
sg2007
(lp6654
S'%(nodename)s_subnode0'
p6655
aS'%(nodename)s_subnode1'
p6656
aS'%(nodename)s_subnode2'
p6657
aS'%(nodename)s_subnode3'
p6658
aS'%(nodename)s_subnode4'
p6659
aS'%(nodename)s_subnode5'
p6660
aS'%(nodename)s_subnode6'
p6661
aS'%(nodename)s_subnode7'
p6662
asg2011
I1
sbsg330
(dp6663
sg332
Nsg333
g0
(g334
g5
Ntp6664
Rp6665
(dp6666
g338
I0
sg339
(dp6667
sbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp6668
Rp6669
(dp6670
g78
(I00
I00
I00
tp6671
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag5571
((lp6672
tp6673
Rp6674
aa(lp6675
g4029
ag5571
((lp6676
(lp6677
g4033
aI1
aatp6678
Rp6679
aa(lp6680
g934
ag5571
((lp6681
(lp6682
g939
aI1
aa(lp6683
g930
aI1
aatp6684
Rp6685
aa(lp6686
g944
ag5571
((lp6687
(lp6688
g948
aI1
aatp6689
Rp6690
aa(lp6691
g0
(g563
g5
Ntp6692
Rp6693
(dp6694
g16
I0
sg53
Nsg798
g801
sg807
(lp6695
sg14
S'auto_16186'
p6696
sg17
g0
(g18
g5
Ntp6697
Rp6698
(dp6699
g22
(lp6700
sbsg85
g0
(g809
g5
Ntp6701
Rp6702
(dp6703
g552
(lp6704
g952
ag960
ag944
asg798
g801
sg814
(lp6705
g6693
asg17
g0
(g18
g5
Ntp6706
Rp6707
(dp6708
g4093
(lp6709
g1493
asg1268
(lp6710
g5814
asbsg1272
(dp6711
sg1274
g0
(g318
g5
Ntp6712
Rp6713
(dp6714
g53
Nsg322
g0
(g1948
g5
Ntp6715
Rp6716
(dp6717
g552
(lp6718
g0
(g1456
g5
Ntp6719
Rp6720
(dp6721
g14
S'auto_16172'
p6722
sg16
Nsg17
g0
(g18
g5
Ntp6723
Rp6724
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp6725
Rp6726
(dp6727
g14
S'auto_16173'
p6728
sg16
Nsg17
g0
(g18
g5
Ntp6729
Rp6730
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp6731
Rp6732
(dp6733
g14
S'auto_16174'
p6734
sg16
Nsg17
g0
(g18
g5
Ntp6735
Rp6736
sg53
Nsg85
Nsg73
g1931
sbasg1965
I3
sg53
Nsg1966
(g1931
g1931
g1931
tp6737
sg814
(lp6738
g0
(g1456
g5
Ntp6739
Rp6740
(dp6741
g14
S'auto_16176'
p6742
sg16
I0
sg17
g0
(g18
g5
Ntp6743
Rp6744
(dp6745
g22
g4417
sbsg53
Nsg85
g0
(g809
g5
Ntp6746
Rp6747
(dp6748
g552
(lp6749
g6720
ag0
(g1456
g5
Ntp6750
Rp6751
(dp6752
g14
S'auto_16175'
p6753
sg16
I0
sg17
g0
(g18
g5
Ntp6754
Rp6755
(dp6756
g22
g4429
sbsg53
Nsg85
g0
(g809
g5
Ntp6757
Rp6758
(dp6759
g552
(lp6760
g6726
ag6732
asg17
g0
(g18
g5
Ntp6761
Rp6762
sg814
(lp6763
g6751
asg1274
g1899
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp6764
Rp6765
sg814
(lp6766
g6740
asg1274
g3883
sbsg73
g1931
sbasg1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i1)s + %(i2)s;\n%(o0)s = %(i0)s - V%(id)s_tmp1;\n}\n'
p6767
sg2001
(g1931
tp6768
sg2007
(lp6769
S'%(nodename)s_subnode0'
p6770
aS'%(nodename)s_subnode1'
p6771
asg2011
I1
sbsg330
(dp6772
sg332
Nsg333
g0
(g334
g5
Ntp6773
Rp6774
(dp6775
g338
I0
sg339
(dp6776
sbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp6777
Rp6778
(dp6779
g78
(I00
I00
I00
tp6780
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag5571
((lp6781
tp6782
Rp6783
aa(lp6784
g4134
ag5571
((lp6785
(lp6786
g4138
aI1
aa(lp6787
g930
aI1
aatp6788
Rp6789
aa(lp6790
g4143
ag5571
((lp6791
(lp6792
g4147
aI1
aatp6793
Rp6794
aa(lp6795
g0
(g563
g5
Ntp6796
Rp6797
(dp6798
g16
I0
sg53
Nsg798
g801
sg807
(lp6799
sg14
S'auto_16164'
p6800
sg17
g0
(g18
g5
Ntp6801
Rp6802
(dp6803
g22
(lp6804
sbsg85
g0
(g809
g5
Ntp6805
Rp6806
(dp6807
g552
(lp6808
g4125
ag4143
asg798
g801
sg814
(lp6809
g6797
asg17
g0
(g18
g5
Ntp6810
Rp6811
(dp6812
g4093
(lp6813
g1493
asg1268
(lp6814
g5814
asbsg1272
(dp6815
sg1274
g0
(g318
g5
Ntp6816
Rp6817
(dp6818
g53
Nsg322
g0
(g1948
g5
Ntp6819
Rp6820
(dp6821
g552
(lp6822
g0
(g1456
g5
Ntp6823
Rp6824
(dp6825
g14
S'auto_16153'
p6826
sg16
Nsg17
g0
(g18
g5
Ntp6827
Rp6828
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp6829
Rp6830
(dp6831
g14
S'auto_16154'
p6832
sg16
Nsg17
g0
(g18
g5
Ntp6833
Rp6834
sg53
Nsg85
Nsg73
g1931
sbasg1965
I2
sg53
Nsg1966
(g1931
g1931
tp6835
sg814
(lp6836
g0
(g1456
g5
Ntp6837
Rp6838
(dp6839
g14
S'auto_16156'
p6840
sg16
I0
sg17
g0
(g18
g5
Ntp6841
Rp6842
(dp6843
g22
g4247
sbsg53
Nsg85
g0
(g809
g5
Ntp6844
Rp6845
(dp6846
g552
(lp6847
g0
(g1456
g5
Ntp6848
Rp6849
(dp6850
g14
S'auto_16155'
p6851
sg16
I0
sg17
g0
(g18
g5
Ntp6852
Rp6853
(dp6854
g22
g4259
sbsg53
Nsg85
g0
(g809
g5
Ntp6855
Rp6856
(dp6857
g552
(lp6858
g6824
ag6830
asg17
g0
(g18
g5
Ntp6859
Rp6860
sg814
(lp6861
g6849
asg1274
g3883
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp6862
Rp6863
sg814
(lp6864
g6838
asg1274
g383
sbsg73
g1931
sbasg1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s - %(i1)s;\n%(o0)s = exp((npy_float64)V%(id)s_tmp1);\n}\n'
p6865
sg2001
(g1931
tp6866
sg2007
(lp6867
S'%(nodename)s_subnode0'
p6868
aS'%(nodename)s_subnode1'
p6869
asg2011
I1
sbsg330
(dp6870
sg332
Nsg333
g0
(g334
g5
Ntp6871
Rp6872
(dp6873
g338
I0
sg339
(dp6874
sbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp6875
Rp6876
(dp6877
g78
(I00
I00
I00
tp6878
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag5571
((lp6879
tp6880
Rp6881
aa(lp6882
g4161
ag5571
((lp6883
(lp6884
g930
aI1
aatp6885
Rp6886
aa(lp6887
g4539
ag5571
((lp6888
(lp6889
g930
aI1
aatp6890
Rp6891
aa(lp6892
g0
(g563
g5
Ntp6893
Rp6894
(dp6895
g16
I0
sg53
Nsg798
g801
sg807
(lp6896
sg14
S'auto_16138'
p6897
sg17
g0
(g18
g5
Ntp6898
Rp6899
(dp6900
g22
(lp6901
sbsg85
g0
(g809
g5
Ntp6902
Rp6903
(dp6904
g552
(lp6905
g934
ag4134
ag4161
ag4539
ag826
asg798
g801
sg814
(lp6906
g6894
asg17
g0
(g18
g5
Ntp6907
Rp6908
(dp6909
g4093
(lp6910
g1493
asg1268
(lp6911
g5814
asbsg1272
(dp6912
sg1274
g0
(g318
g5
Ntp6913
Rp6914
(dp6915
g53
Nsg322
g0
(g1948
g5
Ntp6916
Rp6917
(dp6918
g552
(lp6919
g0
(g1456
g5
Ntp6920
Rp6921
(dp6922
g14
S'auto_16113'
p6923
sg16
Nsg17
g0
(g18
g5
Ntp6924
Rp6925
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp6926
Rp6927
(dp6928
g14
S'auto_16114'
p6929
sg16
Nsg17
g0
(g18
g5
Ntp6930
Rp6931
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp6932
Rp6933
(dp6934
g14
S'auto_16115'
p6935
sg16
Nsg17
g0
(g18
g5
Ntp6936
Rp6937
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp6938
Rp6939
(dp6940
g14
S'auto_16116'
p6941
sg16
Nsg17
g0
(g18
g5
Ntp6942
Rp6943
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp6944
Rp6945
(dp6946
g14
S'auto_16117'
p6947
sg16
Nsg17
g0
(g18
g5
Ntp6948
Rp6949
sg53
Nsg85
Nsg73
g1931
sbasg1965
I5
sg53
Nsg1966
(g1931
g1931
g1931
g1931
g1931
tp6950
sg814
(lp6951
g0
(g1456
g5
Ntp6952
Rp6953
(dp6954
g14
S'auto_16122'
p6955
sg16
I0
sg17
g0
(g18
g5
Ntp6956
Rp6957
(dp6958
g22
g4667
sbsg53
Nsg85
g0
(g809
g5
Ntp6959
Rp6960
(dp6961
g552
(lp6962
g0
(g1456
g5
Ntp6963
Rp6964
(dp6965
g14
S'auto_16120'
p6966
sg16
I0
sg17
g0
(g18
g5
Ntp6967
Rp6968
(dp6969
g22
g4679
sbsg53
Nsg85
g0
(g809
g5
Ntp6970
Rp6971
(dp6972
g552
(lp6973
g6921
ag6927
ag0
(g1456
g5
Ntp6974
Rp6975
(dp6976
g14
S'auto_16119'
p6977
sg16
I0
sg17
g0
(g18
g5
Ntp6978
Rp6979
(dp6980
g22
g4691
sbsg53
Nsg85
g0
(g809
g5
Ntp6981
Rp6982
(dp6983
g552
(lp6984
g6933
asg17
g0
(g18
g5
Ntp6985
Rp6986
sg814
(lp6987
g6975
asg1274
g3939
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp6988
Rp6989
sg814
(lp6990
g6964
asg1274
g1899
sbsg73
g1931
sbag0
(g1456
g5
Ntp6991
Rp6992
(dp6993
g14
S'auto_16121'
p6994
sg16
I0
sg17
g0
(g18
g5
Ntp6995
Rp6996
(dp6997
g22
g4709
sbsg53
Nsg85
g0
(g809
g5
Ntp6998
Rp6999
(dp7000
g552
(lp7001
g6939
ag6945
asg17
g0
(g18
g5
Ntp7002
Rp7003
sg814
(lp7004
g6992
asg1274
g3883
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp7005
Rp7006
sg814
(lp7007
g6953
asg1274
g3184
sbsg73
g1931
sbasg1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i3)s - %(i4)s;\nnpy_float64 V%(id)s_tmp2;\nV%(id)s_tmp2 = log((npy_float64)%(i2)s);\nnpy_float64 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i0)s + %(i1)s + V%(id)s_tmp2;\n%(o0)s = V%(id)s_tmp3 * V%(id)s_tmp1;\n}\n'
p7008
sg2001
(g1931
tp7009
sg2007
(lp7010
S'%(nodename)s_subnode0'
p7011
aS'%(nodename)s_subnode1'
p7012
aS'%(nodename)s_subnode2'
p7013
aS'%(nodename)s_subnode3'
p7014
asg2011
I1
sbsg330
(dp7015
sg332
Nsg333
g0
(g334
g5
Ntp7016
Rp7017
(dp7018
g338
I0
sg339
(dp7019
sbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp7020
Rp7021
(dp7022
g78
(I00
I00
tp7023
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag5571
((lp7024
tp7025
Rp7026
aa(lp7027
g891
ag5571
((lp7028
(lp7029
g840
aI1
aatp7030
Rp7031
aa(lp7032
g845
ag5571
((lp7033
(lp7034
g840
aI1
aatp7035
Rp7036
aa(lp7037
g0
(g563
g5
Ntp7038
Rp7039
(dp7040
g16
I0
sg53
Nsg798
g801
sg807
(lp7041
sg14
S'auto_16071'
p7042
sg17
g0
(g18
g5
Ntp7043
Rp7044
(dp7045
g22
(lp7046
sbsg85
g0
(g809
g5
Ntp7047
Rp7048
(dp7049
g552
(lp7050
g845
ag891
ag836
asg798
g801
sg814
(lp7051
g7039
asg17
g0
(g18
g5
Ntp7052
Rp7053
(dp7054
g4093
(lp7055
g1493
asg1268
(lp7056
g5814
asbsg1272
(dp7057
sg1274
g0
(g318
g5
Ntp7058
Rp7059
(dp7060
g53
Nsg322
g0
(g1948
g5
Ntp7061
Rp7062
(dp7063
g552
(lp7064
g0
(g1456
g5
Ntp7065
Rp7066
(dp7067
g14
S'auto_16055'
p7068
sg16
Nsg17
g0
(g18
g5
Ntp7069
Rp7070
(dp7071
g4821
g4824
sbsg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp7072
Rp7073
(dp7074
g14
S'auto_16056'
p7075
sg16
Nsg17
g0
(g18
g5
Ntp7076
Rp7077
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp7078
Rp7079
(dp7080
g14
S'auto_16057'
p7081
sg16
Nsg17
g0
(g18
g5
Ntp7082
Rp7083
sg53
Nsg85
Nsg73
g1931
sbasg1965
I3
sg53
Nsg1966
(g1931
g1931
g1931
tp7084
sg814
(lp7085
g0
(g1456
g5
Ntp7086
Rp7087
(dp7088
g14
S'auto_16060'
p7089
sg16
I0
sg17
g0
(g18
g5
Ntp7090
Rp7091
(dp7092
g22
g4846
sbsg53
Nsg85
g0
(g809
g5
Ntp7093
Rp7094
(dp7095
g552
(lp7096
g0
(g1456
g5
Ntp7097
Rp7098
(dp7099
g14
S'auto_16059'
p7100
sg16
I0
sg17
g0
(g18
g5
Ntp7101
Rp7102
(dp7103
g22
g4858
sbsg53
Nsg85
g0
(g809
g5
Ntp7104
Rp7105
(dp7106
g552
(lp7107
g7066
ag7073
asg17
g0
(g18
g5
Ntp7108
Rp7109
sg814
(lp7110
g7098
asg1274
g3184
sbsg73
g1931
sbag0
(g1456
g5
Ntp7111
Rp7112
(dp7113
g14
S'auto_16058'
p7114
sg16
I0
sg17
g0
(g18
g5
Ntp7115
Rp7116
(dp7117
g22
g4873
sbsg53
Nsg85
g0
(g809
g5
Ntp7118
Rp7119
(dp7120
g552
(lp7121
g7066
ag7079
asg17
g0
(g18
g5
Ntp7122
Rp7123
sg814
(lp7124
g7112
asg1274
g3883
sbsg73
g1931
sbasg17
g0
(g18
g5
Ntp7125
Rp7126
sg814
(lp7127
g7087
asg1274
g3892
sbsg73
g1931
sbasg1999
S'{\nnpy_float64 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s - %(i2)s;\nnpy_float64 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp2 / V%(id)s_tmp1;\n}\n'
p7128
sg2001
(g1931
tp7129
sg2007
(lp7130
S'%(nodename)s_subnode0'
p7131
aS'%(nodename)s_subnode1'
p7132
aS'%(nodename)s_subnode2'
p7133
asg2011
I1
sbsg330
(dp7134
sg332
Nsg333
g0
(g334
g5
Ntp7135
Rp7136
(dp7137
g338
I0
sg339
(dp7138
sbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp7139
Rp7140
(dp7141
g78
(I00
tp7142
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag5571
((lp7143
tp7144
Rp7145
aa(lp7146
g2890
ag5571
((lp7147
(lp7148
g2823
aI1
aatp7149
Rp7150
aa(lp7151
g2290
ag5571
((lp7152
(lp7153
g2294
aI1
aatp7154
Rp7155
aa(lp7156
g0
(g563
g5
Ntp7157
Rp7158
(dp7159
g16
I0
sg53
Nsg798
g801
sg807
(lp7160
sg14
S'auto_16660'
p7161
sg17
g0
(g18
g5
Ntp7162
Rp7163
(dp7164
g22
(lp7165
sbsg85
g0
(g809
g5
Ntp7166
Rp7167
(dp7168
g552
(lp7169
g817
ag826
asg798
g801
sg814
(lp7170
g7158
asg17
g0
(g18
g5
Ntp7171
Rp7172
(dp7173
g4093
(lp7174
S"('Revert', 'inplace_elemwise_optimizer')"
p7175
asg1268
(lp7176
g1493
asbsg1272
(dp7177
sg1274
g0
(g318
g5
Ntp7178
Rp7179
(dp7180
g53
Nsg322
g0
(g1482
g5
Ntp7181
Rp7182
(dp7183
g327
g0
(g1486
g5
Ntp7184
Rp7185
(dp7186
g1490
(I0
tp7187
sbsg53
Nsbsg330
(dp7188
I0
(lp7189
I0
assg332
g1501
sg333
g0
(g334
g5
Ntp7190
Rp7191
(dp7192
g338
Nsg339
(dp7193
I0
I0
ssbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp7194
Rp7195
(dp7196
g78
(I00
I00
tp7197
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag5571
((lp7198
tp7199
Rp7200
aa(lp7201
g0
(g563
g5
Ntp7202
Rp7203
(dp7204
g16
I0
sg53
Nsg798
g801
sg807
(lp7205
sg14
S'auto_16664'
p7206
sg17
g0
(g18
g5
Ntp7207
Rp7208
(dp7209
g22
(lp7210
sbsg85
g0
(g809
g5
Ntp7211
Rp7212
(dp7213
g552
(lp7214
g817
ag826
asg798
g801
sg814
(lp7215
g7203
asg17
g0
(g18
g5
Ntp7216
Rp7217
(dp7218
g4093
(lp7219
S"('Revert', 'inplace_elemwise_optimizer')"
p7220
asg1268
(lp7221
g1493
asbsg1272
(dp7222
sg1274
g0
(g318
g5
Ntp7223
Rp7224
(dp7225
g53
Nsg322
g0
(g1482
g5
Ntp7226
Rp7227
(dp7228
g327
g0
(g1486
g5
Ntp7229
Rp7230
(dp7231
g1490
(I1
tp7232
sbsg53
Nsbsg330
(dp7233
I0
(lp7234
I1
assg332
g1501
sg333
g0
(g334
g5
Ntp7235
Rp7236
(dp7237
g338
Nsg339
(dp7238
I0
I1
ssbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp7239
Rp7240
(dp7241
g78
(I00
I00
tp7242
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag5571
((lp7243
tp7244
Rp7245
aa(lp7246
g2813
ag5571
((lp7247
(lp7248
g2809
aI1
aatp7249
Rp7250
aa(lp7251
g1089
ag5571
((lp7252
(lp7253
g1093
aI1
aa(lp7254
g1682
aI1
aa(lp7255
g1085
aI1
aatp7256
Rp7257
aa(lp7258
g975
ag5571
((lp7259
(lp7260
g971
aI1
aa(lp7261
g980
aI1
aatp7262
Rp7263
aa(lp7264
g960
ag5571
((lp7265
(lp7266
g956
aI1
aa(lp7267
g948
aI1
aatp7268
Rp7269
aa(lp7270
g1650
ag5571
((lp7271
(lp7272
g1623
aI1
aatp7273
Rp7274
aa(lp7275
g1797
ag5571
((lp7276
(lp7277
g1801
aI1
aa(lp7278
g980
aI1
aatp7279
Rp7280
aa(lp7281
g1290
ag5571
((lp7282
(lp7283
g1247
aI1
aatp7284
Rp7285
aa(lp7286
g952
ag5571
((lp7287
(lp7288
g956
aI1
aa(lp7289
g948
aI1
aatp7290
Rp7291
aa(lp7292
g0
(g563
g5
Ntp7293
Rp7294
(dp7295
g16
I0
sg53
Nsg798
g801
sg807
(lp7296
sg14
S'auto_16779'
p7297
sg17
g0
(g18
g5
Ntp7298
Rp7299
(dp7300
g22
(lp7301
sbsg85
g0
(g809
g5
Ntp7302
Rp7303
(dp7304
g552
(lp7305
g952
ag960
asg798
g801
sg814
(lp7306
g7294
asg17
g0
(g18
g5
Ntp7307
Rp7308
(dp7309
g4093
(lp7310
S"('Revert', 'inplace_elemwise_optimizer')"
p7311
asg1268
(lp7312
g1493
asbsg1272
(dp7313
sg1274
g0
(g318
g5
Ntp7314
Rp7315
(dp7316
g53
Nsg322
g0
(g3881
g5
Ntp7317
Rp7318
(dp7319
g327
g0
(g1486
g5
Ntp7320
Rp7321
(dp7322
g1490
(I0
tp7323
sbsg53
Nsbsg330
(dp7324
I0
(lp7325
I0
assg332
g4106
sg333
g0
(g334
g5
Ntp7326
Rp7327
(dp7328
g338
Nsg339
(dp7329
I0
I0
ssbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp7330
Rp7331
(dp7332
g78
(I00
I00
I00
tp7333
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag5571
((lp7334
tp7335
Rp7336
aa(lp7337
g0
(g563
g5
Ntp7338
Rp7339
(dp7340
g16
I0
sg53
Nsg798
g801
sg807
(lp7341
sg14
S'auto_16783'
p7342
sg17
g0
(g18
g5
Ntp7343
Rp7344
(dp7345
g22
(lp7346
sbsg85
g0
(g809
g5
Ntp7347
Rp7348
(dp7349
g552
(lp7350
g952
ag960
asg798
g801
sg814
(lp7351
g7339
asg17
g0
(g18
g5
Ntp7352
Rp7353
(dp7354
g4093
(lp7355
S"('Revert', 'inplace_elemwise_optimizer')"
p7356
asg1268
(lp7357
g1493
asbsg1272
(dp7358
sg1274
g0
(g318
g5
Ntp7359
Rp7360
(dp7361
g53
Nsg322
g0
(g3881
g5
Ntp7362
Rp7363
(dp7364
g327
g0
(g1486
g5
Ntp7365
Rp7366
(dp7367
g1490
(I1
tp7368
sbsg53
Nsbsg330
(dp7369
I0
(lp7370
I1
assg332
g4106
sg333
g0
(g334
g5
Ntp7371
Rp7372
(dp7373
g338
Nsg339
(dp7374
I0
I1
ssbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp7375
Rp7376
(dp7377
g78
(I00
I00
I00
tp7378
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag5571
((lp7379
tp7380
Rp7381
aa(lp7382
g4125
ag5571
((lp7383
(lp7384
g4129
aI1
aa(lp7385
g4147
aI1
aatp7386
Rp7387
aa(lp7388
g4152
ag5571
((lp7389
(lp7390
g4156
aI1
aatp7391
Rp7392
aa(lp7393
g920
ag5571
((lp7394
(lp7395
g916
aI1
aatp7396
Rp7397
aa(lp7398
g4762
ag5571
((lp7399
tp7400
Rp7401
aatp7402
Rp7403
sS'root_destroyer'
p7404
(dp7405
g1165
g2285
sg934
g930
sg4125
g4147
sg2890
g2823
sg1566
g1562
sg1190
g1186
sg891
g840
sg2443
g2477
sg1687
g1729
sg2784
g2780
sg1060
g980
sg2904
g2900
sg975
g971
sg952
g948
ssS'fail_validate'
p7406
g5571
((lp7407
tp7408
Rp7409
sS'debug_all_apps'
p7410
g5108
((lp7411
g1085
ag2809
ag4147
ag2173
ag3592
ag1247
ag1151
ag939
ag1594
ag2308
ag956
ag1209
ag1186
ag1758
ag3256
ag1801
ag1218
ag811
ag980
ag4964
ag822
ag971
ag1160
ag2421
ag3274
ag840
ag1093
ag831
ag1623
ag4138
ag2439
ag1261
ag930
ag4156
ag1585
ag2267
ag916
ag2477
ag1056
ag1682
ag948
ag2900
ag3238
ag2823
ag1553
ag1637
ag1729
ag2506
ag1562
ag2285
ag2294
ag4129
ag2929
ag4033
ag1691
ag3655
ag1169
ag1420
ag2780
ag1122
ag1577
ag1201
ag1177
ag2852
ag1810
atp7412
Rp7413
sS'destroyers'
p7414
g0
(g5170
g5
Ntp7415
Rp7416
(dp7417
g5174
g0
(g5175
g5
Ntp7418
Rp7419
(lp7420
g0
(g5175
g5
Ntp7421
Rp7422
(lp7423
g0
(g5175
g5
Ntp7424
Rp7425
(lp7426
g0
(g5175
g5
Ntp7427
Rp7428
(lp7429
g0
(g5175
g5
Ntp7430
Rp7431
(lp7432
g0
(g5175
g5
Ntp7433
Rp7434
(lp7435
g0
(g5175
g5
Ntp7436
Rp7437
(lp7438
g0
(g5175
g5
Ntp7439
Rp7440
(lp7441
g0
(g5175
g5
Ntp7442
Rp7443
(lp7444
g0
(g5175
g5
Ntp7445
Rp7446
(lp7447
g0
(g5175
g5
Ntp7448
Rp7449
(lp7450
g0
(g5175
g5
Ntp7451
Rp7452
(lp7453
g0
(g5175
g5
Ntp7454
Rp7455
(lp7456
g0
(g5175
g5
Ntp7457
Rp7458
(lp7459
g0
(g5175
g5
Ntp7460
Rp7461
(lp7462
g7419
ag7458
ag2900
abag7455
ag2285
abag7452
ag2823
abag7449
ag2780
abag7446
ag2477
abag7443
ag971
abag7440
ag1562
abag7437
ag1729
abag7434
ag1186
abag7431
ag980
abag7428
ag948
abag7425
ag4147
abag7422
ag930
abag7419
ag840
abag7461
absg5179
(dp7463
g948
g7431
sg980
g7434
sg2477
g7449
sg4147
g7428
sg971
g7446
sg2823
g7455
sg2900
g7461
sg840
g7422
sg2285
g7458
sg930
g7425
sg1729
g7440
sg1186
g7437
sg2780
g7452
sg1562
g7443
ssbsS'algo'
p7464
S'regular'
p7465
sS'stale_droot'
p7466
I00
sbsg53
S'/home/leondong/proj/ccnet/experiment/rnade_release/buml/NADE/OrderlessMoGNADE.py:126'
p7467
sS'execute_callbacks_time'
p7468
F0.022150516510009766
sS'shape_feature'
p7469
g0
(ctheano.tensor.opt
ShapeFeature
p7470
g5
Ntp7471
Rp7472
(dp7473
g5105
(dp7474
sS'shape_of'
p7475
(dp7476
g826
(g0
(g563
g5
Ntp7477
Rp7478
(dp7479
g14
S'auto_14845'
p7480
sg16
I0
sg17
g0
(g18
g5
Ntp7481
Rp7482
(dp7483
g22
(lp7484
sbsg53
Nsg85
g0
(g809
g5
Ntp7485
Rp7486
(dp7487
g552
(lp7488
g4968
asg17
g0
(g18
g5
Ntp7489
Rp7490
sg814
(lp7491
g7478
asg1274
g0
(g1275
g5
Ntp7492
Rp7493
(dp7494
g1279
I1
sbsbsg73
g1281
sbg0
(g563
g5
Ntp7495
Rp7496
(dp7497
g14
S'auto_14844'
p7498
sg16
I0
sg17
g0
(g18
g5
Ntp7499
Rp7500
(dp7501
g22
(lp7502
sbsg53
Nsg85
g0
(g809
g5
Ntp7503
Rp7504
(dp7505
g552
(lp7506
g4968
asg17
g0
(g18
g5
Ntp7507
Rp7508
sg814
(lp7509
g7496
asg1274
g0
(g1275
g5
Ntp7510
Rp7511
(dp7512
g1279
I0
sbsbsg73
g1281
sbtp7513
sg0
(g563
g5
Ntp7514
Rp7515
(dp7516
g16
I0
sg53
Nsg798
g801
sg807
(lp7517
sg14
S'auto_15474'
p7518
sg17
g0
(g18
g5
Ntp7519
Rp7520
(dp7521
g22
(lp7522
(lp7523
(g25
I306
g26
S'nade_train( * args[1:] )'
p7524
tp7525
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p7526
tp7527
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p7528
tp7529
a(g37
I36
g38
S'self.recompile()'
p7530
tp7531
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p7532
tp7533
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p7534
tp7535
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p7536
tp7537
aasbsg85
g0
(g809
g5
Ntp7538
Rp7539
(dp7540
g552
(lp7541
g1251
ag1181
ag1190
asg798
g801
sg814
(lp7542
g7515
asg17
g0
(g18
g5
Ntp7543
Rp7544
(dp7545
g4093
(lp7546
S'local_subtensor_make_vector'
p7547
asg1268
(lp7548
g1270
asbsg1272
(dp7549
sg1274
g1549
sbsg73
g0
(g74
g5
Ntp7550
Rp7551
(dp7552
g78
(I00
tp7553
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(g0
(g843
g5
Ntp7554
Rp7555
(dp7556
g14
S'auto_15475'
p7557
sg16
Nsg17
g0
(g18
g5
Ntp7558
Rp7559
(dp7560
g22
(lp7561
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp7562
Rp7563
(dp7564
g78
(tsg80
S'int64'
p7565
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp7566
g59
tp7567
Rp7568
(I1
(tg1286
I00
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p7569
tp7570
bsbtp7571
sg0
(g843
g5
Ntp7572
Rp7573
(dp7574
g14
S'auto_14669'
p7575
sg16
Nsg17
g0
(g18
g5
Ntp7576
Rp7577
(dp7578
g22
(lp7579
(lp7580
(g25
I306
g26
S'nade_train( * args[1:] )'
p7581
tp7582
a(g29
I221
g30
S'nade = nade_class(n_visible, options.units, l, options.n_components, nonlinearity=options.nonlinearity)'
p7583
tp7584
a(g37
I36
g38
S'self.recompile()'
p7585
tp7586
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p7587
tp7588
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p7589
tp7590
a(g874
I210
g875
S'output_mask = constantX(1) - mask  # BxD'
p7591
tp7592
a(g4481
I43
S'constantX'
p7593
S'return theano.tensor.constant(np.asarray(value, dtype=floatX))'
p7594
tp7595
aasg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp7596
Rp7597
(dp7598
g78
(tsg80
g4545
sg82
g66
sg83
I00
sg53
Nsbsg807
(lp7599
sg883
g56
(g57
(I0
tp7600
g59
tp7601
Rp7602
(I1
(tg66
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p7603
tp7604
bsb(tsg6260
(g0
(g563
g5
Ntp7605
Rp7606
(dp7607
g14
S'auto_15057'
p7608
sg16
I0
sg17
g0
(g18
g5
Ntp7609
Rp7610
(dp7611
g22
(lp7612
sbsg53
Nsg85
g0
(g809
g5
Ntp7613
Rp7614
(dp7615
g552
(lp7616
g0
(g563
g5
Ntp7617
Rp7618
(dp7619
g14
S'auto_15052'
p7620
sg16
I0
sg17
g0
(g18
g5
Ntp7621
Rp7622
(dp7623
g22
(lp7624
sbsg53
Nsg85
g0
(g809
g5
Ntp7625
Rp7626
(dp7627
g552
(lp7628
g0
(g563
g5
Ntp7629
Rp7630
(dp7631
g14
S'auto_15026'
p7632
sg16
I0
sg17
g0
(g18
g5
Ntp7633
Rp7634
(dp7635
g22
(lp7636
sbsg53
Nsg85
g0
(g809
g5
Ntp7637
Rp7638
(dp7639
g552
(lp7640
g0
(g563
g5
Ntp7641
Rp7642
(dp7643
g16
I0
sg53
Nsg798
g801
sg807
(lp7644
sg14
S'auto_14704'
p7645
sg17
g0
(g18
g5
Ntp7646
Rp7647
(dp7648
g22
(lp7649
g1704
asbsg85
g0
(g809
g5
Ntp7650
Rp7651
(dp7652
g552
(lp7653
g0
(g843
g5
Ntp7654
Rp7655
(dp7656
g14
S'auto_14678'
p7657
sg16
Nsg17
g0
(g18
g5
Ntp7658
Rp7659
(dp7660
g22
(lp7661
(lp7662
(g25
I306
g26
S'nade_train( * args[1:] )'
p7663
tp7664
a(g29
I221
g30
S'nade = nade_class(n_visible, options.units, l, options.n_components, nonlinearity=options.nonlinearity)'
p7665
tp7666
a(g37
I36
g38
S'self.recompile()'
p7667
tp7668
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p7669
tp7670
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p7671
tp7672
a(g874
I214
g875
S'h = self.nonlinearity(T.dot(masked_input, self.W1) + T.dot(mask, self.Wflags) + self.b1)  # BxH'
p7673
tp7674
a(g41
I231
g272
S'"RLU": [lambda x: x * (x > 0), lambda x: x * (x > 0)],'
p7675
tp7676
aasg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp7677
Rp7678
(dp7679
g78
(tsg80
g3028
sg82
g3031
sg83
I00
sg53
Nsbsg807
(lp7680
sg883
g56
(g57
(I0
tp7681
g59
tp7682
Rp7683
(I1
(tg3031
I00
g3059
tp7684
bsbag0
(g563
g5
Ntp7685
Rp7686
(dp7687
g16
I0
sg53
Nsg798
g801
sg807
(lp7688
sg14
S'auto_15726'
p7689
sg17
g0
(g18
g5
Ntp7690
Rp7691
(dp7692
g22
(lp7693
(lp7694
(g25
I306
g26
S'nade_train( * args[1:] )'
p7695
tp7696
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p7697
tp7698
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p7699
tp7700
a(g37
I36
g38
S'self.recompile()'
p7701
tp7702
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p7703
tp7704
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p7705
tp7706
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p7707
tp7708
aasbsg85
g0
(g809
g5
Ntp7709
Rp7710
(dp7711
g552
(lp7712
g1173
asg798
g801
sg814
(lp7713
g7686
asg17
g0
(g18
g5
Ntp7714
Rp7715
(dp7716
g4093
(lp7717
g1546
asg1268
(lp7718
g7547
asbsg1272
(dp7719
sg1274
g1549
sbsg73
g0
(g74
g5
Ntp7720
Rp7721
(dp7722
g78
(I00
tp7723
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp7724
Rp7725
(dp7726
g16
I0
sg53
Nsg798
g801
sg807
(lp7727
sg14
S'auto_15709'
p7728
sg17
g0
(g18
g5
Ntp7729
Rp7730
(dp7731
g22
(lp7732
(lp7733
(g25
I306
g26
S'nade_train( * args[1:] )'
p7734
tp7735
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p7736
tp7737
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p7738
tp7739
a(g37
I36
g38
S'self.recompile()'
p7740
tp7741
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p7742
tp7743
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p7744
tp7745
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p7746
tp7747
aasbsg85
g0
(g809
g5
Ntp7748
Rp7749
(dp7750
g552
(lp7751
g1557
ag1566
asg798
g801
sg814
(lp7752
g7725
asg17
g0
(g18
g5
Ntp7753
Rp7754
(dp7755
g4093
(lp7756
g1546
asg1268
(lp7757
g7547
asbsg1272
(dp7758
sg1274
g1549
sbsg73
g0
(g74
g5
Ntp7759
Rp7760
(dp7761
g78
(I00
tp7762
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp7763
g7642
asg17
g0
(g18
g5
Ntp7764
Rp7765
(dp7766
g4093
(lp7767
g1546
asg1268
(lp7768
g1271
asbsg1272
(dp7769
sg1274
g0
(ctheano.tensor.basic
Join
p7770
g5
Ntp7771
Rp7772
(dp7773
S'view'
p7774
I-1
sbsbsg73
g0
(g74
g5
Ntp7775
Rp7776
(dp7777
g78
(I00
tp7778
sg80
S'int64'
p7779
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g3250
g5
Ntp7780
Rp7781
(dp7782
g14
S'auto_15025'
p7783
sg16
Nsg17
g0
(g18
g5
Ntp7784
Rp7785
(dp7786
g22
(lp7787
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p7788
tp7789
Rp7790
sbasg17
g0
(g18
g5
Ntp7791
Rp7792
sg814
(lp7793
g7630
asg1274
g0
(g3357
g5
Ntp7794
Rp7795
(dp7796
g3361
(g1465
tp7797
sbsbsg73
g0
(g74
g5
Ntp7798
Rp7799
(dp7800
g78
(tsg80
g7779
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp7801
Rp7802
(dp7803
g14
S'auto_15048'
p7804
sg16
Nsg17
g0
(g18
g5
Ntp7805
Rp7806
(dp7807
g22
(lp7808
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp7809
Rp7810
(dp7811
g78
(tsg80
S'int8'
p7812
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp7813
g59
tp7814
Rp7815
(I1
(tg3031
I00
S'\xff'
p7816
tp7817
bsbasg17
g0
(g18
g5
Ntp7818
Rp7819
sg814
(lp7820
g7618
asg1274
g0
(g318
g5
Ntp7821
Rp7822
(dp7823
g379
g380
sg322
g0
(ctheano.scalar.basic
EQ
p7824
g5
Ntp7825
Rp7826
(dp7827
g3176
I01
sg53
Nsbsg53
S'Elemwise{eq,no_inplace}'
p7828
sg330
(dp7829
sg332
(S'equal'
p7830
I2
I1
tp7831
sg333
g0
(g334
g5
Ntp7832
Rp7833
(dp7834
g338
I0
sg339
(dp7835
sbsg341
I00
sg307
S"a == b\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p7836
sbsbsg73
g0
(g74
g5
Ntp7837
Rp7838
(dp7839
g78
(tsg80
g3176
sg82
g63
(S'b1'
p7840
I0
I1
tp7841
Rp7842
(I3
S'|'
p7843
NNNI-1
I-1
I0
tp7844
bsg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp7845
Rp7846
(dp7847
g14
S'auto_15047'
p7848
sg16
I0
sg17
g0
(g18
g5
Ntp7849
Rp7850
(dp7851
g22
(lp7852
sbsg53
Nsg85
g0
(g809
g5
Ntp7853
Rp7854
(dp7855
g552
(lp7856
g0
(g563
g5
Ntp7857
Rp7858
(dp7859
g14
S'auto_15024'
p7860
sg16
I0
sg17
g0
(g18
g5
Ntp7861
Rp7862
(dp7863
g22
(lp7864
sbsg53
Nsg85
g0
(g809
g5
Ntp7865
Rp7866
(dp7867
g552
(lp7868
g0
(g563
g5
Ntp7869
Rp7870
(dp7871
g14
S'auto_15010'
p7872
sg16
I0
sg17
g0
(g18
g5
Ntp7873
Rp7874
(dp7875
g22
(lp7876
sbsg53
Nsg85
g0
(g809
g5
Ntp7877
Rp7878
(dp7879
g552
(lp7880
g0
(g563
g5
Ntp7881
Rp7882
(dp7883
g14
S'auto_15005'
p7884
sg16
I0
sg17
g0
(g18
g5
Ntp7885
Rp7886
(dp7887
g22
(lp7888
sbsg53
Nsg85
g0
(g809
g5
Ntp7889
Rp7890
(dp7891
g552
(lp7892
g0
(g563
g5
Ntp7893
Rp7894
(dp7895
g14
S'auto_14982'
p7896
sg16
I0
sg17
g0
(g18
g5
Ntp7897
Rp7898
(dp7899
g22
(lp7900
sbsg53
Nsg85
g0
(g809
g5
Ntp7901
Rp7902
(dp7903
g552
(lp7904
g0
(g563
g5
Ntp7905
Rp7906
(dp7907
g16
I0
sg53
Nsg798
g801
sg807
(lp7908
sg14
S'auto_14816'
p7909
sg17
g0
(g18
g5
Ntp7910
Rp7911
(dp7912
g22
(lp7913
(lp7914
(g25
I306
g26
S'nade_train( * args[1:] )'
p7915
tp7916
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p7917
tp7918
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p7919
tp7920
a(g37
I36
g38
S'self.recompile()'
p7921
tp7922
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p7923
tp7924
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p7925
tp7926
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p7927
tp7928
aasbsg85
g0
(g809
g5
Ntp7929
Rp7930
(dp7931
g552
(lp7932
g1173
ag0
(g563
g5
Ntp7933
Rp7934
(dp7935
g16
I0
sg53
Nsg798
g801
sg807
(lp7936
sg14
S'auto_14874'
p7937
sg17
g0
(g18
g5
Ntp7938
Rp7939
(dp7940
g22
(lp7941
sbsg85
g0
(g809
g5
Ntp7942
Rp7943
(dp7944
g552
(lp7945
g3242
asg798
g801
sg814
(lp7946
g7934
asg17
g0
(g18
g5
Ntp7947
Rp7948
(dp7949
g4093
(lp7950
S'local_useless_reshape'
p7951
asg1268
(lp7952
g1270
asbsg1272
(dp7953
sg1274
g0
(g1275
g5
Ntp7954
Rp7955
(dp7956
g1279
I2
sbsbsg73
g1281
sbasg798
g801
sg814
(lp7957
g7906
asg17
g0
(g18
g5
Ntp7958
Rp7959
(dp7960
g4093
(lp7961
S'MergeOptimizer'
p7962
asg1268
(lp7963
g1271
asbsg1272
(dp7964
sg1274
g0
(g1308
g5
Ntp7965
Rp7966
(dp7967
g80
S'int64'
p7968
sbsbsg73
g0
(g74
g5
Ntp7969
Rp7970
(dp7971
g78
(I00
tp7972
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g3250
g5
Ntp7973
Rp7974
(dp7975
g14
S'auto_14981'
p7976
sg16
Nsg17
g0
(g18
g5
Ntp7977
Rp7978
(dp7979
g22
(lp7980
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p7981
tp7982
Rp7983
sbasg17
g0
(g18
g5
Ntp7984
Rp7985
sg814
(lp7986
g7894
asg1274
g0
(g3357
g5
Ntp7987
Rp7988
(dp7989
g3361
(g1465
tp7990
sbsbsg73
g0
(g74
g5
Ntp7991
Rp7992
(dp7993
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp7994
Rp7995
(dp7996
g14
S'auto_15001'
p7997
sg16
Nsg17
g0
(g18
g5
Ntp7998
Rp7999
(dp8000
g22
(lp8001
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp8002
Rp8003
(dp8004
g78
(tsg80
S'int8'
p8005
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp8006
g59
tp8007
Rp8008
(I1
(tg3031
I00
g7816
tp8009
bsbasg17
g0
(g18
g5
Ntp8010
Rp8011
sg814
(lp8012
g7882
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp8013
Rp8014
(dp8015
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp8016
Rp8017
(dp8018
g14
S'auto_15000'
p8019
sg16
I0
sg17
g0
(g18
g5
Ntp8020
Rp8021
(dp8022
g22
(lp8023
sbsg53
Nsg85
g0
(g809
g5
Ntp8024
Rp8025
(dp8026
g552
(lp8027
g0
(g563
g5
Ntp8028
Rp8029
(dp8030
g14
S'auto_14980'
p8031
sg16
I0
sg17
g0
(g18
g5
Ntp8032
Rp8033
(dp8034
g22
(lp8035
sbsg53
Nsg85
g0
(g809
g5
Ntp8036
Rp8037
(dp8038
g552
(lp8039
g1173
ag7934
asg17
g0
(g18
g5
Ntp8040
Rp8041
sg814
(lp8042
g8029
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp8043
Rp8044
(dp8045
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp8046
Rp8047
(dp8048
g14
S'auto_14996'
p8049
sg16
I0
sg17
g0
(g18
g5
Ntp8050
Rp8051
(dp8052
g22
(lp8053
sbsg53
Nsg85
g0
(g809
g5
Ntp8054
Rp8055
(dp8056
g552
(lp8057
g0
(g563
g5
Ntp8058
Rp8059
(dp8060
g14
S'auto_14991'
p8061
sg16
I0
sg17
g0
(g18
g5
Ntp8062
Rp8063
(dp8064
g22
(lp8065
sbsg53
Nsg85
g0
(g809
g5
Ntp8066
Rp8067
(dp8068
g552
(lp8069
g0
(g563
g5
Ntp8070
Rp8071
(dp8072
g14
S'auto_14988'
p8073
sg16
I0
sg17
g0
(g18
g5
Ntp8074
Rp8075
(dp8076
g22
(lp8077
sbsg53
Nsg85
g0
(g809
g5
Ntp8078
Rp8079
(dp8080
g552
(lp8081
g7894
ag0
(g563
g5
Ntp8082
Rp8083
(dp8084
g14
S'auto_14984'
p8085
sg16
I0
sg17
g0
(g18
g5
Ntp8086
Rp8087
(dp8088
g22
(lp8089
sbsg53
Nsg85
g0
(g809
g5
Ntp8090
Rp8091
(dp8092
g552
(lp8093
g7906
ag0
(g3250
g5
Ntp8094
Rp8095
(dp8096
g14
S'auto_14983'
p8097
sg16
Nsg17
g0
(g18
g5
Ntp8098
Rp8099
(dp8100
g22
(lp8101
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p8102
tp8103
Rp8104
sbasg17
g0
(g18
g5
Ntp8105
Rp8106
sg814
(lp8107
g8083
asg1274
g0
(g3357
g5
Ntp8108
Rp8109
(dp8110
g3361
(g1465
tp8111
sbsbsg73
g0
(g74
g5
Ntp8112
Rp8113
(dp8114
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp8115
Rp8116
sg814
(lp8117
g8071
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp8118
Rp8119
(dp8120
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp8121
Rp8122
sg814
(lp8123
g8059
asg1274
g0
(g318
g5
Ntp8124
Rp8125
(dp8126
g379
g380
sg322
g0
(ctheano.scalar.basic
Neg
p8127
g5
Ntp8128
Rp8129
(dp8130
g327
ctheano.scalar.basic
same_out_nobool
p8131
sg53
S'neg'
p8132
sbsg53
S'Elemwise{neg,no_inplace}'
p8133
sg330
(dp8134
sg332
(S'negative'
p8135
I1
I1
tp8136
sg333
g0
(g334
g5
Ntp8137
Rp8138
(dp8139
g338
I0
sg339
(dp8140
sbsg341
I00
sg307
S"-a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p8141
sbsbsg73
g0
(g74
g5
Ntp8142
Rp8143
(dp8144
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp8145
Rp8146
(dp8147
g14
S'auto_14992'
p8148
sg16
Nsg17
g0
(g18
g5
Ntp8149
Rp8150
(dp8151
g22
(lp8152
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp8153
Rp8154
(dp8155
g78
(tsg80
S'int8'
p8156
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp8157
g59
tp8158
Rp8159
(I1
(tg3031
I00
S'\x01'
p8160
tp8161
bsbasg17
g0
(g18
g5
Ntp8162
Rp8163
sg814
(lp8164
g8047
asg1274
g0
(g318
g5
Ntp8165
Rp8166
(dp8167
g379
g380
sg322
g4049
sg53
S'Elemwise{maximum,no_inplace}'
p8168
sg330
(dp8169
sg332
(g4051
I2
I1
tp8170
sg333
g0
(g334
g5
Ntp8171
Rp8172
(dp8173
g338
I0
sg339
(dp8174
sbsg341
I00
sg307
S"elemwise maximum. See max for the maximum in one tensor\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p8175
sbsbsg73
g0
(g74
g5
Ntp8176
Rp8177
(dp8178
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp8179
Rp8180
sg814
(lp8181
g8017
asg1274
g0
(g318
g5
Ntp8182
Rp8183
(dp8184
g379
g380
sg322
g0
(ctheano.scalar.basic
IntDiv
p8185
g5
Ntp8186
Rp8187
(dp8188
g327
g1901
sg53
S'int_div'
p8189
sbsg53
S'Elemwise{int_div,no_inplace}'
p8190
sg330
(dp8191
sg332
(S'floor_divide'
p8192
I2
I1
tp8193
sg333
g0
(g334
g5
Ntp8194
Rp8195
(dp8196
g338
I0
sg339
(dp8197
sbsg341
I00
sg307
S"elementwise [floor] division (inverse of multiplication)\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p8198
sbsbsg73
g0
(g74
g5
Ntp8199
Rp8200
(dp8201
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag7894
asg17
g0
(g18
g5
Ntp8202
Rp8203
sg814
(lp8204
g7870
asg1274
g0
(g318
g5
Ntp8205
Rp8206
(dp8207
g379
g380
sg322
g0
(ctheano.scalar.basic
Switch
p8208
g5
Ntp8209
Rp8210
(dp8211
g53
Nsbsg53
S'Elemwise{switch,no_inplace}'
p8212
sg330
(dp8213
sg332
(S'where'
p8214
I3
I1
tp8215
sg333
g0
(g334
g5
Ntp8216
Rp8217
(dp8218
g338
I0
sg339
(dp8219
sbsg341
I00
sg307
S"if cond then ift else iff\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p8220
sbsbsg73
g0
(g74
g5
Ntp8221
Rp8222
(dp8223
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp8224
Rp8225
(dp8226
g14
S'auto_14975'
p8227
sg16
I0
sg17
g0
(g18
g5
Ntp8228
Rp8229
(dp8230
g22
(lp8231
sbsg53
Nsg85
g0
(g809
g5
Ntp8232
Rp8233
(dp8234
g552
(lp8235
g0
(g563
g5
Ntp8236
Rp8237
(dp8238
g14
S'auto_14970'
p8239
sg16
I0
sg17
g0
(g18
g5
Ntp8240
Rp8241
(dp8242
g22
(lp8243
sbsg53
Nsg85
g0
(g809
g5
Ntp8244
Rp8245
(dp8246
g552
(lp8247
g0
(g563
g5
Ntp8248
Rp8249
(dp8250
g14
S'auto_14939'
p8251
sg16
I0
sg17
g0
(g18
g5
Ntp8252
Rp8253
(dp8254
g22
(lp8255
sbsg53
Nsg85
g0
(g809
g5
Ntp8256
Rp8257
(dp8258
g552
(lp8259
g1598
ag0
(g3250
g5
Ntp8260
Rp8261
(dp8262
g14
S'auto_14938'
p8263
sg16
Nsg17
g0
(g18
g5
Ntp8264
Rp8265
(dp8266
g22
(lp8267
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p8268
tp8269
Rp8270
sbasg17
g0
(g18
g5
Ntp8271
Rp8272
sg814
(lp8273
g8249
asg1274
g0
(g3357
g5
Ntp8274
Rp8275
(dp8276
g3361
(g1465
tp8277
sbsbsg73
g0
(g74
g5
Ntp8278
Rp8279
(dp8280
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp8281
Rp8282
(dp8283
g14
S'auto_14966'
p8284
sg16
Nsg17
g0
(g18
g5
Ntp8285
Rp8286
(dp8287
g22
(lp8288
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp8289
Rp8290
(dp8291
g78
(tsg80
S'int8'
p8292
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp8293
g59
tp8294
Rp8295
(I1
(tg3031
I00
g7816
tp8296
bsbasg17
g0
(g18
g5
Ntp8297
Rp8298
sg814
(lp8299
g8237
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp8300
Rp8301
(dp8302
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp8303
Rp8304
(dp8305
g14
S'auto_14955'
p8306
sg16
I0
sg17
g0
(g18
g5
Ntp8307
Rp8308
(dp8309
g22
(lp8310
sbsg53
Nsg85
g0
(g809
g5
Ntp8311
Rp8312
(dp8313
g552
(lp8314
g0
(g563
g5
Ntp8315
Rp8316
(dp8317
g14
S'auto_14935'
p8318
sg16
I0
sg17
g0
(g18
g5
Ntp8319
Rp8320
(dp8321
g22
(lp8322
sbsg53
Nsg85
g0
(g809
g5
Ntp8323
Rp8324
(dp8325
g552
(lp8326
g1627
ag1557
ag1566
asg17
g0
(g18
g5
Ntp8327
Rp8328
sg814
(lp8329
g8316
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp8330
Rp8331
(dp8332
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp8333
Rp8334
(dp8335
g14
S'auto_14951'
p8336
sg16
I0
sg17
g0
(g18
g5
Ntp8337
Rp8338
(dp8339
g22
(lp8340
sbsg53
Nsg85
g0
(g809
g5
Ntp8341
Rp8342
(dp8343
g552
(lp8344
g0
(g563
g5
Ntp8345
Rp8346
(dp8347
g14
S'auto_14946'
p8348
sg16
I0
sg17
g0
(g18
g5
Ntp8349
Rp8350
(dp8351
g22
(lp8352
sbsg53
Nsg85
g0
(g809
g5
Ntp8353
Rp8354
(dp8355
g552
(lp8356
g0
(g563
g5
Ntp8357
Rp8358
(dp8359
g14
S'auto_14943'
p8360
sg16
I0
sg17
g0
(g18
g5
Ntp8361
Rp8362
(dp8363
g22
(lp8364
sbsg53
Nsg85
g0
(g809
g5
Ntp8365
Rp8366
(dp8367
g552
(lp8368
g0
(g563
g5
Ntp8369
Rp8370
(dp8371
g14
S'auto_14937'
p8372
sg16
I0
sg17
g0
(g18
g5
Ntp8373
Rp8374
(dp8375
g22
(lp8376
sbsg53
Nsg85
g0
(g809
g5
Ntp8377
Rp8378
(dp8379
g552
(lp8380
g1598
ag0
(g3250
g5
Ntp8381
Rp8382
(dp8383
g14
S'auto_14936'
p8384
sg16
Nsg17
g0
(g18
g5
Ntp8385
Rp8386
(dp8387
g22
(lp8388
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p8389
tp8390
Rp8391
sbasg17
g0
(g18
g5
Ntp8392
Rp8393
sg814
(lp8394
g8370
asg1274
g0
(g3357
g5
Ntp8395
Rp8396
(dp8397
g3361
(g1465
tp8398
sbsbsg73
g0
(g74
g5
Ntp8399
Rp8400
(dp8401
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag8249
asg17
g0
(g18
g5
Ntp8402
Rp8403
sg814
(lp8404
g8358
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp8405
Rp8406
(dp8407
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp8408
Rp8409
sg814
(lp8410
g8346
asg1274
g8125
sbsg73
g0
(g74
g5
Ntp8411
Rp8412
(dp8413
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp8414
Rp8415
(dp8416
g14
S'auto_14947'
p8417
sg16
Nsg17
g0
(g18
g5
Ntp8418
Rp8419
(dp8420
g22
(lp8421
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp8422
Rp8423
(dp8424
g78
(tsg80
S'int8'
p8425
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp8426
g59
tp8427
Rp8428
(I1
(tg3031
I00
g8160
tp8429
bsbasg17
g0
(g18
g5
Ntp8430
Rp8431
sg814
(lp8432
g8334
asg1274
g8166
sbsg73
g0
(g74
g5
Ntp8433
Rp8434
(dp8435
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp8436
Rp8437
sg814
(lp8438
g8304
asg1274
g8183
sbsg73
g0
(g74
g5
Ntp8439
Rp8440
(dp8441
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag8249
asg17
g0
(g18
g5
Ntp8442
Rp8443
sg814
(lp8444
g8225
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp8445
Rp8446
(dp8447
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp8448
Rp8449
sg814
(lp8450
g7858
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp8451
Rp8452
(dp8453
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp8454
Rp8455
(dp8456
g14
S'auto_15043'
p8457
sg16
I0
sg17
g0
(g18
g5
Ntp8458
Rp8459
(dp8460
g22
(lp8461
sbsg53
Nsg85
g0
(g809
g5
Ntp8462
Rp8463
(dp8464
g552
(lp8465
g0
(g563
g5
Ntp8466
Rp8467
(dp8468
g14
S'auto_15038'
p8469
sg16
I0
sg17
g0
(g18
g5
Ntp8470
Rp8471
(dp8472
g22
(lp8473
sbsg53
Nsg85
g0
(g809
g5
Ntp8474
Rp8475
(dp8476
g552
(lp8477
g0
(g563
g5
Ntp8478
Rp8479
(dp8480
g14
S'auto_15035'
p8481
sg16
I0
sg17
g0
(g18
g5
Ntp8482
Rp8483
(dp8484
g22
(lp8485
sbsg53
Nsg85
g0
(g809
g5
Ntp8486
Rp8487
(dp8488
g552
(lp8489
g7630
ag0
(g563
g5
Ntp8490
Rp8491
(dp8492
g14
S'auto_15028'
p8493
sg16
I0
sg17
g0
(g18
g5
Ntp8494
Rp8495
(dp8496
g22
(lp8497
sbsg53
Nsg85
g0
(g809
g5
Ntp8498
Rp8499
(dp8500
g552
(lp8501
g7642
ag0
(g3250
g5
Ntp8502
Rp8503
(dp8504
g14
S'auto_15027'
p8505
sg16
Nsg17
g0
(g18
g5
Ntp8506
Rp8507
(dp8508
g22
(lp8509
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p8510
tp8511
Rp8512
sbasg17
g0
(g18
g5
Ntp8513
Rp8514
sg814
(lp8515
g8491
asg1274
g0
(g3357
g5
Ntp8516
Rp8517
(dp8518
g3361
(g1465
tp8519
sbsbsg73
g0
(g74
g5
Ntp8520
Rp8521
(dp8522
g78
(tsg80
g7779
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp8523
Rp8524
(dp8525
g14
S'auto_15030'
p8526
sg16
I0
sg17
g0
(g18
g5
Ntp8527
Rp8528
(dp8529
g22
(lp8530
sbsg53
Nsg85
g0
(g809
g5
Ntp8531
Rp8532
(dp8533
g552
(lp8534
g7642
ag0
(g3250
g5
Ntp8535
Rp8536
(dp8537
g14
S'auto_15029'
p8538
sg16
Nsg17
g0
(g18
g5
Ntp8539
Rp8540
(dp8541
g22
(lp8542
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p8543
tp8544
Rp8545
sbasg17
g0
(g18
g5
Ntp8546
Rp8547
sg814
(lp8548
g8524
asg1274
g0
(g3357
g5
Ntp8549
Rp8550
(dp8551
g3361
(g1465
tp8552
sbsbsg73
g0
(g74
g5
Ntp8553
Rp8554
(dp8555
g78
(tsg80
g7779
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp8556
Rp8557
sg814
(lp8558
g8479
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp8559
Rp8560
(dp8561
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp8562
Rp8563
sg814
(lp8564
g8467
asg1274
g8125
sbsg73
g0
(g74
g5
Ntp8565
Rp8566
(dp8567
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp8568
Rp8569
(dp8570
g14
S'auto_15039'
p8571
sg16
Nsg17
g0
(g18
g5
Ntp8572
Rp8573
(dp8574
g22
(lp8575
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp8576
Rp8577
(dp8578
g78
(tsg80
S'int8'
p8579
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp8580
g59
tp8581
Rp8582
(I1
(tg3031
I00
g8160
tp8583
bsbasg17
g0
(g18
g5
Ntp8584
Rp8585
sg814
(lp8586
g8455
asg1274
g8166
sbsg73
g0
(g74
g5
Ntp8587
Rp8588
(dp8589
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp8590
Rp8591
sg814
(lp8592
g7846
asg1274
g8183
sbsg73
g0
(g74
g5
Ntp8593
Rp8594
(dp8595
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag7630
asg17
g0
(g18
g5
Ntp8596
Rp8597
sg814
(lp8598
g7606
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp8599
Rp8600
(dp8601
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbg0
(g563
g5
Ntp8602
Rp8603
(dp8604
g14
S'auto_15067'
p8605
sg16
I0
sg17
g0
(g18
g5
Ntp8606
Rp8607
(dp8608
g22
(lp8609
sbsg53
Nsg85
g0
(g809
g5
Ntp8610
Rp8611
(dp8612
g552
(lp8613
g0
(g563
g5
Ntp8614
Rp8615
(dp8616
g14
S'auto_15062'
p8617
sg16
I0
sg17
g0
(g18
g5
Ntp8618
Rp8619
(dp8620
g22
(lp8621
sbsg53
Nsg85
g0
(g809
g5
Ntp8622
Rp8623
(dp8624
g552
(lp8625
g8491
ag0
(g843
g5
Ntp8626
Rp8627
(dp8628
g14
S'auto_15058'
p8629
sg16
Nsg17
g0
(g18
g5
Ntp8630
Rp8631
(dp8632
g22
(lp8633
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp8634
Rp8635
(dp8636
g78
(tsg80
S'int8'
p8637
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp8638
g59
tp8639
Rp8640
(I1
(tg3031
I00
g7816
tp8641
bsbasg17
g0
(g18
g5
Ntp8642
Rp8643
sg814
(lp8644
g8615
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp8645
Rp8646
(dp8647
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag7846
ag8491
asg17
g0
(g18
g5
Ntp8648
Rp8649
sg814
(lp8650
g8603
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp8651
Rp8652
(dp8653
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbg0
(g563
g5
Ntp8654
Rp8655
(dp8656
g14
S'auto_15077'
p8657
sg16
I0
sg17
g0
(g18
g5
Ntp8658
Rp8659
(dp8660
g22
(lp8661
sbsg53
Nsg85
g0
(g809
g5
Ntp8662
Rp8663
(dp8664
g552
(lp8665
g0
(g563
g5
Ntp8666
Rp8667
(dp8668
g14
S'auto_15072'
p8669
sg16
I0
sg17
g0
(g18
g5
Ntp8670
Rp8671
(dp8672
g22
(lp8673
sbsg53
Nsg85
g0
(g809
g5
Ntp8674
Rp8675
(dp8676
g552
(lp8677
g8524
ag0
(g843
g5
Ntp8678
Rp8679
(dp8680
g14
S'auto_15068'
p8681
sg16
Nsg17
g0
(g18
g5
Ntp8682
Rp8683
(dp8684
g22
(lp8685
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp8686
Rp8687
(dp8688
g78
(tsg80
S'int8'
p8689
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp8690
g59
tp8691
Rp8692
(I1
(tg3031
I00
g7816
tp8693
bsbasg17
g0
(g18
g5
Ntp8694
Rp8695
sg814
(lp8696
g8667
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp8697
Rp8698
(dp8699
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag7846
ag8524
asg17
g0
(g18
g5
Ntp8700
Rp8701
sg814
(lp8702
g8655
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp8703
Rp8704
(dp8705
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbtp8706
sg0
(g563
g5
Ntp8707
Rp8708
(dp8709
g16
I0
sg53
Nsg798
g801
sg807
(lp8710
sg14
S'auto_14670'
p8711
sg17
g0
(g18
g5
Ntp8712
Rp8713
(dp8714
g22
(lp8715
g4553
asbsg85
g0
(g809
g5
Ntp8716
Rp8717
(dp8718
g552
(lp8719
g7573
asg798
g801
sg814
(lp8720
g8708
asg17
g0
(g18
g5
Ntp8721
Rp8722
(dp8723
g4093
(lp8724
S'constant_folding'
p8725
asg1268
(lp8726
g1271
ag1271
asbsg1272
(dp8727
sg1274
g0
(g1387
g5
Ntp8728
Rp8729
(dp8730
g1391
(lp8731
sg1393
(lp8732
sg1395
(lp8733
I0
aI1
asg1397
g1398
sg1399
(tsg1401
(lp8734
g1403
asg1404
I01
sg1405
(g270
g270
tp8735
sg1407
(dp8736
S'support_code_apply'
p8737
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8738
ssg1411
(dp8739
I0
(lp8740
I0
assg1414
(lp8741
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8742
asbsbsg73
g4542
sb(g0
(g843
g5
Ntp8743
Rp8744
(dp8745
g14
S'auto_14843'
p8746
sg16
Nsg17
g0
(g18
g5
Ntp8747
Rp8748
(dp8749
g22
(lp8750
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp8751
Rp8752
(dp8753
g78
(tsg80
S'int64'
p8754
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp8755
g59
tp8756
Rp8757
(I1
(tg1286
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p8758
tp8759
bsbg8744
tp8760
sg0
(g563
g5
Ntp8761
Rp8762
(dp8763
g16
I0
sg53
Nsg798
g801
sg807
(lp8764
sg14
S'auto_14823'
p8765
sg17
g0
(g18
g5
Ntp8766
Rp8767
(dp8768
g22
(lp8769
(lp8770
(g25
I306
g26
S'nade_train( * args[1:] )'
p8771
tp8772
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p8773
tp8774
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p8775
tp8776
a(g37
I36
g38
S'self.recompile()'
p8777
tp8778
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p8779
tp8780
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p8781
tp8782
a(g874
I231
g875
S'Phi = -constantX(0.5) * T.sqr((Mu - T.shape_padright(x)) / Sigma) - T.log(Sigma) - constantX(0.5 * np.log(2 * np.pi))  # BxDxC'
p8783
tp8784
aasbsg85
g0
(g809
g5
Ntp8785
Rp8786
(dp8787
g552
(lp8788
g0
(g563
g5
Ntp8789
Rp8790
(dp8791
g16
I0
sg53
Nsg798
g801
sg807
(lp8792
sg14
S'auto_14822'
p8793
sg17
g0
(g18
g5
Ntp8794
Rp8795
(dp8796
g22
(lp8797
(lp8798
(g25
I306
g26
S'nade_train( * args[1:] )'
p8799
tp8800
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p8801
tp8802
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p8803
tp8804
a(g37
I36
g38
S'self.recompile()'
p8805
tp8806
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p8807
tp8808
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p8809
tp8810
a(g874
I231
g875
S'Phi = -constantX(0.5) * T.sqr((Mu - T.shape_padright(x)) / Sigma) - T.log(Sigma) - constantX(0.5 * np.log(2 * np.pi))  # BxDxC'
p8811
tp8812
aasbsg85
g0
(g809
g5
Ntp8813
Rp8814
(dp8815
g552
(lp8816
g0
(g563
g5
Ntp8817
Rp8818
(dp8819
g16
I0
sg53
Nsg798
g801
sg807
(lp8820
sg14
S'auto_14821'
p8821
sg17
g0
(g18
g5
Ntp8822
Rp8823
(dp8824
g22
(lp8825
(lp8826
(g25
I306
g26
S'nade_train( * args[1:] )'
p8827
tp8828
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p8829
tp8830
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p8831
tp8832
a(g37
I36
g38
S'self.recompile()'
p8833
tp8834
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p8835
tp8836
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p8837
tp8838
a(g874
I231
g875
S'Phi = -constantX(0.5) * T.sqr((Mu - T.shape_padright(x)) / Sigma) - T.log(Sigma) - constantX(0.5 * np.log(2 * np.pi))  # BxDxC'
p8839
tp8840
aasbsg85
g0
(g809
g5
Ntp8841
Rp8842
(dp8843
g552
(lp8844
g0
(g563
g5
Ntp8845
Rp8846
(dp8847
g16
I0
sg53
Nsg798
g801
sg807
(lp8848
sg14
S'auto_14820'
p8849
sg17
g0
(g18
g5
Ntp8850
Rp8851
(dp8852
g22
(lp8853
(lp8854
(g25
I306
g26
S'nade_train( * args[1:] )'
p8855
tp8856
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p8857
tp8858
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p8859
tp8860
a(g37
I36
g38
S'self.recompile()'
p8861
tp8862
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p8863
tp8864
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p8865
tp8866
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p8867
tp8868
aasbsg85
g0
(g809
g5
Ntp8869
Rp8870
(dp8871
g552
(lp8872
g1031
ag3567
asg798
g801
sg814
(lp8873
g8846
asg17
g0
(g18
g5
Ntp8874
Rp8875
(dp8876
g4093
(lp8877
g5814
asg1268
(lp8878
g1271
asbsg1272
(dp8879
sg1274
g0
(g318
g5
Ntp8880
Rp8881
(dp8882
g379
g380
sg322
g1899
sg53
S'Elemwise{add,no_inplace}'
p8883
sg330
(dp8884
sg332
(g1902
I2
I1
tp8885
sg333
g0
(g334
g5
Ntp8886
Rp8887
(dp8888
g338
I0
sg339
(dp8889
sbsg341
I00
sg307
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p8890
sbsbsg73
g0
(g74
g5
Ntp8891
Rp8892
(dp8893
g78
(I00
I00
I00
tp8894
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag3630
asg798
g801
sg814
(lp8895
g8818
asg17
g0
(g18
g5
Ntp8896
Rp8897
(dp8898
g4093
(lp8899
g5814
asg1268
(lp8900
g1271
asbsg1272
(dp8901
sg1274
g4101
sbsg73
g0
(g74
g5
Ntp8902
Rp8903
(dp8904
g78
(I00
I00
I00
tp8905
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp8906
Rp8907
(dp8908
g16
I0
sg53
Nsg798
g801
sg807
(lp8909
sg14
S'auto_14779'
p8910
sg17
g0
(g18
g5
Ntp8911
Rp8912
(dp8913
g22
(lp8914
(lp8915
(g25
I306
g26
S'nade_train( * args[1:] )'
p8916
tp8917
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p8918
tp8919
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p8920
tp8921
a(g37
I36
g38
S'self.recompile()'
p8922
tp8923
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p8924
tp8925
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p8926
tp8927
a(g874
I224
g875
S'Sigma = T.exp(z_sigma)  # + 1e-6 #BxDxC'
p8928
tp8929
aasbsg85
g0
(g809
g5
Ntp8930
Rp8931
(dp8932
g552
(lp8933
g0
(g563
g5
Ntp8934
Rp8935
(dp8936
g16
I0
sg53
Nsg798
g801
sg807
(lp8937
sg14
S'auto_14778'
p8938
sg17
g0
(g18
g5
Ntp8939
Rp8940
(dp8941
g22
(lp8942
(lp8943
(g25
I306
g26
S'nade_train( * args[1:] )'
p8944
tp8945
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p8946
tp8947
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p8948
tp8949
a(g37
I36
g38
S'self.recompile()'
p8950
tp8951
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p8952
tp8953
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p8954
tp8955
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p8956
tp8957
aasbsg85
g0
(g809
g5
Ntp8958
Rp8959
(dp8960
g552
(lp8961
g2473
ag2481
asg798
g801
sg814
(lp8962
g8935
asg17
g0
(g18
g5
Ntp8963
Rp8964
(dp8965
g4093
(lp8966
g5814
asg1268
(lp8967
g1271
asbsg1272
(dp8968
sg1274
g8881
sbsg73
g0
(g74
g5
Ntp8969
Rp8970
(dp8971
g78
(I00
I00
I00
tp8972
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp8973
g8907
asg17
g0
(g18
g5
Ntp8974
Rp8975
(dp8976
g4093
(lp8977
g5814
asg1268
(lp8978
g1271
asbsg1272
(dp8979
sg1274
g377
sbsg73
g0
(g74
g5
Ntp8980
Rp8981
(dp8982
g78
(I00
I00
I00
tp8983
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp8984
g8790
asg17
g0
(g18
g5
Ntp8985
Rp8986
(dp8987
g4093
(lp8988
g5814
asg1268
(lp8989
g1271
asbsg1272
(dp8990
sg1274
g0
(g318
g5
Ntp8991
Rp8992
(dp8993
g379
g380
sg322
g3892
sg53
S'Elemwise{true_div,no_inplace}'
p8994
sg330
(dp8995
sg332
(S'true_divide'
p8996
I2
I1
tp8997
sg333
g0
(g334
g5
Ntp8998
Rp8999
(dp9000
g338
I0
sg339
(dp9001
sbsg341
I00
sg307
S"elementwise [true] division (inverse of multiplication)\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p9002
sbsbsg73
g0
(g74
g5
Ntp9003
Rp9004
(dp9005
g78
(I00
I00
I00
tp9006
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp9007
g8762
asg17
g0
(g18
g5
Ntp9008
Rp9009
(dp9010
g4093
(lp9011
g5814
asg1268
(lp9012
g1271
asbsg1272
(dp9013
sg1274
g0
(g318
g5
Ntp9014
Rp9015
(dp9016
g379
g380
sg322
g3900
sg53
S'Elemwise{sqr,no_inplace}'
p9017
sg330
(dp9018
sg332
(S'square'
p9019
I1
I1
tp9020
sg333
g0
(g334
g5
Ntp9021
Rp9022
(dp9023
g338
I0
sg339
(dp9024
sbsg341
I00
sg307
S"square of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p9025
sbsbsg73
g0
(g74
g5
Ntp9026
Rp9027
(dp9028
g78
(I00
I00
I00
tp9029
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g0
(g563
g5
Ntp9030
Rp9031
(dp9032
g14
S'auto_15369'
p9033
sg16
I0
sg17
g0
(g18
g5
Ntp9034
Rp9035
(dp9036
g22
(lp9037
sbsg53
Nsg85
g0
(g809
g5
Ntp9038
Rp9039
(dp9040
g552
(lp9041
g0
(g563
g5
Ntp9042
Rp9043
(dp9044
g14
S'auto_15364'
p9045
sg16
I0
sg17
g0
(g18
g5
Ntp9046
Rp9047
(dp9048
g22
(lp9049
sbsg53
Nsg85
g0
(g809
g5
Ntp9050
Rp9051
(dp9052
g552
(lp9053
g0
(g563
g5
Ntp9054
Rp9055
(dp9056
g14
S'auto_15338'
p9057
sg16
I0
sg17
g0
(g18
g5
Ntp9058
Rp9059
(dp9060
g22
(lp9061
sbsg53
Nsg85
g0
(g809
g5
Ntp9062
Rp9063
(dp9064
g552
(lp9065
g0
(g563
g5
Ntp9066
Rp9067
(dp9068
g16
I0
sg53
Nsg798
g801
sg807
(lp9069
sg14
S'auto_14793'
p9070
sg17
g0
(g18
g5
Ntp9071
Rp9072
(dp9073
g22
(lp9074
g1523
asbsg85
g0
(g809
g5
Ntp9075
Rp9076
(dp9077
g552
(lp9078
g7655
ag7686
ag0
(g563
g5
Ntp9079
Rp9080
(dp9081
g16
I0
sg53
Nsg798
g801
sg807
(lp9082
sg14
S'auto_15696'
p9083
sg17
g0
(g18
g5
Ntp9084
Rp9085
(dp9086
g22
(lp9087
(lp9088
(g25
I306
g26
S'nade_train( * args[1:] )'
p9089
tp9090
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p9091
tp9092
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p9093
tp9094
a(g37
I36
g38
S'self.recompile()'
p9095
tp9096
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p9097
tp9098
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p9099
tp9100
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p9101
tp9102
aasbsg85
g0
(g809
g5
Ntp9103
Rp9104
(dp9105
g552
(lp9106
g1181
ag1190
asg798
g801
sg814
(lp9107
g9080
asg17
g0
(g18
g5
Ntp9108
Rp9109
(dp9110
g4093
(lp9111
g1546
asg1268
(lp9112
g7547
asbsg1272
(dp9113
sg1274
g1549
sbsg73
g0
(g74
g5
Ntp9114
Rp9115
(dp9116
g78
(I00
tp9117
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp9118
g9067
asg17
g0
(g18
g5
Ntp9119
Rp9120
(dp9121
g4093
(lp9122
g1546
asg1268
(lp9123
g1271
asbsg1272
(dp9124
sg1274
g7772
sbsg73
g0
(g74
g5
Ntp9125
Rp9126
(dp9127
g78
(I00
tp9128
sg80
S'int64'
p9129
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g3250
g5
Ntp9130
Rp9131
(dp9132
g14
S'auto_15337'
p9133
sg16
Nsg17
g0
(g18
g5
Ntp9134
Rp9135
(dp9136
g22
(lp9137
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p9138
tp9139
Rp9140
sbasg17
g0
(g18
g5
Ntp9141
Rp9142
sg814
(lp9143
g9055
asg1274
g0
(g3357
g5
Ntp9144
Rp9145
(dp9146
g3361
(g1465
tp9147
sbsbsg73
g0
(g74
g5
Ntp9148
Rp9149
(dp9150
g78
(tsg80
g9129
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp9151
Rp9152
(dp9153
g14
S'auto_15360'
p9154
sg16
Nsg17
g0
(g18
g5
Ntp9155
Rp9156
(dp9157
g22
(lp9158
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp9159
Rp9160
(dp9161
g78
(tsg80
S'int8'
p9162
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp9163
g59
tp9164
Rp9165
(I1
(tg3031
I00
g7816
tp9166
bsbasg17
g0
(g18
g5
Ntp9167
Rp9168
sg814
(lp9169
g9043
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp9170
Rp9171
(dp9172
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp9173
Rp9174
(dp9175
g14
S'auto_15359'
p9176
sg16
I0
sg17
g0
(g18
g5
Ntp9177
Rp9178
(dp9179
g22
(lp9180
sbsg53
Nsg85
g0
(g809
g5
Ntp9181
Rp9182
(dp9183
g552
(lp9184
g0
(g563
g5
Ntp9185
Rp9186
(dp9187
g14
S'auto_15336'
p9188
sg16
I0
sg17
g0
(g18
g5
Ntp9189
Rp9190
(dp9191
g22
(lp9192
sbsg53
Nsg85
g0
(g809
g5
Ntp9193
Rp9194
(dp9195
g552
(lp9196
g7870
ag0
(g563
g5
Ntp9197
Rp9198
(dp9199
g14
S'auto_15332'
p9200
sg16
I0
sg17
g0
(g18
g5
Ntp9201
Rp9202
(dp9203
g22
(lp9204
sbsg53
Nsg85
g0
(g809
g5
Ntp9205
Rp9206
(dp9207
g552
(lp9208
g0
(g563
g5
Ntp9209
Rp9210
(dp9211
g14
S'auto_15327'
p9212
sg16
I0
sg17
g0
(g18
g5
Ntp9213
Rp9214
(dp9215
g22
(lp9216
sbsg53
Nsg85
g0
(g809
g5
Ntp9217
Rp9218
(dp9219
g552
(lp9220
g0
(g563
g5
Ntp9221
Rp9222
(dp9223
g14
S'auto_15296'
p9224
sg16
I0
sg17
g0
(g18
g5
Ntp9225
Rp9226
(dp9227
g22
(lp9228
sbsg53
Nsg85
g0
(g809
g5
Ntp9229
Rp9230
(dp9231
g552
(lp9232
g1222
ag0
(g3250
g5
Ntp9233
Rp9234
(dp9235
g14
S'auto_15295'
p9236
sg16
Nsg17
g0
(g18
g5
Ntp9237
Rp9238
(dp9239
g22
(lp9240
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p9241
tp9242
Rp9243
sbasg17
g0
(g18
g5
Ntp9244
Rp9245
sg814
(lp9246
g9222
asg1274
g0
(g3357
g5
Ntp9247
Rp9248
(dp9249
g3361
(g1465
tp9250
sbsbsg73
g0
(g74
g5
Ntp9251
Rp9252
(dp9253
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp9254
Rp9255
(dp9256
g14
S'auto_15323'
p9257
sg16
Nsg17
g0
(g18
g5
Ntp9258
Rp9259
(dp9260
g22
(lp9261
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp9262
Rp9263
(dp9264
g78
(tsg80
S'int8'
p9265
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp9266
g59
tp9267
Rp9268
(I1
(tg3031
I00
g7816
tp9269
bsbasg17
g0
(g18
g5
Ntp9270
Rp9271
sg814
(lp9272
g9210
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp9273
Rp9274
(dp9275
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp9276
Rp9277
(dp9278
g14
S'auto_15312'
p9279
sg16
I0
sg17
g0
(g18
g5
Ntp9280
Rp9281
(dp9282
g22
(lp9283
sbsg53
Nsg85
g0
(g809
g5
Ntp9284
Rp9285
(dp9286
g552
(lp9287
g0
(g563
g5
Ntp9288
Rp9289
(dp9290
g14
S'auto_15292'
p9291
sg16
I0
sg17
g0
(g18
g5
Ntp9292
Rp9293
(dp9294
g22
(lp9295
sbsg53
Nsg85
g0
(g809
g5
Ntp9296
Rp9297
(dp9298
g552
(lp9299
g1251
ag1181
ag1190
asg17
g0
(g18
g5
Ntp9300
Rp9301
sg814
(lp9302
g9289
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp9303
Rp9304
(dp9305
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp9306
Rp9307
(dp9308
g14
S'auto_15308'
p9309
sg16
I0
sg17
g0
(g18
g5
Ntp9310
Rp9311
(dp9312
g22
(lp9313
sbsg53
Nsg85
g0
(g809
g5
Ntp9314
Rp9315
(dp9316
g552
(lp9317
g0
(g563
g5
Ntp9318
Rp9319
(dp9320
g14
S'auto_15303'
p9321
sg16
I0
sg17
g0
(g18
g5
Ntp9322
Rp9323
(dp9324
g22
(lp9325
sbsg53
Nsg85
g0
(g809
g5
Ntp9326
Rp9327
(dp9328
g552
(lp9329
g0
(g563
g5
Ntp9330
Rp9331
(dp9332
g14
S'auto_15300'
p9333
sg16
I0
sg17
g0
(g18
g5
Ntp9334
Rp9335
(dp9336
g22
(lp9337
sbsg53
Nsg85
g0
(g809
g5
Ntp9338
Rp9339
(dp9340
g552
(lp9341
g0
(g563
g5
Ntp9342
Rp9343
(dp9344
g14
S'auto_15294'
p9345
sg16
I0
sg17
g0
(g18
g5
Ntp9346
Rp9347
(dp9348
g22
(lp9349
sbsg53
Nsg85
g0
(g809
g5
Ntp9350
Rp9351
(dp9352
g552
(lp9353
g1222
ag0
(g3250
g5
Ntp9354
Rp9355
(dp9356
g14
S'auto_15293'
p9357
sg16
Nsg17
g0
(g18
g5
Ntp9358
Rp9359
(dp9360
g22
(lp9361
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p9362
tp9363
Rp9364
sbasg17
g0
(g18
g5
Ntp9365
Rp9366
sg814
(lp9367
g9343
asg1274
g0
(g3357
g5
Ntp9368
Rp9369
(dp9370
g3361
(g1465
tp9371
sbsbsg73
g0
(g74
g5
Ntp9372
Rp9373
(dp9374
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag9222
asg17
g0
(g18
g5
Ntp9375
Rp9376
sg814
(lp9377
g9331
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp9378
Rp9379
(dp9380
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp9381
Rp9382
sg814
(lp9383
g9319
asg1274
g8125
sbsg73
g0
(g74
g5
Ntp9384
Rp9385
(dp9386
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp9387
Rp9388
(dp9389
g14
S'auto_15304'
p9390
sg16
Nsg17
g0
(g18
g5
Ntp9391
Rp9392
(dp9393
g22
(lp9394
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp9395
Rp9396
(dp9397
g78
(tsg80
S'int8'
p9398
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp9399
g59
tp9400
Rp9401
(I1
(tg3031
I00
g8160
tp9402
bsbasg17
g0
(g18
g5
Ntp9403
Rp9404
sg814
(lp9405
g9307
asg1274
g8166
sbsg73
g0
(g74
g5
Ntp9406
Rp9407
(dp9408
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp9409
Rp9410
sg814
(lp9411
g9277
asg1274
g8183
sbsg73
g0
(g74
g5
Ntp9412
Rp9413
(dp9414
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag9222
asg17
g0
(g18
g5
Ntp9415
Rp9416
sg814
(lp9417
g9198
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp9418
Rp9419
(dp9420
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp9421
Rp9422
sg814
(lp9423
g9186
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp9424
Rp9425
(dp9426
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp9427
Rp9428
(dp9429
g14
S'auto_15355'
p9430
sg16
I0
sg17
g0
(g18
g5
Ntp9431
Rp9432
(dp9433
g22
(lp9434
sbsg53
Nsg85
g0
(g809
g5
Ntp9435
Rp9436
(dp9437
g552
(lp9438
g0
(g563
g5
Ntp9439
Rp9440
(dp9441
g14
S'auto_15350'
p9442
sg16
I0
sg17
g0
(g18
g5
Ntp9443
Rp9444
(dp9445
g22
(lp9446
sbsg53
Nsg85
g0
(g809
g5
Ntp9447
Rp9448
(dp9449
g552
(lp9450
g0
(g563
g5
Ntp9451
Rp9452
(dp9453
g14
S'auto_15347'
p9454
sg16
I0
sg17
g0
(g18
g5
Ntp9455
Rp9456
(dp9457
g22
(lp9458
sbsg53
Nsg85
g0
(g809
g5
Ntp9459
Rp9460
(dp9461
g552
(lp9462
g9055
ag0
(g563
g5
Ntp9463
Rp9464
(dp9465
g14
S'auto_15340'
p9466
sg16
I0
sg17
g0
(g18
g5
Ntp9467
Rp9468
(dp9469
g22
(lp9470
sbsg53
Nsg85
g0
(g809
g5
Ntp9471
Rp9472
(dp9473
g552
(lp9474
g9067
ag0
(g3250
g5
Ntp9475
Rp9476
(dp9477
g14
S'auto_15339'
p9478
sg16
Nsg17
g0
(g18
g5
Ntp9479
Rp9480
(dp9481
g22
(lp9482
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p9483
tp9484
Rp9485
sbasg17
g0
(g18
g5
Ntp9486
Rp9487
sg814
(lp9488
g9464
asg1274
g0
(g3357
g5
Ntp9489
Rp9490
(dp9491
g3361
(g1465
tp9492
sbsbsg73
g0
(g74
g5
Ntp9493
Rp9494
(dp9495
g78
(tsg80
g9129
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp9496
Rp9497
(dp9498
g14
S'auto_15342'
p9499
sg16
I0
sg17
g0
(g18
g5
Ntp9500
Rp9501
(dp9502
g22
(lp9503
sbsg53
Nsg85
g0
(g809
g5
Ntp9504
Rp9505
(dp9506
g552
(lp9507
g9067
ag0
(g3250
g5
Ntp9508
Rp9509
(dp9510
g14
S'auto_15341'
p9511
sg16
Nsg17
g0
(g18
g5
Ntp9512
Rp9513
(dp9514
g22
(lp9515
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p9516
tp9517
Rp9518
sbasg17
g0
(g18
g5
Ntp9519
Rp9520
sg814
(lp9521
g9497
asg1274
g0
(g3357
g5
Ntp9522
Rp9523
(dp9524
g3361
(g1465
tp9525
sbsbsg73
g0
(g74
g5
Ntp9526
Rp9527
(dp9528
g78
(tsg80
g9129
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp9529
Rp9530
sg814
(lp9531
g9452
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp9532
Rp9533
(dp9534
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp9535
Rp9536
sg814
(lp9537
g9440
asg1274
g8125
sbsg73
g0
(g74
g5
Ntp9538
Rp9539
(dp9540
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp9541
Rp9542
(dp9543
g14
S'auto_15351'
p9544
sg16
Nsg17
g0
(g18
g5
Ntp9545
Rp9546
(dp9547
g22
(lp9548
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp9549
Rp9550
(dp9551
g78
(tsg80
S'int8'
p9552
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp9553
g59
tp9554
Rp9555
(I1
(tg3031
I00
g8160
tp9556
bsbasg17
g0
(g18
g5
Ntp9557
Rp9558
sg814
(lp9559
g9428
asg1274
g8166
sbsg73
g0
(g74
g5
Ntp9560
Rp9561
(dp9562
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp9563
Rp9564
sg814
(lp9565
g9174
asg1274
g8183
sbsg73
g0
(g74
g5
Ntp9566
Rp9567
(dp9568
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag9055
asg17
g0
(g18
g5
Ntp9569
Rp9570
sg814
(lp9571
g9031
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp9572
Rp9573
(dp9574
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbg0
(g563
g5
Ntp9575
Rp9576
(dp9577
g14
S'auto_15379'
p9578
sg16
I0
sg17
g0
(g18
g5
Ntp9579
Rp9580
(dp9581
g22
(lp9582
sbsg53
Nsg85
g0
(g809
g5
Ntp9583
Rp9584
(dp9585
g552
(lp9586
g0
(g563
g5
Ntp9587
Rp9588
(dp9589
g14
S'auto_15374'
p9590
sg16
I0
sg17
g0
(g18
g5
Ntp9591
Rp9592
(dp9593
g22
(lp9594
sbsg53
Nsg85
g0
(g809
g5
Ntp9595
Rp9596
(dp9597
g552
(lp9598
g9464
ag0
(g843
g5
Ntp9599
Rp9600
(dp9601
g14
S'auto_15370'
p9602
sg16
Nsg17
g0
(g18
g5
Ntp9603
Rp9604
(dp9605
g22
(lp9606
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp9607
Rp9608
(dp9609
g78
(tsg80
S'int8'
p9610
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp9611
g59
tp9612
Rp9613
(I1
(tg3031
I00
g7816
tp9614
bsbasg17
g0
(g18
g5
Ntp9615
Rp9616
sg814
(lp9617
g9588
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp9618
Rp9619
(dp9620
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag9174
ag9464
asg17
g0
(g18
g5
Ntp9621
Rp9622
sg814
(lp9623
g9576
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp9624
Rp9625
(dp9626
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbg0
(g563
g5
Ntp9627
Rp9628
(dp9629
g14
S'auto_15389'
p9630
sg16
I0
sg17
g0
(g18
g5
Ntp9631
Rp9632
(dp9633
g22
(lp9634
sbsg53
Nsg85
g0
(g809
g5
Ntp9635
Rp9636
(dp9637
g552
(lp9638
g0
(g563
g5
Ntp9639
Rp9640
(dp9641
g14
S'auto_15384'
p9642
sg16
I0
sg17
g0
(g18
g5
Ntp9643
Rp9644
(dp9645
g22
(lp9646
sbsg53
Nsg85
g0
(g809
g5
Ntp9647
Rp9648
(dp9649
g552
(lp9650
g9497
ag0
(g843
g5
Ntp9651
Rp9652
(dp9653
g14
S'auto_15380'
p9654
sg16
Nsg17
g0
(g18
g5
Ntp9655
Rp9656
(dp9657
g22
(lp9658
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp9659
Rp9660
(dp9661
g78
(tsg80
S'int8'
p9662
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp9663
g59
tp9664
Rp9665
(I1
(tg3031
I00
g7816
tp9666
bsbasg17
g0
(g18
g5
Ntp9667
Rp9668
sg814
(lp9669
g9640
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp9670
Rp9671
(dp9672
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag9174
ag9497
asg17
g0
(g18
g5
Ntp9673
Rp9674
sg814
(lp9675
g9628
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp9676
Rp9677
(dp9678
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbtp9679
sg1806
(g7606
g8603
tp9680
sg0
(g843
g5
Ntp9681
Rp9682
(dp9683
g14
S'auto_15457'
p9684
sg16
Nsg17
g0
(g18
g5
Ntp9685
Rp9686
(dp9687
g22
(lp9688
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp9689
Rp9690
(dp9691
g78
(tsg80
S'int8'
p9692
sg82
g3031
sg83
I00
sg53
Nsbsg807
(lp9693
sg883
g56
(g57
(I0
tp9694
g59
tp9695
Rp9696
(I1
(tg3031
I00
g8160
tp9697
bsb(tsg2435
(g0
(g843
g5
Ntp9698
Rp9699
(dp9700
g14
S'auto_15792'
p9701
sg16
Nsg17
g0
(g18
g5
Ntp9702
Rp9703
(dp9704
g22
(lp9705
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp9706
Rp9707
(dp9708
g78
(tsg80
S'int64'
p9709
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp9710
g59
tp9711
Rp9712
(I1
(tg1286
I00
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p9713
tp9714
bsbtp9715
sg0
(g563
g5
Ntp9716
Rp9717
(dp9718
g16
I0
sg53
Nsg798
g801
sg807
(lp9719
sg14
S'auto_15614'
p9720
sg17
g0
(g18
g5
Ntp9721
Rp9722
(dp9723
g22
(lp9724
(lp9725
(g25
I306
g26
S'nade_train( * args[1:] )'
p9726
tp9727
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p9728
tp9729
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p9730
tp9731
a(g37
I36
g38
S'self.recompile()'
p9732
tp9733
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p9734
tp9735
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p9736
tp9737
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p9738
tp9739
aasbsg85
g0
(g809
g5
Ntp9740
Rp9741
(dp9742
g552
(lp9743
g1627
ag1557
ag1566
asg798
g801
sg814
(lp9744
g9717
asg17
g0
(g18
g5
Ntp9745
Rp9746
(dp9747
g4093
(lp9748
g7547
asg1268
(lp9749
g1270
asbsg1272
(dp9750
sg1274
g1549
sbsg73
g0
(g74
g5
Ntp9751
Rp9752
(dp9753
g78
(I00
tp9754
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(g0
(g843
g5
Ntp9755
Rp9756
(dp9757
g14
S'auto_15615'
p9758
sg16
Nsg17
g0
(g18
g5
Ntp9759
Rp9760
(dp9761
g22
(lp9762
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp9763
Rp9764
(dp9765
g78
(tsg80
S'int64'
p9766
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp9767
g59
tp9768
Rp9769
(I1
(tg1286
I00
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p9770
tp9771
bsbtp9772
sg0
(g563
g5
Ntp9773
Rp9774
(dp9775
g16
I0
sg53
Nsg798
g801
sg807
(lp9776
sg14
S'auto_14830'
p9777
sg17
g0
(g18
g5
Ntp9778
Rp9779
(dp9780
g22
(lp9781
(lp9782
(g25
I306
g26
S'nade_train( * args[1:] )'
p9783
tp9784
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p9785
tp9786
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p9787
tp9788
a(g37
I36
g38
S'self.recompile()'
p9789
tp9790
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p9791
tp9792
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p9793
tp9794
a(g874
I232
g875
S'logdensity = (log_sum_exp(Phi + T.log(Alpha), axis=2) * output_mask).sum(1) * D / (D - d)'
p9795
tp9796
aasbsg85
g0
(g809
g5
Ntp9797
Rp9798
(dp9799
g552
(lp9800
g0
(g563
g5
Ntp9801
Rp9802
(dp9803
g16
I0
sg53
Nsg798
g801
sg807
(lp9804
sg14
S'auto_14829'
p9805
sg17
g0
(g18
g5
Ntp9806
Rp9807
(dp9808
g22
(lp9809
(lp9810
(g25
I306
g26
S'nade_train( * args[1:] )'
p9811
tp9812
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p9813
tp9814
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p9815
tp9816
a(g37
I36
g38
S'self.recompile()'
p9817
tp9818
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p9819
tp9820
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p9821
tp9822
a(g874
I231
g875
S'Phi = -constantX(0.5) * T.sqr((Mu - T.shape_padright(x)) / Sigma) - T.log(Sigma) - constantX(0.5 * np.log(2 * np.pi))  # BxDxC'
p9823
tp9824
aasbsg85
g0
(g809
g5
Ntp9825
Rp9826
(dp9827
g552
(lp9828
g0
(g563
g5
Ntp9829
Rp9830
(dp9831
g16
I0
sg53
Nsg798
g801
sg807
(lp9832
sg14
S'auto_14828'
p9833
sg17
g0
(g18
g5
Ntp9834
Rp9835
(dp9836
g22
(lp9837
(lp9838
(g25
I306
g26
S'nade_train( * args[1:] )'
p9839
tp9840
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p9841
tp9842
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p9843
tp9844
a(g37
I36
g38
S'self.recompile()'
p9845
tp9846
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p9847
tp9848
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p9849
tp9850
a(g874
I231
g875
S'Phi = -constantX(0.5) * T.sqr((Mu - T.shape_padright(x)) / Sigma) - T.log(Sigma) - constantX(0.5 * np.log(2 * np.pi))  # BxDxC'
p9851
tp9852
aasbsg85
g0
(g809
g5
Ntp9853
Rp9854
(dp9855
g552
(lp9856
g0
(g563
g5
Ntp9857
Rp9858
(dp9859
g16
I0
sg53
Nsg798
g801
sg807
(lp9860
sg14
S'auto_14827'
p9861
sg17
g0
(g18
g5
Ntp9862
Rp9863
(dp9864
g22
(lp9865
(lp9866
(g25
I306
g26
S'nade_train( * args[1:] )'
p9867
tp9868
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p9869
tp9870
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p9871
tp9872
a(g37
I36
g38
S'self.recompile()'
p9873
tp9874
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p9875
tp9876
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p9877
tp9878
a(g874
I231
g875
S'Phi = -constantX(0.5) * T.sqr((Mu - T.shape_padright(x)) / Sigma) - T.log(Sigma) - constantX(0.5 * np.log(2 * np.pi))  # BxDxC'
p9879
tp9880
aasbsg85
g0
(g809
g5
Ntp9881
Rp9882
(dp9883
g552
(lp9884
g1008
ag8762
asg798
g801
sg814
(lp9885
g9858
asg17
g0
(g18
g5
Ntp9886
Rp9887
(dp9888
g4093
(lp9889
g5814
asg1268
(lp9890
g1271
asbsg1272
(dp9891
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp9892
Rp9893
(dp9894
g78
(I00
I00
I00
tp9895
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag6115
asg798
g801
sg814
(lp9896
g9830
asg17
g0
(g18
g5
Ntp9897
Rp9898
(dp9899
g4093
(lp9900
g4096
asg1268
(lp9901
g1271
asbsg1272
(dp9902
sg1274
g4101
sbsg73
g0
(g74
g5
Ntp9903
Rp9904
(dp9905
g78
(I00
I00
I00
tp9906
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp9907
Rp9908
(dp9909
g16
I0
sg53
Nsg798
g801
sg807
(lp9910
sg14
S'auto_14739'
p9911
sg17
g0
(g18
g5
Ntp9912
Rp9913
(dp9914
g22
(lp9915
(lp9916
(g25
I306
g26
S'nade_train( * args[1:] )'
p9917
tp9918
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p9919
tp9920
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p9921
tp9922
a(g37
I36
g38
S'self.recompile()'
p9923
tp9924
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p9925
tp9926
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p9927
tp9928
a(g874
I231
g875
S'Phi = -constantX(0.5) * T.sqr((Mu - T.shape_padright(x)) / Sigma) - T.log(Sigma) - constantX(0.5 * np.log(2 * np.pi))  # BxDxC'
p9929
tp9930
aasbsg85
g0
(g809
g5
Ntp9931
Rp9932
(dp9933
g552
(lp9934
g0
(g843
g5
Ntp9935
Rp9936
(dp9937
g14
S'auto_14738'
p9938
sg16
Nsg17
g0
(g18
g5
Ntp9939
Rp9940
(dp9941
g22
(lp9942
(lp9943
(g25
I306
g26
S'nade_train( * args[1:] )'
p9944
tp9945
a(g29
I221
g30
S'nade = nade_class(n_visible, options.units, l, options.n_components, nonlinearity=options.nonlinearity)'
p9946
tp9947
a(g37
I36
g38
S'self.recompile()'
p9948
tp9949
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p9950
tp9951
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p9952
tp9953
a(g874
I231
g875
S'Phi = -constantX(0.5) * T.sqr((Mu - T.shape_padright(x)) / Sigma) - T.log(Sigma) - constantX(0.5 * np.log(2 * np.pi))  # BxDxC'
p9954
tp9955
a(g4481
I43
g7593
S'return theano.tensor.constant(np.asarray(value, dtype=floatX))'
p9956
tp9957
aasg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp9958
Rp9959
(dp9960
g78
(tsg80
S'float64'
p9961
sg82
g66
sg83
I00
sg53
Nsbsg807
(lp9962
sg883
g56
(g57
(I0
tp9963
g59
tp9964
Rp9965
(I1
(tg66
I00
S'\xb4\xbed\xc8\xf1g\xed?'
p9966
tp9967
bsbasg798
g801
sg814
(lp9968
g9908
asg17
g0
(g18
g5
Ntp9969
Rp9970
(dp9971
g4093
(lp9972
g4096
asg1268
(lp9973
g1271
asbsg1272
(dp9974
sg1274
g0
(g1387
g5
Ntp9975
Rp9976
(dp9977
g1391
(lp9978
sg1393
(lp9979
sg1395
(lp9980
I0
aI1
aI2
asg1397
g1398
sg1399
(tsg1401
(lp9981
g1403
asg1404
I01
sg1405
(g270
g270
g270
tp9982
sg1407
(dp9983
S'support_code_apply'
p9984
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9985
ssg1411
(dp9986
I0
(lp9987
I0
assg1414
(lp9988
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9989
asbsbsg73
g0
(g74
g5
Ntp9990
Rp9991
(dp9992
g78
(I01
I01
I01
tp9993
sg80
g9961
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp9994
g9802
asg17
g0
(g18
g5
Ntp9995
Rp9996
(dp9997
g4093
(lp9998
g4096
asg1268
(lp9999
g1271
asbsg1272
(dp10000
sg1274
g4101
sbsg73
g0
(g74
g5
Ntp10001
Rp10002
(dp10003
g78
(I00
I00
I00
tp10004
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp10005
Rp10006
(dp10007
g16
I0
sg53
Nsg798
g801
sg807
(lp10008
sg14
S'auto_14737'
p10009
sg17
g0
(g18
g5
Ntp10010
Rp10011
(dp10012
g22
(lp10013
(lp10014
(g25
I306
g26
S'nade_train( * args[1:] )'
p10015
tp10016
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p10017
tp10018
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p10019
tp10020
a(g37
I36
g38
S'self.recompile()'
p10021
tp10022
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p10023
tp10024
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p10025
tp10026
a(g874
I232
g875
S'logdensity = (log_sum_exp(Phi + T.log(Alpha), axis=2) * output_mask).sum(1) * D / (D - d)'
p10027
tp10028
aasbsg85
g0
(g809
g5
Ntp10029
Rp10030
(dp10031
g552
(lp10032
g0
(g563
g5
Ntp10033
Rp10034
(dp10035
g16
I0
sg53
Nsg798
g801
sg807
(lp10036
sg14
S'auto_14736'
p10037
sg17
g0
(g18
g5
Ntp10038
Rp10039
(dp10040
g22
(lp10041
(lp10042
(g25
I306
g26
S'nade_train( * args[1:] )'
p10043
tp10044
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p10045
tp10046
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p10047
tp10048
a(g37
I36
g38
S'self.recompile()'
p10049
tp10050
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p10051
tp10052
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p10053
tp10054
a(g874
I222
g875
S'Alpha = temp / T.shape_padright(temp.sum(2))  # BxDxC'
p10055
tp10056
aasbsg85
g0
(g809
g5
Ntp10057
Rp10058
(dp10059
g552
(lp10060
g0
(g563
g5
Ntp10061
Rp10062
(dp10063
g16
I0
sg53
Nsg798
g801
sg807
(lp10064
sg14
S'auto_14733'
p10065
sg17
g0
(g18
g5
Ntp10066
Rp10067
(dp10068
g22
(lp10069
(lp10070
(g25
I306
g26
S'nade_train( * args[1:] )'
p10071
tp10072
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p10073
tp10074
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p10075
tp10076
a(g37
I36
g38
S'self.recompile()'
p10077
tp10078
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p10079
tp10080
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p10081
tp10082
a(g874
I220
g875
S'temp = T.exp(z_alpha)  # + 1e-6'
p10083
tp10084
aasbsg85
g0
(g809
g5
Ntp10085
Rp10086
(dp10087
g552
(lp10088
g0
(g563
g5
Ntp10089
Rp10090
(dp10091
g16
I0
sg53
Nsg798
g801
sg807
(lp10092
sg14
S'auto_14732'
p10093
sg17
g0
(g18
g5
Ntp10094
Rp10095
(dp10096
g22
(lp10097
(lp10098
(g25
I306
g26
S'nade_train( * args[1:] )'
p10099
tp10100
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p10101
tp10102
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p10103
tp10104
a(g37
I36
g38
S'self.recompile()'
p10105
tp10106
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p10107
tp10108
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p10109
tp10110
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p10111
tp10112
aasbsg85
g0
(g809
g5
Ntp10113
Rp10114
(dp10115
g552
(lp10116
g1725
ag1733
asg798
g801
sg814
(lp10117
g10090
asg17
g0
(g18
g5
Ntp10118
Rp10119
(dp10120
g4093
(lp10121
g5814
asg1268
(lp10122
g1271
asbsg1272
(dp10123
sg1274
g8881
sbsg73
g0
(g74
g5
Ntp10124
Rp10125
(dp10126
g78
(I00
I00
I00
tp10127
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp10128
g10062
asg17
g0
(g18
g5
Ntp10129
Rp10130
(dp10131
g4093
(lp10132
g5814
asg1268
(lp10133
g1271
asbsg1272
(dp10134
sg1274
g377
sbsg73
g0
(g74
g5
Ntp10135
Rp10136
(dp10137
g78
(I00
I00
I00
tp10138
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag1815
asg798
g801
sg814
(lp10139
g10034
asg17
g0
(g18
g5
Ntp10140
Rp10141
(dp10142
g4093
(lp10143
g5814
asg1268
(lp10144
g1271
asbsg1272
(dp10145
sg1274
g8992
sbsg73
g0
(g74
g5
Ntp10146
Rp10147
(dp10148
g78
(I00
I00
I00
tp10149
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp10150
g10006
asg17
g0
(g18
g5
Ntp10151
Rp10152
(dp10153
g4093
(lp10154
g5814
asg1268
(lp10155
g1271
asbsg1272
(dp10156
sg1274
g6150
sbsg73
g0
(g74
g5
Ntp10157
Rp10158
(dp10159
g78
(I00
I00
I00
tp10160
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp10161
g9774
asg17
g0
(g18
g5
Ntp10162
Rp10163
(dp10164
g4093
(lp10165
g4096
asg1268
(lp10166
g1271
asbsg1272
(dp10167
sg1274
g8881
sbsg73
g0
(g74
g5
Ntp10168
Rp10169
(dp10170
g78
(I00
I00
I00
tp10171
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g9031
g9576
g9628
tp10172
sg845
(g8744
tp10173
sg0
(g563
g5
Ntp10174
Rp10175
(dp10176
g16
I0
sg53
Nsg798
g801
sg807
(lp10177
sg14
S'auto_15855'
p10178
sg17
g0
(g18
g5
Ntp10179
Rp10180
(dp10181
g22
(lp10182
(lp10183
(g25
I306
g26
S'nade_train( * args[1:] )'
p10184
tp10185
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p10186
tp10187
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p10188
tp10189
a(g37
I36
g38
S'self.recompile()'
p10190
tp10191
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p10192
tp10193
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p10194
tp10195
a(g874
I214
g875
S'h = self.nonlinearity(T.dot(masked_input, self.W1) + T.dot(mask, self.Wflags) + self.b1)  # BxH'
p10196
tp10197
aasbsg85
g0
(g809
g5
Ntp10198
Rp10199
(dp10200
g552
(lp10201
g826
ag3000
asg798
g801
sg814
(lp10202
g10175
asg17
g0
(g18
g5
Ntp10203
Rp10204
(dp10205
g4093
(lp10206
g5770
asg1268
(lp10207
g2086
asbsg1272
(dp10208
sg1274
g2090
sbsg73
g0
(g74
g5
Ntp10209
Rp10210
(dp10211
g78
(I00
I00
tp10212
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g7478
g0
(g563
g5
Ntp10213
Rp10214
(dp10215
g14
S'auto_14877'
p10216
sg16
I0
sg17
g0
(g18
g5
Ntp10217
Rp10218
(dp10219
g22
(lp10220
sbsg53
Nsg85
g0
(g809
g5
Ntp10221
Rp10222
(dp10223
g552
(lp10224
g3000
asg17
g0
(g18
g5
Ntp10225
Rp10226
sg814
(lp10227
g10214
asg1274
g0
(g1275
g5
Ntp10228
Rp10229
(dp10230
g1279
I1
sbsbsg73
g1281
sbtp10231
sg0
(g563
g5
Ntp10232
Rp10233
(dp10234
g16
I0
sg53
Nsg798
g801
sg807
(lp10235
sg14
S'auto_14671'
p10236
sg17
g0
(g18
g5
Ntp10237
Rp10238
(dp10239
g22
(lp10240
(lp10241
(g25
I306
g26
S'nade_train( * args[1:] )'
p10242
tp10243
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p10244
tp10245
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p10246
tp10247
a(g37
I36
g38
S'self.recompile()'
p10248
tp10249
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p10250
tp10251
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p10252
tp10253
a(g874
I210
g875
S'output_mask = constantX(1) - mask  # BxD'
p10254
tp10255
aasbsg85
g0
(g809
g5
Ntp10256
Rp10257
(dp10258
g552
(lp10259
g4539
ag826
asg798
g801
sg814
(lp10260
g10233
asg17
g0
(g18
g5
Ntp10261
Rp10262
(dp10263
g4093
(lp10264
g5814
asg1268
(lp10265
g1271
asbsg1272
(dp10266
sg1274
g4101
sbsg73
g0
(g74
g5
Ntp10267
Rp10268
(dp10269
g78
(I00
I00
tp10270
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g7478
g7496
tp10271
sg0
(g563
g5
Ntp10272
Rp10273
(dp10274
g16
I0
sg53
Nsg798
g801
sg807
(lp10275
sg14
S'auto_14799'
p10276
sg17
g0
(g18
g5
Ntp10277
Rp10278
(dp10279
g22
(lp10280
(lp10281
(g25
I306
g26
S'nade_train( * args[1:] )'
p10282
tp10283
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p10284
tp10285
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p10286
tp10287
a(g37
I36
g38
S'self.recompile()'
p10288
tp10289
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p10290
tp10291
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p10292
tp10293
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p10294
tp10295
aasbsg85
g0
(g809
g5
Ntp10296
Rp10297
(dp10298
g552
(lp10299
g7515
ag0
(g3250
g5
Ntp10300
Rp10301
(dp10302
g14
S'auto_14709'
p10303
sg16
Nsg17
g0
(g18
g5
Ntp10304
Rp10305
(dp10306
g22
(lp10307
(lp10308
(g25
I306
g26
S'nade_train( * args[1:] )'
p10309
tp10310
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p10311
tp10312
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p10313
tp10314
a(g37
I36
g38
S'self.recompile()'
p10315
tp10316
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p10317
tp10318
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p10319
tp10320
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p10321
tp10322
aasbsg53
Nsg73
g1465
sg807
(lp10323
sg883
g879
(g1286
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p10324
tp10325
Rp10326
sbasg798
g801
sg814
(lp10327
g10273
asg17
g0
(g18
g5
Ntp10328
Rp10329
(dp10330
g4093
(lp10331
g7547
asg1268
(lp10332
g1271
asbsg1272
(dp10333
sg1274
g0
(g3357
g5
Ntp10334
Rp10335
(dp10336
g3361
(g1465
tp10337
sbsbsg73
g0
(g74
g5
Ntp10338
Rp10339
(dp10340
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg891
(g9031
tp10341
sg8790
(g9031
g9576
g9628
tp10342
sg0
(g563
g5
Ntp10343
Rp10344
(dp10345
g16
I0
sg53
g936
sg798
g801
sg807
(lp10346
sg14
S'auto_14831'
p10347
sg17
g0
(g18
g5
Ntp10348
Rp10349
(dp10350
g22
(lp10351
g4517
asbsg85
g0
(g809
g5
Ntp10352
Rp10353
(dp10354
g552
(lp10355
g4029
asg798
g801
sg814
(lp10356
g10344
ag0
(g563
g5
Ntp10357
Rp10358
(dp10359
g16
I1
sg53
S'argmax'
p10360
sg798
g801
sg807
(lp10361
sg14
S'auto_14832'
p10362
sg17
g0
(g18
g5
Ntp10363
Rp10364
(dp10365
g22
(lp10366
(lp10367
(g25
I306
g26
S'nade_train( * args[1:] )'
p10368
tp10369
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p10370
tp10371
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p10372
tp10373
a(g37
I36
g38
S'self.recompile()'
p10374
tp10375
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p10376
tp10377
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p10378
tp10379
a(g874
I232
g875
S'logdensity = (log_sum_exp(Phi + T.log(Alpha), axis=2) * output_mask).sum(1) * D / (D - d)'
p10380
tp10381
a(g4481
I52
g4482
S'max_x = T.max(x, axis)'
p10382
tp10383
aasbsg85
g10353
sg73
g0
(g74
g5
Ntp10384
Rp10385
(dp10386
g78
(I00
I00
tp10387
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp10388
Rp10389
(dp10390
g4093
(lp10391
g4041
asg1268
(lp10392
g1271
asbsg1272
(dp10393
sg1274
g0
(ctheano.tensor.basic
MaxAndArgmax
p10394
g5
Ntp10395
Rp10396
(dp10397
g1903
(I2
tp10398
sbsbsg73
g0
(g74
g5
Ntp10399
Rp10400
(dp10401
g78
g4500
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g9031
g9576
tp10402
sg0
(g563
g5
Ntp10403
Rp10404
(dp10405
g16
I0
sg53
Nsg798
g801
sg807
(lp10406
sg14
S'auto_15846'
p10407
sg17
g0
(g18
g5
Ntp10408
Rp10409
(dp10410
g22
(lp10411
sbsg85
g0
(g809
g5
Ntp10412
Rp10413
(dp10414
g552
(lp10415
g0
(g563
g5
Ntp10416
Rp10417
(dp10418
g16
I0
sg53
Nsg798
g801
sg807
(lp10419
sg14
S'auto_15843'
p10420
sg17
g0
(g18
g5
Ntp10421
Rp10422
(dp10423
g22
(lp10424
sbsg85
g0
(g809
g5
Ntp10425
Rp10426
(dp10427
g552
(lp10428
g0
(g563
g5
Ntp10429
Rp10430
(dp10431
g16
I0
sg53
Nsg798
g801
sg807
(lp10432
sg14
S'auto_15415'
p10433
sg17
g0
(g18
g5
Ntp10434
Rp10435
(dp10436
g4058
g4059
sg22
(lp10437
sbsg85
g0
(g809
g5
Ntp10438
Rp10439
(dp10440
g552
(lp10441
g0
(g563
g5
Ntp10442
Rp10443
(dp10444
g16
I0
sg53
Nsg798
g801
sg807
(lp10445
sg14
S'auto_15407'
p10446
sg17
g0
(g18
g5
Ntp10447
Rp10448
(dp10449
g22
(lp10450
sbsg85
g0
(g809
g5
Ntp10451
Rp10452
(dp10453
g552
(lp10454
g984
ag9858
ag10006
asg798
g801
sg814
(lp10455
g10443
asg17
g0
(g18
g5
Ntp10456
Rp10457
(dp10458
g4093
(lp10459
g5814
asg1268
(lp10460
g4096
asbsg1272
(dp10461
sg1274
g8881
sbsg73
g0
(g74
g5
Ntp10462
Rp10463
(dp10464
g78
(I00
I00
I00
tp10465
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp10466
Rp10467
(dp10468
g16
I0
sg53
Nsg798
g801
sg807
(lp10469
sg14
S'auto_15411'
p10470
sg17
g0
(g18
g5
Ntp10471
Rp10472
(dp10473
g22
(lp10474
sbsg85
g0
(g809
g5
Ntp10475
Rp10476
(dp10477
g552
(lp10478
g6115
ag944
asg798
g801
sg814
(lp10479
g10467
asg17
g0
(g18
g5
Ntp10480
Rp10481
(dp10482
g4093
(lp10483
g5814
asg1268
(lp10484
g4096
asbsg1272
(dp10485
sg1274
g8881
sbsg73
g0
(g74
g5
Ntp10486
Rp10487
(dp10488
g78
(I00
I00
I00
tp10489
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp10490
g10430
asg17
g0
(g18
g5
Ntp10491
Rp10492
(dp10493
g4093
(lp10494
g5814
asg1268
(lp10495
g4096
asbsg1272
(dp10496
sg1274
g4101
sbsg73
g0
(g74
g5
Ntp10497
Rp10498
(dp10499
g78
(I00
I00
I00
tp10500
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag4143
asg798
g801
sg814
(lp10501
g10417
asg17
g0
(g18
g5
Ntp10502
Rp10503
(dp10504
g4093
(lp10505
g5814
asg1268
(lp10506
g4178
asbsg1272
(dp10507
sg1274
g4101
sbsg73
g0
(g74
g5
Ntp10508
Rp10509
(dp10510
g78
(I00
I00
I00
tp10511
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp10512
g10404
asg17
g0
(g18
g5
Ntp10513
Rp10514
(dp10515
g4093
(lp10516
g5814
asg1268
(lp10517
g4178
asbsg1272
(dp10518
sg1274
g377
sbsg73
g0
(g74
g5
Ntp10519
Rp10520
(dp10521
g78
(I00
I00
I00
tp10522
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g9031
g9576
g9628
tp10523
sg10358
(g9031
g9576
tp10524
sg4539
(g8744
g8744
tp10525
sg0
(g563
g5
Ntp10526
Rp10527
(dp10528
g16
I0
sg53
Nsg798
g801
sg807
(lp10529
sg14
S'auto_14691'
p10530
sg17
g0
(g18
g5
Ntp10531
Rp10532
(dp10533
g22
(lp10534
(lp10535
(g25
I306
g26
S'nade_train( * args[1:] )'
p10536
tp10537
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p10538
tp10539
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p10540
tp10541
a(g37
I36
g38
S'self.recompile()'
p10542
tp10543
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p10544
tp10545
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p10546
tp10547
a(g874
I214
g875
S'h = self.nonlinearity(T.dot(masked_input, self.W1) + T.dot(mask, self.Wflags) + self.b1)  # BxH'
p10548
tp10549
aasbsg85
g0
(g809
g5
Ntp10550
Rp10551
(dp10552
g552
(lp10553
g2904
ag10175
asg798
g801
sg814
(lp10554
g10527
asg17
g0
(g18
g5
Ntp10555
Rp10556
(dp10557
g4093
(lp10558
g5770
asg1268
(lp10559
g1271
asbsg1272
(dp10560
sg1274
g8881
sbsg73
g0
(g74
g5
Ntp10561
Rp10562
(dp10563
g78
(I00
I00
tp10564
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g1173
g0
(g563
g5
Ntp10565
Rp10566
(dp10567
g14
S'auto_14881'
p10568
sg16
I0
sg17
g0
(g18
g5
Ntp10569
Rp10570
(dp10571
g22
(lp10572
sbsg53
Nsg85
g0
(g809
g5
Ntp10573
Rp10574
(dp10575
g552
(lp10576
g2962
asg17
g0
(g18
g5
Ntp10577
Rp10578
sg814
(lp10579
g10566
asg1274
g0
(g1275
g5
Ntp10580
Rp10581
(dp10582
g1279
I1
sbsbsg73
g1281
sbtp10583
sg7642
(g0
(g563
g5
Ntp10584
Rp10585
(dp10586
g14
S'auto_14929'
p10587
sg16
I0
sg17
g0
(g18
g5
Ntp10588
Rp10589
(dp10590
g22
(lp10591
sbsg53
Nsg85
g0
(g809
g5
Ntp10592
Rp10593
(dp10594
g552
(lp10595
g0
(g563
g5
Ntp10596
Rp10597
(dp10598
g14
S'auto_14924'
p10599
sg16
I0
sg17
g0
(g18
g5
Ntp10600
Rp10601
(dp10602
g22
(lp10603
sbsg53
Nsg85
g0
(g809
g5
Ntp10604
Rp10605
(dp10606
g552
(lp10607
g0
(g843
g5
Ntp10608
Rp10609
(dp10610
g14
S'auto_14920'
p10611
sg16
Nsg17
g0
(g18
g5
Ntp10612
Rp10613
(dp10614
g22
(lp10615
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp10616
Rp10617
(dp10618
g78
(tsg80
S'int8'
p10619
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp10620
g59
tp10621
Rp10622
(I1
(tg3031
I00
g3059
tp10623
bsbag0
(g563
g5
Ntp10624
Rp10625
(dp10626
g14
S'auto_14915'
p10627
sg16
I0
sg17
g0
(g18
g5
Ntp10628
Rp10629
(dp10630
g22
(lp10631
sbsg53
Nsg85
g0
(g809
g5
Ntp10632
Rp10633
(dp10634
g552
(lp10635
g0
(g563
g5
Ntp10636
Rp10637
(dp10638
g14
S'auto_14905'
p10639
sg16
I0
sg17
g0
(g18
g5
Ntp10640
Rp10641
(dp10642
g22
(lp10643
sbsg53
Nsg85
g0
(g809
g5
Ntp10644
Rp10645
(dp10646
g552
(lp10647
g7655
ag0
(g843
g5
Ntp10648
Rp10649
(dp10650
g14
S'auto_14901'
p10651
sg16
Nsg17
g0
(g18
g5
Ntp10652
Rp10653
(dp10654
g22
(lp10655
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp10656
Rp10657
(dp10658
g78
(tsg80
S'int8'
p10659
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp10660
g59
tp10661
Rp10662
(I1
(tg3031
I00
g3059
tp10663
bsbasg17
g0
(g18
g5
Ntp10664
Rp10665
sg814
(lp10666
g10637
asg1274
g0
(g318
g5
Ntp10667
Rp10668
(dp10669
g379
g380
sg322
g0
(ctheano.scalar.basic
GE
p10670
g5
Ntp10671
Rp10672
(dp10673
g3176
I01
sg53
Nsbsg53
S'Elemwise{ge,no_inplace}'
p10674
sg330
(dp10675
sg332
(S'greater_equal'
p10676
I2
I1
tp10677
sg333
g0
(g334
g5
Ntp10678
Rp10679
(dp10680
g338
I0
sg339
(dp10681
sbsg341
I00
sg307
S"a >= b\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p10682
sbsbsg73
g0
(g74
g5
Ntp10683
Rp10684
(dp10685
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag7655
ag0
(g563
g5
Ntp10686
Rp10687
(dp10688
g14
S'auto_14910'
p10689
sg16
I0
sg17
g0
(g18
g5
Ntp10690
Rp10691
(dp10692
g22
(lp10693
sbsg53
Nsg85
g0
(g809
g5
Ntp10694
Rp10695
(dp10696
g552
(lp10697
g7655
ag0
(g843
g5
Ntp10698
Rp10699
(dp10700
g14
S'auto_14906'
p10701
sg16
Nsg17
g0
(g18
g5
Ntp10702
Rp10703
(dp10704
g22
(lp10705
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp10706
Rp10707
(dp10708
g78
(tsg80
S'int8'
p10709
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp10710
g59
tp10711
Rp10712
(I1
(tg3031
I00
g8160
tp10713
bsbasg17
g0
(g18
g5
Ntp10714
Rp10715
sg814
(lp10716
g10687
asg1274
g8881
sbsg73
g0
(g74
g5
Ntp10717
Rp10718
(dp10719
g78
(tsg80
g3096
sg82
g3031
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp10720
Rp10721
sg814
(lp10722
g10625
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp10723
Rp10724
(dp10725
g78
(tsg80
g3096
sg82
g3031
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp10726
Rp10727
sg814
(lp10728
g10597
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp10729
Rp10730
(dp10731
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp10732
Rp10733
(dp10734
g14
S'auto_14919'
p10735
sg16
I0
sg17
g0
(g18
g5
Ntp10736
Rp10737
(dp10738
g22
(lp10739
sbsg53
Nsg85
g0
(g809
g5
Ntp10740
Rp10741
(dp10742
g552
(lp10743
g0
(g563
g5
Ntp10744
Rp10745
(dp10746
g14
S'auto_14900'
p10747
sg16
I0
sg17
g0
(g18
g5
Ntp10748
Rp10749
(dp10750
g22
(lp10751
sbsg53
Nsg85
g0
(g809
g5
Ntp10752
Rp10753
(dp10754
g552
(lp10755
g0
(g563
g5
Ntp10756
Rp10757
(dp10758
g14
S'auto_14895'
p10759
sg16
I0
sg17
g0
(g18
g5
Ntp10760
Rp10761
(dp10762
g22
(lp10763
sbsg53
Nsg85
g0
(g809
g5
Ntp10764
Rp10765
(dp10766
g552
(lp10767
g0
(g563
g5
Ntp10768
Rp10769
(dp10770
g14
S'auto_14888'
p10771
sg16
I0
sg17
g0
(g18
g5
Ntp10772
Rp10773
(dp10774
g22
(lp10775
sbsg53
Nsg85
g0
(g809
g5
Ntp10776
Rp10777
(dp10778
g552
(lp10779
g0
(g843
g5
Ntp10780
Rp10781
(dp10782
g14
S'auto_14883'
p10783
sg16
Nsg17
g0
(g18
g5
Ntp10784
Rp10785
(dp10786
g22
(lp10787
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp10788
Rp10789
(dp10790
g78
(tsg80
S'int64'
p10791
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp10792
g59
tp10793
Rp10794
(I1
(tg1286
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p10795
tp10796
bsbag0
(g843
g5
Ntp10797
Rp10798
(dp10799
g14
S'auto_14884'
p10800
sg16
Nsg17
g0
(g18
g5
Ntp10801
Rp10802
(dp10803
g22
(lp10804
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp10805
Rp10806
(dp10807
g78
(tsg80
S'int64'
p10808
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp10809
g59
tp10810
Rp10811
(I1
(tg1286
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p10812
tp10813
bsbasg17
g0
(g18
g5
Ntp10814
Rp10815
sg814
(lp10816
g10769
asg1274
g0
(g318
g5
Ntp10817
Rp10818
(dp10819
g379
g380
sg322
g0
(ctheano.scalar.basic
LT
p10820
g5
Ntp10821
Rp10822
(dp10823
g3176
I01
sg53
Nsbsg53
S'Elemwise{lt,no_inplace}'
p10824
sg330
(dp10825
sg332
(S'less'
p10826
I2
I1
tp10827
sg333
g0
(g334
g5
Ntp10828
Rp10829
(dp10830
g338
I0
sg339
(dp10831
sbsg341
I00
sg307
S"a < b\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p10832
sbsbsg73
g0
(g74
g5
Ntp10833
Rp10834
(dp10835
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp10836
Rp10837
(dp10838
g14
S'auto_14889'
p10839
sg16
Nsg17
g0
(g18
g5
Ntp10840
Rp10841
(dp10842
g22
(lp10843
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp10844
Rp10845
(dp10846
g78
(tsg80
S'int64'
p10847
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp10848
g59
tp10849
Rp10850
(I1
(tg1286
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p10851
tp10852
bsbag0
(g843
g5
Ntp10853
Rp10854
(dp10855
g14
S'auto_14890'
p10856
sg16
Nsg17
g0
(g18
g5
Ntp10857
Rp10858
(dp10859
g22
(lp10860
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp10861
Rp10862
(dp10863
g78
(tsg80
S'int64'
p10864
sg82
g1286
sg83
I00
sg53
Nsbsg883
g10811
sbasg17
g0
(g18
g5
Ntp10865
Rp10866
sg814
(lp10867
g10757
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp10868
Rp10869
(dp10870
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp10871
Rp10872
(dp10873
g14
S'auto_14896'
p10874
sg16
Nsg17
g0
(g18
g5
Ntp10875
Rp10876
(dp10877
g22
(lp10878
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp10879
Rp10880
(dp10881
g78
(tsg80
S'int8'
p10882
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp10883
g59
tp10884
Rp10885
(I1
(tg3031
I00
g3059
tp10886
bsbasg17
g0
(g18
g5
Ntp10887
Rp10888
sg814
(lp10889
g10745
asg1274
g4101
sbsg73
g0
(g74
g5
Ntp10890
Rp10891
(dp10892
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp10893
Rp10894
(dp10895
g14
S'auto_14869'
p10896
sg16
I0
sg17
g0
(g18
g5
Ntp10897
Rp10898
(dp10899
g22
(lp10900
sbsg53
Nsg85
g0
(g809
g5
Ntp10901
Rp10902
(dp10903
g552
(lp10904
g0
(g843
g5
Ntp10905
Rp10906
(dp10907
g14
S'auto_14865'
p10908
sg16
Nsg17
g0
(g18
g5
Ntp10909
Rp10910
(dp10911
g22
(lp10912
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp10913
Rp10914
(dp10915
g78
(tsg80
S'int64'
p10916
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp10917
g59
tp10918
Rp10919
(I1
(tg1286
I00
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p10920
tp10921
bsbag0
(g563
g5
Ntp10922
Rp10923
(dp10924
g14
S'auto_14864'
p10925
sg16
I0
sg17
g0
(g18
g5
Ntp10926
Rp10927
(dp10928
g22
(lp10929
sbsg53
Nsg85
g0
(g809
g5
Ntp10930
Rp10931
(dp10932
g552
(lp10933
g0
(g563
g5
Ntp10934
Rp10935
(dp10936
g14
S'auto_14857'
p10937
sg16
I0
sg17
g0
(g18
g5
Ntp10938
Rp10939
(dp10940
g22
(lp10941
sbsg53
Nsg85
g0
(g809
g5
Ntp10942
Rp10943
(dp10944
g552
(lp10945
g0
(g843
g5
Ntp10946
Rp10947
(dp10948
g14
S'auto_14852'
p10949
sg16
Nsg17
g0
(g18
g5
Ntp10950
Rp10951
(dp10952
g22
(lp10953
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp10954
Rp10955
(dp10956
g78
(tsg80
S'int64'
p10957
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp10958
g59
tp10959
Rp10960
(I1
(tg1286
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p10961
tp10962
bsbag0
(g843
g5
Ntp10963
Rp10964
(dp10965
g14
S'auto_14853'
p10966
sg16
Nsg17
g0
(g18
g5
Ntp10967
Rp10968
(dp10969
g22
(lp10970
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp10971
Rp10972
(dp10973
g78
(tsg80
S'int64'
p10974
sg82
g1286
sg83
I00
sg53
Nsbsg883
g10919
sbasg17
g0
(g18
g5
Ntp10975
Rp10976
sg814
(lp10977
g10935
asg1274
g10818
sbsg73
g0
(g74
g5
Ntp10978
Rp10979
(dp10980
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp10981
Rp10982
(dp10983
g14
S'auto_14858'
p10984
sg16
Nsg17
g0
(g18
g5
Ntp10985
Rp10986
(dp10987
g22
(lp10988
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp10989
Rp10990
(dp10991
g78
(tsg80
S'int64'
p10992
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp10993
g59
tp10994
Rp10995
(I1
(tg1286
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p10996
tp10997
bsbag0
(g843
g5
Ntp10998
Rp10999
(dp11000
g14
S'auto_14859'
p11001
sg16
Nsg17
g0
(g18
g5
Ntp11002
Rp11003
(dp11004
g22
(lp11005
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp11006
Rp11007
(dp11008
g78
(tsg80
S'int64'
p11009
sg82
g1286
sg83
I00
sg53
Nsbsg883
g10919
sbasg17
g0
(g18
g5
Ntp11010
Rp11011
sg814
(lp11012
g10923
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp11013
Rp11014
(dp11015
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp11016
Rp11017
sg814
(lp11018
g10894
asg1274
g4101
sbsg73
g0
(g74
g5
Ntp11019
Rp11020
(dp11021
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp11022
Rp11023
sg814
(lp11024
g10733
asg1274
g8881
sbsg73
g0
(g74
g5
Ntp11025
Rp11026
(dp11027
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag10745
asg17
g0
(g18
g5
Ntp11028
Rp11029
sg814
(lp11030
g10585
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp11031
Rp11032
(dp11033
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbtp11034
sg4152
(g9031
g9576
g9628
tp11035
sg2290
(tsg0
(g563
g5
Ntp11036
Rp11037
(dp11038
g16
I0
sg53
Nsg798
g801
sg807
(lp11039
sg14
S'auto_15438'
p11040
sg17
g0
(g18
g5
Ntp11041
Rp11042
(dp11043
g22
(lp11044
sbsg85
g0
(g809
g5
Ntp11045
Rp11046
(dp11047
g552
(lp11048
g0
(g843
g5
Ntp11049
Rp11050
(dp11051
g14
S'auto_15434'
p11052
sg16
Nsg17
g0
(g18
g5
Ntp11053
Rp11054
(dp11055
g22
(lp11056
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp11057
Rp11058
(dp11059
g78
(tsg80
S'float64'
p11060
sg82
g66
sg83
I00
sg53
Nsbsg807
(lp11061
sg883
g56
(g57
(I0
tp11062
g59
tp11063
Rp11064
(I1
(tg66
I00
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
p11065
tp11066
bsbasg798
g801
sg814
(lp11067
g11037
asg17
g0
(g18
g5
Ntp11068
Rp11069
(dp11070
g4093
(lp11071
g8725
asg1268
(lp11072
S'local_neg_to_mul'
p11073
ag1271
asbsg1272
(dp11074
sg1274
g0
(g1387
g5
Ntp11075
Rp11076
(dp11077
g1391
(lp11078
sg1393
(lp11079
sg1395
(lp11080
I0
aI1
aI2
asg1397
g1398
sg1399
(tsg1401
(lp11081
g1403
asg1404
I01
sg1405
(g270
g270
g270
tp11082
sg1407
(dp11083
S'support_code_apply'
p11084
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p11085
ssg1411
(dp11086
I0
(lp11087
I0
assg1414
(lp11088
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p11089
asbsbsg73
g0
(g74
g5
Ntp11090
Rp11091
(dp11092
g78
(I01
I01
I01
tp11093
sg80
g11060
sg82
g66
sg83
I00
sg53
Nsbsb(g8744
g8744
g8744
tp11094
sg9802
(g9031
g9576
g9628
tp11095
sg0
(g563
g5
Ntp11096
Rp11097
(dp11098
g16
I0
sg53
Nsg798
g801
sg807
(lp11099
sg14
S'auto_14800'
p11100
sg17
g0
(g18
g5
Ntp11101
Rp11102
(dp11103
g22
(lp11104
(lp11105
(g25
I306
g26
S'nade_train( * args[1:] )'
p11106
tp11107
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p11108
tp11109
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p11110
tp11111
a(g37
I36
g38
S'self.recompile()'
p11112
tp11113
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11114
tp11115
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11116
tp11117
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p11118
tp11119
aasbsg85
g0
(g809
g5
Ntp11120
Rp11121
(dp11122
g552
(lp11123
g0
(g843
g5
Ntp11124
Rp11125
(dp11126
g14
S'auto_14711'
p11127
sg16
Nsg17
g0
(g18
g5
Ntp11128
Rp11129
(dp11130
g22
(lp11131
(lp11132
(g25
I306
g26
S'nade_train( * args[1:] )'
p11133
tp11134
a(g29
I221
g30
S'nade = nade_class(n_visible, options.units, l, options.n_components, nonlinearity=options.nonlinearity)'
p11135
tp11136
a(g37
I36
g38
S'self.recompile()'
p11137
tp11138
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11139
tp11140
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11141
tp11142
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p11143
tp11144
aasg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp11145
Rp11146
(dp11147
g78
(tsg80
S'int8'
p11148
sg82
g3031
sg83
I00
sg53
Nsbsg807
(lp11149
sg883
g56
(g57
(I0
tp11150
g59
tp11151
Rp11152
(I1
(tg3031
I00
g8160
tp11153
bsbag10273
asg798
g801
sg814
(lp11154
g11097
asg17
g0
(g18
g5
Ntp11155
Rp11156
(dp11157
g4093
(lp11158
g5660
asg1268
(lp11159
g1271
asbsg1272
(dp11160
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp11161
Rp11162
(dp11163
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg0
(g563
g5
Ntp11164
Rp11165
(dp11166
g16
I0
sg53
Nsg798
g801
sg807
(lp11167
sg14
S'auto_15525'
p11168
sg17
g0
(g18
g5
Ntp11169
Rp11170
(dp11171
g22
(lp11172
(lp11173
(g25
I306
g26
S'nade_train( * args[1:] )'
p11174
tp11175
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p11176
tp11177
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p11178
tp11179
a(g37
I36
g38
S'self.recompile()'
p11180
tp11181
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11182
tp11183
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11184
tp11185
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p11186
tp11187
aasbsg85
g0
(g809
g5
Ntp11188
Rp11189
(dp11190
g552
(lp11191
g0
(g563
g5
Ntp11192
Rp11193
(dp11194
g16
I0
sg53
Nsg798
g801
sg807
(lp11195
sg14
S'auto_14698'
p11196
sg17
g0
(g18
g5
Ntp11197
Rp11198
(dp11199
g22
(lp11200
(lp11201
(g25
I306
g26
S'nade_train( * args[1:] )'
p11202
tp11203
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p11204
tp11205
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p11206
tp11207
a(g37
I36
g38
S'self.recompile()'
p11208
tp11209
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11210
tp11211
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11212
tp11213
a(g874
I216
g875
S'h = self.nonlinearity(T.dot(h, self.Ws[l]) + self.bs[l])  # BxH'
p11214
tp11215
a(g41
I231
g272
S'"RLU": [lambda x: x * (x > 0), lambda x: x * (x > 0)],'
p11216
tp11217
aasbsg85
g0
(g809
g5
Ntp11218
Rp11219
(dp11220
g552
(lp11221
g0
(g563
g5
Ntp11222
Rp11223
(dp11224
g16
I0
sg53
Nsg798
g801
sg807
(lp11225
sg14
S'auto_14696'
p11226
sg17
g0
(g18
g5
Ntp11227
Rp11228
(dp11229
g22
(lp11230
(lp11231
(g25
I306
g26
S'nade_train( * args[1:] )'
p11232
tp11233
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p11234
tp11235
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p11236
tp11237
a(g37
I36
g38
S'self.recompile()'
p11238
tp11239
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11240
tp11241
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11242
tp11243
a(g874
I216
g875
S'h = self.nonlinearity(T.dot(h, self.Ws[l]) + self.bs[l])  # BxH'
p11244
tp11245
aasbsg85
g0
(g809
g5
Ntp11246
Rp11247
(dp11248
g552
(lp11249
g2784
ag3279
asg798
g801
sg814
(lp11250
g11223
asg17
g0
(g18
g5
Ntp11251
Rp11252
(dp11253
g4093
(lp11254
g5814
asg1268
(lp11255
g1271
asbsg1272
(dp11256
sg1274
g8881
sbsg73
g0
(g74
g5
Ntp11257
Rp11258
(dp11259
g78
(I00
I00
tp11260
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp11261
Rp11262
(dp11263
g16
I0
sg53
Nsg798
g801
sg807
(lp11264
sg14
S'auto_14697'
p11265
sg17
g0
(g18
g5
Ntp11266
Rp11267
(dp11268
g22
(lp11269
(lp11270
(g25
I306
g26
S'nade_train( * args[1:] )'
p11271
tp11272
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p11273
tp11274
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p11275
tp11276
a(g37
I36
g38
S'self.recompile()'
p11277
tp11278
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11279
tp11280
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11281
tp11282
a(g874
I216
g875
S'h = self.nonlinearity(T.dot(h, self.Ws[l]) + self.bs[l])  # BxH'
p11283
tp11284
a(g41
I231
g272
S'"RLU": [lambda x: x * (x > 0), lambda x: x * (x > 0)],'
p11285
tp11286
aasbsg85
g0
(g809
g5
Ntp11287
Rp11288
(dp11289
g552
(lp11290
g11223
ag3022
asg798
g801
sg814
(lp11291
g11262
asg17
g0
(g18
g5
Ntp11292
Rp11293
(dp11294
g4093
(lp11295
g5814
asg1268
(lp11296
g1271
asbsg1272
(dp11297
sg1274
g0
(g318
g5
Ntp11298
Rp11299
(dp11300
g379
g380
sg322
g3174
sg53
S'Elemwise{gt,no_inplace}'
p11301
sg330
(dp11302
sg332
(S'greater'
p11303
I2
I1
tp11304
sg333
g0
(g334
g5
Ntp11305
Rp11306
(dp11307
g338
I0
sg339
(dp11308
sbsg341
I00
sg307
S"a > b\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p11309
sbsbsg73
g0
(g74
g5
Ntp11310
Rp11311
(dp11312
g78
(I00
I00
tp11313
sg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp11314
g11193
asg17
g0
(g18
g5
Ntp11315
Rp11316
(dp11317
g4093
(lp11318
g5814
asg1268
(lp11319
g1271
asbsg1272
(dp11320
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp11321
Rp11322
(dp11323
g78
(I00
I00
tp11324
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp11325
Rp11326
(dp11327
g16
I0
sg53
Nsg798
g801
sg807
(lp11328
sg14
S'auto_15612'
p11329
sg17
g0
(g18
g5
Ntp11330
Rp11331
(dp11332
g22
(lp11333
(lp11334
(g25
I306
g26
S'nade_train( * args[1:] )'
p11335
tp11336
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p11337
tp11338
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p11339
tp11340
a(g37
I36
g38
S'self.recompile()'
p11341
tp11342
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11343
tp11344
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11345
tp11346
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p11347
tp11348
aasbsg85
g0
(g809
g5
Ntp11349
Rp11350
(dp11351
g552
(lp11352
g1173
ag7934
asg798
g801
sg814
(lp11353
g11326
asg17
g0
(g18
g5
Ntp11354
Rp11355
(dp11356
g4093
(lp11357
g7951
asg1268
(lp11358
g1270
asbsg1272
(dp11359
sg1274
g1549
sbsg73
g0
(g74
g5
Ntp11360
Rp11361
(dp11362
g78
(I00
tp11363
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp11364
g11165
asg17
g0
(g18
g5
Ntp11365
Rp11366
(dp11367
g4093
(lp11368
g7951
asg1268
(lp11369
S'local_useless_dimshuffle_in_reshape'
p11370
asbsg1272
(dp11371
sg1274
g0
(g1352
g5
Ntp11372
Rp11373
(dp11374
g1356
I2
sbsbsg73
g0
(g74
g5
Ntp11375
Rp11376
(dp11377
g78
(I00
I00
tp11378
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g7870
g0
(g563
g5
Ntp11379
Rp11380
(dp11381
g14
S'auto_15020'
p11382
sg16
I0
sg17
g0
(g18
g5
Ntp11383
Rp11384
(dp11385
g22
(lp11386
sbsg53
Nsg85
g0
(g809
g5
Ntp11387
Rp11388
(dp11389
g552
(lp11390
g0
(g563
g5
Ntp11391
Rp11392
(dp11393
g14
S'auto_15015'
p11394
sg16
I0
sg17
g0
(g18
g5
Ntp11395
Rp11396
(dp11397
g22
(lp11398
sbsg53
Nsg85
g0
(g809
g5
Ntp11399
Rp11400
(dp11401
g552
(lp11402
g8083
ag0
(g843
g5
Ntp11403
Rp11404
(dp11405
g14
S'auto_15011'
p11406
sg16
Nsg17
g0
(g18
g5
Ntp11407
Rp11408
(dp11409
g22
(lp11410
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp11411
Rp11412
(dp11413
g78
(tsg80
S'int8'
p11414
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp11415
g59
tp11416
Rp11417
(I1
(tg3031
I00
g7816
tp11418
bsbasg17
g0
(g18
g5
Ntp11419
Rp11420
sg814
(lp11421
g11392
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp11422
Rp11423
(dp11424
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag8017
ag8083
asg17
g0
(g18
g5
Ntp11425
Rp11426
sg814
(lp11427
g11380
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp11428
Rp11429
(dp11430
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbtp11431
sg10006
(g7606
g8603
g8655
tp11432
sg11050
(tsg0
(g563
g5
Ntp11433
Rp11434
(dp11435
g16
I0
sg53
Nsg798
g801
sg807
(lp11436
sg14
S'auto_14835'
p11437
sg17
g0
(g18
g5
Ntp11438
Rp11439
(dp11440
g22
(lp11441
(lp11442
(g25
I306
g26
S'nade_train( * args[1:] )'
p11443
tp11444
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p11445
tp11446
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p11447
tp11448
a(g37
I36
g38
S'self.recompile()'
p11449
tp11450
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11451
tp11452
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11453
tp11454
a(g874
I232
g875
S'logdensity = (log_sum_exp(Phi + T.log(Alpha), axis=2) * output_mask).sum(1) * D / (D - d)'
p11455
tp11456
a(g4481
I53
g4482
S'return max_x + T.log(T.sum(T.exp(x - T.shape_padright(max_x, 1)), axis))'
p11457
tp11458
aasbsg85
g0
(g809
g5
Ntp11459
Rp11460
(dp11461
g552
(lp11462
g10430
asg798
g801
sg814
(lp11463
g11434
asg17
g0
(g18
g5
Ntp11464
Rp11465
(dp11466
g4093
(lp11467
g4178
asg1268
(lp11468
g1271
asbsg1272
(dp11469
sg1274
g377
sbsg73
g0
(g74
g5
Ntp11470
Rp11471
(dp11472
g78
(I00
I00
I00
tp11473
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g9031
g9576
g9628
tp11474
sg8818
(g9031
g9576
g9628
tp11475
sg0
(g563
g5
Ntp11476
Rp11477
(dp11478
g16
I0
sg53
Nsg798
g801
sg807
(lp11479
sg14
S'auto_14801'
p11480
sg17
g0
(g18
g5
Ntp11481
Rp11482
(dp11483
g22
(lp11484
(lp11485
(g25
I306
g26
S'nade_train( * args[1:] )'
p11486
tp11487
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p11488
tp11489
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p11490
tp11491
a(g37
I36
g38
S'self.recompile()'
p11492
tp11493
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11494
tp11495
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11496
tp11497
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p11498
tp11499
aasbsg85
g0
(g809
g5
Ntp11500
Rp11501
(dp11502
g552
(lp11503
g11097
ag0
(g563
g5
Ntp11504
Rp11505
(dp11506
g16
I0
sg53
Nsg798
g801
sg807
(lp11507
sg14
S'auto_14796'
p11508
sg17
g0
(g18
g5
Ntp11509
Rp11510
(dp11511
g22
(lp11512
(lp11513
(g25
I306
g26
S'nade_train( * args[1:] )'
p11514
tp11515
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p11516
tp11517
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p11518
tp11519
a(g37
I36
g38
S'self.recompile()'
p11520
tp11521
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11522
tp11523
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11524
tp11525
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p11526
tp11527
aasbsg85
g0
(g809
g5
Ntp11528
Rp11529
(dp11530
g552
(lp11531
g7515
ag0
(g3250
g5
Ntp11532
Rp11533
(dp11534
g14
S'auto_14706'
p11535
sg16
Nsg17
g0
(g18
g5
Ntp11536
Rp11537
(dp11538
g22
(lp11539
(lp11540
(g25
I306
g26
S'nade_train( * args[1:] )'
p11541
tp11542
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p11543
tp11544
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p11545
tp11546
a(g37
I36
g38
S'self.recompile()'
p11547
tp11548
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11549
tp11550
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11551
tp11552
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p11553
tp11554
aasbsg53
Nsg73
g1465
sg807
(lp11555
sg883
g879
(g1286
S'\xfe\xff\xff\xff\xff\xff\xff\xff'
p11556
tp11557
Rp11558
sbasg798
g801
sg814
(lp11559
g11505
asg17
g0
(g18
g5
Ntp11560
Rp11561
(dp11562
g4093
(lp11563
g7547
asg1268
(lp11564
g1271
asbsg1272
(dp11565
sg1274
g0
(g3357
g5
Ntp11566
Rp11567
(dp11568
g3361
(g1465
tp11569
sbsbsg73
g0
(g74
g5
Ntp11570
Rp11571
(dp11572
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp11573
g11477
asg17
g0
(g18
g5
Ntp11574
Rp11575
(dp11576
g4093
(lp11577
g5660
asg1268
(lp11578
g1271
asbsg1272
(dp11579
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp11580
Rp11581
(dp11582
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg5910
(g1173
g7934
tp11583
sg4762
(g9031
tp11584
sg7934
(tsg2827
(g8744
g0
(g563
g5
Ntp11585
Rp11586
(dp11587
g14
S'auto_14875'
p11588
sg16
I0
sg17
g0
(g18
g5
Ntp11589
Rp11590
(dp11591
g22
(lp11592
sbsg53
Nsg85
g0
(g809
g5
Ntp11593
Rp11594
(dp11595
g552
(lp11596
g2856
asg17
g0
(g18
g5
Ntp11597
Rp11598
sg814
(lp11599
g11586
asg1274
g0
(g1275
g5
Ntp11600
Rp11601
(dp11602
g1279
I0
sbsbsg73
g1281
sbtp11603
sg9936
(tsg9908
(g8744
g8744
g8744
tp11604
sg1173
(tsg7294
(g9031
g9576
g9628
tp11605
sg1290
(tsg1190
(tsg0
(g563
g5
Ntp11606
Rp11607
(dp11608
g16
I0
sg53
Nsg798
g801
sg807
(lp11609
sg14
S'auto_14707'
p11610
sg17
g0
(g18
g5
Ntp11611
Rp11612
(dp11613
g22
(lp11614
(lp11615
(g25
I306
g26
S'nade_train( * args[1:] )'
p11616
tp11617
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p11618
tp11619
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p11620
tp11621
a(g37
I36
g38
S'self.recompile()'
p11622
tp11623
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11624
tp11625
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11626
tp11627
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p11628
tp11629
aasbsg85
g0
(g809
g5
Ntp11630
Rp11631
(dp11632
g552
(lp11633
g9717
ag11533
asg798
g801
sg814
(lp11634
g11607
asg17
g0
(g18
g5
Ntp11635
Rp11636
(dp11637
g4093
(lp11638
g7547
asg1268
(lp11639
g1271
asbsg1272
(dp11640
sg1274
g0
(g3357
g5
Ntp11641
Rp11642
(dp11643
g3361
(g1465
tp11644
sbsbsg73
g0
(g74
g5
Ntp11645
Rp11646
(dp11647
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg7039
(g9031
tp11648
sg0
(g3250
g5
Ntp11649
Rp11650
(dp11651
g14
S'auto_14675'
p11652
sg16
Nsg17
g0
(g18
g5
Ntp11653
Rp11654
(dp11655
g22
(lp11656
(lp11657
(g25
I306
g26
S'nade_train( * args[1:] )'
p11658
tp11659
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p11660
tp11661
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p11662
tp11663
a(g37
I36
g38
S'self.recompile()'
p11664
tp11665
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11666
tp11667
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11668
tp11669
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p11670
tp11671
aasbsg53
Nsg73
g1465
sg807
(lp11672
sg883
g879
(g1286
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p11673
tp11674
Rp11675
sb(tsg0
(g3250
g5
Ntp11676
Rp11677
(dp11678
g14
S'auto_14676'
p11679
sg16
Nsg17
g0
(g18
g5
Ntp11680
Rp11681
(dp11682
g22
(lp11683
(lp11684
(g25
I306
g26
S'nade_train( * args[1:] )'
p11685
tp11686
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p11687
tp11688
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p11689
tp11690
a(g37
I36
g38
S'self.recompile()'
p11691
tp11692
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11693
tp11694
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11695
tp11696
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p11697
tp11698
aasbsg53
Nsg73
g1465
sg807
(lp11699
sg883
g879
(g1286
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p11700
tp11701
Rp11702
sb(tsg6693
(g9031
g9576
g9628
tp11703
sg8846
(g9031
g9576
g9628
tp11704
sg2481
(g8744
g0
(g563
g5
Ntp11705
Rp11706
(dp11707
g14
S'auto_15078'
p11708
sg16
I0
sg17
g0
(g18
g5
Ntp11709
Rp11710
(dp11711
g22
(lp11712
sbsg53
Nsg85
g0
(g809
g5
Ntp11713
Rp11714
(dp11715
g552
(lp11716
g2510
asg17
g0
(g18
g5
Ntp11717
Rp11718
sg814
(lp11719
g11706
asg1274
g0
(g1275
g5
Ntp11720
Rp11721
(dp11722
g1279
I0
sbsbsg73
g1281
sbg0
(g563
g5
Ntp11723
Rp11724
(dp11725
g14
S'auto_15079'
p11726
sg16
I0
sg17
g0
(g18
g5
Ntp11727
Rp11728
(dp11729
g22
(lp11730
sbsg53
Nsg85
g0
(g809
g5
Ntp11731
Rp11732
(dp11733
g552
(lp11734
g2510
asg17
g0
(g18
g5
Ntp11735
Rp11736
sg814
(lp11737
g11724
asg1274
g0
(g1275
g5
Ntp11738
Rp11739
(dp11740
g1279
I1
sbsbsg73
g1281
sbtp11741
sg0
(g563
g5
Ntp11742
Rp11743
(dp11744
g16
I0
sg53
Nsg798
g801
sg807
(lp11745
sg14
S'auto_14841'
p11746
sg17
g0
(g18
g5
Ntp11747
Rp11748
(dp11749
g22
(lp11750
(lp11751
(g25
I306
g26
S'nade_train( * args[1:] )'
p11752
tp11753
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p11754
tp11755
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p11756
tp11757
a(g37
I36
g38
S'self.recompile()'
p11758
tp11759
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11760
tp11761
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11762
tp11763
a(g874
I232
g875
S'logdensity = (log_sum_exp(Phi + T.log(Alpha), axis=2) * output_mask).sum(1) * D / (D - d)'
p11764
tp11765
aasbsg85
g0
(g809
g5
Ntp11766
Rp11767
(dp11768
g552
(lp11769
g891
ag0
(g563
g5
Ntp11770
Rp11771
(dp11772
g16
I0
sg53
Nsg798
g801
sg807
(lp11773
sg14
S'auto_14666'
p11774
sg17
g0
(g18
g5
Ntp11775
Rp11776
(dp11777
g22
(lp11778
g859
asbsg85
g0
(g809
g5
Ntp11779
Rp11780
(dp11781
g552
(lp11782
g0
(g843
g5
Ntp11783
Rp11784
(dp11785
g14
S'auto_14665'
p11786
sg16
Nsg17
g0
(g18
g5
Ntp11787
Rp11788
(dp11789
g22
(lp11790
(lp11791
(g25
I306
g26
S'nade_train( * args[1:] )'
p11792
tp11793
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p11794
tp11795
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p11796
tp11797
a(g37
I36
g38
S'self.recompile()'
p11798
tp11799
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11800
tp11801
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11802
tp11803
a(g874
I211
g875
S'D = constantX(self.n_visible)'
p11804
tp11805
a(g4481
I43
g7593
S'return theano.tensor.constant(np.asarray(value, dtype=floatX))'
p11806
tp11807
aasg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp11808
Rp11809
(dp11810
g78
(tsg80
g851
sg82
g66
sg83
I00
sg53
Nsbsg807
(lp11811
sg883
g56
(g57
(I0
tp11812
g59
tp11813
Rp11814
(I1
(tg66
I00
S'\x00\x00\x00\x00\x00\x00(@'
p11815
tp11816
bsbasg798
g801
sg814
(lp11817
g11771
asg17
g0
(g18
g5
Ntp11818
Rp11819
(dp11820
g4093
(lp11821
g8725
asg1268
(lp11822
g1271
ag1271
asbsg1272
(dp11823
sg1274
g0
(g1387
g5
Ntp11824
Rp11825
(dp11826
g1391
(lp11827
sg1393
(lp11828
sg1395
(lp11829
I0
asg1397
g1398
sg1399
(tsg1401
(lp11830
g1403
asg1404
I01
sg1405
(g270
tp11831
sg1407
(dp11832
S'support_code_apply'
p11833
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p11834
ssg1411
(dp11835
I0
(lp11836
I0
assg1414
(lp11837
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p11838
asbsbsg73
g848
sbasg798
g801
sg814
(lp11839
g11743
asg17
g0
(g18
g5
Ntp11840
Rp11841
(dp11842
g4093
(lp11843
g5660
asg1268
(lp11844
g1271
asbsg1272
(dp11845
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp11846
Rp11847
(dp11848
g78
(I00
tp11849
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g9031
tp11850
sg0
(g563
g5
Ntp11851
Rp11852
(dp11853
g16
I0
sg53
Nsg798
g801
sg807
(lp11854
sg14
S'auto_14677'
p11855
sg17
g0
(g18
g5
Ntp11856
Rp11857
(dp11858
g22
(lp11859
g7733
asbsg85
g0
(g809
g5
Ntp11860
Rp11861
(dp11862
g552
(lp11863
g9717
ag11650
ag11677
asg798
g801
sg814
(lp11864
g11852
asg17
g0
(g18
g5
Ntp11865
Rp11866
(dp11867
g4093
(lp11868
g7547
asg1268
(lp11869
g1271
asbsg1272
(dp11870
sg1274
g0
(g3357
g5
Ntp11871
Rp11872
(dp11873
g3361
(g2
(S'SliceType'
p11874
tp11875
Rp11876
(g1465
g1465
Ntp11877
Rp11878
tp11879
sbsbsg73
g0
(g74
g5
Ntp11880
Rp11881
(dp11882
g78
(I00
tp11883
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(g10894
tp11884
sg836
(g7478
tp11885
sg0
(g563
g5
Ntp11886
Rp11887
(dp11888
g16
I0
sg53
Nsg798
g801
sg807
(lp11889
sg14
S'auto_14836'
p11890
sg17
g0
(g18
g5
Ntp11891
Rp11892
(dp11893
g22
(lp11894
(lp11895
(g25
I306
g26
S'nade_train( * args[1:] )'
p11896
tp11897
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p11898
tp11899
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p11900
tp11901
a(g37
I36
g38
S'self.recompile()'
p11902
tp11903
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11904
tp11905
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11906
tp11907
a(g874
I232
g875
S'logdensity = (log_sum_exp(Phi + T.log(Alpha), axis=2) * output_mask).sum(1) * D / (D - d)'
p11908
tp11909
a(g4481
I53
g4482
S'return max_x + T.log(T.sum(T.exp(x - T.shape_padright(max_x, 1)), axis))'
p11910
tp11911
aasbsg85
g0
(g809
g5
Ntp11912
Rp11913
(dp11914
g552
(lp11915
g11434
asg798
g801
sg814
(lp11916
g11887
asg17
g0
(g18
g5
Ntp11917
Rp11918
(dp11919
g4093
(lp11920
g4178
asg1268
(lp11921
g1271
asbsg1272
(dp11922
sg1274
g0
(g1893
g5
Ntp11923
Rp11924
(dp11925
g80
g251
sg322
g1899
sg1903
(I2
tp11926
sg1905
g251
sbsbsg73
g0
(g74
g5
Ntp11927
Rp11928
(dp11929
g78
(I00
I00
tp11930
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g9031
g9576
tp11931
sg0
(g563
g5
Ntp11932
Rp11933
(dp11934
g16
I0
sg53
Nsg798
g801
sg807
(lp11935
sg14
S'auto_14804'
p11936
sg17
g0
(g18
g5
Ntp11937
Rp11938
(dp11939
g4058
g4059
sg22
(lp11940
(lp11941
(g25
I306
g26
S'nade_train( * args[1:] )'
p11942
tp11943
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p11944
tp11945
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p11946
tp11947
a(g37
I36
g38
S'self.recompile()'
p11948
tp11949
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p11950
tp11951
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p11952
tp11953
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p11954
tp11955
aasbsg85
g0
(g809
g5
Ntp11956
Rp11957
(dp11958
g552
(lp11959
g7515
ag3252
asg798
g801
sg814
(lp11960
g11933
asg17
g0
(g18
g5
Ntp11961
Rp11962
(dp11963
g4093
(lp11964
g7547
asg1268
(lp11965
g1271
asbsg1272
(dp11966
sg1274
g0
(g3357
g5
Ntp11967
Rp11968
(dp11969
g3361
(g1465
tp11970
sbsbsg73
g0
(g74
g5
Ntp11971
Rp11972
(dp11973
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg2962
(g0
(g563
g5
Ntp11974
Rp11975
(dp11976
g14
S'auto_14880'
p11977
sg16
I0
sg17
g0
(g18
g5
Ntp11978
Rp11979
(dp11980
g22
(lp11981
sbsg53
Nsg85
g0
(g809
g5
Ntp11982
Rp11983
(dp11984
g552
(lp11985
g2962
asg17
g0
(g18
g5
Ntp11986
Rp11987
sg814
(lp11988
g11975
asg1274
g0
(g1275
g5
Ntp11989
Rp11990
(dp11991
g1279
I0
sbsbsg73
g1281
sbg10566
tp11992
sg1126
(g2298
g2280
g1165
tp11993
sg7203
(g1173
g0
(g563
g5
Ntp11994
Rp11995
(dp11996
g14
S'auto_14878'
p11997
sg16
I0
sg17
g0
(g18
g5
Ntp11998
Rp11999
(dp12000
g22
(lp12001
sbsg53
Nsg85
g0
(g809
g5
Ntp12002
Rp12003
(dp12004
g552
(lp12005
g805
asg17
g0
(g18
g5
Ntp12006
Rp12007
sg814
(lp12008
g11995
asg1274
g0
(g1275
g5
Ntp12009
Rp12010
(dp12011
g1279
I0
sbsbsg73
g1281
sbtp12012
sg3630
(g1173
g11995
g8744
tp12013
sg1725
(g7606
g8603
g8655
tp12014
sg10301
(tsg1031
(g9031
g9576
g9628
tp12015
sg0
(g563
g5
Ntp12016
Rp12017
(dp12018
g16
I0
sg53
Nsg798
g801
sg807
(lp12019
sg14
S'auto_14742'
p12020
sg17
g0
(g18
g5
Ntp12021
Rp12022
(dp12023
g22
(lp12024
(lp12025
(g25
I306
g26
S'nade_train( * args[1:] )'
p12026
tp12027
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p12028
tp12029
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p12030
tp12031
a(g37
I36
g38
S'self.recompile()'
p12032
tp12033
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p12034
tp12035
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p12036
tp12037
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p12038
tp12039
aasbsg85
g0
(g809
g5
Ntp12040
Rp12041
(dp12042
g552
(lp12043
g1126
asg798
g801
sg814
(lp12044
g12017
asg17
g0
(g18
g5
Ntp12045
Rp12046
(dp12047
g4093
(lp12048
g1270
asg1268
(lp12049
g1271
asbsg1272
(dp12050
sg1274
g0
(ctheano.compile.ops
Shape
p12051
g5
Ntp12052
Rp12053
sbsg73
g0
(g74
g5
Ntp12054
Rp12055
(dp12056
g78
(I00
tp12057
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(g0
(g843
g5
Ntp12058
Rp12059
(dp12060
g14
S'auto_15083'
p12061
sg16
Nsg17
g0
(g18
g5
Ntp12062
Rp12063
(dp12064
g22
(lp12065
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp12066
Rp12067
(dp12068
g78
(tsg80
S'int64'
p12069
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp12070
g59
tp12071
Rp12072
(I1
(tg1286
I00
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p12073
tp12074
bsbtp12075
sg6028
(g0
(g563
g5
Ntp12076
Rp12077
(dp12078
g14
S'auto_15213'
p12079
sg16
I0
sg17
g0
(g18
g5
Ntp12080
Rp12081
(dp12082
g22
(lp12083
sbsg53
Nsg85
g0
(g809
g5
Ntp12084
Rp12085
(dp12086
g552
(lp12087
g0
(g563
g5
Ntp12088
Rp12089
(dp12090
g14
S'auto_15208'
p12091
sg16
I0
sg17
g0
(g18
g5
Ntp12092
Rp12093
(dp12094
g22
(lp12095
sbsg53
Nsg85
g0
(g809
g5
Ntp12096
Rp12097
(dp12098
g552
(lp12099
g0
(g563
g5
Ntp12100
Rp12101
(dp12102
g14
S'auto_15182'
p12103
sg16
I0
sg17
g0
(g18
g5
Ntp12104
Rp12105
(dp12106
g22
(lp12107
sbsg53
Nsg85
g0
(g809
g5
Ntp12108
Rp12109
(dp12110
g552
(lp12111
g0
(g563
g5
Ntp12112
Rp12113
(dp12114
g16
I0
sg53
Nsg798
g801
sg807
(lp12115
sg14
S'auto_14751'
p12116
sg17
g0
(g18
g5
Ntp12117
Rp12118
(dp12119
g22
(lp12120
g2680
asbsg85
g0
(g809
g5
Ntp12121
Rp12122
(dp12123
g552
(lp12124
g7655
ag7686
ag0
(g563
g5
Ntp12125
Rp12126
(dp12127
g16
I0
sg53
Nsg798
g801
sg807
(lp12128
sg14
S'auto_15728'
p12129
sg17
g0
(g18
g5
Ntp12130
Rp12131
(dp12132
g22
(lp12133
(lp12134
(g25
I306
g26
S'nade_train( * args[1:] )'
p12135
tp12136
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p12137
tp12138
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p12139
tp12140
a(g37
I36
g38
S'self.recompile()'
p12141
tp12142
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p12143
tp12144
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p12145
tp12146
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p12147
tp12148
aasbsg85
g0
(g809
g5
Ntp12149
Rp12150
(dp12151
g552
(lp12152
g2280
ag1165
asg798
g801
sg814
(lp12153
g12126
asg17
g0
(g18
g5
Ntp12154
Rp12155
(dp12156
g4093
(lp12157
g1546
asg1268
(lp12158
g7547
asbsg1272
(dp12159
sg1274
g1549
sbsg73
g0
(g74
g5
Ntp12160
Rp12161
(dp12162
g78
(I00
tp12163
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp12164
g12113
asg17
g0
(g18
g5
Ntp12165
Rp12166
(dp12167
g4093
(lp12168
g1546
asg1268
(lp12169
g1271
asbsg1272
(dp12170
sg1274
g7772
sbsg73
g0
(g74
g5
Ntp12171
Rp12172
(dp12173
g78
(I00
tp12174
sg80
S'int64'
p12175
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g3250
g5
Ntp12176
Rp12177
(dp12178
g14
S'auto_15181'
p12179
sg16
Nsg17
g0
(g18
g5
Ntp12180
Rp12181
(dp12182
g22
(lp12183
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p12184
tp12185
Rp12186
sbasg17
g0
(g18
g5
Ntp12187
Rp12188
sg814
(lp12189
g12101
asg1274
g0
(g3357
g5
Ntp12190
Rp12191
(dp12192
g3361
(g1465
tp12193
sbsbsg73
g0
(g74
g5
Ntp12194
Rp12195
(dp12196
g78
(tsg80
g12175
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp12197
Rp12198
(dp12199
g14
S'auto_15204'
p12200
sg16
Nsg17
g0
(g18
g5
Ntp12201
Rp12202
(dp12203
g22
(lp12204
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp12205
Rp12206
(dp12207
g78
(tsg80
S'int8'
p12208
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp12209
g59
tp12210
Rp12211
(I1
(tg3031
I00
g7816
tp12212
bsbasg17
g0
(g18
g5
Ntp12213
Rp12214
sg814
(lp12215
g12089
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp12216
Rp12217
(dp12218
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp12219
Rp12220
(dp12221
g14
S'auto_15203'
p12222
sg16
I0
sg17
g0
(g18
g5
Ntp12223
Rp12224
(dp12225
g22
(lp12226
sbsg53
Nsg85
g0
(g809
g5
Ntp12227
Rp12228
(dp12229
g552
(lp12230
g0
(g563
g5
Ntp12231
Rp12232
(dp12233
g14
S'auto_15180'
p12234
sg16
I0
sg17
g0
(g18
g5
Ntp12235
Rp12236
(dp12237
g22
(lp12238
sbsg53
Nsg85
g0
(g809
g5
Ntp12239
Rp12240
(dp12241
g552
(lp12242
g7870
ag0
(g563
g5
Ntp12243
Rp12244
(dp12245
g14
S'auto_15176'
p12246
sg16
I0
sg17
g0
(g18
g5
Ntp12247
Rp12248
(dp12249
g22
(lp12250
sbsg53
Nsg85
g0
(g809
g5
Ntp12251
Rp12252
(dp12253
g552
(lp12254
g0
(g563
g5
Ntp12255
Rp12256
(dp12257
g14
S'auto_15171'
p12258
sg16
I0
sg17
g0
(g18
g5
Ntp12259
Rp12260
(dp12261
g22
(lp12262
sbsg53
Nsg85
g0
(g809
g5
Ntp12263
Rp12264
(dp12265
g552
(lp12266
g0
(g563
g5
Ntp12267
Rp12268
(dp12269
g14
S'auto_15140'
p12270
sg16
I0
sg17
g0
(g18
g5
Ntp12271
Rp12272
(dp12273
g22
(lp12274
sbsg53
Nsg85
g0
(g809
g5
Ntp12275
Rp12276
(dp12277
g552
(lp12278
g2322
ag0
(g3250
g5
Ntp12279
Rp12280
(dp12281
g14
S'auto_15139'
p12282
sg16
Nsg17
g0
(g18
g5
Ntp12283
Rp12284
(dp12285
g22
(lp12286
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p12287
tp12288
Rp12289
sbasg17
g0
(g18
g5
Ntp12290
Rp12291
sg814
(lp12292
g12268
asg1274
g0
(g3357
g5
Ntp12293
Rp12294
(dp12295
g3361
(g1465
tp12296
sbsbsg73
g0
(g74
g5
Ntp12297
Rp12298
(dp12299
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp12300
Rp12301
(dp12302
g14
S'auto_15167'
p12303
sg16
Nsg17
g0
(g18
g5
Ntp12304
Rp12305
(dp12306
g22
(lp12307
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp12308
Rp12309
(dp12310
g78
(tsg80
S'int8'
p12311
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp12312
g59
tp12313
Rp12314
(I1
(tg3031
I00
g7816
tp12315
bsbasg17
g0
(g18
g5
Ntp12316
Rp12317
sg814
(lp12318
g12256
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp12319
Rp12320
(dp12321
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp12322
Rp12323
(dp12324
g14
S'auto_15156'
p12325
sg16
I0
sg17
g0
(g18
g5
Ntp12326
Rp12327
(dp12328
g22
(lp12329
sbsg53
Nsg85
g0
(g809
g5
Ntp12330
Rp12331
(dp12332
g552
(lp12333
g0
(g563
g5
Ntp12334
Rp12335
(dp12336
g14
S'auto_15136'
p12337
sg16
I0
sg17
g0
(g18
g5
Ntp12338
Rp12339
(dp12340
g22
(lp12341
sbsg53
Nsg85
g0
(g809
g5
Ntp12342
Rp12343
(dp12344
g552
(lp12345
g2298
ag2280
ag1165
asg17
g0
(g18
g5
Ntp12346
Rp12347
sg814
(lp12348
g12335
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp12349
Rp12350
(dp12351
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp12352
Rp12353
(dp12354
g14
S'auto_15152'
p12355
sg16
I0
sg17
g0
(g18
g5
Ntp12356
Rp12357
(dp12358
g22
(lp12359
sbsg53
Nsg85
g0
(g809
g5
Ntp12360
Rp12361
(dp12362
g552
(lp12363
g0
(g563
g5
Ntp12364
Rp12365
(dp12366
g14
S'auto_15147'
p12367
sg16
I0
sg17
g0
(g18
g5
Ntp12368
Rp12369
(dp12370
g22
(lp12371
sbsg53
Nsg85
g0
(g809
g5
Ntp12372
Rp12373
(dp12374
g552
(lp12375
g0
(g563
g5
Ntp12376
Rp12377
(dp12378
g14
S'auto_15144'
p12379
sg16
I0
sg17
g0
(g18
g5
Ntp12380
Rp12381
(dp12382
g22
(lp12383
sbsg53
Nsg85
g0
(g809
g5
Ntp12384
Rp12385
(dp12386
g552
(lp12387
g0
(g563
g5
Ntp12388
Rp12389
(dp12390
g14
S'auto_15138'
p12391
sg16
I0
sg17
g0
(g18
g5
Ntp12392
Rp12393
(dp12394
g22
(lp12395
sbsg53
Nsg85
g0
(g809
g5
Ntp12396
Rp12397
(dp12398
g552
(lp12399
g2322
ag0
(g3250
g5
Ntp12400
Rp12401
(dp12402
g14
S'auto_15137'
p12403
sg16
Nsg17
g0
(g18
g5
Ntp12404
Rp12405
(dp12406
g22
(lp12407
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p12408
tp12409
Rp12410
sbasg17
g0
(g18
g5
Ntp12411
Rp12412
sg814
(lp12413
g12389
asg1274
g0
(g3357
g5
Ntp12414
Rp12415
(dp12416
g3361
(g1465
tp12417
sbsbsg73
g0
(g74
g5
Ntp12418
Rp12419
(dp12420
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag12268
asg17
g0
(g18
g5
Ntp12421
Rp12422
sg814
(lp12423
g12377
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp12424
Rp12425
(dp12426
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp12427
Rp12428
sg814
(lp12429
g12365
asg1274
g8125
sbsg73
g0
(g74
g5
Ntp12430
Rp12431
(dp12432
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp12433
Rp12434
(dp12435
g14
S'auto_15148'
p12436
sg16
Nsg17
g0
(g18
g5
Ntp12437
Rp12438
(dp12439
g22
(lp12440
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp12441
Rp12442
(dp12443
g78
(tsg80
S'int8'
p12444
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp12445
g59
tp12446
Rp12447
(I1
(tg3031
I00
g8160
tp12448
bsbasg17
g0
(g18
g5
Ntp12449
Rp12450
sg814
(lp12451
g12353
asg1274
g8166
sbsg73
g0
(g74
g5
Ntp12452
Rp12453
(dp12454
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp12455
Rp12456
sg814
(lp12457
g12323
asg1274
g8183
sbsg73
g0
(g74
g5
Ntp12458
Rp12459
(dp12460
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag12268
asg17
g0
(g18
g5
Ntp12461
Rp12462
sg814
(lp12463
g12244
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp12464
Rp12465
(dp12466
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp12467
Rp12468
sg814
(lp12469
g12232
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp12470
Rp12471
(dp12472
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp12473
Rp12474
(dp12475
g14
S'auto_15199'
p12476
sg16
I0
sg17
g0
(g18
g5
Ntp12477
Rp12478
(dp12479
g22
(lp12480
sbsg53
Nsg85
g0
(g809
g5
Ntp12481
Rp12482
(dp12483
g552
(lp12484
g0
(g563
g5
Ntp12485
Rp12486
(dp12487
g14
S'auto_15194'
p12488
sg16
I0
sg17
g0
(g18
g5
Ntp12489
Rp12490
(dp12491
g22
(lp12492
sbsg53
Nsg85
g0
(g809
g5
Ntp12493
Rp12494
(dp12495
g552
(lp12496
g0
(g563
g5
Ntp12497
Rp12498
(dp12499
g14
S'auto_15191'
p12500
sg16
I0
sg17
g0
(g18
g5
Ntp12501
Rp12502
(dp12503
g22
(lp12504
sbsg53
Nsg85
g0
(g809
g5
Ntp12505
Rp12506
(dp12507
g552
(lp12508
g12101
ag0
(g563
g5
Ntp12509
Rp12510
(dp12511
g14
S'auto_15184'
p12512
sg16
I0
sg17
g0
(g18
g5
Ntp12513
Rp12514
(dp12515
g22
(lp12516
sbsg53
Nsg85
g0
(g809
g5
Ntp12517
Rp12518
(dp12519
g552
(lp12520
g12113
ag0
(g3250
g5
Ntp12521
Rp12522
(dp12523
g14
S'auto_15183'
p12524
sg16
Nsg17
g0
(g18
g5
Ntp12525
Rp12526
(dp12527
g22
(lp12528
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p12529
tp12530
Rp12531
sbasg17
g0
(g18
g5
Ntp12532
Rp12533
sg814
(lp12534
g12510
asg1274
g0
(g3357
g5
Ntp12535
Rp12536
(dp12537
g3361
(g1465
tp12538
sbsbsg73
g0
(g74
g5
Ntp12539
Rp12540
(dp12541
g78
(tsg80
g12175
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp12542
Rp12543
(dp12544
g14
S'auto_15186'
p12545
sg16
I0
sg17
g0
(g18
g5
Ntp12546
Rp12547
(dp12548
g22
(lp12549
sbsg53
Nsg85
g0
(g809
g5
Ntp12550
Rp12551
(dp12552
g552
(lp12553
g12113
ag0
(g3250
g5
Ntp12554
Rp12555
(dp12556
g14
S'auto_15185'
p12557
sg16
Nsg17
g0
(g18
g5
Ntp12558
Rp12559
(dp12560
g22
(lp12561
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p12562
tp12563
Rp12564
sbasg17
g0
(g18
g5
Ntp12565
Rp12566
sg814
(lp12567
g12543
asg1274
g0
(g3357
g5
Ntp12568
Rp12569
(dp12570
g3361
(g1465
tp12571
sbsbsg73
g0
(g74
g5
Ntp12572
Rp12573
(dp12574
g78
(tsg80
g12175
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp12575
Rp12576
sg814
(lp12577
g12498
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp12578
Rp12579
(dp12580
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp12581
Rp12582
sg814
(lp12583
g12486
asg1274
g8125
sbsg73
g0
(g74
g5
Ntp12584
Rp12585
(dp12586
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp12587
Rp12588
(dp12589
g14
S'auto_15195'
p12590
sg16
Nsg17
g0
(g18
g5
Ntp12591
Rp12592
(dp12593
g22
(lp12594
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp12595
Rp12596
(dp12597
g78
(tsg80
S'int8'
p12598
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp12599
g59
tp12600
Rp12601
(I1
(tg3031
I00
g8160
tp12602
bsbasg17
g0
(g18
g5
Ntp12603
Rp12604
sg814
(lp12605
g12474
asg1274
g8166
sbsg73
g0
(g74
g5
Ntp12606
Rp12607
(dp12608
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp12609
Rp12610
sg814
(lp12611
g12220
asg1274
g8183
sbsg73
g0
(g74
g5
Ntp12612
Rp12613
(dp12614
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag12101
asg17
g0
(g18
g5
Ntp12615
Rp12616
sg814
(lp12617
g12077
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp12618
Rp12619
(dp12620
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbg0
(g563
g5
Ntp12621
Rp12622
(dp12623
g14
S'auto_15223'
p12624
sg16
I0
sg17
g0
(g18
g5
Ntp12625
Rp12626
(dp12627
g22
(lp12628
sbsg53
Nsg85
g0
(g809
g5
Ntp12629
Rp12630
(dp12631
g552
(lp12632
g0
(g563
g5
Ntp12633
Rp12634
(dp12635
g14
S'auto_15218'
p12636
sg16
I0
sg17
g0
(g18
g5
Ntp12637
Rp12638
(dp12639
g22
(lp12640
sbsg53
Nsg85
g0
(g809
g5
Ntp12641
Rp12642
(dp12643
g552
(lp12644
g12510
ag0
(g843
g5
Ntp12645
Rp12646
(dp12647
g14
S'auto_15214'
p12648
sg16
Nsg17
g0
(g18
g5
Ntp12649
Rp12650
(dp12651
g22
(lp12652
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp12653
Rp12654
(dp12655
g78
(tsg80
S'int8'
p12656
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp12657
g59
tp12658
Rp12659
(I1
(tg3031
I00
g7816
tp12660
bsbasg17
g0
(g18
g5
Ntp12661
Rp12662
sg814
(lp12663
g12634
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp12664
Rp12665
(dp12666
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag12220
ag12510
asg17
g0
(g18
g5
Ntp12667
Rp12668
sg814
(lp12669
g12622
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp12670
Rp12671
(dp12672
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbg0
(g563
g5
Ntp12673
Rp12674
(dp12675
g14
S'auto_15233'
p12676
sg16
I0
sg17
g0
(g18
g5
Ntp12677
Rp12678
(dp12679
g22
(lp12680
sbsg53
Nsg85
g0
(g809
g5
Ntp12681
Rp12682
(dp12683
g552
(lp12684
g0
(g563
g5
Ntp12685
Rp12686
(dp12687
g14
S'auto_15228'
p12688
sg16
I0
sg17
g0
(g18
g5
Ntp12689
Rp12690
(dp12691
g22
(lp12692
sbsg53
Nsg85
g0
(g809
g5
Ntp12693
Rp12694
(dp12695
g552
(lp12696
g12543
ag0
(g843
g5
Ntp12697
Rp12698
(dp12699
g14
S'auto_15224'
p12700
sg16
Nsg17
g0
(g18
g5
Ntp12701
Rp12702
(dp12703
g22
(lp12704
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp12705
Rp12706
(dp12707
g78
(tsg80
S'int8'
p12708
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp12709
g59
tp12710
Rp12711
(I1
(tg3031
I00
g7816
tp12712
bsbasg17
g0
(g18
g5
Ntp12713
Rp12714
sg814
(lp12715
g12686
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp12716
Rp12717
(dp12718
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag12220
ag12543
asg17
g0
(g18
g5
Ntp12719
Rp12720
sg814
(lp12721
g12674
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp12722
Rp12723
(dp12724
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbtp12725
sg2890
(g1173
g10566
tp12726
sg0
(g563
g5
Ntp12727
Rp12728
(dp12729
g16
I0
sg53
Nsg798
g801
sg807
(lp12730
sg14
S'auto_14710'
p12731
sg17
g0
(g18
g5
Ntp12732
Rp12733
(dp12734
g22
(lp12735
(lp12736
(g25
I306
g26
S'nade_train( * args[1:] )'
p12737
tp12738
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p12739
tp12740
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p12741
tp12742
a(g37
I36
g38
S'self.recompile()'
p12743
tp12744
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p12745
tp12746
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p12747
tp12748
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p12749
tp12750
aasbsg85
g0
(g809
g5
Ntp12751
Rp12752
(dp12753
g552
(lp12754
g9717
ag10301
asg798
g801
sg814
(lp12755
g12728
asg17
g0
(g18
g5
Ntp12756
Rp12757
(dp12758
g4093
(lp12759
g7547
asg1268
(lp12760
g1271
asbsg1272
(dp12761
sg1274
g0
(g3357
g5
Ntp12762
Rp12763
(dp12764
g3361
(g1465
tp12765
sbsbsg73
g0
(g74
g5
Ntp12766
Rp12767
(dp12768
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg2784
(g1173
g7934
tp12769
sg3260
(g0
(g563
g5
Ntp12770
Rp12771
(dp12772
g14
S'auto_14870'
p12773
sg16
I0
sg17
g0
(g18
g5
Ntp12774
Rp12775
(dp12776
g22
(lp12777
sbsg53
Nsg85
g0
(g809
g5
Ntp12778
Rp12779
(dp12780
g552
(lp12781
g3260
asg17
g0
(g18
g5
Ntp12782
Rp12783
sg814
(lp12784
g12771
asg1274
g0
(g1275
g5
Ntp12785
Rp12786
(dp12787
g1279
I0
sbsbsg73
g1281
sbg0
(g563
g5
Ntp12788
Rp12789
(dp12790
g14
S'auto_14871'
p12791
sg16
I0
sg17
g0
(g18
g5
Ntp12792
Rp12793
(dp12794
g22
(lp12795
sbsg53
Nsg85
g0
(g809
g5
Ntp12796
Rp12797
(dp12798
g552
(lp12799
g3260
asg17
g0
(g18
g5
Ntp12800
Rp12801
sg814
(lp12802
g12789
asg1274
g0
(g1275
g5
Ntp12803
Rp12804
(dp12805
g1279
I1
sbsbsg73
g1281
sbtp12806
sg5751
(g1173
g10566
tp12807
sg7655
(tsg0
(g563
g5
Ntp12808
Rp12809
(dp12810
g16
I0
sg53
Nsg798
g801
sg807
(lp12811
sg14
S'auto_15997'
p12812
sg17
g0
(g18
g5
Ntp12813
Rp12814
(dp12815
g22
(lp12816
sbsg85
g0
(g809
g5
Ntp12817
Rp12818
(dp12819
g552
(lp12820
g0
(g843
g5
Ntp12821
Rp12822
(dp12823
g14
S'auto_15898'
p12824
sg16
Nsg17
g0
(g18
g5
Ntp12825
Rp12826
(dp12827
g22
(lp12828
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp12829
Rp12830
(dp12831
g78
(tsg80
S'float32'
p12832
sg82
g63
(S'f4'
p12833
I0
I1
tp12834
Rp12835
(I3
S'<'
p12836
NNNI-1
I-1
I0
tp12837
bsg83
I00
sg53
Nsbsg807
(lp12838
sg883
g56
(g57
(I0
tp12839
g59
tp12840
Rp12841
(I1
(tg12835
I00
S'\x00\x00\x80?'
p12842
tp12843
bsbasg798
g801
sg814
(lp12844
g12809
asg17
g0
(g18
g5
Ntp12845
Rp12846
(dp12847
g4093
(lp12848
g8725
asg1268
(lp12849
g3663
ag1271
asbsg1272
(dp12850
sg1274
g0
(g1387
g5
Ntp12851
Rp12852
(dp12853
g1391
(lp12854
sg1393
(lp12855
sg1395
(lp12856
I0
aI1
asg1397
g1398
sg1399
(tsg1401
(lp12857
g1403
asg1404
I01
sg1405
(g270
g270
tp12858
sg1407
(dp12859
S'support_code_apply'
p12860
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p12861
ssg1411
(dp12862
I0
(lp12863
I0
assg1414
(lp12864
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p12865
asbsbsg73
g0
(g74
g5
Ntp12866
Rp12867
(dp12868
g78
(I01
I01
tp12869
sg80
g12832
sg82
g12835
sg83
I00
sg53
Nsbsb(g8744
g8744
tp12870
sg0
(g563
g5
Ntp12871
Rp12872
(dp12873
g16
I0
sg53
Nsg798
g801
sg807
(lp12874
sg14
S'auto_14679'
p12875
sg17
g0
(g18
g5
Ntp12876
Rp12877
(dp12878
g22
(lp12879
g3042
asbsg85
g0
(g809
g5
Ntp12880
Rp12881
(dp12882
g552
(lp12883
g7655
asg798
g801
sg814
(lp12884
g12872
asg17
g0
(g18
g5
Ntp12885
Rp12886
(dp12887
g4093
(lp12888
g8725
asg1268
(lp12889
g1271
ag1271
asbsg1272
(dp12890
sg1274
g0
(g1387
g5
Ntp12891
Rp12892
(dp12893
g1391
(lp12894
sg1393
(lp12895
sg1395
(lp12896
I0
aI1
asg1397
g1398
sg1399
(tsg1401
(lp12897
g1403
asg1404
I01
sg1405
(g270
g270
tp12898
sg1407
(dp12899
S'support_code_apply'
p12900
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p12901
ssg1411
(dp12902
I0
(lp12903
I0
assg1414
(lp12904
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p12905
asbsbsg73
g3025
sb(g8744
g8744
tp12906
sg960
(g12077
g12622
g12674
tp12907
sg0
(g563
g5
Ntp12908
Rp12909
(dp12910
g16
I0
sg53
Nsg798
g801
sg807
(lp12911
sg14
S'auto_15394'
p12912
sg17
g0
(g18
g5
Ntp12913
Rp12914
(dp12915
g22
(lp12916
sbsg85
g0
(g809
g5
Ntp12917
Rp12918
(dp12919
g552
(lp12920
g11784
asg798
g801
sg814
(lp12921
g12909
asg17
g0
(g18
g5
Ntp12922
Rp12923
(dp12924
g4093
(lp12925
g7962
asg1268
(lp12926
g5660
asbsg1272
(dp12927
sg1274
g0
(g1387
g5
Ntp12928
Rp12929
(dp12930
g1391
(lp12931
sg1393
(lp12932
sg1395
(lp12933
I0
asg1397
g1398
sg1399
(tsg1401
(lp12934
g1403
asg1404
I01
sg1405
(g270
tp12935
sg1407
(dp12936
S'support_code_apply'
p12937
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p12938
ssg1411
(dp12939
I0
(lp12940
I0
assg1414
(lp12941
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p12942
asbsbsg73
g0
(g74
g5
Ntp12943
Rp12944
(dp12945
g78
(I01
tp12946
sg80
S'float64'
p12947
sg82
g66
sg83
I00
sg53
Nsbsb(g8744
tp12948
sg1222
(g0
(g843
g5
Ntp12949
Rp12950
(dp12951
g14
S'auto_15287'
p12952
sg16
Nsg17
g0
(g18
g5
Ntp12953
Rp12954
(dp12955
g22
(lp12956
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp12957
Rp12958
(dp12959
g78
(tsg80
S'int64'
p12960
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp12961
g59
tp12962
Rp12963
(I1
(tg1286
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p12964
tp12965
bsbtp12966
sg9858
(g9031
g9576
g9628
tp12967
sg920
(g9031
g9576
tp12968
sg0
(g843
g5
Ntp12969
Rp12970
(dp12971
g14
S'auto_15894'
p12972
sg16
Nsg17
g0
(g18
g5
Ntp12973
Rp12974
(dp12975
g22
(lp12976
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp12977
Rp12978
(dp12979
g78
(tsg80
S'float32'
p12980
sg82
g12835
sg83
I00
sg53
Nsbsg807
(lp12981
sg883
g56
(g57
(I0
tp12982
g59
tp12983
Rp12984
(I1
(tg12835
I00
S'\x00\x00\x80?'
p12985
tp12986
bsb(tsg0
(g563
g5
Ntp12987
Rp12988
(dp12989
g16
I0
sg53
Nsg798
g801
sg807
(lp12990
sg14
S'auto_15583'
p12991
sg17
g0
(g18
g5
Ntp12992
Rp12993
(dp12994
g22
(lp12995
(lp12996
(g25
I306
g26
S'nade_train( * args[1:] )'
p12997
tp12998
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p12999
tp13000
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p13001
tp13002
a(g37
I36
g38
S'self.recompile()'
p13003
tp13004
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p13005
tp13006
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p13007
tp13008
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p13009
tp13010
aasbsg85
g0
(g809
g5
Ntp13011
Rp13012
(dp13013
g552
(lp13014
g0
(g843
g5
Ntp13015
Rp13016
(dp13017
g14
S'auto_15636'
p13018
sg16
Nsg17
g0
(g18
g5
Ntp13019
Rp13020
(dp13021
g22
(lp13022
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp13023
Rp13024
(dp13025
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsg807
(lp13026
sg883
g56
(g57
(I0
tp13027
g59
tp13028
Rp13029
(I1
(tg1286
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p13030
tp13031
bsbag0
(g563
g5
Ntp13032
Rp13033
(dp13034
g16
I0
sg53
Nsg798
g801
sg807
(lp13035
sg14
S'auto_14814'
p13036
sg17
g0
(g18
g5
Ntp13037
Rp13038
(dp13039
g4058
g4059
sg22
(lp13040
(lp13041
(g25
I306
g26
S'nade_train( * args[1:] )'
p13042
tp13043
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p13044
tp13045
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p13046
tp13047
a(g37
I36
g38
S'self.recompile()'
p13048
tp13049
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p13050
tp13051
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p13052
tp13053
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p13054
tp13055
aasbsg85
g0
(g809
g5
Ntp13056
Rp13057
(dp13058
g552
(lp13059
g11326
ag3252
asg798
g801
sg814
(lp13060
g13033
asg17
g0
(g18
g5
Ntp13061
Rp13062
(dp13063
g4093
(lp13064
g7547
asg1268
(lp13065
g1271
asbsg1272
(dp13066
sg1274
g0
(g3357
g5
Ntp13067
Rp13068
(dp13069
g3361
(g1465
tp13070
sbsbsg73
g0
(g74
g5
Ntp13071
Rp13072
(dp13073
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp13074
g12988
asg17
g0
(g18
g5
Ntp13075
Rp13076
(dp13077
g4093
(lp13078
g5660
asg1268
(lp13079
S'local_upcast_elemwise_constant_inputs'
p13080
asbsg1272
(dp13081
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp13082
Rp13083
(dp13084
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg0
(g563
g5
Ntp13085
Rp13086
(dp13087
g16
I0
sg53
Nsg798
g801
sg807
(lp13088
sg14
S'auto_15607'
p13089
sg17
g0
(g18
g5
Ntp13090
Rp13091
(dp13092
g22
(lp13093
(lp13094
(g25
I306
g26
S'nade_train( * args[1:] )'
p13095
tp13096
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p13097
tp13098
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p13099
tp13100
a(g37
I36
g38
S'self.recompile()'
p13101
tp13102
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p13103
tp13104
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p13105
tp13106
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p13107
tp13108
aasbsg85
g0
(g809
g5
Ntp13109
Rp13110
(dp13111
g552
(lp13112
g13016
ag0
(g563
g5
Ntp13113
Rp13114
(dp13115
g16
I0
sg53
Nsg798
g801
sg807
(lp13116
sg14
S'auto_14716'
p13117
sg17
g0
(g18
g5
Ntp13118
Rp13119
(dp13120
g4058
g4059
sg22
(lp13121
(lp13122
(g25
I306
g26
S'nade_train( * args[1:] )'
p13123
tp13124
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p13125
tp13126
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p13127
tp13128
a(g37
I36
g38
S'self.recompile()'
p13129
tp13130
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p13131
tp13132
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p13133
tp13134
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p13135
tp13136
aasbsg85
g0
(g809
g5
Ntp13137
Rp13138
(dp13139
g552
(lp13140
g9717
ag3252
asg798
g801
sg814
(lp13141
g13114
asg17
g0
(g18
g5
Ntp13142
Rp13143
(dp13144
g4093
(lp13145
g7547
asg1268
(lp13146
g1271
asbsg1272
(dp13147
sg1274
g0
(g3357
g5
Ntp13148
Rp13149
(dp13150
g3361
(g1465
tp13151
sbsbsg73
g0
(g74
g5
Ntp13152
Rp13153
(dp13154
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp13155
g13086
asg17
g0
(g18
g5
Ntp13156
Rp13157
(dp13158
g4093
(lp13159
g5660
asg1268
(lp13160
g13080
asbsg1272
(dp13161
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp13162
Rp13163
(dp13164
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg11125
(tsg0
(g843
g5
Ntp13165
Rp13166
(dp13167
g14
S'auto_15660'
p13168
sg16
Nsg17
g0
(g18
g5
Ntp13169
Rp13170
(dp13171
g22
(lp13172
sg878
g879
(g66
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
p13173
tp13174
Rp13175
sbsg53
Nsg73
g11091
sg807
(lp13176
sg883
g56
(g57
(I0
tp13177
g59
tp13178
Rp13179
(I1
(I1
I1
I1
tp13180
g66
I00
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
p13181
tp13182
bsb(g8744
g8744
g8744
tp13183
sg0
(g563
g5
Ntp13184
Rp13185
(dp13186
g16
I0
sg53
Nsg798
g801
sg807
(lp13187
sg14
S'auto_14712'
p13188
sg17
g0
(g18
g5
Ntp13189
Rp13190
(dp13191
g22
(lp13192
(lp13193
(g25
I306
g26
S'nade_train( * args[1:] )'
p13194
tp13195
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p13196
tp13197
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p13198
tp13199
a(g37
I36
g38
S'self.recompile()'
p13200
tp13201
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p13202
tp13203
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p13204
tp13205
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p13206
tp13207
aasbsg85
g0
(g809
g5
Ntp13208
Rp13209
(dp13210
g552
(lp13211
g11125
ag12728
asg798
g801
sg814
(lp13212
g13185
asg17
g0
(g18
g5
Ntp13213
Rp13214
(dp13215
g4093
(lp13216
g5660
asg1268
(lp13217
g1271
asbsg1272
(dp13218
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp13219
Rp13220
(dp13221
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg0
(g563
g5
Ntp13222
Rp13223
(dp13224
g16
I0
sg53
Nsg798
g801
sg807
(lp13225
sg14
S'auto_14818'
p13226
sg17
g0
(g18
g5
Ntp13227
Rp13228
(dp13229
g22
(lp13230
g1069
asbsg85
g0
(g809
g5
Ntp13231
Rp13232
(dp13233
g552
(lp13234
g11193
ag1319
asg798
g801
sg814
(lp13235
g13223
asg17
g0
(g18
g5
Ntp13236
Rp13237
(dp13238
g4093
(lp13239
g2086
asg1268
(lp13240
g1271
asbsg1272
(dp13241
sg1274
g0
(ctheano.tensor.basic
Dot
p13242
g5
Ntp13243
Rp13244
sbsg73
g0
(g74
g5
Ntp13245
Rp13246
(dp13247
g78
(I00
I00
tp13248
sg80
g3565
sg82
g66
sg83
I00
sg53
Nsbsb(g7870
g9198
tp13249
sg0
(g563
g5
Ntp13250
Rp13251
(dp13252
g16
I0
sg53
Nsg798
g801
sg807
(lp13253
sg14
S'auto_15439'
p13254
sg17
g0
(g18
g5
Ntp13255
Rp13256
(dp13257
g22
(lp13258
sbsg85
g0
(g809
g5
Ntp13259
Rp13260
(dp13261
g552
(lp13262
g13166
ag0
(g843
g5
Ntp13263
Rp13264
(dp13265
g14
S'auto_15652'
p13266
sg16
Nsg17
g0
(g18
g5
Ntp13267
Rp13268
(dp13269
g22
(lp13270
(lp13271
(g25
I306
g26
S'nade_train( * args[1:] )'
p13272
tp13273
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p13274
tp13275
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p13276
tp13277
a(g37
I36
g38
S'self.recompile()'
p13278
tp13279
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p13280
tp13281
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p13282
tp13283
a(g874
I231
g875
S'Phi = -constantX(0.5) * T.sqr((Mu - T.shape_padright(x)) / Sigma) - T.log(Sigma) - constantX(0.5 * np.log(2 * np.pi))  # BxDxC'
p13284
tp13285
aasg878
g879
(g66
S'\x00\x00\x00\x00\x00\x00\xe0?'
p13286
tp13287
Rp13288
sbsg53
Nsg73
g0
(g74
g5
Ntp13289
Rp13290
(dp13291
g78
(I01
I01
I01
tp13292
sg80
S'float64'
p13293
sg82
g66
sg83
I00
sg53
Nsbsg807
(lp13294
sg883
g56
(g57
(I0
tp13295
g59
tp13296
Rp13297
(I1
(I1
I1
I1
tp13298
g66
I00
S'\x00\x00\x00\x00\x00\x00\xe0?'
p13299
tp13300
bsbasg798
g801
sg814
(lp13301
g13251
asg17
g0
(g18
g5
Ntp13302
Rp13303
(dp13304
g1451
g0
(g809
g5
Ntp13305
Rp13306
(dp13307
g552
(lp13308
g0
(g1456
g5
Ntp13309
Rp13310
(dp13311
g14
S'auto_15661'
p13312
sg16
Nsg17
g0
(g18
g5
Ntp13313
Rp13314
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp13315
Rp13316
(dp13317
g14
S'auto_15662'
p13318
sg16
Nsg17
g0
(g18
g5
Ntp13319
Rp13320
sg53
Nsg85
Nsg73
g1931
sbasg17
g0
(g18
g5
Ntp13321
Rp13322
sg814
(lp13323
g0
(g1456
g5
Ntp13324
Rp13325
(dp13326
g14
S'auto_15663'
p13327
sg16
I0
sg17
g0
(g18
g5
Ntp13328
Rp13329
sg53
Nsg85
g13306
sg73
g1931
sbasg1274
g3184
sbsg4093
(lp13330
g8725
asg1268
(lp13331
g11073
ag1271
asbsg1272
(dp13332
sg1274
g5036
sbsg73
g1011
sb(g8744
g8744
g8744
tp13333
sg4161
(g9031
g9576
tp13334
sg3252
(tsg4029
(g9031
g9576
g9628
tp13335
sg0
(g563
g5
Ntp13336
Rp13337
(dp13338
g16
I0
sg53
Nsg798
g801
sg807
(lp13339
sg14
S'auto_15406'
p13340
sg17
g0
(g18
g5
Ntp13341
Rp13342
(dp13343
g22
(lp13344
sbsg85
g0
(g809
g5
Ntp13345
Rp13346
(dp13347
g552
(lp13348
g0
(g843
g5
Ntp13349
Rp13350
(dp13351
g14
S'auto_15401'
p13352
sg16
Nsg17
g0
(g18
g5
Ntp13353
Rp13354
(dp13355
g22
(lp13356
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp13357
Rp13358
(dp13359
g78
(tsg80
g990
sg82
g66
sg83
I00
sg53
Nsbsg807
(lp13360
sg883
g56
(g57
(I0
tp13361
g59
tp13362
Rp13363
(I1
(tg66
I00
S'\xb4\xbed\xc8\xf1g\xed\xbf'
p13364
tp13365
bsbasg798
g801
sg814
(lp13366
g13337
asg17
g0
(g18
g5
Ntp13367
Rp13368
(dp13369
g4093
(lp13370
g8725
asg1268
(lp13371
g4096
ag1271
asbsg1272
(dp13372
sg1274
g0
(g1387
g5
Ntp13373
Rp13374
(dp13375
g1391
(lp13376
sg1393
(lp13377
sg1395
(lp13378
I0
aI1
aI2
asg1397
g1398
sg1399
(tsg1401
(lp13379
g1403
asg1404
I01
sg1405
(g270
g270
g270
tp13380
sg1407
(dp13381
S'support_code_apply'
p13382
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13383
ssg1411
(dp13384
I0
(lp13385
I0
assg1414
(lp13386
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13387
asbsbsg73
g987
sb(g8744
g8744
g8744
tp13388
sg6894
(g9031
g9576
tp13389
sg1678
(g0
(g563
g5
Ntp13390
Rp13391
(dp13392
g14
S'auto_14965'
p13393
sg16
I0
sg17
g0
(g18
g5
Ntp13394
Rp13395
(dp13396
g22
(lp13397
sbsg53
Nsg85
g0
(g809
g5
Ntp13398
Rp13399
(dp13400
g552
(lp13401
g0
(g563
g5
Ntp13402
Rp13403
(dp13404
g14
S'auto_14960'
p13405
sg16
I0
sg17
g0
(g18
g5
Ntp13406
Rp13407
(dp13408
g22
(lp13409
sbsg53
Nsg85
g0
(g809
g5
Ntp13410
Rp13411
(dp13412
g552
(lp13413
g8370
ag0
(g843
g5
Ntp13414
Rp13415
(dp13416
g14
S'auto_14956'
p13417
sg16
Nsg17
g0
(g18
g5
Ntp13418
Rp13419
(dp13420
g22
(lp13421
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp13422
Rp13423
(dp13424
g78
(tsg80
S'int8'
p13425
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp13426
g59
tp13427
Rp13428
(I1
(tg3031
I00
g7816
tp13429
bsbasg17
g0
(g18
g5
Ntp13430
Rp13431
sg814
(lp13432
g13403
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp13433
Rp13434
(dp13435
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag8304
ag8370
asg17
g0
(g18
g5
Ntp13436
Rp13437
sg814
(lp13438
g13391
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp13439
Rp13440
(dp13441
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbg8225
tp13442
sg0
(g563
g5
Ntp13443
Rp13444
(dp13445
g16
I0
sg53
Nsg798
g801
sg807
(lp13446
sg14
S'auto_14776'
p13447
sg17
g0
(g18
g5
Ntp13448
Rp13449
(dp13450
g22
(lp13451
g2452
asbsg85
g0
(g809
g5
Ntp13452
Rp13453
(dp13454
g552
(lp13455
g11193
ag1097
asg798
g801
sg814
(lp13456
g13444
asg17
g0
(g18
g5
Ntp13457
Rp13458
(dp13459
g4093
(lp13460
g2086
asg1268
(lp13461
g1271
asbsg1272
(dp13462
sg1274
g13244
sbsg73
g0
(g74
g5
Ntp13463
Rp13464
(dp13465
g78
(I00
I00
tp13466
sg80
g2665
sg82
g66
sg83
I00
sg53
Nsbsb(g7870
g12244
tp13467
sg0
(g563
g5
Ntp13468
Rp13469
(dp13470
g16
I0
sg53
Nsg798
g801
sg807
(lp13471
sg14
S'auto_15578'
p13472
sg17
g0
(g18
g5
Ntp13473
Rp13474
(dp13475
g22
(lp13476
sbsg85
g0
(g809
g5
Ntp13477
Rp13478
(dp13479
g552
(lp13480
g11125
asg798
g801
sg814
(lp13481
g13469
asg17
g0
(g18
g5
Ntp13482
Rp13483
(dp13484
g4093
(lp13485
g7962
asg1268
(lp13486
g13080
asbsg1272
(dp13487
sg1274
g0
(g318
g5
Ntp13488
Rp13489
(dp13490
g379
S'tensor.basic'
p13491
sg53
Nsg322
g0
(ctheano.scalar.basic
Cast
p13492
g5
Ntp13493
Rp13494
(dp13495
g327
g0
(ctheano.scalar.basic
specific_out
p13496
g5
Ntp13497
Rp13498
(dp13499
S'spec'
p13500
(g1465
tp13501
sbsS'o_type'
p13502
g1465
sg53
S'convert_to_int64'
p13503
sS'ctor'
p13504
cnumpy
int64
p13505
sbsg330
(dp13506
sg332
Nsg333
g0
(g334
g5
Ntp13507
Rp13508
(dp13509
g338
I0
sg339
(dp13510
sbsS'__oplist_tags'
p13511
(lp13512
S'casting'
p13513
asg341
I00
sbsbsg73
g0
(g74
g5
Ntp13514
Rp13515
(dp13516
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg3270
(g12789
tp13517
sg0
(g843
g5
Ntp13518
Rp13519
(dp13520
g14
S'auto_15417'
p13521
sg16
Nsg17
g0
(g18
g5
Ntp13522
Rp13523
(dp13524
g22
(lp13525
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp13526
Rp13527
(dp13528
g78
(tsg80
S'float64'
p13529
sg82
g66
sg83
I00
sg53
Nsbsg807
(lp13530
sg883
g56
(g57
(I0
tp13531
g59
tp13532
Rp13533
(I1
(tg66
I00
S'\xb4\xbed\xc8\xf1g\xed\xbf'
p13534
tp13535
bsb(tsg0
(g563
g5
Ntp13536
Rp13537
(dp13538
g16
I0
sg53
Nsg798
g801
sg807
(lp13539
sg14
S'auto_14713'
p13540
sg17
g0
(g18
g5
Ntp13541
Rp13542
(dp13543
g22
(lp13544
(lp13545
(g25
I306
g26
S'nade_train( * args[1:] )'
p13546
tp13547
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p13548
tp13549
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p13550
tp13551
a(g37
I36
g38
S'self.recompile()'
p13552
tp13553
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p13554
tp13555
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p13556
tp13557
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p13558
tp13559
aasbsg85
g0
(g809
g5
Ntp13560
Rp13561
(dp13562
g552
(lp13563
g13185
ag11607
asg798
g801
sg814
(lp13564
g13537
asg17
g0
(g18
g5
Ntp13565
Rp13566
(dp13567
g4093
(lp13568
g5660
asg1268
(lp13569
g1271
asbsg1272
(dp13570
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp13571
Rp13572
(dp13573
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg1566
(tsg7158
(g1173
g11995
tp13574
sg1695
(g0
(g843
g5
Ntp13575
Rp13576
(dp13577
g14
S'auto_15774'
p13578
sg16
Nsg17
g0
(g18
g5
Ntp13579
Rp13580
(dp13581
g22
(lp13582
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp13583
Rp13584
(dp13585
g78
(tsg80
S'int64'
p13586
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp13587
g59
tp13588
Rp13589
(I1
(tg1286
I00
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p13590
tp13591
bsbtp13592
sg2473
(g12077
g12622
g12674
tp13593
sg13264
(g8744
g8744
g8744
tp13594
sg934
(g9031
g9576
tp13595
sg0
(g563
g5
Ntp13596
Rp13597
(dp13598
g16
I0
sg53
Nsg798
g801
sg807
(lp13599
sg14
S'auto_15461'
p13600
sg17
g0
(g18
g5
Ntp13601
Rp13602
(dp13603
g22
(lp13604
sbsg85
g0
(g809
g5
Ntp13605
Rp13606
(dp13607
g552
(lp13608
g0
(g563
g5
Ntp13609
Rp13610
(dp13611
g16
I0
sg53
Nsg798
g801
sg807
(lp13612
sg14
S'auto_15460'
p13613
sg17
g0
(g18
g5
Ntp13614
Rp13615
(dp13616
g22
(lp13617
sbsg85
g0
(g809
g5
Ntp13618
Rp13619
(dp13620
g552
(lp13621
g11125
asg798
g801
sg814
(lp13622
g13610
asg17
g0
(g18
g5
Ntp13623
Rp13624
(dp13625
g1451
g0
(g809
g5
Ntp13626
Rp13627
(dp13628
g552
(lp13629
g0
(g1456
g5
Ntp13630
Rp13631
(dp13632
g14
S'auto_15634'
p13633
sg16
Nsg17
g0
(g18
g5
Ntp13634
Rp13635
sg53
Nsg85
Nsg73
g3094
sbasg17
g0
(g18
g5
Ntp13636
Rp13637
sg814
(lp13638
g0
(g1456
g5
Ntp13639
Rp13640
(dp13641
g14
S'auto_15635'
p13642
sg16
I0
sg17
g0
(g18
g5
Ntp13643
Rp13644
sg53
Nsg85
g13627
sg73
g1465
sbasg1274
g13494
sbsg4093
(lp13645
g3663
ag8725
asg1268
(lp13646
g13080
ag7962
asbsg1272
(dp13647
sg1274
g13489
sbsg73
g13024
sbasg798
g801
sg814
(lp13648
g13597
asg17
g0
(g18
g5
Ntp13649
Rp13650
(dp13651
g4093
(lp13652
g3663
asg1268
(lp13653
g13080
asbsg1272
(dp13654
sg1274
g0
(g1387
g5
Ntp13655
Rp13656
(dp13657
g1391
(lp13658
sg1393
(lp13659
sg1395
(lp13660
sg1397
g1398
sg1399
(tsg1401
(lp13661
g1403
asg1404
I01
sg1405
(tsg1407
(dp13662
S'support_code_apply'
p13663
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13664
ssg1411
(dp13665
I0
(lp13666
I0
assg1414
(lp13667
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13668
asbsbsg73
g0
(g74
g5
Ntp13669
Rp13670
(dp13671
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg1815
(g7606
g8603
g8744
tp13672
sg3279
(g8744
g12789
tp13673
sg952
(g9031
g9576
g9628
tp13674
sg1627
(tsg0
(g563
g5
Ntp13675
Rp13676
(dp13677
g16
I0
sg53
Nsg798
g801
sg807
(lp13678
sg14
S'auto_14730'
p13679
sg17
g0
(g18
g5
Ntp13680
Rp13681
(dp13682
g22
(lp13683
g2063
asbsg85
g0
(g809
g5
Ntp13684
Rp13685
(dp13686
g552
(lp13687
g11193
ag1678
asg798
g801
sg814
(lp13688
g13676
asg17
g0
(g18
g5
Ntp13689
Rp13690
(dp13691
g4093
(lp13692
g2086
asg1268
(lp13693
g1271
asbsg1272
(dp13694
sg1274
g13244
sbsg73
g0
(g74
g5
Ntp13695
Rp13696
(dp13697
g78
(I00
I00
tp13698
sg80
g2048
sg82
g66
sg83
I00
sg53
Nsbsb(g7870
g8225
tp13699
sg1060
(g1173
g9198
tp13700
sg8935
(g12077
g12622
g12674
tp13701
sg2813
(g1173
g10566
tp13702
sg0
(g563
g5
Ntp13703
Rp13704
(dp13705
g16
I0
sg53
Nsg798
g801
sg807
(lp13706
sg14
S'auto_14810'
p13707
sg17
g0
(g18
g5
Ntp13708
Rp13709
(dp13710
g4058
g4059
sg22
(lp13711
(lp13712
(g25
I306
g26
S'nade_train( * args[1:] )'
p13713
tp13714
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p13715
tp13716
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p13717
tp13718
a(g37
I36
g38
S'self.recompile()'
p13719
tp13720
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p13721
tp13722
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p13723
tp13724
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p13725
tp13726
aasbsg85
g0
(g809
g5
Ntp13727
Rp13728
(dp13729
g552
(lp13730
g11326
ag10301
asg798
g801
sg814
(lp13731
g13704
asg17
g0
(g18
g5
Ntp13732
Rp13733
(dp13734
g4093
(lp13735
g7547
asg1268
(lp13736
g1271
asbsg1272
(dp13737
sg1274
g0
(g3357
g5
Ntp13738
Rp13739
(dp13740
g3361
(g1465
tp13741
sbsbsg73
g0
(g74
g5
Ntp13742
Rp13743
(dp13744
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg0
(g563
g5
Ntp13745
Rp13746
(dp13747
g16
I0
sg53
Nsg798
g801
sg807
(lp13748
sg14
S'auto_15893'
p13749
sg17
g0
(g18
g5
Ntp13750
Rp13751
(dp13752
g22
(lp13753
sbsg85
g0
(g809
g5
Ntp13754
Rp13755
(dp13756
g552
(lp13757
g0
(g843
g5
Ntp13758
Rp13759
(dp13760
g14
S'auto_15890'
p13761
sg16
Nsg17
g0
(g18
g5
Ntp13762
Rp13763
(dp13764
g22
(lp13765
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp13766
Rp13767
(dp13768
g78
(tsg80
S'float32'
p13769
sg82
g12835
sg83
I00
sg53
Nsbsg807
(lp13770
sg883
g56
(g57
(I0
tp13771
g59
tp13772
Rp13773
(I1
(tg12835
I00
S'\x00\x00\x80?'
p13774
tp13775
bsbasg798
g801
sg814
(lp13776
g13746
asg17
g0
(g18
g5
Ntp13777
Rp13778
(dp13779
g1451
g0
(g809
g5
Ntp13780
Rp13781
(dp13782
g552
(lp13783
g0
(g1456
g5
Ntp13784
Rp13785
(dp13786
g14
S'auto_16015'
p13787
sg16
Nsg17
g0
(g18
g5
Ntp13788
Rp13789
sg53
Nsg85
Nsg73
g0
(g1463
g5
Ntp13790
Rp13791
(dp13792
g80
S'float32'
p13793
sbsbasg17
g0
(g18
g5
Ntp13794
Rp13795
sg814
(lp13796
g0
(g1456
g5
Ntp13797
Rp13798
(dp13799
g14
S'auto_16016'
p13800
sg16
I0
sg17
g0
(g18
g5
Ntp13801
Rp13802
sg53
Nsg85
g13781
sg73
g1931
sbasg1274
g0
(g13492
g5
Ntp13803
Rp13804
(dp13805
g327
g0
(g13496
g5
Ntp13806
Rp13807
(dp13808
g13500
(g1931
tp13809
sbsg13502
g1931
sg53
S'convert_to_float64'
p13810
sg13504
cnumpy
float64
p13811
sbsbsg4093
(lp13812
g8725
asg1268
(lp13813
g5770
asbsg1272
(dp13814
sg1274
g0
(g318
g5
Ntp13815
Rp13816
(dp13817
g379
g13491
sg53
Nsg322
g13804
sg330
(dp13818
sg332
Nsg333
g0
(g334
g5
Ntp13819
Rp13820
(dp13821
g338
I0
sg339
(dp13822
sbsg13511
(lp13823
g13513
asg341
I00
sbsbsg73
g2984
sb(tsg0
(g563
g5
Ntp13824
Rp13825
(dp13826
g16
I0
sg53
Nsg798
g801
sg807
(lp13827
sg14
S'auto_15579'
p13828
sg17
g0
(g18
g5
Ntp13829
Rp13830
(dp13831
g22
(lp13832
sbsg85
g0
(g809
g5
Ntp13833
Rp13834
(dp13835
g552
(lp13836
g13610
asg798
g801
sg814
(lp13837
g13825
asg17
g0
(g18
g5
Ntp13838
Rp13839
(dp13840
g4093
(lp13841
g3663
asg1268
(lp13842
g13080
asbsg1272
(dp13843
sg1274
g0
(g1387
g5
Ntp13844
Rp13845
(dp13846
g1391
(lp13847
sg1393
(lp13848
sg1395
(lp13849
sg1397
g1398
sg1399
(tsg1401
(lp13850
g1403
asg1404
I01
sg1405
(tsg1407
(dp13851
S'support_code_apply'
p13852
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13853
ssg1411
(dp13854
I0
(lp13855
I0
assg1414
(lp13856
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13857
asbsbsg73
g0
(g74
g5
Ntp13858
Rp13859
(dp13860
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg0
(g563
g5
Ntp13861
Rp13862
(dp13863
g16
I0
sg53
Nsg798
g801
sg807
(lp13864
sg14
S'auto_15854'
p13865
sg17
g0
(g18
g5
Ntp13866
Rp13867
(dp13868
g22
(lp13869
sbsg85
g0
(g809
g5
Ntp13870
Rp13871
(dp13872
g552
(lp13873
g4134
ag0
(g563
g5
Ntp13874
Rp13875
(dp13876
g16
I0
sg53
Nsg798
g801
sg807
(lp13877
sg14
S'auto_15850'
p13878
sg17
g0
(g18
g5
Ntp13879
Rp13880
(dp13881
g22
(lp13882
sbsg85
g0
(g809
g5
Ntp13883
Rp13884
(dp13885
g552
(lp13886
g4161
asg798
g801
sg814
(lp13887
g13875
asg17
g0
(g18
g5
Ntp13888
Rp13889
(dp13890
g4093
(lp13891
g5814
asg1268
(lp13892
g4178
asbsg1272
(dp13893
sg1274
g6150
sbsg73
g0
(g74
g5
Ntp13894
Rp13895
(dp13896
g78
(I00
I00
tp13897
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp13898
g13862
asg17
g0
(g18
g5
Ntp13899
Rp13900
(dp13901
g4093
(lp13902
g5814
asg1268
(lp13903
g4178
asbsg1272
(dp13904
sg1274
g8881
sbsg73
g0
(g74
g5
Ntp13905
Rp13906
(dp13907
g78
(I00
I00
tp13908
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g9031
g9576
tp13909
sg4143
(g9031
g9576
g8744
tp13910
sg13610
(tsg8907
(g12077
g12622
g12674
tp13911
sg1650
(tsg0
(g563
g5
Ntp13912
Rp13913
(dp13914
g16
I0
sg53
Nsg798
g801
sg807
(lp13915
sg14
S'auto_16000'
p13916
sg17
g0
(g18
g5
Ntp13917
Rp13918
(dp13919
g22
(lp13920
sbsg85
g0
(g809
g5
Ntp13921
Rp13922
(dp13923
g552
(lp13924
g0
(g843
g5
Ntp13925
Rp13926
(dp13927
g14
S'auto_16028'
p13928
sg16
Nsg17
g0
(g18
g5
Ntp13929
Rp13930
(dp13931
g22
(lp13932
sg878
g879
(g12835
S'\x00\x00\x80?'
p13933
tp13934
Rp13935
sbsg53
Nsg73
g12867
sg807
(lp13936
sg883
g56
(g57
(I0
tp13937
g59
tp13938
Rp13939
(I1
(I1
I1
tp13940
g12835
I00
S'\x00\x00\x80?'
p13941
tp13942
bsbasg798
g801
sg814
(lp13943
g13913
asg17
g0
(g18
g5
Ntp13944
Rp13945
(dp13946
g1451
g0
(g809
g5
Ntp13947
Rp13948
(dp13949
g552
(lp13950
g0
(g1456
g5
Ntp13951
Rp13952
(dp13953
g14
S'auto_16029'
p13954
sg16
Nsg17
g0
(g18
g5
Ntp13955
Rp13956
sg53
Nsg85
Nsg73
g13791
sbasg17
g0
(g18
g5
Ntp13957
Rp13958
sg814
(lp13959
g0
(g1456
g5
Ntp13960
Rp13961
(dp13962
g14
S'auto_16030'
p13963
sg16
I0
sg17
g0
(g18
g5
Ntp13964
Rp13965
sg53
Nsg85
g13948
sg73
g1931
sbasg1274
g13804
sbsg4093
(lp13966
g8725
asg1268
(lp13967
g3663
ag1271
asbsg1272
(dp13968
sg1274
g13816
sbsg73
g0
(g74
g5
Ntp13969
Rp13970
(dp13971
g78
(I01
I01
tp13972
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g8744
g8744
tp13973
sg3213
(g0
(g563
g5
Ntp13974
Rp13975
(dp13976
g14
S'auto_14873'
p13977
sg16
I0
sg17
g0
(g18
g5
Ntp13978
Rp13979
(dp13980
g22
(lp13981
sbsg53
Nsg85
g0
(g809
g5
Ntp13982
Rp13983
(dp13984
g552
(lp13985
g3242
asg17
g0
(g18
g5
Ntp13986
Rp13987
sg814
(lp13988
g13975
asg1274
g0
(g1275
g5
Ntp13989
Rp13990
(dp13991
g1279
I1
sbsbsg73
g1281
sbg7934
tp13992
sg0
(g563
g5
Ntp13993
Rp13994
(dp13995
g16
I0
sg53
Nsg798
g801
sg807
(lp13996
sg14
S'auto_14842'
p13997
sg17
g0
(g18
g5
Ntp13998
Rp13999
(dp14000
g22
(lp14001
(lp14002
(g25
I306
g26
S'nade_train( * args[1:] )'
p14003
tp14004
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p14005
tp14006
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p14007
tp14008
a(g37
I36
g38
S'self.recompile()'
p14009
tp14010
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p14011
tp14012
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p14013
tp14014
a(g874
I232
g875
S'logdensity = (log_sum_exp(Phi + T.log(Alpha), axis=2) * output_mask).sum(1) * D / (D - d)'
p14015
tp14016
aasbsg85
g0
(g809
g5
Ntp14017
Rp14018
(dp14019
g552
(lp14020
g11743
ag0
(g563
g5
Ntp14021
Rp14022
(dp14023
g16
I0
sg53
Nsg798
g801
sg807
(lp14024
sg14
S'auto_14667'
p14025
sg17
g0
(g18
g5
Ntp14026
Rp14027
(dp14028
g22
(lp14029
(lp14030
(g25
I306
g26
S'nade_train( * args[1:] )'
p14031
tp14032
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p14033
tp14034
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p14035
tp14036
a(g37
I36
g38
S'self.recompile()'
p14037
tp14038
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p14039
tp14040
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p14041
tp14042
a(g874
I232
g875
S'logdensity = (log_sum_exp(Phi + T.log(Alpha), axis=2) * output_mask).sum(1) * D / (D - d)'
p14043
tp14044
aasbsg85
g0
(g809
g5
Ntp14045
Rp14046
(dp14047
g552
(lp14048
g845
ag836
asg798
g801
sg814
(lp14049
g14022
asg17
g0
(g18
g5
Ntp14050
Rp14051
(dp14052
g4093
(lp14053
g5814
asg1268
(lp14054
g1271
asbsg1272
(dp14055
sg1274
g4101
sbsg73
g0
(g74
g5
Ntp14056
Rp14057
(dp14058
g78
(I00
tp14059
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp14060
g13994
asg17
g0
(g18
g5
Ntp14061
Rp14062
(dp14063
g4093
(lp14064
g5660
asg1268
(lp14065
g1271
asbsg1272
(dp14066
sg1274
g8992
sbsg73
g0
(g74
g5
Ntp14067
Rp14068
(dp14069
g78
(I00
tp14070
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g9031
tp14071
sg0
(g563
g5
Ntp14072
Rp14073
(dp14074
g16
I0
sg53
Nsg798
g801
sg807
(lp14075
sg14
S'auto_14811'
p14076
sg17
g0
(g18
g5
Ntp14077
Rp14078
(dp14079
g22
(lp14080
(lp14081
(g25
I306
g26
S'nade_train( * args[1:] )'
p14082
tp14083
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p14084
tp14085
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p14086
tp14087
a(g37
I36
g38
S'self.recompile()'
p14088
tp14089
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p14090
tp14091
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p14092
tp14093
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p14094
tp14095
aasbsg85
g0
(g809
g5
Ntp14096
Rp14097
(dp14098
g552
(lp14099
g11125
ag13704
asg798
g801
sg814
(lp14100
g14073
asg17
g0
(g18
g5
Ntp14101
Rp14102
(dp14103
g4093
(lp14104
g13080
asg1268
(lp14105
g1271
asbsg1272
(dp14106
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp14107
Rp14108
(dp14109
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg0
(g563
g5
Ntp14110
Rp14111
(dp14112
g16
I0
sg53
Nsg798
g801
sg807
(lp14113
sg14
S'auto_15603'
p14114
sg17
g0
(g18
g5
Ntp14115
Rp14116
(dp14117
g22
(lp14118
sbsg85
g0
(g809
g5
Ntp14119
Rp14120
(dp14121
g552
(lp14122
g13610
asg798
g801
sg814
(lp14123
g14111
asg17
g0
(g18
g5
Ntp14124
Rp14125
(dp14126
g4093
(lp14127
g3663
asg1268
(lp14128
g13080
asbsg1272
(dp14129
sg1274
g0
(g1387
g5
Ntp14130
Rp14131
(dp14132
g1391
(lp14133
sg1393
(lp14134
sg1395
(lp14135
sg1397
g1398
sg1399
(tsg1401
(lp14136
g1403
asg1404
I01
sg1405
(tsg1407
(dp14137
S'support_code_apply'
p14138
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14139
ssg1411
(dp14140
I0
(lp14141
I0
assg1414
(lp14142
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14143
asbsbsg73
g0
(g74
g5
Ntp14144
Rp14145
(dp14146
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg12822
(tsg3596
(g0
(g563
g5
Ntp14147
Rp14148
(dp14149
g14
S'auto_15234'
p14150
sg16
I0
sg17
g0
(g18
g5
Ntp14151
Rp14152
(dp14153
g22
(lp14154
sbsg53
Nsg85
g0
(g809
g5
Ntp14155
Rp14156
(dp14157
g552
(lp14158
g3596
asg17
g0
(g18
g5
Ntp14159
Rp14160
sg814
(lp14161
g14148
asg1274
g0
(g1275
g5
Ntp14162
Rp14163
(dp14164
g1279
I0
sbsbsg73
g1281
sbg0
(g563
g5
Ntp14165
Rp14166
(dp14167
g14
S'auto_15235'
p14168
sg16
I0
sg17
g0
(g18
g5
Ntp14169
Rp14170
(dp14171
g22
(lp14172
sbsg53
Nsg85
g0
(g809
g5
Ntp14173
Rp14174
(dp14175
g552
(lp14176
g3596
asg17
g0
(g18
g5
Ntp14177
Rp14178
sg814
(lp14179
g14166
asg1274
g0
(g1275
g5
Ntp14180
Rp14181
(dp14182
g1279
I1
sbsbsg73
g1281
sbtp14183
sg12126
(g0
(g843
g5
Ntp14184
Rp14185
(dp14186
g14
S'auto_15730'
p14187
sg16
Nsg17
g0
(g18
g5
Ntp14188
Rp14189
(dp14190
g22
(lp14191
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp14192
Rp14193
(dp14194
g78
(tsg80
S'int64'
p14195
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp14196
g59
tp14197
Rp14198
(I1
(tg1286
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p14199
tp14200
bsbtp14201
sg6115
(g12077
g12622
g12674
tp14202
sg0
(g843
g5
Ntp14203
Rp14204
(dp14205
g14
S'auto_15575'
p14206
sg16
Nsg17
g0
(g18
g5
Ntp14207
Rp14208
(dp14209
g22
(lp14210
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp14211
Rp14212
(dp14213
g78
(tsg80
S'int8'
p14214
sg82
g3031
sg83
I00
sg53
Nsbsg807
(lp14215
sg883
g56
(g57
(I0
tp14216
g59
tp14217
Rp14218
(I1
(tg3031
I00
g8160
tp14219
bsb(tsg0
(g563
g5
Ntp14220
Rp14221
(dp14222
g16
I0
sg53
Nsg798
g801
sg807
(lp14223
sg14
S'auto_14674'
p14224
sg17
g0
(g18
g5
Ntp14225
Rp14226
(dp14227
g22
(lp14228
g9725
asbsg85
g0
(g809
g5
Ntp14229
Rp14230
(dp14231
g552
(lp14232
g1590
asg798
g801
sg814
(lp14233
g14221
asg17
g0
(g18
g5
Ntp14234
Rp14235
(dp14236
g4093
(lp14237
g1270
asg1268
(lp14238
g1271
asbsg1272
(dp14239
sg1274
g12053
sbsg73
g12055
sb(g0
(g843
g5
Ntp14240
Rp14241
(dp14242
g14
S'auto_14851'
p14243
sg16
Nsg17
g0
(g18
g5
Ntp14244
Rp14245
(dp14246
g22
(lp14247
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp14248
Rp14249
(dp14250
g78
(tsg80
S'int64'
p14251
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp14252
g59
tp14253
Rp14254
(I1
(tg1286
I00
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p14255
tp14256
bsbtp14257
sg6397
(tsg0
(g563
g5
Ntp14258
Rp14259
(dp14260
g16
I0
sg53
Nsg798
g801
sg807
(lp14261
sg14
S'auto_14717'
p14262
sg17
g0
(g18
g5
Ntp14263
Rp14264
(dp14265
g22
(lp14266
g13094
asbsg85
g0
(g809
g5
Ntp14267
Rp14268
(dp14269
g552
(lp14270
g11125
ag13114
asg798
g801
sg814
(lp14271
g14259
asg17
g0
(g18
g5
Ntp14272
Rp14273
(dp14274
g4093
(lp14275
g13080
asg1268
(lp14276
g1271
asbsg1272
(dp14277
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp14278
Rp14279
(dp14280
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg0
(g843
g5
Ntp14281
Rp14282
(dp14283
g14
S'auto_15494'
p14284
sg16
Nsg17
g0
(g18
g5
Ntp14285
Rp14286
(dp14287
g22
(lp14288
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp14289
Rp14290
(dp14291
g78
(tsg80
S'int8'
p14292
sg82
g3031
sg83
I00
sg53
Nsbsg807
(lp14293
sg883
g56
(g57
(I0
tp14294
g59
tp14295
Rp14296
(I1
(tg3031
I00
g8160
tp14297
bsb(tsg0
(g563
g5
Ntp14298
Rp14299
(dp14300
g16
I0
sg53
Nsg798
g801
sg807
(lp14301
sg14
S'auto_15602'
p14302
sg17
g0
(g18
g5
Ntp14303
Rp14304
(dp14305
g22
(lp14306
sbsg85
g0
(g809
g5
Ntp14307
Rp14308
(dp14309
g552
(lp14310
g11125
asg798
g801
sg814
(lp14311
g14299
asg17
g0
(g18
g5
Ntp14312
Rp14313
(dp14314
g4093
(lp14315
g7962
asg1268
(lp14316
g13080
asbsg1272
(dp14317
sg1274
g13489
sbsg73
g0
(g74
g5
Ntp14318
Rp14319
(dp14320
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg1089
(g1173
g7934
tp14321
sg4134
(g9031
g9576
tp14322
sg12113
(g0
(g563
g5
Ntp14323
Rp14324
(dp14325
g14
S'auto_15130'
p14326
sg16
I0
sg17
g0
(g18
g5
Ntp14327
Rp14328
(dp14329
g22
(lp14330
sbsg53
Nsg85
g0
(g809
g5
Ntp14331
Rp14332
(dp14333
g552
(lp14334
g0
(g563
g5
Ntp14335
Rp14336
(dp14337
g14
S'auto_15125'
p14338
sg16
I0
sg17
g0
(g18
g5
Ntp14339
Rp14340
(dp14341
g22
(lp14342
sbsg53
Nsg85
g0
(g809
g5
Ntp14343
Rp14344
(dp14345
g552
(lp14346
g0
(g843
g5
Ntp14347
Rp14348
(dp14349
g14
S'auto_15121'
p14350
sg16
Nsg17
g0
(g18
g5
Ntp14351
Rp14352
(dp14353
g22
(lp14354
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp14355
Rp14356
(dp14357
g78
(tsg80
S'int8'
p14358
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp14359
g59
tp14360
Rp14361
(I1
(tg3031
I00
g3059
tp14362
bsbag0
(g563
g5
Ntp14363
Rp14364
(dp14365
g14
S'auto_15116'
p14366
sg16
I0
sg17
g0
(g18
g5
Ntp14367
Rp14368
(dp14369
g22
(lp14370
sbsg53
Nsg85
g0
(g809
g5
Ntp14371
Rp14372
(dp14373
g552
(lp14374
g0
(g563
g5
Ntp14375
Rp14376
(dp14377
g14
S'auto_15106'
p14378
sg16
I0
sg17
g0
(g18
g5
Ntp14379
Rp14380
(dp14381
g22
(lp14382
sbsg53
Nsg85
g0
(g809
g5
Ntp14383
Rp14384
(dp14385
g552
(lp14386
g7655
ag0
(g843
g5
Ntp14387
Rp14388
(dp14389
g14
S'auto_15102'
p14390
sg16
Nsg17
g0
(g18
g5
Ntp14391
Rp14392
(dp14393
g22
(lp14394
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp14395
Rp14396
(dp14397
g78
(tsg80
S'int8'
p14398
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp14399
g59
tp14400
Rp14401
(I1
(tg3031
I00
g3059
tp14402
bsbasg17
g0
(g18
g5
Ntp14403
Rp14404
sg814
(lp14405
g14376
asg1274
g10668
sbsg73
g0
(g74
g5
Ntp14406
Rp14407
(dp14408
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag7655
ag0
(g563
g5
Ntp14409
Rp14410
(dp14411
g14
S'auto_15111'
p14412
sg16
I0
sg17
g0
(g18
g5
Ntp14413
Rp14414
(dp14415
g22
(lp14416
sbsg53
Nsg85
g0
(g809
g5
Ntp14417
Rp14418
(dp14419
g552
(lp14420
g7655
ag0
(g843
g5
Ntp14421
Rp14422
(dp14423
g14
S'auto_15107'
p14424
sg16
Nsg17
g0
(g18
g5
Ntp14425
Rp14426
(dp14427
g22
(lp14428
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp14429
Rp14430
(dp14431
g78
(tsg80
S'int8'
p14432
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp14433
g59
tp14434
Rp14435
(I1
(tg3031
I00
g8160
tp14436
bsbasg17
g0
(g18
g5
Ntp14437
Rp14438
sg814
(lp14439
g14410
asg1274
g8881
sbsg73
g0
(g74
g5
Ntp14440
Rp14441
(dp14442
g78
(tsg80
g3096
sg82
g3031
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp14443
Rp14444
sg814
(lp14445
g14364
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp14446
Rp14447
(dp14448
g78
(tsg80
g3096
sg82
g3031
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp14449
Rp14450
sg814
(lp14451
g14336
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp14452
Rp14453
(dp14454
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp14455
Rp14456
(dp14457
g14
S'auto_15120'
p14458
sg16
I0
sg17
g0
(g18
g5
Ntp14459
Rp14460
(dp14461
g22
(lp14462
sbsg53
Nsg85
g0
(g809
g5
Ntp14463
Rp14464
(dp14465
g552
(lp14466
g10745
ag0
(g563
g5
Ntp14467
Rp14468
(dp14469
g14
S'auto_15101'
p14470
sg16
I0
sg17
g0
(g18
g5
Ntp14471
Rp14472
(dp14473
g22
(lp14474
sbsg53
Nsg85
g0
(g809
g5
Ntp14475
Rp14476
(dp14477
g552
(lp14478
g0
(g843
g5
Ntp14479
Rp14480
(dp14481
g14
S'auto_15097'
p14482
sg16
Nsg17
g0
(g18
g5
Ntp14483
Rp14484
(dp14485
g22
(lp14486
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp14487
Rp14488
(dp14489
g78
(tsg80
S'int64'
p14490
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp14491
g59
tp14492
Rp14493
(I1
(tg1286
I00
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p14494
tp14495
bsbag0
(g563
g5
Ntp14496
Rp14497
(dp14498
g14
S'auto_15096'
p14499
sg16
I0
sg17
g0
(g18
g5
Ntp14500
Rp14501
(dp14502
g22
(lp14503
sbsg53
Nsg85
g0
(g809
g5
Ntp14504
Rp14505
(dp14506
g552
(lp14507
g0
(g563
g5
Ntp14508
Rp14509
(dp14510
g14
S'auto_15089'
p14511
sg16
I0
sg17
g0
(g18
g5
Ntp14512
Rp14513
(dp14514
g22
(lp14515
sbsg53
Nsg85
g0
(g809
g5
Ntp14516
Rp14517
(dp14518
g552
(lp14519
g0
(g843
g5
Ntp14520
Rp14521
(dp14522
g14
S'auto_15084'
p14523
sg16
Nsg17
g0
(g18
g5
Ntp14524
Rp14525
(dp14526
g22
(lp14527
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp14528
Rp14529
(dp14530
g78
(tsg80
S'int64'
p14531
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp14532
g59
tp14533
Rp14534
(I1
(tg1286
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p14535
tp14536
bsbag0
(g843
g5
Ntp14537
Rp14538
(dp14539
g14
S'auto_15085'
p14540
sg16
Nsg17
g0
(g18
g5
Ntp14541
Rp14542
(dp14543
g22
(lp14544
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp14545
Rp14546
(dp14547
g78
(tsg80
S'int64'
p14548
sg82
g1286
sg83
I00
sg53
Nsbsg883
g14493
sbasg17
g0
(g18
g5
Ntp14549
Rp14550
sg814
(lp14551
g14509
asg1274
g10818
sbsg73
g0
(g74
g5
Ntp14552
Rp14553
(dp14554
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp14555
Rp14556
(dp14557
g14
S'auto_15090'
p14558
sg16
Nsg17
g0
(g18
g5
Ntp14559
Rp14560
(dp14561
g22
(lp14562
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp14563
Rp14564
(dp14565
g78
(tsg80
S'int64'
p14566
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp14567
g59
tp14568
Rp14569
(I1
(tg1286
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p14570
tp14571
bsbag0
(g843
g5
Ntp14572
Rp14573
(dp14574
g14
S'auto_15091'
p14575
sg16
Nsg17
g0
(g18
g5
Ntp14576
Rp14577
(dp14578
g22
(lp14579
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp14580
Rp14581
(dp14582
g78
(tsg80
S'int64'
p14583
sg82
g1286
sg83
I00
sg53
Nsbsg883
g14493
sbasg17
g0
(g18
g5
Ntp14584
Rp14585
sg814
(lp14586
g14497
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp14587
Rp14588
(dp14589
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp14590
Rp14591
sg814
(lp14592
g14468
asg1274
g4101
sbsg73
g0
(g74
g5
Ntp14593
Rp14594
(dp14595
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp14596
Rp14597
sg814
(lp14598
g14456
asg1274
g8881
sbsg73
g0
(g74
g5
Ntp14599
Rp14600
(dp14601
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag10745
asg17
g0
(g18
g5
Ntp14602
Rp14603
sg814
(lp14604
g14324
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp14605
Rp14606
(dp14607
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbtp14608
sg0
(g563
g5
Ntp14609
Rp14610
(dp14611
g16
I0
sg53
Nsg798
g801
sg807
(lp14612
sg14
S'auto_14781'
p14613
sg17
g0
(g18
g5
Ntp14614
Rp14615
(dp14616
g22
(lp14617
g3639
asbsg85
g0
(g809
g5
Ntp14618
Rp14619
(dp14620
g552
(lp14621
g817
asg798
g801
sg814
(lp14622
g14610
asg17
g0
(g18
g5
Ntp14623
Rp14624
(dp14625
g4093
(lp14626
g3663
asg1268
(lp14627
g1271
asbsg1272
(dp14628
sg1274
g0
(g1387
g5
Ntp14629
Rp14630
(dp14631
g1391
(lp14632
sg1393
(lp14633
I0
aI1
asg1395
(lp14634
I2
asg1397
g1398
sg1399
g5069
sg1401
(lp14635
g1403
asg1404
I01
sg1405
(I0
I1
g270
tp14636
sg1407
(dp14637
S'support_code_apply'
p14638
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14639
ssg1411
(dp14640
I0
(lp14641
I0
assg1414
(lp14642
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14643
asbsbsg73
g0
(g74
g5
Ntp14644
Rp14645
(dp14646
g78
(I00
I00
I01
tp14647
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g1173
g11995
g8744
tp14648
sg0
(g563
g5
Ntp14649
Rp14650
(dp14651
g16
I0
sg53
Nsg798
g801
sg807
(lp14652
sg14
S'auto_14837'
p14653
sg17
g0
(g18
g5
Ntp14654
Rp14655
(dp14656
g22
(lp14657
(lp14658
(g25
I306
g26
S'nade_train( * args[1:] )'
p14659
tp14660
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p14661
tp14662
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p14663
tp14664
a(g37
I36
g38
S'self.recompile()'
p14665
tp14666
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p14667
tp14668
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p14669
tp14670
a(g874
I232
g875
S'logdensity = (log_sum_exp(Phi + T.log(Alpha), axis=2) * output_mask).sum(1) * D / (D - d)'
p14671
tp14672
a(g4481
I53
g4482
S'return max_x + T.log(T.sum(T.exp(x - T.shape_padright(max_x, 1)), axis))'
p14673
tp14674
aasbsg85
g0
(g809
g5
Ntp14675
Rp14676
(dp14677
g552
(lp14678
g11887
asg798
g801
sg814
(lp14679
g14650
asg17
g0
(g18
g5
Ntp14680
Rp14681
(dp14682
g4093
(lp14683
g4178
asg1268
(lp14684
g1271
asbsg1272
(dp14685
sg1274
g6150
sbsg73
g0
(g74
g5
Ntp14686
Rp14687
(dp14688
g78
(I00
I00
tp14689
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g9031
g9576
tp14690
sg0
(g563
g5
Ntp14691
Rp14692
(dp14693
g16
I0
sg53
Nsg798
g801
sg807
(lp14694
sg14
S'auto_15911'
p14695
sg17
g0
(g18
g5
Ntp14696
Rp14697
(dp14698
g4058
g4059
sg22
(lp14699
sbsg85
g0
(g809
g5
Ntp14700
Rp14701
(dp14702
g552
(lp14703
g2827
ag5751
asg798
g801
sg814
(lp14704
g14692
asg17
g0
(g18
g5
Ntp14705
Rp14706
(dp14707
g4093
(lp14708
g5814
asg1268
(lp14709
g5770
asbsg1272
(dp14710
sg1274
g8881
sbsg73
g0
(g74
g5
Ntp14711
Rp14712
(dp14713
g78
(I00
I00
tp14714
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g1173
g10566
tp14715
sg1598
(g0
(g843
g5
Ntp14716
Rp14717
(dp14718
g14
S'auto_14930'
p14719
sg16
Nsg17
g0
(g18
g5
Ntp14720
Rp14721
(dp14722
g22
(lp14723
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp14724
Rp14725
(dp14726
g78
(tsg80
S'int64'
p14727
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp14728
g59
tp14729
Rp14730
(I1
(tg1286
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p14731
tp14732
bsbtp14733
sg0
(g843
g5
Ntp14734
Rp14735
(dp14736
g14
S'auto_15390'
p14737
sg16
Nsg17
g0
(g18
g5
Ntp14738
Rp14739
(dp14740
g22
(lp14741
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp14742
Rp14743
(dp14744
g78
(tsg80
g12947
sg82
g66
sg83
I00
sg53
Nsbsg807
(lp14745
sg883
g56
(g57
(I0
tp14746
g59
tp14747
Rp14748
(I1
(tg66
I00
S'\x00\x00\x00\x00\x00\x00(@'
p14749
tp14750
bsb(tsg817
(g1173
g11995
tp14751
sg3567
(g8744
g14148
g14166
tp14752
sg0
(g843
g5
Ntp14753
Rp14754
(dp14755
g14
S'auto_16037'
p14756
sg16
Nsg17
g0
(g18
g5
Ntp14757
Rp14758
(dp14759
g22
(lp14760
sg878
g879
(g66
S'\x00\x00\x00\x00\x00\x00\xf0?'
p14761
tp14762
Rp14763
sbsg53
Nsg73
g13970
sg807
(lp14764
sg883
g56
(g57
(I0
tp14765
g59
tp14766
Rp14767
(I1
(I1
I1
tp14768
g66
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p14769
tp14770
bsb(g8744
g8744
tp14771
sg13033
(tsg0
(g563
g5
Ntp14772
Rp14773
(dp14774
g16
I0
sg53
Nsg798
g801
sg807
(lp14775
sg14
S'auto_14687'
p14776
sg17
g0
(g18
g5
Ntp14777
Rp14778
(dp14779
g22
(lp14780
g10183
asbsg85
g0
(g809
g5
Ntp14781
Rp14782
(dp14783
g552
(lp14784
g826
ag3000
asg798
g801
sg814
(lp14785
g14773
asg17
g0
(g18
g5
Ntp14786
Rp14787
(dp14788
g4093
(lp14789
g2086
asg1268
(lp14790
g1271
asbsg1272
(dp14791
sg1274
g13244
sbsg73
g0
(g74
g5
Ntp14792
Rp14793
(dp14794
g78
(I00
I00
tp14795
sg80
S'float64'
p14796
sg82
g66
sg83
I00
sg53
Nsbsb(g7478
g10214
tp14797
sg0
(g563
g5
Ntp14798
Rp14799
(dp14800
g16
I0
sg53
Nsg798
g801
sg807
(lp14801
sg14
S'auto_15423'
p14802
sg17
g0
(g18
g5
Ntp14803
Rp14804
(dp14805
g22
(lp14806
sbsg85
g0
(g809
g5
Ntp14807
Rp14808
(dp14809
g552
(lp14810
g13337
ag9858
ag10006
asg798
g801
sg814
(lp14811
g14799
asg17
g0
(g18
g5
Ntp14812
Rp14813
(dp14814
g4093
(lp14815
g7962
asg1268
(lp14816
g4096
asbsg1272
(dp14817
sg1274
g8881
sbsg73
g0
(g74
g5
Ntp14818
Rp14819
(dp14820
g78
(I00
I00
I00
tp14821
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g9031
g9576
g9628
tp14822
sg0
(g563
g5
Ntp14823
Rp14824
(dp14825
g16
I0
sg53
Nsg798
g801
sg807
(lp14826
sg14
S'auto_15588'
p14827
sg17
g0
(g18
g5
Ntp14828
Rp14829
(dp14830
g22
(lp14831
sbsg85
g0
(g809
g5
Ntp14832
Rp14833
(dp14834
g552
(lp14835
g11125
asg798
g801
sg814
(lp14836
g14824
asg17
g0
(g18
g5
Ntp14837
Rp14838
(dp14839
g4093
(lp14840
g7962
asg1268
(lp14841
g13080
asbsg1272
(dp14842
sg1274
g13489
sbsg73
g0
(g74
g5
Ntp14843
Rp14844
(dp14845
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg0
(g563
g5
Ntp14846
Rp14847
(dp14848
g16
I0
sg53
Nsg798
g801
sg807
(lp14849
sg14
S'auto_15433'
p14850
sg17
g0
(g18
g5
Ntp14851
Rp14852
(dp14853
g22
(lp14854
sbsg85
g0
(g809
g5
Ntp14855
Rp14856
(dp14857
g552
(lp14858
g0
(g563
g5
Ntp14859
Rp14860
(dp14861
g16
I0
sg53
Nsg798
g801
sg807
(lp14862
sg14
S'auto_15430'
p14863
sg17
g0
(g18
g5
Ntp14864
Rp14865
(dp14866
g22
(lp14867
g13271
asbsg85
g0
(g809
g5
Ntp14868
Rp14869
(dp14870
g552
(lp14871
g0
(g843
g5
Ntp14872
Rp14873
(dp14874
g14
S'auto_14824'
p14875
sg16
Nsg17
g0
(g18
g5
Ntp14876
Rp14877
(dp14878
g22
(lp14879
(lp14880
(g25
I306
g26
S'nade_train( * args[1:] )'
p14881
tp14882
a(g29
I221
g30
S'nade = nade_class(n_visible, options.units, l, options.n_components, nonlinearity=options.nonlinearity)'
p14883
tp14884
a(g37
I36
g38
S'self.recompile()'
p14885
tp14886
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p14887
tp14888
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p14889
tp14890
a(g874
I231
g875
S'Phi = -constantX(0.5) * T.sqr((Mu - T.shape_padright(x)) / Sigma) - T.log(Sigma) - constantX(0.5 * np.log(2 * np.pi))  # BxDxC'
p14891
tp14892
a(g4481
I43
g7593
S'return theano.tensor.constant(np.asarray(value, dtype=floatX))'
p14893
tp14894
aasg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp14895
Rp14896
(dp14897
g78
(tsg80
g13293
sg82
g66
sg83
I00
sg53
Nsbsg807
(lp14898
sg883
g56
(g57
(I0
tp14899
g59
tp14900
Rp14901
(I1
(tg66
I00
S'\x00\x00\x00\x00\x00\x00\xe0?'
p14902
tp14903
bsbasg798
g801
sg814
(lp14904
g14860
asg17
g0
(g18
g5
Ntp14905
Rp14906
(dp14907
g4093
(lp14908
g8725
asg1268
(lp14909
g3663
ag1271
asbsg1272
(dp14910
sg1274
g0
(g1387
g5
Ntp14911
Rp14912
(dp14913
g1391
(lp14914
sg1393
(lp14915
sg1395
(lp14916
I0
aI1
aI2
asg1397
g1398
sg1399
(tsg1401
(lp14917
g1403
asg1404
I01
sg1405
(g270
g270
g270
tp14918
sg1407
(dp14919
S'support_code_apply'
p14920
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14921
ssg1411
(dp14922
I0
(lp14923
I0
assg1414
(lp14924
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14925
asbsbsg73
g13290
sbasg798
g801
sg814
(lp14926
g14847
asg17
g0
(g18
g5
Ntp14927
Rp14928
(dp14929
g4093
(lp14930
g11073
asg1268
(lp14931
g3663
asbsg1272
(dp14932
sg1274
g8125
sbsg73
g0
(g74
g5
Ntp14933
Rp14934
(dp14935
g78
(I01
I01
I01
tp14936
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g8744
g8744
g8744
tp14937
sg1214
(g1251
g1181
g1190
tp14938
sg1733
(g8744
g0
(g563
g5
Ntp14939
Rp14940
(dp14941
g14
S'auto_14846'
p14942
sg16
I0
sg17
g0
(g18
g5
Ntp14943
Rp14944
(dp14945
g22
(lp14946
sbsg53
Nsg85
g0
(g809
g5
Ntp14947
Rp14948
(dp14949
g552
(lp14950
g1762
asg17
g0
(g18
g5
Ntp14951
Rp14952
sg814
(lp14953
g14940
asg1274
g0
(g1275
g5
Ntp14954
Rp14955
(dp14956
g1279
I0
sbsbsg73
g1281
sbg0
(g563
g5
Ntp14957
Rp14958
(dp14959
g14
S'auto_14847'
p14960
sg16
I0
sg17
g0
(g18
g5
Ntp14961
Rp14962
(dp14963
g22
(lp14964
sbsg53
Nsg85
g0
(g809
g5
Ntp14965
Rp14966
(dp14967
g552
(lp14968
g1762
asg17
g0
(g18
g5
Ntp14969
Rp14970
sg814
(lp14971
g14958
asg1274
g0
(g1275
g5
Ntp14972
Rp14973
(dp14974
g1279
I1
sbsbsg73
g1281
sbtp14975
sg7725
(g0
(g843
g5
Ntp14976
Rp14977
(dp14978
g14
S'auto_15711'
p14979
sg16
Nsg17
g0
(g18
g5
Ntp14980
Rp14981
(dp14982
g22
(lp14983
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp14984
Rp14985
(dp14986
g78
(tsg80
S'int64'
p14987
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp14988
g59
tp14989
Rp14990
(I1
(tg1286
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p14991
tp14992
bsbtp14993
sg0
(g563
g5
Ntp14994
Rp14995
(dp14996
g16
I0
sg53
Nsg798
g801
sg807
(lp14997
sg14
S'auto_16048'
p14998
sg17
g0
(g18
g5
Ntp14999
Rp15000
(dp15001
g22
(lp15002
(lp15003
(g25
I306
g26
S'nade_train( * args[1:] )'
p15004
tp15005
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p15006
tp15007
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p15008
tp15009
a(g37
I36
g38
S'self.recompile()'
p15010
tp15011
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p15012
tp15013
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p15014
tp15015
a(g874
I232
g875
S'logdensity = (log_sum_exp(Phi + T.log(Alpha), axis=2) * output_mask).sum(1) * D / (D - d)'
p15016
tp15017
a(g4481
I53
g4482
S'return max_x + T.log(T.sum(T.exp(x - T.shape_padright(max_x, 1)), axis))'
p15018
tp15019
aasbsg85
g0
(g809
g5
Ntp15020
Rp15021
(dp15022
g552
(lp15023
g934
ag4134
ag13875
asg798
g801
sg814
(lp15024
g14995
asg17
g0
(g18
g5
Ntp15025
Rp15026
(dp15027
g4093
(lp15028
g5814
asg1268
(lp15029
g5814
asbsg1272
(dp15030
sg1274
g8881
sbsg73
g0
(g74
g5
Ntp15031
Rp15032
(dp15033
g78
(I00
I00
tp15034
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g9031
g9576
tp15035
sg0
(g563
g5
Ntp15036
Rp15037
(dp15038
g16
I0
sg53
Nsg798
g801
sg807
(lp15039
sg14
S'auto_14815'
p15040
sg17
g0
(g18
g5
Ntp15041
Rp15042
(dp15043
g22
(lp15044
g12996
asbsg85
g0
(g809
g5
Ntp15045
Rp15046
(dp15047
g552
(lp15048
g11125
ag13033
asg798
g801
sg814
(lp15049
g15037
asg17
g0
(g18
g5
Ntp15050
Rp15051
(dp15052
g4093
(lp15053
g13080
asg1268
(lp15054
g1271
asbsg1272
(dp15055
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp15056
Rp15057
(dp15058
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg7686
(g8744
tp15059
sg0
(g563
g5
Ntp15060
Rp15061
(dp15062
g16
I0
sg53
Nsg798
g801
sg807
(lp15063
sg14
S'auto_14699'
p15064
sg17
g0
(g18
g5
Ntp15065
Rp15066
(dp15067
g22
(lp15068
(lp15069
(g25
I306
g26
S'nade_train( * args[1:] )'
p15070
tp15071
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p15072
tp15073
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p15074
tp15075
a(g37
I36
g38
S'self.recompile()'
p15076
tp15077
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p15078
tp15079
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p15080
tp15081
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p15082
tp15083
aasbsg85
g0
(g809
g5
Ntp15084
Rp15085
(dp15086
g552
(lp15087
g11193
asg798
g801
sg814
(lp15088
g15061
asg17
g0
(g18
g5
Ntp15089
Rp15090
(dp15091
g4093
(lp15092
g1270
asg1268
(lp15093
g1271
asbsg1272
(dp15094
sg1274
g0
(g1387
g5
Ntp15095
Rp15096
(dp15097
g1391
(lp15098
sg1393
(lp15099
I0
aI1
asg1395
(lp15100
sg1397
g1398
sg1399
(I00
I00
tp15101
sg1401
(lp15102
g1403
asg1404
I01
sg1405
(I0
I1
tp15103
sg1407
(dp15104
S'support_code_apply'
p15105
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15106
ssg1411
(dp15107
I0
(lp15108
I0
assg1414
(lp15109
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15110
asbsbsg73
g0
(g74
g5
Ntp15111
Rp15112
(dp15113
g78
(I00
I00
tp15114
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g1173
g7934
tp15115
sg1557
(tsg3022
(g8744
g8744
tp15116
sg13926
(g8744
g8744
tp15117
sg0
(g563
g5
Ntp15118
Rp15119
(dp15120
g16
I0
sg53
Nsg798
g801
sg807
(lp15121
sg14
S'auto_14784'
p15122
sg17
g0
(g18
g5
Ntp15123
Rp15124
(dp15125
g22
(lp15126
g7523
asbsg85
g0
(g809
g5
Ntp15127
Rp15128
(dp15129
g552
(lp15130
g1214
asg798
g801
sg814
(lp15131
g15119
asg17
g0
(g18
g5
Ntp15132
Rp15133
(dp15134
g4093
(lp15135
g1270
asg1268
(lp15136
g1271
asbsg1272
(dp15137
sg1274
g12053
sbsg73
g12055
sb(g0
(g843
g5
Ntp15138
Rp15139
(dp15140
g14
S'auto_15239'
p15141
sg16
Nsg17
g0
(g18
g5
Ntp15142
Rp15143
(dp15144
g22
(lp15145
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp15146
Rp15147
(dp15148
g78
(tsg80
S'int64'
p15149
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp15150
g59
tp15151
Rp15152
(I1
(tg1286
I00
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p15153
tp15154
bsbtp15155
sg0
(g563
g5
Ntp15156
Rp15157
(dp15158
g16
I0
sg53
Nsg798
g801
sg807
(lp15159
sg14
S'auto_14805'
p15160
sg17
g0
(g18
g5
Ntp15161
Rp15162
(dp15163
g22
(lp15164
(lp15165
(g25
I306
g26
S'nade_train( * args[1:] )'
p15166
tp15167
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p15168
tp15169
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p15170
tp15171
a(g37
I36
g38
S'self.recompile()'
p15172
tp15173
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p15174
tp15175
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p15176
tp15177
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p15178
tp15179
aasbsg85
g0
(g809
g5
Ntp15180
Rp15181
(dp15182
g552
(lp15183
g11125
ag11933
asg798
g801
sg814
(lp15184
g15157
asg17
g0
(g18
g5
Ntp15185
Rp15186
(dp15187
g4093
(lp15188
g13080
asg1268
(lp15189
g1271
asbsg1272
(dp15190
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp15191
Rp15192
(dp15193
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg2298
(tsg7906
(g0
(g843
g5
Ntp15194
Rp15195
(dp15196
g14
S'auto_14976'
p15197
sg16
Nsg17
g0
(g18
g5
Ntp15198
Rp15199
(dp15200
g22
(lp15201
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp15202
Rp15203
(dp15204
g78
(tsg80
S'int64'
p15205
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp15206
g59
tp15207
Rp15208
(I1
(tg1286
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p15209
tp15210
bsbtp15211
sg0
(g563
g5
Ntp15212
Rp15213
(dp15214
g16
I0
sg53
Nsg798
g801
sg807
(lp15215
sg14
S'auto_15395'
p15216
sg17
g0
(g18
g5
Ntp15217
Rp15218
(dp15219
g22
(lp15220
sbsg85
g0
(g809
g5
Ntp15221
Rp15222
(dp15223
g552
(lp15224
g845
ag891
asg798
g801
sg814
(lp15225
g15213
asg17
g0
(g18
g5
Ntp15226
Rp15227
(dp15228
g4093
(lp15229
g5814
asg1268
(lp15230
g5660
asbsg1272
(dp15231
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp15232
Rp15233
(dp15234
g78
(I00
tp15235
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g9031
tp15236
sg805
(g11995
g1173
tp15237
sg6797
(g9031
g9576
g9628
tp15238
sg4968
(g7496
g7478
tp15239
sg0
(g563
g5
Ntp15240
Rp15241
(dp15242
g16
I0
sg53
Nsg798
g801
sg807
(lp15243
sg14
S'auto_14834'
p15244
sg17
g0
(g18
g5
Ntp15245
Rp15246
(dp15247
g22
(lp15248
(lp15249
(g25
I306
g26
S'nade_train( * args[1:] )'
p15250
tp15251
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p15252
tp15253
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p15254
tp15255
a(g37
I36
g38
S'self.recompile()'
p15256
tp15257
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p15258
tp15259
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p15260
tp15261
a(g874
I232
g875
S'logdensity = (log_sum_exp(Phi + T.log(Alpha), axis=2) * output_mask).sum(1) * D / (D - d)'
p15262
tp15263
a(g4481
I53
g4482
S'return max_x + T.log(T.sum(T.exp(x - T.shape_padright(max_x, 1)), axis))'
p15264
tp15265
aasbsg85
g0
(g809
g5
Ntp15266
Rp15267
(dp15268
g552
(lp15269
g9774
ag944
asg798
g801
sg814
(lp15270
g15241
asg17
g0
(g18
g5
Ntp15271
Rp15272
(dp15273
g4093
(lp15274
g4096
asg1268
(lp15275
g1271
asbsg1272
(dp15276
sg1274
g4101
sbsg73
g0
(g74
g5
Ntp15277
Rp15278
(dp15279
g78
(I00
I00
I00
tp15280
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g9031
g9576
g9628
tp15281
sg0
(g563
g5
Ntp15282
Rp15283
(dp15284
g16
I0
sg53
Nsg798
g801
sg807
(lp15285
sg14
S'auto_15507'
p15286
sg17
g0
(g18
g5
Ntp15287
Rp15288
(dp15289
g22
(lp15290
g12025
asbsg85
g0
(g809
g5
Ntp15291
Rp15292
(dp15293
g552
(lp15294
g2298
ag2280
ag1165
asg798
g801
sg814
(lp15295
g15283
asg17
g0
(g18
g5
Ntp15296
Rp15297
(dp15298
g4093
(lp15299
g7547
asg1268
(lp15300
g1270
asbsg1272
(dp15301
sg1274
g1549
sbsg73
g0
(g74
g5
Ntp15302
Rp15303
(dp15304
g78
(I00
tp15305
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(g0
(g843
g5
Ntp15306
Rp15307
(dp15308
g14
S'auto_15508'
p15309
sg16
Nsg17
g0
(g18
g5
Ntp15310
Rp15311
(dp15312
g22
(lp15313
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp15314
Rp15315
(dp15316
g78
(tsg80
S'int64'
p15317
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp15318
g59
tp15319
Rp15320
(I1
(tg1286
I00
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p15321
tp15322
bsbtp15323
sg0
(g563
g5
Ntp15324
Rp15325
(dp15326
g16
I0
sg53
Nsg798
g801
sg807
(lp15327
sg14
S'auto_14754'
p15328
sg17
g0
(g18
g5
Ntp15329
Rp15330
(dp15331
g22
(lp15332
(lp15333
(g25
I306
g26
S'nade_train( * args[1:] )'
p15334
tp15335
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p15336
tp15337
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p15338
tp15339
a(g37
I36
g38
S'self.recompile()'
p15340
tp15341
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p15342
tp15343
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p15344
tp15345
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p15346
tp15347
aasbsg85
g0
(g809
g5
Ntp15348
Rp15349
(dp15350
g552
(lp15351
g15283
ag11533
asg798
g801
sg814
(lp15352
g15325
asg17
g0
(g18
g5
Ntp15353
Rp15354
(dp15355
g4093
(lp15356
g7547
asg1268
(lp15357
g1271
asbsg1272
(dp15358
sg1274
g0
(g3357
g5
Ntp15359
Rp15360
(dp15361
g3361
(g1465
tp15362
sbsbsg73
g0
(g74
g5
Ntp15363
Rp15364
(dp15365
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg0
(g563
g5
Ntp15366
Rp15367
(dp15368
g16
I0
sg53
Nsg798
g801
sg807
(lp15369
sg14
S'auto_15497'
p15370
sg17
g0
(g18
g5
Ntp15371
Rp15372
(dp15373
g22
(lp15374
sbsg85
g0
(g809
g5
Ntp15375
Rp15376
(dp15377
g552
(lp15378
g11125
asg798
g801
sg814
(lp15379
g15367
asg17
g0
(g18
g5
Ntp15380
Rp15381
(dp15382
g4093
(lp15383
g7962
asg1268
(lp15384
g13080
asbsg1272
(dp15385
sg1274
g13489
sbsg73
g0
(g74
g5
Ntp15386
Rp15387
(dp15388
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg13759
(tsg0
(g563
g5
Ntp15389
Rp15390
(dp15391
g16
I0
sg53
Nsg798
g801
sg807
(lp15392
sg14
S'auto_14690'
p15393
sg17
g0
(g18
g5
Ntp15394
Rp15395
(dp15396
g22
(lp15397
g2913
asbsg85
g0
(g809
g5
Ntp15398
Rp15399
(dp15400
g552
(lp15401
g2933
ag2962
asg798
g801
sg814
(lp15402
g15390
asg17
g0
(g18
g5
Ntp15403
Rp15404
(dp15405
g4093
(lp15406
g2086
asg1268
(lp15407
g1271
asbsg1272
(dp15408
sg1274
g13244
sbsg73
g0
(g74
g5
Ntp15409
Rp15410
(dp15411
g78
(I00
I00
tp15412
sg80
S'float64'
p15413
sg82
g66
sg83
I00
sg53
Nsbsb(g1173
g10566
tp15414
sg0
(g563
g5
Ntp15415
Rp15416
(dp15417
g16
I0
sg53
Nsg798
g801
sg807
(lp15418
sg14
S'auto_14758'
p15419
sg17
g0
(g18
g5
Ntp15420
Rp15421
(dp15422
g22
(lp15423
(lp15424
(g25
I306
g26
S'nade_train( * args[1:] )'
p15425
tp15426
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p15427
tp15428
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p15429
tp15430
a(g37
I36
g38
S'self.recompile()'
p15431
tp15432
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p15433
tp15434
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p15435
tp15436
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p15437
tp15438
aasbsg85
g0
(g809
g5
Ntp15439
Rp15440
(dp15441
g552
(lp15442
g11125
ag0
(g563
g5
Ntp15443
Rp15444
(dp15445
g16
I0
sg53
Nsg798
g801
sg807
(lp15446
sg14
S'auto_14757'
p15447
sg17
g0
(g18
g5
Ntp15448
Rp15449
(dp15450
g22
(lp15451
(lp15452
(g25
I306
g26
S'nade_train( * args[1:] )'
p15453
tp15454
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p15455
tp15456
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p15457
tp15458
a(g37
I36
g38
S'self.recompile()'
p15459
tp15460
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p15461
tp15462
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p15463
tp15464
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p15465
tp15466
aasbsg85
g0
(g809
g5
Ntp15467
Rp15468
(dp15469
g552
(lp15470
g15283
ag10301
asg798
g801
sg814
(lp15471
g15444
asg17
g0
(g18
g5
Ntp15472
Rp15473
(dp15474
g4093
(lp15475
g7547
asg1268
(lp15476
g1271
asbsg1272
(dp15477
sg1274
g0
(g3357
g5
Ntp15478
Rp15479
(dp15480
g3361
(g1465
tp15481
sbsbsg73
g0
(g74
g5
Ntp15482
Rp15483
(dp15484
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp15485
g15416
asg17
g0
(g18
g5
Ntp15486
Rp15487
(dp15488
g4093
(lp15489
g5660
asg1268
(lp15490
g1271
asbsg1272
(dp15491
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp15492
Rp15493
(dp15494
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg0
(g563
g5
Ntp15495
Rp15496
(dp15497
g16
I0
sg53
Nsg798
g801
sg807
(lp15498
sg14
S'auto_14787'
p15499
sg17
g0
(g18
g5
Ntp15500
Rp15501
(dp15502
g22
(lp15503
g9088
asbsg85
g0
(g809
g5
Ntp15504
Rp15505
(dp15506
g552
(lp15507
g7515
ag11650
ag11677
asg798
g801
sg814
(lp15508
g15496
asg17
g0
(g18
g5
Ntp15509
Rp15510
(dp15511
g4093
(lp15512
g7547
asg1268
(lp15513
g1271
asbsg1272
(dp15514
sg1274
g0
(g3357
g5
Ntp15515
Rp15516
(dp15517
g3361
(g11876
(g1465
g1465
Ntp15518
Rp15519
tp15520
sbsbsg73
g0
(g74
g5
Ntp15521
Rp15522
(dp15523
g78
(I00
tp15524
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(g0
(g563
g5
Ntp15525
Rp15526
(dp15527
g14
S'auto_15257'
p15528
sg16
I0
sg17
g0
(g18
g5
Ntp15529
Rp15530
(dp15531
g22
(lp15532
sbsg53
Nsg85
g0
(g809
g5
Ntp15533
Rp15534
(dp15535
g552
(lp15536
g0
(g843
g5
Ntp15537
Rp15538
(dp15539
g14
S'auto_15253'
p15540
sg16
Nsg17
g0
(g18
g5
Ntp15541
Rp15542
(dp15543
g22
(lp15544
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp15545
Rp15546
(dp15547
g78
(tsg80
S'int64'
p15548
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp15549
g59
tp15550
Rp15551
(I1
(tg1286
I00
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p15552
tp15553
bsbag0
(g563
g5
Ntp15554
Rp15555
(dp15556
g14
S'auto_15252'
p15557
sg16
I0
sg17
g0
(g18
g5
Ntp15558
Rp15559
(dp15560
g22
(lp15561
sbsg53
Nsg85
g0
(g809
g5
Ntp15562
Rp15563
(dp15564
g552
(lp15565
g0
(g563
g5
Ntp15566
Rp15567
(dp15568
g14
S'auto_15245'
p15569
sg16
I0
sg17
g0
(g18
g5
Ntp15570
Rp15571
(dp15572
g22
(lp15573
sbsg53
Nsg85
g0
(g809
g5
Ntp15574
Rp15575
(dp15576
g552
(lp15577
g0
(g843
g5
Ntp15578
Rp15579
(dp15580
g14
S'auto_15240'
p15581
sg16
Nsg17
g0
(g18
g5
Ntp15582
Rp15583
(dp15584
g22
(lp15585
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp15586
Rp15587
(dp15588
g78
(tsg80
S'int64'
p15589
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp15590
g59
tp15591
Rp15592
(I1
(tg1286
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p15593
tp15594
bsbag0
(g843
g5
Ntp15595
Rp15596
(dp15597
g14
S'auto_15241'
p15598
sg16
Nsg17
g0
(g18
g5
Ntp15599
Rp15600
(dp15601
g22
(lp15602
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp15603
Rp15604
(dp15605
g78
(tsg80
S'int64'
p15606
sg82
g1286
sg83
I00
sg53
Nsbsg883
g15551
sbasg17
g0
(g18
g5
Ntp15607
Rp15608
sg814
(lp15609
g15567
asg1274
g10818
sbsg73
g0
(g74
g5
Ntp15610
Rp15611
(dp15612
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp15613
Rp15614
(dp15615
g14
S'auto_15246'
p15616
sg16
Nsg17
g0
(g18
g5
Ntp15617
Rp15618
(dp15619
g22
(lp15620
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp15621
Rp15622
(dp15623
g78
(tsg80
S'int64'
p15624
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp15625
g59
tp15626
Rp15627
(I1
(tg1286
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p15628
tp15629
bsbag0
(g843
g5
Ntp15630
Rp15631
(dp15632
g14
S'auto_15247'
p15633
sg16
Nsg17
g0
(g18
g5
Ntp15634
Rp15635
(dp15636
g22
(lp15637
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp15638
Rp15639
(dp15640
g78
(tsg80
S'int64'
p15641
sg82
g1286
sg83
I00
sg53
Nsbsg883
g15551
sbasg17
g0
(g18
g5
Ntp15642
Rp15643
sg814
(lp15644
g15555
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp15645
Rp15646
(dp15647
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp15648
Rp15649
sg814
(lp15650
g15526
asg1274
g4101
sbsg73
g0
(g74
g5
Ntp15651
Rp15652
(dp15653
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbtp15654
sg13016
(tsg0
(g563
g5
Ntp15655
Rp15656
(dp15657
g16
I0
sg53
Nsg798
g801
sg807
(lp15658
sg14
S'auto_15901'
p15659
sg17
g0
(g18
g5
Ntp15660
Rp15661
(dp15662
g22
(lp15663
sbsg85
g0
(g809
g5
Ntp15664
Rp15665
(dp15666
g552
(lp15667
g12822
asg798
g801
sg814
(lp15668
g15656
asg17
g0
(g18
g5
Ntp15669
Rp15670
(dp15671
g4093
(lp15672
g3663
asg1268
(lp15673
g5770
asbsg1272
(dp15674
sg1274
g13816
sbsg73
g0
(g74
g5
Ntp15675
Rp15676
(dp15677
g78
(tsg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(tsg3000
(g0
(g563
g5
Ntp15678
Rp15679
(dp15680
g14
S'auto_14876'
p15681
sg16
I0
sg17
g0
(g18
g5
Ntp15682
Rp15683
(dp15684
g22
(lp15685
sbsg53
Nsg85
g0
(g809
g5
Ntp15686
Rp15687
(dp15688
g552
(lp15689
g3000
asg17
g0
(g18
g5
Ntp15690
Rp15691
sg814
(lp15692
g15679
asg1274
g0
(g1275
g5
Ntp15693
Rp15694
(dp15695
g1279
I0
sbsbsg73
g1281
sbg10214
tp15696
sg6203
(tsg1181
(tsg11326
(g0
(g843
g5
Ntp15697
Rp15698
(dp15699
g14
S'auto_15613'
p15700
sg16
Nsg17
g0
(g18
g5
Ntp15701
Rp15702
(dp15703
g22
(lp15704
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp15705
Rp15706
(dp15707
g78
(tsg80
S'int64'
p15708
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp15709
g59
tp15710
Rp15711
(I1
(tg1286
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p15712
tp15713
bsbtp15714
sg1165
(tsg2856
(g11586
tp15715
sg13114
(tsg9080
(g0
(g843
g5
Ntp15716
Rp15717
(dp15718
g14
S'auto_15698'
p15719
sg16
Nsg17
g0
(g18
g5
Ntp15720
Rp15721
(dp15722
g22
(lp15723
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp15724
Rp15725
(dp15726
g78
(tsg80
S'int64'
p15727
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp15728
g59
tp15729
Rp15730
(I1
(tg1286
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p15731
tp15732
bsbtp15733
sg13875
(g9031
g9576
tp15734
sg975
(g12077
g12622
g12674
tp15735
sg3242
(g0
(g563
g5
Ntp15736
Rp15737
(dp15738
g14
S'auto_14872'
p15739
sg16
I0
sg17
g0
(g18
g5
Ntp15740
Rp15741
(dp15742
g22
(lp15743
sbsg53
Nsg85
g0
(g809
g5
Ntp15744
Rp15745
(dp15746
g552
(lp15747
g3242
asg17
g0
(g18
g5
Ntp15748
Rp15749
sg814
(lp15750
g15737
asg1274
g0
(g1275
g5
Ntp15751
Rp15752
(dp15753
g1279
I0
sbsbsg73
g1281
sbg13975
g7934
tp15754
sg944
(g9031
g9576
g8744
tp15755
sg0
(g563
g5
Ntp15756
Rp15757
(dp15758
g16
I0
sg53
Nsg798
g801
sg807
(lp15759
sg14
S'auto_14838'
p15760
sg17
g0
(g18
g5
Ntp15761
Rp15762
(dp15763
g22
(lp15764
g15003
asbsg85
g0
(g809
g5
Ntp15765
Rp15766
(dp15767
g552
(lp15768
g934
ag13862
asg798
g801
sg814
(lp15769
g15757
asg17
g0
(g18
g5
Ntp15770
Rp15771
(dp15772
g4093
(lp15773
g5814
asg1268
(lp15774
g1271
asbsg1272
(dp15775
sg1274
g8881
sbsg73
g0
(g74
g5
Ntp15776
Rp15777
(dp15778
g78
(I00
I00
tp15779
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g9031
g9576
tp15780
sg0
(g563
g5
Ntp15781
Rp15782
(dp15783
g16
I0
sg53
Nsg798
g801
sg807
(lp15784
sg14
S'auto_15469'
p15785
sg17
g0
(g18
g5
Ntp15786
Rp15787
(dp15788
g22
(lp15789
sbsg85
g0
(g809
g5
Ntp15790
Rp15791
(dp15792
g552
(lp15793
g11125
asg798
g801
sg814
(lp15794
g15782
asg17
g0
(g18
g5
Ntp15795
Rp15796
(dp15797
g4093
(lp15798
g7962
asg1268
(lp15799
g3663
asbsg1272
(dp15800
sg1274
g13489
sbsg73
g0
(g74
g5
Ntp15801
Rp15802
(dp15803
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg2322
(g0
(g843
g5
Ntp15804
Rp15805
(dp15806
g14
S'auto_15131'
p15807
sg16
Nsg17
g0
(g18
g5
Ntp15808
Rp15809
(dp15810
g22
(lp15811
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp15812
Rp15813
(dp15814
g78
(tsg80
S'int64'
p15815
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp15816
g59
tp15817
Rp15818
(I1
(tg1286
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p15819
tp15820
bsbtp15821
sg0
(g843
g5
Ntp15822
Rp15823
(dp15824
g14
S'auto_16020'
p15825
sg16
Nsg17
g0
(g18
g5
Ntp15826
Rp15827
(dp15828
g22
(lp15829
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp15830
Rp15831
(dp15832
g78
(tsg80
g251
sg82
g66
sg83
I00
sg53
Nsbsg807
(lp15833
sg883
g56
(g57
(I0
tp15834
g59
tp15835
Rp15836
(I1
(tg66
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p15837
tp15838
bsb(tsg0
(g563
g5
Ntp15839
Rp15840
(dp15841
g16
I0
sg53
Nsg798
g801
sg807
(lp15842
sg14
S'auto_14692'
p15843
sg17
g0
(g18
g5
Ntp15844
Rp15845
(dp15846
g22
(lp15847
(lp15848
(g25
I306
g26
S'nade_train( * args[1:] )'
p15849
tp15850
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p15851
tp15852
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p15853
tp15854
a(g37
I36
g38
S'self.recompile()'
p15855
tp15856
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p15857
tp15858
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p15859
tp15860
a(g874
I214
g875
S'h = self.nonlinearity(T.dot(masked_input, self.W1) + T.dot(mask, self.Wflags) + self.b1)  # BxH'
p15861
tp15862
aasbsg85
g0
(g809
g5
Ntp15863
Rp15864
(dp15865
g552
(lp15866
g10527
ag2827
asg798
g801
sg814
(lp15867
g15840
asg17
g0
(g18
g5
Ntp15868
Rp15869
(dp15870
g4093
(lp15871
g5770
asg1268
(lp15872
g1271
asbsg1272
(dp15873
sg1274
g8881
sbsg73
g0
(g74
g5
Ntp15874
Rp15875
(dp15876
g78
(I00
I00
tp15877
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g1173
g10566
tp15878
sg1687
(g1173
g8225
tp15879
sg2933
(g1173
g11995
tp15880
sg1205
(g1181
g1251
g1190
tp15881
sg0
(g563
g5
Ntp15882
Rp15883
(dp15884
g16
I0
sg53
Nsg798
g801
sg807
(lp15885
sg14
S'auto_15907'
p15886
sg17
g0
(g18
g5
Ntp15887
Rp15888
(dp15889
g22
(lp15890
sbsg85
g0
(g809
g5
Ntp15891
Rp15892
(dp15893
g552
(lp15894
g14754
ag2827
asg798
g801
sg814
(lp15895
g15883
asg17
g0
(g18
g5
Ntp15896
Rp15897
(dp15898
g4093
(lp15899
S'local_mul_specialize'
p15900
asg1268
(lp15901
g5770
asbsg1272
(dp15902
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp15903
Rp15904
(dp15905
g78
(I01
I00
tp15906
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g8744
g11586
tp15907
sg15444
(tsg11784
(tsg0
(g563
g5
Ntp15908
Rp15909
(dp15910
g16
I0
sg53
Nsg798
g801
sg807
(lp15911
sg14
S'auto_14693'
p15912
sg17
g0
(g18
g5
Ntp15913
Rp15914
(dp15915
g22
(lp15916
(lp15917
(g25
I306
g26
S'nade_train( * args[1:] )'
p15918
tp15919
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p15920
tp15921
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p15922
tp15923
a(g37
I36
g38
S'self.recompile()'
p15924
tp15925
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p15926
tp15927
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p15928
tp15929
a(g874
I214
g875
S'h = self.nonlinearity(T.dot(masked_input, self.W1) + T.dot(mask, self.Wflags) + self.b1)  # BxH'
p15930
tp15931
a(g41
I231
g272
S'"RLU": [lambda x: x * (x > 0), lambda x: x * (x > 0)],'
p15932
tp15933
aasbsg85
g0
(g809
g5
Ntp15934
Rp15935
(dp15936
g552
(lp15937
g14692
ag3022
asg798
g801
sg814
(lp15938
g15909
asg17
g0
(g18
g5
Ntp15939
Rp15940
(dp15941
g4093
(lp15942
g5814
asg1268
(lp15943
g1271
asbsg1272
(dp15944
sg1274
g11299
sbsg73
g0
(g74
g5
Ntp15945
Rp15946
(dp15947
g78
(I00
I00
tp15948
sg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsb(g1173
g10566
tp15949
sg0
(g563
g5
Ntp15950
Rp15951
(dp15952
g16
I0
sg53
Nsg798
g801
sg807
(lp15953
sg14
S'auto_15498'
p15954
sg17
g0
(g18
g5
Ntp15955
Rp15956
(dp15957
g22
(lp15958
sbsg85
g0
(g809
g5
Ntp15959
Rp15960
(dp15961
g552
(lp15962
g13610
asg798
g801
sg814
(lp15963
g15951
asg17
g0
(g18
g5
Ntp15964
Rp15965
(dp15966
g4093
(lp15967
g3663
asg1268
(lp15968
g13080
asbsg1272
(dp15969
sg1274
g0
(g1387
g5
Ntp15970
Rp15971
(dp15972
g1391
(lp15973
sg1393
(lp15974
sg1395
(lp15975
sg1397
g1398
sg1399
(tsg1401
(lp15976
g1403
asg1404
I01
sg1405
(tsg1407
(dp15977
S'support_code_apply'
p15978
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15979
ssg1411
(dp15980
I0
(lp15981
I0
assg1414
(lp15982
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15983
asbsbsg73
g0
(g74
g5
Ntp15984
Rp15985
(dp15986
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg1155
(g2280
g2298
g1165
tp15987
sg1590
(g1627
g1557
g1566
tp15988
sg10417
(g9031
g9576
g9628
tp15989
sg1797
(g7606
g8603
g8655
tp15990
sg984
(g8744
g8744
g8744
tp15991
sg0
(g563
g5
Ntp15992
Rp15993
(dp15994
g16
I0
sg53
Nsg798
g801
sg807
(lp15995
sg14
S'auto_16493'
p15996
sg17
g0
(g18
g5
Ntp15997
Rp15998
(dp15999
g22
(lp16000
sbsg85
g0
(g809
g5
Ntp16001
Rp16002
(dp16003
g552
(lp16004
g11223
ag3022
asg798
g801
sg814
(lp16005
g15993
asg17
g0
(g18
g5
Ntp16006
Rp16007
(dp16008
g4093
(lp16009
g5814
asg1268
(lp16010
g5814
asbsg1272
(dp16011
sg1274
g0
(g318
g5
Ntp16012
Rp16013
(dp16014
g53
Nsg322
g0
(g1948
g5
Ntp16015
Rp16016
(dp16017
g552
(lp16018
g0
(g1456
g5
Ntp16019
Rp16020
(dp16021
g14
S'auto_16482'
p16022
sg16
Nsg17
g0
(g18
g5
Ntp16023
Rp16024
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp16025
Rp16026
(dp16027
g14
S'auto_16483'
p16028
sg16
Nsg17
g0
(g18
g5
Ntp16029
Rp16030
(dp16031
g4821
g879
(g3031
g3059
tp16032
Rp16033
sbsg53
Nsg85
Nsg73
g3094
sbasg1965
I2
sg53
Nsg1966
(g1931
g3094
tp16034
sg814
(lp16035
g0
(g1456
g5
Ntp16036
Rp16037
(dp16038
g14
S'auto_16485'
p16039
sg16
I0
sg17
g0
(g18
g5
Ntp16040
Rp16041
(dp16042
g22
g3479
sbsg53
Nsg85
g0
(g809
g5
Ntp16043
Rp16044
(dp16045
g552
(lp16046
g16020
ag0
(g1456
g5
Ntp16047
Rp16048
(dp16049
g14
S'auto_16484'
p16050
sg16
I0
sg17
g0
(g18
g5
Ntp16051
Rp16052
(dp16053
g22
g3506
sbsg53
Nsg85
g0
(g809
g5
Ntp16054
Rp16055
(dp16056
g552
(lp16057
g16020
ag16026
asg17
g0
(g18
g5
Ntp16058
Rp16059
sg814
(lp16060
g16048
asg1274
g3174
sbsg73
g3178
sbasg17
g0
(g18
g5
Ntp16061
Rp16062
sg814
(lp16063
g16037
asg1274
g3184
sbsg73
g1931
sbasg1999
S'{\nnpy_bool V%(id)s_tmp1;\nV%(id)s_tmp1 = (%(i0)s > %(i1)s);\n%(o0)s = %(i0)s * V%(id)s_tmp1;\n}\n'
p16064
sg2001
(g1931
tp16065
sg2007
(lp16066
S'%(nodename)s_subnode0'
p16067
aS'%(nodename)s_subnode1'
p16068
asg2011
I1
sbsg330
(dp16069
sg332
Nsg333
g0
(g334
g5
Ntp16070
Rp16071
(dp16072
g338
Nsg339
(dp16073
sbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp16074
Rp16075
(dp16076
g78
(I00
I00
tp16077
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g1173
g7934
tp16078
sg0
(g563
g5
Ntp16079
Rp16080
(dp16081
g16
I0
sg53
Nsg798
g801
sg807
(lp16082
sg14
S'auto_14694'
p16083
sg17
g0
(g18
g5
Ntp16084
Rp16085
(dp16086
g22
(lp16087
(lp16088
(g25
I306
g26
S'nade_train( * args[1:] )'
p16089
tp16090
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p16091
tp16092
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p16093
tp16094
a(g37
I36
g38
S'self.recompile()'
p16095
tp16096
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p16097
tp16098
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p16099
tp16100
a(g874
I214
g875
S'h = self.nonlinearity(T.dot(masked_input, self.W1) + T.dot(mask, self.Wflags) + self.b1)  # BxH'
p16101
tp16102
a(g41
I231
g272
S'"RLU": [lambda x: x * (x > 0), lambda x: x * (x > 0)],'
p16103
tp16104
aasbsg85
g0
(g809
g5
Ntp16105
Rp16106
(dp16107
g552
(lp16108
g14692
ag15909
asg798
g801
sg814
(lp16109
g16080
asg17
g0
(g18
g5
Ntp16110
Rp16111
(dp16112
g4093
(lp16113
g5814
asg1268
(lp16114
g1271
asbsg1272
(dp16115
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp16116
Rp16117
(dp16118
g78
(I00
I00
tp16119
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g1173
g10566
tp16120
sg10090
(g7606
g8603
g8655
tp16121
sg0
(g563
g5
Ntp16122
Rp16123
(dp16124
g16
I0
sg53
Nsg798
g801
sg807
(lp16125
sg14
S'auto_15399'
p16126
sg17
g0
(g18
g5
Ntp16127
Rp16128
(dp16129
g4058
g4059
sg22
(lp16130
sbsg85
g0
(g809
g5
Ntp16131
Rp16132
(dp16133
g552
(lp16134
g15213
ag14022
asg798
g801
sg814
(lp16135
g16123
asg17
g0
(g18
g5
Ntp16136
Rp16137
(dp16138
g4093
(lp16139
g5814
asg1268
(lp16140
g5660
asbsg1272
(dp16141
sg1274
g8992
sbsg73
g0
(g74
g5
Ntp16142
Rp16143
(dp16144
g78
(I00
tp16145
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g9031
tp16146
sg1581
(g1557
g1627
g1566
tp16147
sg0
(g563
g5
Ntp16148
Rp16149
(dp16150
g16
I0
sg53
Nsg798
g801
sg807
(lp16151
sg14
S'auto_16513'
p16152
sg17
g0
(g18
g5
Ntp16153
Rp16154
(dp16155
g22
(lp16156
sbsg85
g0
(g809
g5
Ntp16157
Rp16158
(dp16159
g552
(lp16160
g14692
ag3022
asg798
g801
sg814
(lp16161
g16149
asg17
g0
(g18
g5
Ntp16162
Rp16163
(dp16164
g4093
(lp16165
g5814
asg1268
(lp16166
g5814
asbsg1272
(dp16167
sg1274
g0
(g318
g5
Ntp16168
Rp16169
(dp16170
g53
Nsg322
g0
(g1948
g5
Ntp16171
Rp16172
(dp16173
g552
(lp16174
g0
(g1456
g5
Ntp16175
Rp16176
(dp16177
g14
S'auto_16502'
p16178
sg16
Nsg17
g0
(g18
g5
Ntp16179
Rp16180
sg53
Nsg85
Nsg73
g1931
sbag0
(g1456
g5
Ntp16181
Rp16182
(dp16183
g14
S'auto_16503'
p16184
sg16
Nsg17
g0
(g18
g5
Ntp16185
Rp16186
(dp16187
g4821
g879
(g3031
g3059
tp16188
Rp16189
sbsg53
Nsg85
Nsg73
g3094
sbasg1965
I2
sg53
Nsg1966
(g1931
g3094
tp16190
sg814
(lp16191
g0
(g1456
g5
Ntp16192
Rp16193
(dp16194
g14
S'auto_16505'
p16195
sg16
I0
sg17
g0
(g18
g5
Ntp16196
Rp16197
(dp16198
g22
g3137
sbsg53
Nsg85
g0
(g809
g5
Ntp16199
Rp16200
(dp16201
g552
(lp16202
g16176
ag0
(g1456
g5
Ntp16203
Rp16204
(dp16205
g14
S'auto_16504'
p16206
sg16
I0
sg17
g0
(g18
g5
Ntp16207
Rp16208
(dp16209
g22
g3164
sbsg53
Nsg85
g0
(g809
g5
Ntp16210
Rp16211
(dp16212
g552
(lp16213
g16176
ag16182
asg17
g0
(g18
g5
Ntp16214
Rp16215
sg814
(lp16216
g16204
asg1274
g3174
sbsg73
g3178
sbasg17
g0
(g18
g5
Ntp16217
Rp16218
sg814
(lp16219
g16193
asg1274
g3184
sbsg73
g1931
sbasg1999
S'{\nnpy_bool V%(id)s_tmp1;\nV%(id)s_tmp1 = (%(i0)s > %(i1)s);\n%(o0)s = %(i0)s * V%(id)s_tmp1;\n}\n'
p16220
sg2001
(g1931
tp16221
sg2007
(lp16222
S'%(nodename)s_subnode0'
p16223
aS'%(nodename)s_subnode1'
p16224
asg2011
I1
sbsg330
(dp16225
sg332
Nsg333
g0
(g334
g5
Ntp16226
Rp16227
(dp16228
g338
Nsg339
(dp16229
sbsg341
I00
sbsbsg73
g0
(g74
g5
Ntp16230
Rp16231
(dp16232
g78
(I00
I00
tp16233
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g1173
g10566
tp16234
sg13350
(tsg0
(g563
g5
Ntp16235
Rp16236
(dp16237
g16
I0
sg53
Nsg798
g801
sg807
(lp16238
sg14
S'auto_15502'
p16239
sg17
g0
(g18
g5
Ntp16240
Rp16241
(dp16242
g22
(lp16243
(lp16244
(g25
I306
g26
S'nade_train( * args[1:] )'
p16245
tp16246
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p16247
tp16248
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p16249
tp16250
a(g37
I36
g38
S'self.recompile()'
p16251
tp16252
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p16253
tp16254
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p16255
tp16256
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p16257
tp16258
aasbsg85
g0
(g809
g5
Ntp16259
Rp16260
(dp16261
g552
(lp16262
g13016
ag0
(g563
g5
Ntp16263
Rp16264
(dp16265
g16
I0
sg53
Nsg798
g801
sg807
(lp16266
sg14
S'auto_14762'
p16267
sg17
g0
(g18
g5
Ntp16268
Rp16269
(dp16270
g4058
g4059
sg22
(lp16271
(lp16272
(g25
I306
g26
S'nade_train( * args[1:] )'
p16273
tp16274
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p16275
tp16276
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p16277
tp16278
a(g37
I36
g38
S'self.recompile()'
p16279
tp16280
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p16281
tp16282
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p16283
tp16284
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p16285
tp16286
aasbsg85
g0
(g809
g5
Ntp16287
Rp16288
(dp16289
g552
(lp16290
g15283
ag3252
asg798
g801
sg814
(lp16291
g16264
asg17
g0
(g18
g5
Ntp16292
Rp16293
(dp16294
g4093
(lp16295
g7547
asg1268
(lp16296
g1271
asbsg1272
(dp16297
sg1274
g0
(g3357
g5
Ntp16298
Rp16299
(dp16300
g3361
(g1465
tp16301
sbsbsg73
g0
(g74
g5
Ntp16302
Rp16303
(dp16304
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg798
g801
sg814
(lp16305
g16236
asg17
g0
(g18
g5
Ntp16306
Rp16307
(dp16308
g4093
(lp16309
g5660
asg1268
(lp16310
g13080
asbsg1272
(dp16311
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp16312
Rp16313
(dp16314
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg1762
(g14940
g14958
tp16315
sg1514
(g0
(g843
g5
Ntp16316
Rp16317
(dp16318
g14
S'auto_15756'
p16319
sg16
Nsg17
g0
(g18
g5
Ntp16320
Rp16321
(dp16322
g22
(lp16323
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp16324
Rp16325
(dp16326
g78
(tsg80
S'int64'
p16327
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp16328
g59
tp16329
Rp16330
(I1
(tg1286
I00
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p16331
tp16332
bsbtp16333
sg2981
(tsg0
(g563
g5
Ntp16334
Rp16335
(dp16336
g16
I0
sg53
Nsg798
g801
sg807
(lp16337
sg14
S'auto_14792'
p16338
sg17
g0
(g18
g5
Ntp16339
Rp16340
(dp16341
g22
(lp16342
g7694
asbsg85
g0
(g809
g5
Ntp16343
Rp16344
(dp16345
g552
(lp16346
g11326
ag3252
ag11650
asg798
g801
sg814
(lp16347
g16335
asg17
g0
(g18
g5
Ntp16348
Rp16349
(dp16350
g4093
(lp16351
g7547
asg1268
(lp16352
g1271
asbsg1272
(dp16353
sg1274
g0
(g3357
g5
Ntp16354
Rp16355
(dp16356
g3361
(g11876
(g1465
g1465
Ntp16357
Rp16358
tp16359
sbsbsg73
g0
(g74
g5
Ntp16360
Rp16361
(dp16362
g78
(I00
tp16363
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(g10745
tp16364
sg0
(g563
g5
Ntp16365
Rp16366
(dp16367
g16
I0
sg53
Nsg798
g801
sg807
(lp16368
sg14
S'auto_15465'
p16369
sg17
g0
(g18
g5
Ntp16370
Rp16371
(dp16372
g22
(lp16373
g15165
asbsg85
g0
(g809
g5
Ntp16374
Rp16375
(dp16376
g552
(lp16377
g13016
ag11933
asg798
g801
sg814
(lp16378
g16366
asg17
g0
(g18
g5
Ntp16379
Rp16380
(dp16381
g4093
(lp16382
g5660
asg1268
(lp16383
g13080
asbsg1272
(dp16384
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp16385
Rp16386
(dp16387
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg0
(g563
g5
Ntp16388
Rp16389
(dp16390
g16
I0
sg53
Nsg798
g801
sg807
(lp16391
sg14
S'auto_15593'
p16392
sg17
g0
(g18
g5
Ntp16393
Rp16394
(dp16395
g22
(lp16396
g14081
asbsg85
g0
(g809
g5
Ntp16397
Rp16398
(dp16399
g552
(lp16400
g13016
ag13704
asg798
g801
sg814
(lp16401
g16389
asg17
g0
(g18
g5
Ntp16402
Rp16403
(dp16404
g4093
(lp16405
g5660
asg1268
(lp16406
g13080
asbsg1272
(dp16407
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp16408
Rp16409
(dp16410
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg5642
(tsg0
(g563
g5
Ntp16411
Rp16412
(dp16413
g16
I1
sg53
g10360
sg798
g801
sg807
(lp16414
sg14
S'auto_15838'
p16415
sg17
g0
(g18
g5
Ntp16416
Rp16417
(dp16418
g22
(lp16419
sbsg85
g0
(g809
g5
Ntp16420
Rp16421
(dp16422
g552
(lp16423
g10430
asg798
g801
sg814
(lp16424
g0
(g563
g5
Ntp16425
Rp16426
(dp16427
g16
I0
sg53
g936
sg798
g801
sg807
(lp16428
sg14
S'auto_15837'
p16429
sg17
g0
(g18
g5
Ntp16430
Rp16431
(dp16432
g22
(lp16433
sbsg85
g16421
sg73
g0
(g74
g5
Ntp16434
Rp16435
(dp16436
g78
g4311
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag16412
asg17
g0
(g18
g5
Ntp16437
Rp16438
(dp16439
g4093
(lp16440
g4041
asg1268
(lp16441
g4178
asbsg1272
(dp16442
sg1274
g0
(g10394
g5
Ntp16443
Rp16444
(dp16445
g1903
(I2
tp16446
sbsbsg73
g0
(g74
g5
Ntp16447
Rp16448
(dp16449
g78
(I00
I00
tp16450
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(g9031
g9576
tp16451
sg6464
(g9031
g9576
g9628
tp16452
sg11223
(g1173
g7934
tp16453
sg0
(g563
g5
Ntp16454
Rp16455
(dp16456
g16
I0
sg53
Nsg798
g801
sg807
(lp16457
sg14
S'auto_14759'
p16458
sg17
g0
(g18
g5
Ntp16459
Rp16460
(dp16461
g22
(lp16462
(lp16463
(g25
I306
g26
S'nade_train( * args[1:] )'
p16464
tp16465
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p16466
tp16467
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p16468
tp16469
a(g37
I36
g38
S'self.recompile()'
p16470
tp16471
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p16472
tp16473
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p16474
tp16475
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p16476
tp16477
aasbsg85
g0
(g809
g5
Ntp16478
Rp16479
(dp16480
g552
(lp16481
g15416
ag15325
asg798
g801
sg814
(lp16482
g16455
asg17
g0
(g18
g5
Ntp16483
Rp16484
(dp16485
g4093
(lp16486
g5660
asg1268
(lp16487
g1271
asbsg1272
(dp16488
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp16489
Rp16490
(dp16491
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg10467
(g12077
g12622
g12674
tp16492
sg5796
(g1173
g10566
tp16493
sg14860
(g8744
g8744
g8744
tp16494
sg1251
(tsg0
(g563
g5
Ntp16495
Rp16496
(dp16497
g16
I0
sg53
Nsg798
g801
sg807
(lp16498
sg14
S'auto_15589'
p16499
sg17
g0
(g18
g5
Ntp16500
Rp16501
(dp16502
g22
(lp16503
sbsg85
g0
(g809
g5
Ntp16504
Rp16505
(dp16506
g552
(lp16507
g13610
asg798
g801
sg814
(lp16508
g16496
asg17
g0
(g18
g5
Ntp16509
Rp16510
(dp16511
g4093
(lp16512
g3663
asg1268
(lp16513
g13080
asbsg1272
(dp16514
sg1274
g0
(g1387
g5
Ntp16515
Rp16516
(dp16517
g1391
(lp16518
sg1393
(lp16519
sg1395
(lp16520
sg1397
g1398
sg1399
(tsg1401
(lp16521
g1403
asg1404
I01
sg1405
(tsg1407
(dp16522
S'support_code_apply'
p16523
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16524
ssg1411
(dp16525
I0
(lp16526
I0
assg1414
(lp16527
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16528
asbsbsg73
g0
(g74
g5
Ntp16529
Rp16530
(dp16531
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg1008
(g8744
g8744
g8744
tp16532
sg11262
(g1173
g7934
tp16533
sg0
(g563
g5
Ntp16534
Rp16535
(dp16536
g16
I0
sg53
Nsg798
g801
sg807
(lp16537
sg14
S'auto_15897'
p16538
sg17
g0
(g18
g5
Ntp16539
Rp16540
(dp16541
g22
(lp16542
sbsg85
g0
(g809
g5
Ntp16543
Rp16544
(dp16545
g552
(lp16546
g12970
asg798
g801
sg814
(lp16547
g16535
asg17
g0
(g18
g5
Ntp16548
Rp16549
(dp16550
g1451
g0
(g809
g5
Ntp16551
Rp16552
(dp16553
g552
(lp16554
g0
(g1456
g5
Ntp16555
Rp16556
(dp16557
g14
S'auto_16018'
p16558
sg16
Nsg17
g0
(g18
g5
Ntp16559
Rp16560
sg53
Nsg85
Nsg73
g13791
sbasg17
g0
(g18
g5
Ntp16561
Rp16562
sg814
(lp16563
g0
(g1456
g5
Ntp16564
Rp16565
(dp16566
g14
S'auto_16019'
p16567
sg16
I0
sg17
g0
(g18
g5
Ntp16568
Rp16569
sg53
Nsg85
g16552
sg73
g1931
sbasg1274
g13804
sbsg4093
(lp16570
g8725
asg1268
(lp16571
g5770
asbsg1272
(dp16572
sg1274
g13816
sbsg73
g15831
sb(tsg2280
(tsg0
(g563
g5
Ntp16573
Rp16574
(dp16575
g16
I0
sg53
Nsg798
g801
sg807
(lp16576
sg14
S'auto_14825'
p16577
sg17
g0
(g18
g5
Ntp16578
Rp16579
(dp16580
g22
(lp16581
(lp16582
(g25
I306
g26
S'nade_train( * args[1:] )'
p16583
tp16584
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p16585
tp16586
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p16587
tp16588
a(g37
I36
g38
S'self.recompile()'
p16589
tp16590
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p16591
tp16592
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p16593
tp16594
a(g874
I231
g875
S'Phi = -constantX(0.5) * T.sqr((Mu - T.shape_padright(x)) / Sigma) - T.log(Sigma) - constantX(0.5 * np.log(2 * np.pi))  # BxDxC'
p16595
tp16596
aasbsg85
g0
(g809
g5
Ntp16597
Rp16598
(dp16599
g552
(lp16600
g14873
asg798
g801
sg814
(lp16601
g16574
asg17
g0
(g18
g5
Ntp16602
Rp16603
(dp16604
g4093
(lp16605
g3663
asg1268
(lp16606
g1271
asbsg1272
(dp16607
sg1274
g8125
sbsg73
g0
(g74
g5
Ntp16608
Rp16609
(dp16610
g78
(tsg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(tsg2904
(g1173
g10566
tp16611
sg9067
(g0
(g563
g5
Ntp16612
Rp16613
(dp16614
g14
S'auto_15286'
p16615
sg16
I0
sg17
g0
(g18
g5
Ntp16616
Rp16617
(dp16618
g22
(lp16619
sbsg53
Nsg85
g0
(g809
g5
Ntp16620
Rp16621
(dp16622
g552
(lp16623
g0
(g563
g5
Ntp16624
Rp16625
(dp16626
g14
S'auto_15281'
p16627
sg16
I0
sg17
g0
(g18
g5
Ntp16628
Rp16629
(dp16630
g22
(lp16631
sbsg53
Nsg85
g0
(g809
g5
Ntp16632
Rp16633
(dp16634
g552
(lp16635
g0
(g843
g5
Ntp16636
Rp16637
(dp16638
g14
S'auto_15277'
p16639
sg16
Nsg17
g0
(g18
g5
Ntp16640
Rp16641
(dp16642
g22
(lp16643
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp16644
Rp16645
(dp16646
g78
(tsg80
S'int8'
p16647
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp16648
g59
tp16649
Rp16650
(I1
(tg3031
I00
g3059
tp16651
bsbag0
(g563
g5
Ntp16652
Rp16653
(dp16654
g14
S'auto_15272'
p16655
sg16
I0
sg17
g0
(g18
g5
Ntp16656
Rp16657
(dp16658
g22
(lp16659
sbsg53
Nsg85
g0
(g809
g5
Ntp16660
Rp16661
(dp16662
g552
(lp16663
g0
(g563
g5
Ntp16664
Rp16665
(dp16666
g14
S'auto_15262'
p16667
sg16
I0
sg17
g0
(g18
g5
Ntp16668
Rp16669
(dp16670
g22
(lp16671
sbsg53
Nsg85
g0
(g809
g5
Ntp16672
Rp16673
(dp16674
g552
(lp16675
g7655
ag0
(g843
g5
Ntp16676
Rp16677
(dp16678
g14
S'auto_15258'
p16679
sg16
Nsg17
g0
(g18
g5
Ntp16680
Rp16681
(dp16682
g22
(lp16683
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp16684
Rp16685
(dp16686
g78
(tsg80
S'int8'
p16687
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp16688
g59
tp16689
Rp16690
(I1
(tg3031
I00
g3059
tp16691
bsbasg17
g0
(g18
g5
Ntp16692
Rp16693
sg814
(lp16694
g16665
asg1274
g10668
sbsg73
g0
(g74
g5
Ntp16695
Rp16696
(dp16697
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag7655
ag0
(g563
g5
Ntp16698
Rp16699
(dp16700
g14
S'auto_15267'
p16701
sg16
I0
sg17
g0
(g18
g5
Ntp16702
Rp16703
(dp16704
g22
(lp16705
sbsg53
Nsg85
g0
(g809
g5
Ntp16706
Rp16707
(dp16708
g552
(lp16709
g7655
ag0
(g843
g5
Ntp16710
Rp16711
(dp16712
g14
S'auto_15263'
p16713
sg16
Nsg17
g0
(g18
g5
Ntp16714
Rp16715
(dp16716
g22
(lp16717
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp16718
Rp16719
(dp16720
g78
(tsg80
S'int8'
p16721
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp16722
g59
tp16723
Rp16724
(I1
(tg3031
I00
g8160
tp16725
bsbasg17
g0
(g18
g5
Ntp16726
Rp16727
sg814
(lp16728
g16699
asg1274
g8881
sbsg73
g0
(g74
g5
Ntp16729
Rp16730
(dp16731
g78
(tsg80
g3096
sg82
g3031
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp16732
Rp16733
sg814
(lp16734
g16653
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp16735
Rp16736
(dp16737
g78
(tsg80
g3096
sg82
g3031
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp16738
Rp16739
sg814
(lp16740
g16625
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp16741
Rp16742
(dp16743
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp16744
Rp16745
(dp16746
g14
S'auto_15276'
p16747
sg16
I0
sg17
g0
(g18
g5
Ntp16748
Rp16749
(dp16750
g22
(lp16751
sbsg53
Nsg85
g0
(g809
g5
Ntp16752
Rp16753
(dp16754
g552
(lp16755
g10745
ag15526
asg17
g0
(g18
g5
Ntp16756
Rp16757
sg814
(lp16758
g16745
asg1274
g8881
sbsg73
g0
(g74
g5
Ntp16759
Rp16760
(dp16761
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag10745
asg17
g0
(g18
g5
Ntp16762
Rp16763
sg814
(lp16764
g16613
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp16765
Rp16766
(dp16767
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbtp16768
sg10034
(g7606
g8603
g8655
tp16769
sg0
(g563
g5
Ntp16770
Rp16771
(dp16772
g16
I0
sg53
Nsg798
g801
sg807
(lp16773
sg14
S'auto_14839'
p16774
sg17
g0
(g18
g5
Ntp16775
Rp16776
(dp16777
g22
(lp16778
(lp16779
(g25
I306
g26
S'nade_train( * args[1:] )'
p16780
tp16781
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p16782
tp16783
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p16784
tp16785
a(g37
I36
g38
S'self.recompile()'
p16786
tp16787
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p16788
tp16789
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p16790
tp16791
a(g874
I232
g875
S'logdensity = (log_sum_exp(Phi + T.log(Alpha), axis=2) * output_mask).sum(1) * D / (D - d)'
p16792
tp16793
aasbsg85
g0
(g809
g5
Ntp16794
Rp16795
(dp16796
g552
(lp16797
g14995
ag10233
asg798
g801
sg814
(lp16798
g16771
asg17
g0
(g18
g5
Ntp16799
Rp16800
(dp16801
g4093
(lp16802
g5814
asg1268
(lp16803
g1271
asbsg1272
(dp16804
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp16805
Rp16806
(dp16807
g78
(I00
I00
tp16808
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g9031
g9576
tp16809
sg16264
(tsg11193
(g1173
g7934
tp16810
sg0
(g563
g5
Ntp16811
Rp16812
(dp16813
g16
I0
sg53
Nsg798
g801
sg807
(lp16814
sg14
S'auto_14817'
p16815
sg17
g0
(g18
g5
Ntp16816
Rp16817
(dp16818
g22
(lp16819
g11173
asbsg85
g0
(g809
g5
Ntp16820
Rp16821
(dp16822
g552
(lp16823
g15061
ag7906
asg798
g801
sg814
(lp16824
g16812
asg17
g0
(g18
g5
Ntp16825
Rp16826
(dp16827
g4093
(lp16828
g11370
asg1268
(lp16829
g1271
asbsg1272
(dp16830
sg1274
g0
(g1352
g5
Ntp16831
Rp16832
(dp16833
g1356
I2
sbsbsg73
g0
(g74
g5
Ntp16834
Rp16835
(dp16836
g78
(I00
I00
tp16837
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g7870
g11380
tp16838
sg11771
(g8744
tp16839
sg0
(g843
g5
Ntp16840
Rp16841
(dp16842
g14
S'auto_15585'
p16843
sg16
Nsg17
g0
(g18
g5
Ntp16844
Rp16845
(dp16846
g22
(lp16847
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp16848
Rp16849
(dp16850
g78
(tsg80
S'int8'
p16851
sg82
g3031
sg83
I00
sg53
Nsbsg807
(lp16852
sg883
g56
(g57
(I0
tp16853
g59
tp16854
Rp16855
(I1
(tg3031
I00
g8160
tp16856
bsb(tsg0
(g563
g5
Ntp16857
Rp16858
(dp16859
g16
I0
sg53
Nsg798
g801
sg807
(lp16860
sg14
S'auto_14826'
p16861
sg17
g0
(g18
g5
Ntp16862
Rp16863
(dp16864
g22
(lp16865
g13271
asbsg85
g0
(g809
g5
Ntp16866
Rp16867
(dp16868
g552
(lp16869
g16574
asg798
g801
sg814
(lp16870
g16858
asg17
g0
(g18
g5
Ntp16871
Rp16872
(dp16873
g4093
(lp16874
g3663
asg1268
(lp16875
g1271
asbsg1272
(dp16876
sg1274
g0
(g1387
g5
Ntp16877
Rp16878
(dp16879
g1391
(lp16880
sg1393
(lp16881
sg1395
(lp16882
I0
aI1
aI2
asg1397
g1398
sg1399
(tsg1401
(lp16883
g1403
asg1404
I01
sg1405
g14918
sg1407
(dp16884
S'support_code_apply'
p16885
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16886
ssg1411
(dp16887
I0
(lp16888
I0
assg1414
(lp16889
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16890
asbsbsg73
g0
(g74
g5
Ntp16891
Rp16892
(dp16893
g78
(I01
I01
I01
tp16894
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g8744
g8744
g8744
tp16895
sg7339
(g9031
g9576
g9628
tp16896
sg0
(g563
g5
Ntp16897
Rp16898
(dp16899
g16
I0
sg53
Nsg798
g801
sg807
(lp16900
sg14
S'auto_15906'
p16901
sg17
g0
(g18
g5
Ntp16902
Rp16903
(dp16904
g22
(lp16905
sbsg85
g0
(g809
g5
Ntp16906
Rp16907
(dp16908
g552
(lp16909
g15656
asg798
g801
sg814
(lp16910
g16898
asg17
g0
(g18
g5
Ntp16911
Rp16912
(dp16913
g4093
(lp16914
g3663
asg1268
(lp16915
g5770
asbsg1272
(dp16916
sg1274
g0
(g1387
g5
Ntp16917
Rp16918
(dp16919
g1391
(lp16920
sg1393
(lp16921
sg1395
(lp16922
I0
aI1
asg1397
g1398
sg1399
(tsg1401
(lp16923
g1403
asg1404
I01
sg1405
g12858
sg1407
(dp16924
S'support_code_apply'
p16925
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16926
ssg1411
(dp16927
I0
(lp16928
I0
assg1414
(lp16929
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16930
asbsbsg73
g0
(g74
g5
Ntp16931
Rp16932
(dp16933
g78
(I01
I01
tp16934
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsb(g8744
g8744
tp16935
sg0
(g563
g5
Ntp16936
Rp16937
(dp16938
g16
I0
sg53
Nsg798
g801
sg807
(lp16939
sg14
S'auto_14763'
p16940
sg17
g0
(g18
g5
Ntp16941
Rp16942
(dp16943
g22
(lp16944
g16244
asbsg85
g0
(g809
g5
Ntp16945
Rp16946
(dp16947
g552
(lp16948
g11125
ag16264
asg798
g801
sg814
(lp16949
g16937
asg17
g0
(g18
g5
Ntp16950
Rp16951
(dp16952
g4093
(lp16953
g13080
asg1268
(lp16954
g1271
asbsg1272
(dp16955
sg1274
g5036
sbsg73
g0
(g74
g5
Ntp16956
Rp16957
(dp16958
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(tsg0
(g563
g5
Ntp16959
Rp16960
(dp16961
g16
I0
sg53
Nsg798
g801
sg807
(lp16962
sg14
S'auto_14745'
p16963
sg17
g0
(g18
g5
Ntp16964
Rp16965
(dp16966
g22
(lp16967
g12134
asbsg85
g0
(g809
g5
Ntp16968
Rp16969
(dp16970
g552
(lp16971
g15283
ag11650
ag11677
asg798
g801
sg814
(lp16972
g16960
asg17
g0
(g18
g5
Ntp16973
Rp16974
(dp16975
g4093
(lp16976
g7547
asg1268
(lp16977
g1271
asbsg1272
(dp16978
sg1274
g0
(g3357
g5
Ntp16979
Rp16980
(dp16981
g3361
(g11876
(g1465
g1465
Ntp16982
Rp16983
tp16984
sbsbsg73
g0
(g74
g5
Ntp16985
Rp16986
(dp16987
g78
(I00
tp16988
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsb(g14468
tp16989
sg10430
(g9031
g9576
g9628
tp16990
sg14022
(g7478
tp16991
sg11533
(tsg0
(g563
g5
Ntp16992
Rp16993
(dp16994
g16
I0
sg53
Nsg798
g801
sg807
(lp16995
sg14
S'auto_14695'
p16996
sg17
g0
(g18
g5
Ntp16997
Rp16998
(dp16999
g22
(lp17000
g2793
asbsg85
g0
(g809
g5
Ntp17001
Rp17002
(dp17003
g552
(lp17004
g16080
ag3213
asg798
g801
sg814
(lp17005
g16993
asg17
g0
(g18
g5
Ntp17006
Rp17007
(dp17008
g4093
(lp17009
g2086
asg1268
(lp17010
g1271
asbsg1272
(dp17011
sg1274
g13244
sbsg73
g0
(g74
g5
Ntp17012
Rp17013
(dp17014
g78
(I00
I00
tp17015
sg80
S'float64'
p17016
sg82
g66
sg83
I00
sg53
Nsbsb(g1173
g7934
tp17017
sg14873
(tsg0
(g563
g5
Ntp17018
Rp17019
(dp17020
g16
I0
sg53
Nsg798
g801
sg807
(lp17021
sg14
S'auto_15422'
p17022
sg17
g0
(g18
g5
Ntp17023
Rp17024
(dp17025
g22
(lp17026
sbsg85
g0
(g809
g5
Ntp17027
Rp17028
(dp17029
g552
(lp17030
g13350
asg798
g801
sg814
(lp17031
g17019
asg17
g0
(g18
g5
Ntp17032
Rp17033
(dp17034
g4093
(lp17035
g7962
asg1268
(lp17036
g4096
asbsg1272
(dp17037
sg1274
g0
(g1387
g5
Ntp17038
Rp17039
(dp17040
g1391
(lp17041
sg1393
(lp17042
sg1395
(lp17043
I0
aI1
aI2
asg1397
g1398
sg1399
(tsg1401
(lp17044
g1403
asg1404
I01
sg1405
(g270
g270
g270
tp17045
sg1407
(dp17046
S'support_code_apply'
p17047
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p17048
ssg1411
(dp17049
I0
(lp17050
I0
assg1414
(lp17051
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p17052
asbsbsg73
g0
(g74
g5
Ntp17053
Rp17054
(dp17055
g78
(I01
I01
I01
tp17056
sg80
g13529
sg82
g66
sg83
I00
sg53
Nsbsb(g8744
g8744
g8744
tp17057
sg0
(g843
g5
Ntp17058
Rp17059
(dp17060
g14
S'auto_15599'
p17061
sg16
Nsg17
g0
(g18
g5
Ntp17062
Rp17063
(dp17064
g22
(lp17065
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp17066
Rp17067
(dp17068
g78
(tsg80
S'int8'
p17069
sg82
g3031
sg83
I00
sg53
Nsbsg807
(lp17070
sg883
g56
(g57
(I0
tp17071
g59
tp17072
Rp17073
(I1
(tg3031
I00
g8160
tp17074
bsb(tsg0
(g563
g5
Ntp17075
Rp17076
(dp17077
g16
I0
sg53
Nsg798
g801
sg807
(lp17078
sg14
S'auto_14700'
p17079
sg17
g0
(g18
g5
Ntp17080
Rp17081
(dp17082
g22
(lp17083
g11334
asbsg85
g0
(g809
g5
Ntp17084
Rp17085
(dp17086
g552
(lp17087
g15061
asg798
g801
sg814
(lp17088
g17076
asg17
g0
(g18
g5
Ntp17089
Rp17090
(dp17091
g4093
(lp17092
g1270
asg1268
(lp17093
g1271
asbsg1272
(dp17094
sg1274
g12053
sbsg73
g12055
sb(g0
(g843
g5
Ntp17095
Rp17096
(dp17097
g14
S'auto_14882'
p17098
sg16
Nsg17
g0
(g18
g5
Ntp17099
Rp17100
(dp17101
g22
(lp17102
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp17103
Rp17104
(dp17105
g78
(tsg80
S'int64'
p17106
sg82
g1286
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp17107
g59
tp17108
Rp17109
(I1
(tg1286
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p17110
tp17111
bsbtp17112
sg1097
(g0
(g563
g5
Ntp17113
Rp17114
(dp17115
g14
S'auto_15166'
p17116
sg16
I0
sg17
g0
(g18
g5
Ntp17117
Rp17118
(dp17119
g22
(lp17120
sbsg53
Nsg85
g0
(g809
g5
Ntp17121
Rp17122
(dp17123
g552
(lp17124
g0
(g563
g5
Ntp17125
Rp17126
(dp17127
g14
S'auto_15161'
p17128
sg16
I0
sg17
g0
(g18
g5
Ntp17129
Rp17130
(dp17131
g22
(lp17132
sbsg53
Nsg85
g0
(g809
g5
Ntp17133
Rp17134
(dp17135
g552
(lp17136
g12389
ag0
(g843
g5
Ntp17137
Rp17138
(dp17139
g14
S'auto_15157'
p17140
sg16
Nsg17
g0
(g18
g5
Ntp17141
Rp17142
(dp17143
g22
(lp17144
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp17145
Rp17146
(dp17147
g78
(tsg80
S'int8'
p17148
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp17149
g59
tp17150
Rp17151
(I1
(tg3031
I00
g7816
tp17152
bsbasg17
g0
(g18
g5
Ntp17153
Rp17154
sg814
(lp17155
g17126
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp17156
Rp17157
(dp17158
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag12323
ag12389
asg17
g0
(g18
g5
Ntp17159
Rp17160
sg814
(lp17161
g17114
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp17162
Rp17163
(dp17164
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbg12244
tp17165
sg11505
(tsg4125
(g9031
g9576
g9628
tp17166
sg2443
(g1173
g12244
tp17167
sg9830
(g9031
g9576
g9628
tp17168
sg10443
(g9031
g9576
g9628
tp17169
sg1319
(g0
(g563
g5
Ntp17170
Rp17171
(dp17172
g14
S'auto_15322'
p17173
sg16
I0
sg17
g0
(g18
g5
Ntp17174
Rp17175
(dp17176
g22
(lp17177
sbsg53
Nsg85
g0
(g809
g5
Ntp17178
Rp17179
(dp17180
g552
(lp17181
g0
(g563
g5
Ntp17182
Rp17183
(dp17184
g14
S'auto_15317'
p17185
sg16
I0
sg17
g0
(g18
g5
Ntp17186
Rp17187
(dp17188
g22
(lp17189
sbsg53
Nsg85
g0
(g809
g5
Ntp17190
Rp17191
(dp17192
g552
(lp17193
g9343
ag0
(g843
g5
Ntp17194
Rp17195
(dp17196
g14
S'auto_15313'
p17197
sg16
Nsg17
g0
(g18
g5
Ntp17198
Rp17199
(dp17200
g22
(lp17201
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp17202
Rp17203
(dp17204
g78
(tsg80
S'int8'
p17205
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp17206
g59
tp17207
Rp17208
(I1
(tg3031
I00
g7816
tp17209
bsbasg17
g0
(g18
g5
Ntp17210
Rp17211
sg814
(lp17212
g17183
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp17213
Rp17214
(dp17215
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag9277
ag9343
asg17
g0
(g18
g5
Ntp17216
Rp17217
sg814
(lp17218
g17171
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp17219
Rp17220
(dp17221
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbg9198
tp17222
sg2510
(g11706
g11724
tp17223
sg16426
(g9031
g9576
tp17224
sg10062
(g7606
g8603
g8655
tp17225
ssS'lscalar_one'
p17226
g8744
sS'shape_of_reverse_index'
p17227
(dp17228
g10430
g5108
((lp17229
tp17230
Rp17231
sg15823
g5108
((lp17232
tp17233
Rp17234
sg12789
g5108
((lp17235
g3279
ag3260
ag3270
atp17236
Rp17237
sg8907
g5108
((lp17238
tp17239
Rp17240
sg2298
g5108
((lp17241
g1126
ag1155
atp17242
Rp17243
sg10745
g5108
((lp17244
g16335
atp17245
Rp17246
sg9774
g5108
((lp17247
tp17248
Rp17249
sg1165
g5108
((lp17250
g1126
ag1155
atp17251
Rp17252
sg15737
g5108
((lp17253
g3242
atp17254
Rp17255
sg1190
g5108
((lp17256
g1205
ag1214
atp17257
Rp17258
sg16535
g5108
((lp17259
tp17260
Rp17261
sg14282
g5108
((lp17262
tp17263
Rp17264
sg14299
g5108
((lp17265
tp17266
Rp17267
sg11037
g5108
((lp17268
tp17269
Rp17270
sg14847
g5108
((lp17271
tp17272
Rp17273
sg15195
g5108
((lp17274
g7906
atp17275
Rp17276
sg15698
g5108
((lp17277
g11326
atp17278
Rp17279
sg12059
g5108
((lp17280
g12017
atp17281
Rp17282
sg14860
g5108
((lp17283
tp17284
Rp17285
sg1251
g5108
((lp17286
g1205
ag1214
atp17287
Rp17288
sg0
(g563
g5
Ntp17289
Rp17290
(dp17291
g14
S'auto_15569'
p17292
sg16
I0
sg17
g0
(g18
g5
Ntp17293
Rp17294
(dp17295
g22
(lp17296
sbsg53
Nsg85
g0
(g809
g5
Ntp17297
Rp17298
(dp17299
g552
(lp17300
g0
(g563
g5
Ntp17301
Rp17302
(dp17303
g14
S'auto_15564'
p17304
sg16
I0
sg17
g0
(g18
g5
Ntp17305
Rp17306
(dp17307
g22
(lp17308
sbsg53
Nsg85
g0
(g809
g5
Ntp17309
Rp17310
(dp17311
g552
(lp17312
g0
(g563
g5
Ntp17313
Rp17314
(dp17315
g14
S'auto_15533'
p17316
sg16
I0
sg17
g0
(g18
g5
Ntp17317
Rp17318
(dp17319
g22
(lp17320
sbsg53
Nsg85
g0
(g809
g5
Ntp17321
Rp17322
(dp17323
g552
(lp17324
g7906
ag0
(g3250
g5
Ntp17325
Rp17326
(dp17327
g14
S'auto_15532'
p17328
sg16
Nsg17
g0
(g18
g5
Ntp17329
Rp17330
(dp17331
g22
(lp17332
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p17333
tp17334
Rp17335
sbasg17
g0
(g18
g5
Ntp17336
Rp17337
sg814
(lp17338
g17314
asg1274
g0
(g3357
g5
Ntp17339
Rp17340
(dp17341
g3361
(g1465
tp17342
sbsbsg73
g0
(g74
g5
Ntp17343
Rp17344
(dp17345
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp17346
Rp17347
(dp17348
g14
S'auto_15560'
p17349
sg16
Nsg17
g0
(g18
g5
Ntp17350
Rp17351
(dp17352
g22
(lp17353
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp17354
Rp17355
(dp17356
g78
(tsg80
S'int8'
p17357
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp17358
g59
tp17359
Rp17360
(I1
(tg3031
I00
g7816
tp17361
bsbasg17
g0
(g18
g5
Ntp17362
Rp17363
sg814
(lp17364
g17302
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp17365
Rp17366
(dp17367
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp17368
Rp17369
(dp17370
g14
S'auto_15549'
p17371
sg16
I0
sg17
g0
(g18
g5
Ntp17372
Rp17373
(dp17374
g22
(lp17375
sbsg53
Nsg85
g0
(g809
g5
Ntp17376
Rp17377
(dp17378
g552
(lp17379
g0
(g563
g5
Ntp17380
Rp17381
(dp17382
g14
S'auto_15529'
p17383
sg16
I0
sg17
g0
(g18
g5
Ntp17384
Rp17385
(dp17386
g22
(lp17387
sbsg53
Nsg85
g0
(g809
g5
Ntp17388
Rp17389
(dp17390
g552
(lp17391
g1173
ag7934
asg17
g0
(g18
g5
Ntp17392
Rp17393
sg814
(lp17394
g17381
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp17395
Rp17396
(dp17397
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp17398
Rp17399
(dp17400
g14
S'auto_15545'
p17401
sg16
I0
sg17
g0
(g18
g5
Ntp17402
Rp17403
(dp17404
g22
(lp17405
sbsg53
Nsg85
g0
(g809
g5
Ntp17406
Rp17407
(dp17408
g552
(lp17409
g0
(g563
g5
Ntp17410
Rp17411
(dp17412
g14
S'auto_15540'
p17413
sg16
I0
sg17
g0
(g18
g5
Ntp17414
Rp17415
(dp17416
g22
(lp17417
sbsg53
Nsg85
g0
(g809
g5
Ntp17418
Rp17419
(dp17420
g552
(lp17421
g0
(g563
g5
Ntp17422
Rp17423
(dp17424
g14
S'auto_15537'
p17425
sg16
I0
sg17
g0
(g18
g5
Ntp17426
Rp17427
(dp17428
g22
(lp17429
sbsg53
Nsg85
g0
(g809
g5
Ntp17430
Rp17431
(dp17432
g552
(lp17433
g0
(g563
g5
Ntp17434
Rp17435
(dp17436
g14
S'auto_15531'
p17437
sg16
I0
sg17
g0
(g18
g5
Ntp17438
Rp17439
(dp17440
g22
(lp17441
sbsg53
Nsg85
g0
(g809
g5
Ntp17442
Rp17443
(dp17444
g552
(lp17445
g7906
ag0
(g3250
g5
Ntp17446
Rp17447
(dp17448
g14
S'auto_15530'
p17449
sg16
Nsg17
g0
(g18
g5
Ntp17450
Rp17451
(dp17452
g22
(lp17453
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p17454
tp17455
Rp17456
sbasg17
g0
(g18
g5
Ntp17457
Rp17458
sg814
(lp17459
g17435
asg1274
g0
(g3357
g5
Ntp17460
Rp17461
(dp17462
g3361
(g1465
tp17463
sbsbsg73
g0
(g74
g5
Ntp17464
Rp17465
(dp17466
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag17314
asg17
g0
(g18
g5
Ntp17467
Rp17468
sg814
(lp17469
g17423
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp17470
Rp17471
(dp17472
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp17473
Rp17474
sg814
(lp17475
g17411
asg1274
g8125
sbsg73
g0
(g74
g5
Ntp17476
Rp17477
(dp17478
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g843
g5
Ntp17479
Rp17480
(dp17481
g14
S'auto_15541'
p17482
sg16
Nsg17
g0
(g18
g5
Ntp17483
Rp17484
(dp17485
g22
(lp17486
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp17487
Rp17488
(dp17489
g78
(tsg80
S'int8'
p17490
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp17491
g59
tp17492
Rp17493
(I1
(tg3031
I00
g8160
tp17494
bsbasg17
g0
(g18
g5
Ntp17495
Rp17496
sg814
(lp17497
g17399
asg1274
g8166
sbsg73
g0
(g74
g5
Ntp17498
Rp17499
(dp17500
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp17501
Rp17502
sg814
(lp17503
g17369
asg1274
g8183
sbsg73
g0
(g74
g5
Ntp17504
Rp17505
(dp17506
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag17314
asg17
g0
(g18
g5
Ntp17507
Rp17508
sg814
(lp17509
g17290
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp17510
Rp17511
(dp17512
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbg5108
((lp17513
g11165
atp17514
Rp17515
sg11477
g5108
((lp17516
tp17517
Rp17518
sg13994
g5108
((lp17519
tp17520
Rp17521
sg7934
g5108
((lp17522
g1089
ag3242
ag11262
ag15061
ag11223
ag2784
ag11193
ag5910
ag15993
ag16993
ag3213
atp17523
Rp17524
sg7555
g5108
((lp17525
g7515
atp17526
Rp17527
sg15241
g5108
((lp17528
tp17529
Rp17530
sg1173
g5108
((lp17531
g1089
ag14610
ag1687
ag14692
ag16080
ag817
ag5751
ag1060
ag2904
ag16149
ag16993
ag11262
ag11223
ag15061
ag5796
ag15993
ag2933
ag805
ag7203
ag15390
ag11193
ag5910
ag2784
ag2890
ag10527
ag2813
ag15840
ag3630
ag2443
ag7158
ag15909
atp17532
Rp17533
sg7294
g5108
((lp17534
tp17535
Rp17536
sg14148
g5108
((lp17537
g3596
ag3567
atp17538
Rp17539
sg9628
g5108
((lp17540
g4125
ag9802
ag8818
ag9774
ag7294
ag4029
ag6693
ag10404
ag8762
ag8790
ag10417
ag4152
ag6464
ag10430
ag15241
ag10443
ag952
ag11434
ag9858
ag14799
ag1031
ag6797
ag9830
ag7339
ag8846
atp17541
Rp17542
sg7039
g5108
((lp17543
tp17544
Rp17545
sg17171
g5108
((lp17546
g1319
atp17547
Rp17548
sg14166
g5108
((lp17549
g3596
ag3567
atp17550
Rp17551
sg13913
g5108
((lp17552
tp17553
Rp17554
sg11586
g5108
((lp17555
g15883
ag5796
ag2827
ag2813
ag14692
ag2856
atp17556
Rp17557
sg11995
g5108
((lp17558
g805
ag14610
ag7158
ag817
ag2933
ag3630
ag7203
atp17559
Rp17560
sg11852
g5108
((lp17561
tp17562
Rp17563
sg11607
g5108
((lp17564
tp17565
Rp17566
sg17019
g5108
((lp17567
tp17568
Rp17569
sg13251
g5108
((lp17570
tp17571
Rp17572
sg11933
g5108
((lp17573
tp17574
Rp17575
sg10585
g5108
((lp17576
g7642
atp17577
Rp17578
sg15782
g5108
((lp17579
tp17580
Rp17581
sg7203
g5108
((lp17582
tp17583
Rp17584
sg15679
g5108
((lp17585
g3000
atp17586
Rp17587
sg15840
g5108
((lp17588
tp17589
Rp17590
sg14650
g5108
((lp17591
tp17592
Rp17593
sg14324
g5108
((lp17594
g12113
atp17595
Rp17596
sg15390
g5108
((lp17597
tp17598
Rp17599
sg15157
g5108
((lp17600
tp17601
Rp17602
sg6028
g5108
((lp17603
tp17604
Rp17605
sg12728
g5108
((lp17606
tp17607
Rp17608
sg16317
g5108
((lp17609
g1514
atp17610
Rp17611
sg5751
g5108
((lp17612
tp17613
Rp17614
sg10214
g5108
((lp17615
g10175
ag3000
ag14773
atp17616
Rp17617
sg12809
g5108
((lp17618
tp17619
Rp17620
sg15951
g5108
((lp17621
tp17622
Rp17623
sg13033
g5108
((lp17624
tp17625
Rp17626
sg9031
g5108
((lp17627
g14650
ag6894
ag4125
ag11743
ag9802
ag8818
ag8762
ag4762
ag15757
ag9774
ag8790
ag14799
ag16123
ag16771
ag13862
ag4161
ag10344
ag4029
ag10358
ag4143
ag891
ag15213
ag10417
ag10404
ag6464
ag944
ag934
ag6797
ag13875
ag10430
ag952
ag4134
ag920
ag15241
ag7339
ag7294
ag14995
ag10443
ag7039
ag11434
ag9858
ag6693
ag13994
ag1031
ag4152
ag11887
ag9830
ag16412
ag16426
ag8846
atp17628
Rp17629
sg8603
g5108
((lp17630
g1815
ag1806
ag1797
ag6260
ag10090
ag1725
ag10034
ag10006
ag10062
atp17631
Rp17632
sg12988
g5108
((lp17633
tp17634
Rp17635
sg13086
g5108
((lp17636
tp17637
Rp17638
sg16123
g5108
((lp17639
tp17640
Rp17641
sg9756
g5108
((lp17642
g9717
atp17643
Rp17644
sg14958
g5108
((lp17645
g1733
ag1762
atp17646
Rp17647
sg6693
g5108
((lp17648
tp17649
Rp17650
sg4029
g5108
((lp17651
tp17652
Rp17653
sg13337
g5108
((lp17654
tp17655
Rp17656
sg6894
g5108
((lp17657
tp17658
Rp17659
sg12113
g5108
((lp17660
tp17661
Rp17662
sg13444
g5108
((lp17663
tp17664
Rp17665
sg6115
g5108
((lp17666
tp17667
Rp17668
sg9682
g5108
((lp17669
tp17670
Rp17671
sg1557
g5108
((lp17672
g1590
ag1581
atp17673
Rp17674
sg12077
g5108
((lp17675
g2473
ag8907
ag8935
ag6115
ag975
ag10467
ag960
ag6028
atp17676
Rp17677
sg15307
g5108
((lp17678
g15283
atp17679
Rp17680
sg13597
g5108
((lp17681
tp17682
Rp17683
sg14977
g5108
((lp17684
g7725
atp17685
Rp17686
sg15757
g5108
((lp17687
tp17688
Rp17689
sg13519
g5108
((lp17690
tp17691
Rp17692
sg9067
g5108
((lp17693
tp17694
Rp17695
sg17096
g5108
((lp17696
g17076
atp17697
Rp17698
sg1627
g5108
((lp17699
g1590
ag1581
atp17700
Rp17701
sg15367
g5108
((lp17702
tp17703
Rp17704
sg13704
g5108
((lp17705
tp17706
Rp17707
sg13746
g5108
((lp17708
tp17709
Rp17710
sg14468
g5108
((lp17711
g16960
atp17712
Rp17713
sg10273
g5108
((lp17714
tp17715
Rp17716
sg9198
g5108
((lp17717
g1319
ag13223
ag1060
atp17718
Rp17719
sg14773
g5108
((lp17720
tp17721
Rp17722
sg7870
g5108
((lp17723
g13444
ag11165
ag16812
ag13223
ag13676
atp17724
Rp17725
sg12244
g5108
((lp17726
g13444
ag1097
ag2443
atp17727
Rp17728
sg10894
g5108
((lp17729
g11852
atp17730
Rp17731
sg14111
g5108
((lp17732
tp17733
Rp17734
sg7478
g5108
((lp17735
g10233
ag14022
ag14773
ag826
ag10175
ag836
ag4968
atp17736
Rp17737
sg12771
g5108
((lp17738
g3260
atp17739
Rp17740
sg14204
g5108
((lp17741
tp17742
Rp17743
sg14221
g5108
((lp17744
tp17745
Rp17746
sg10344
g5108
((lp17747
tp17748
Rp17749
sg14259
g5108
((lp17750
tp17751
Rp17752
sg8708
g5108
((lp17753
tp17754
Rp17755
sg14241
g5108
((lp17756
g14221
atp17757
Rp17758
sg14610
g5108
((lp17759
tp17760
Rp17761
sg11165
g5108
((lp17762
tp17763
Rp17764
sg14073
g5108
((lp17765
tp17766
Rp17767
sg7158
g5108
((lp17768
tp17769
Rp17770
sg14735
g5108
((lp17771
tp17772
Rp17773
sg5796
g5108
((lp17774
tp17775
Rp17776
sg12622
g5108
((lp17777
g2473
ag8907
ag8935
ag6115
ag975
ag10467
ag960
ag6028
atp17778
Rp17779
sg6203
g5108
((lp17780
tp17781
Rp17782
sg12909
g5108
((lp17783
tp17784
Rp17785
sg15526
g5108
((lp17786
g15496
atp17787
Rp17788
sg13676
g5108
((lp17789
tp17790
Rp17791
sg14824
g5108
((lp17792
tp17793
Rp17794
sg13610
g5108
((lp17795
tp17796
Rp17797
sg7642
g5108
((lp17798
tp17799
Rp17800
sg10404
g5108
((lp17801
tp17802
Rp17803
sg15037
g5108
((lp17804
tp17805
Rp17806
sg15496
g5108
((lp17807
tp17808
Rp17809
sg12950
g5108
((lp17810
g1222
atp17811
Rp17812
sg16264
g5108
((lp17813
tp17814
Rp17815
sg15119
g5108
((lp17816
tp17817
Rp17818
sg12017
g5108
((lp17819
tp17820
Rp17821
sg9576
g5108
((lp17822
g14650
ag6894
ag4125
ag6693
ag9802
ag8818
ag8762
ag15757
ag9774
ag920
ag8790
ag4029
ag14995
ag4161
ag16771
ag10358
ag4143
ag13862
ag10417
ag10404
ag6464
ag944
ag934
ag6797
ag13875
ag10430
ag16412
ag4134
ag15241
ag7339
ag7294
ag10443
ag952
ag11434
ag9858
ag14799
ag1031
ag4152
ag11887
ag9830
ag10344
ag16426
ag8846
atp17823
Rp17824
sg13537
g5108
((lp17825
tp17826
Rp17827
sg7906
g5108
((lp17828
tp17829
Rp17830
sg13391
g5108
((lp17831
g1678
atp17832
Rp17833
sg6797
g5108
((lp17834
tp17835
Rp17836
sg1566
g5108
((lp17837
g1590
ag1581
atp17838
Rp17839
sg15325
g5108
((lp17840
tp17841
Rp17842
sg0
(g563
g5
Ntp17843
Rp17844
(dp17845
g14
S'auto_15559'
p17846
sg16
I0
sg17
g0
(g18
g5
Ntp17847
Rp17848
(dp17849
g22
(lp17850
sbsg53
Nsg85
g0
(g809
g5
Ntp17851
Rp17852
(dp17853
g552
(lp17854
g0
(g563
g5
Ntp17855
Rp17856
(dp17857
g14
S'auto_15554'
p17858
sg16
I0
sg17
g0
(g18
g5
Ntp17859
Rp17860
(dp17861
g22
(lp17862
sbsg53
Nsg85
g0
(g809
g5
Ntp17863
Rp17864
(dp17865
g552
(lp17866
g17435
ag0
(g843
g5
Ntp17867
Rp17868
(dp17869
g14
S'auto_15550'
p17870
sg16
Nsg17
g0
(g18
g5
Ntp17871
Rp17872
(dp17873
g22
(lp17874
sg878
Nsbsg53
Nsg73
g0
(g74
g5
Ntp17875
Rp17876
(dp17877
g78
(tsg80
S'int8'
p17878
sg82
g3031
sg83
I00
sg53
Nsbsg883
g56
(g57
(I0
tp17879
g59
tp17880
Rp17881
(I1
(tg3031
I00
g7816
tp17882
bsbasg17
g0
(g18
g5
Ntp17883
Rp17884
sg814
(lp17885
g17856
asg1274
g7822
sbsg73
g0
(g74
g5
Ntp17886
Rp17887
(dp17888
g78
(tsg80
g3176
sg82
g7842
sg83
I00
sg53
Nsbsbag17369
ag17435
asg17
g0
(g18
g5
Ntp17889
Rp17890
sg814
(lp17891
g17844
asg1274
g8206
sbsg73
g0
(g74
g5
Ntp17892
Rp17893
(dp17894
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbg5108
((lp17895
g11165
atp17896
Rp17897
sg14799
g5108
((lp17898
tp17899
Rp17900
sg7606
g5108
((lp17901
g1815
ag1806
ag1797
ag6260
ag10090
ag1725
ag10034
ag10006
ag10062
atp17902
Rp17903
sg13975
g5108
((lp17904
g3242
ag3213
atp17905
Rp17906
sg14940
g5108
((lp17907
g1733
ag1762
atp17908
Rp17909
sg13223
g5108
((lp17910
tp17911
Rp17912
sg13114
g5108
((lp17913
tp17914
Rp17915
sg6464
g5108
((lp17916
tp17917
Rp17918
sg1181
g5108
((lp17919
g1205
ag1214
atp17920
Rp17921
sg15139
g5108
((lp17922
g15119
atp17923
Rp17924
sg13825
g5108
((lp17925
tp17926
Rp17927
sg2933
g5108
((lp17928
tp17929
Rp17930
sg11380
g5108
((lp17931
g16812
ag11165
atp17932
Rp17933
sg8744
g5108
((lp17934
g14610
ag14847
ag13337
ag9908
ag13913
ag3567
ag12909
ag1815
ag4539
ag3022
ag4143
ag1733
ag11037
ag845
ag13166
ag17019
ag14860
ag944
ag13264
ag3279
ag2827
ag11771
ag16858
ag1008
ag14754
ag7686
ag16898
ag12809
ag984
ag2481
ag13251
ag15883
ag13926
ag8708
ag3630
ag12872
atp17935
Rp17936
sg15444
g5108
((lp17937
tp17938
Rp17939
sg12872
g5108
((lp17940
tp17941
Rp17942
sg16613
g5108
((lp17943
g9067
atp17944
Rp17945
sg11193
g5108
((lp17946
tp17947
Rp17948
sg16080
g5108
((lp17949
tp17950
Rp17951
sg15717
g5108
((lp17952
g9080
atp17953
Rp17954
sg6397
g5108
((lp17955
tp17956
Rp17957
sg16149
g5108
((lp17958
tp17959
Rp17960
sg12674
g5108
((lp17961
g2473
ag8907
ag8935
ag6115
ag975
ag10467
ag960
ag6028
atp17962
Rp17963
sg16236
g5108
((lp17964
tp17965
Rp17966
sg16455
g5108
((lp17967
tp17968
Rp17969
sg16335
g5108
((lp17970
tp17971
Rp17972
sg16366
g5108
((lp17973
tp17974
Rp17975
sg16389
g5108
((lp17976
tp17977
Rp17978
sg5642
g5108
((lp17979
tp17980
Rp17981
sg7496
g5108
((lp17982
g10233
ag4968
ag826
atp17983
Rp17984
sg15805
g5108
((lp17985
g2322
atp17986
Rp17987
sg13576
g5108
((lp17988
g1695
atp17989
Rp17990
sg16841
g5108
((lp17991
tp17992
Rp17993
sg16496
g5108
((lp17994
tp17995
Rp17996
sg15993
g5108
((lp17997
tp17998
Rp17999
sg14185
g5108
((lp18000
g12126
atp18001
Rp18002
sg8655
g5108
((lp18003
g10006
ag1797
ag10090
ag10062
ag10034
ag1725
ag6260
atp18004
Rp18005
sg9699
g5108
((lp18006
g2435
atp18007
Rp18008
sg13469
g5108
((lp18009
tp18010
Rp18011
sg17114
g5108
((lp18012
g1097
atp18013
Rp18014
sg16771
g5108
((lp18015
tp18016
Rp18017
sg8225
g5108
((lp18018
g1687
ag1678
ag13676
atp18019
Rp18020
sg11706
g5108
((lp18021
g2481
ag2510
atp18022
Rp18023
sg16812
g5108
((lp18024
tp18025
Rp18026
sg11771
g5108
((lp18027
tp18028
Rp18029
sg16960
g5108
((lp18030
tp18031
Rp18032
sg16858
g5108
((lp18033
tp18034
Rp18035
sg7339
g5108
((lp18036
tp18037
Rp18038
sg16898
g5108
((lp18039
tp18040
Rp18041
sg16937
g5108
((lp18042
tp18043
Rp18044
sg14717
g5108
((lp18045
g1598
atp18046
Rp18047
sg11724
g5108
((lp18048
g2481
ag2510
atp18049
Rp18050
sg11975
g5108
((lp18051
g2962
atp18052
Rp18053
sg16993
g5108
((lp18054
tp18055
Rp18056
sg15883
g5108
((lp18057
tp18058
Rp18059
sg17059
g5108
((lp18060
tp18061
Rp18062
sg17076
g5108
((lp18063
tp18064
Rp18065
sg6260
g5108
((lp18066
tp18067
Rp18068
sg11505
g5108
((lp18069
tp18070
Rp18071
sg2280
g5108
((lp18072
g1126
ag1155
atp18073
Rp18074
sg10443
g5108
((lp18075
tp18076
Rp18077
sg5910
g5108
((lp18078
tp18079
Rp18080
sg16426
g5108
((lp18081
tp18082
Rp18083
sg10566
g5108
((lp18084
g2890
ag10527
ag14692
ag16080
ag15840
ag5751
ag2813
ag5796
ag2904
ag2962
ag16149
ag15390
ag15909
atp18085
Rp18086
sg10062
g5108
((lp18087
tp18088
Rp18089
ssbsS'apply_nodes'
p18090
g5108
((lp18091
g2294
ag1801
ag1810
ag3274
ag1160
ag1201
ag2477
ag840
ag2506
ag4138
ag2929
ag1151
ag2780
ag2308
ag3655
ag948
ag971
ag1186
ag3256
ag1562
ag2439
ag1682
ag1056
ag2267
ag811
ag3238
ag2823
ag4129
ag1691
ag1577
ag1420
ag2173
ag4033
ag2809
ag3592
ag1594
ag1209
ag2852
ag1085
ag2421
ag822
ag2285
ag4156
ag1585
ag1247
ag1637
ag956
ag1093
ag1729
ag1177
ag980
ag4147
ag2900
ag4964
ag1122
ag1218
ag831
ag930
ag1261
ag1758
ag1553
ag916
ag1169
ag1623
ag939
atp18092
Rp18093
sS'variables'
p18094
g5108
((lp18095
g4539
ag944
ag920
ag960
ag2784
ag2435
ag3630
ag891
ag1173
ag2473
ag1815
ag845
ag4134
ag1190
ag4125
ag1598
ag3567
ag1678
ag1214
ag2290
ag826
ag805
ag4968
ag1514
ag2962
ag3000
ag2856
ag3242
ag3260
ag1205
ag3596
ag1581
ag1155
ag2510
ag1650
ag1060
ag1762
ag1251
ag836
ag1725
ag984
ag2298
ag1806
ag4029
ag1733
ag1590
ag2981
ag2443
ag2481
ag4152
ag1126
ag975
ag2904
ag4161
ag1222
ag3252
ag3270
ag1557
ag1089
ag3279
ag952
ag1627
ag2813
ag4143
ag1566
ag3213
ag934
ag4762
ag2827
ag817
ag3022
ag2933
ag1165
ag2890
ag1181
ag1031
ag1695
ag1687
ag1797
ag1008
ag1290
ag2322
ag2280
ag1319
ag1097
atp18096
Rp18097
sS'_features'
p18098
(lp18099
g0
(ctheano.gof.toolbox
ReplaceValidate
p18100
g5
Ntp18101
Rp18102
(dp18103
g7406
I00
sS'_nodes_removed'
p18104
g5108
((lp18105
g10175
atp18106
Rp18107
sba(itheano.compile.function_module
Supervisor
p18108
(dp18109
S'protected'
p18110
(lp18111
g805
ag4968
ag2962
ag3000
ag2856
ag3242
ag3260
ag1205
ag3596
ag1155
ag2510
ag1581
ag1762
asbag0
(ctheano.gof.toolbox
PreserveVariableAttributes
p18112
g5
Ntp18113
Rp18114
ag5103
ag7472
ag5195
asbsg814
(lp18115
g0
(ctheano.compile.io
SymbolicOutput
p18116
g5
Ntp18117
Rp18118
(dp18119
g562
g0
(g563
g5
Ntp18120
Rp18121
(dp18122
g14
S'auto_14649'
p18123
sg16
I0
sg17
g0
(g18
g5
Ntp18124
Rp18125
(dp18126
g22
g14001
sbsg53
Nsg85
g0
(g809
g5
Ntp18127
Rp18128
(dp18129
g552
(lp18130
g0
(g563
g5
Ntp18131
Rp18132
(dp18133
g14
S'auto_14645'
p18134
sg16
I0
sg17
g0
(g18
g5
Ntp18135
Rp18136
(dp18137
g22
g11750
sbsg53
Nsg85
g0
(g809
g5
Ntp18138
Rp18139
(dp18140
g552
(lp18141
g0
(g563
g5
Ntp18142
Rp18143
(dp18144
g14
S'auto_14643'
p18145
sg16
I0
sg17
g0
(g18
g5
Ntp18146
Rp18147
(dp18148
g22
g899
sbsg53
Nsg85
g0
(g809
g5
Ntp18149
Rp18150
(dp18151
g552
(lp18152
g0
(g563
g5
Ntp18153
Rp18154
(dp18155
g14
S'auto_14642'
p18156
sg16
I0
sg17
g0
(g18
g5
Ntp18157
Rp18158
(dp18159
g22
g16778
sbsg53
Nsg85
g0
(g809
g5
Ntp18160
Rp18161
(dp18162
g552
(lp18163
g0
(g563
g5
Ntp18164
Rp18165
(dp18166
g14
S'auto_14639'
p18167
sg16
I0
sg17
g0
(g18
g5
Ntp18168
Rp18169
(dp18170
g22
g15764
sbsg53
Nsg85
g0
(g809
g5
Ntp18171
Rp18172
(dp18173
g552
(lp18174
g0
(g563
g5
Ntp18175
Rp18176
(dp18177
g14
S'auto_14632'
p18178
sg16
I0
sg17
g0
(g18
g5
Ntp18179
Rp18180
(dp18181
g22
g10351
sbsg53
g936
sg85
g0
(g809
g5
Ntp18182
Rp18183
(dp18184
g552
(lp18185
g0
(g563
g5
Ntp18186
Rp18187
(dp18188
g14
S'auto_14631'
p18189
sg16
I0
sg17
g0
(g18
g5
Ntp18190
Rp18191
(dp18192
g22
g9781
sbsg53
Nsg85
g0
(g809
g5
Ntp18193
Rp18194
(dp18195
g552
(lp18196
g0
(g563
g5
Ntp18197
Rp18198
(dp18199
g14
S'auto_14595'
p18200
sg16
I0
sg17
g0
(g18
g5
Ntp18201
Rp18202
(dp18203
g22
g9809
sbsg53
Nsg85
g0
(g809
g5
Ntp18204
Rp18205
(dp18206
g552
(lp18207
g0
(g563
g5
Ntp18208
Rp18209
(dp18210
g14
S'auto_14593'
p18211
sg16
I0
sg17
g0
(g18
g5
Ntp18212
Rp18213
(dp18214
g22
g9837
sbsg53
Nsg85
g0
(g809
g5
Ntp18215
Rp18216
(dp18217
g552
(lp18218
g0
(g563
g5
Ntp18219
Rp18220
(dp18221
g14
S'auto_14591'
p18222
sg16
I0
sg17
g0
(g18
g5
Ntp18223
Rp18224
(dp18225
g22
g9865
sbsg53
Nsg85
g0
(g809
g5
Ntp18226
Rp18227
(dp18228
g552
(lp18229
g0
(g563
g5
Ntp18230
Rp18231
(dp18232
g14
S'auto_14506'
p18233
sg16
I0
sg17
g0
(g18
g5
Ntp18234
Rp18235
(dp18236
g22
g16865
sbsg53
Nsg85
g0
(g809
g5
Ntp18237
Rp18238
(dp18239
g552
(lp18240
g0
(g563
g5
Ntp18241
Rp18242
(dp18243
g14
S'auto_14505'
p18244
sg16
I0
sg17
g0
(g18
g5
Ntp18245
Rp18246
(dp18247
g22
g16581
sbsg53
Nsg85
g0
(g809
g5
Ntp18248
Rp18249
(dp18250
g552
(lp18251
g0
(g843
g5
Ntp18252
Rp18253
(dp18254
g14
S'auto_303'
p18255
sg16
Nsg17
g0
(g18
g5
Ntp18256
Rp18257
(dp18258
g22
g14879
sg878
Nsbsg53
NsS'cached'
p18259
I01
sg73
g14896
sg883
g14901
sbasg17
g0
(g18
g5
Ntp18260
Rp18261
sg814
(lp18262
g18242
asg1274
g8125
sbsg73
g16609
sbasg17
g0
(g18
g5
Ntp18263
Rp18264
sg814
(lp18265
g18231
asg1274
g16878
sbsg73
g16892
sbag0
(g563
g5
Ntp18266
Rp18267
(dp18268
g14
S'auto_14590'
p18269
sg16
I0
sg17
g0
(g18
g5
Ntp18270
Rp18271
(dp18272
g22
g8769
sbsg53
Nsg85
g0
(g809
g5
Ntp18273
Rp18274
(dp18275
g552
(lp18276
g0
(g563
g5
Ntp18277
Rp18278
(dp18279
g14
S'auto_14589'
p18280
sg16
I0
sg17
g0
(g18
g5
Ntp18281
Rp18282
(dp18283
g22
g8797
sbsg53
Nsg85
g0
(g809
g5
Ntp18284
Rp18285
(dp18286
g552
(lp18287
g0
(g563
g5
Ntp18288
Rp18289
(dp18290
g14
S'auto_14557'
p18291
sg16
I0
sg17
g0
(g18
g5
Ntp18292
Rp18293
(dp18294
g22
g8825
sbsg53
Nsg85
g0
(g809
g5
Ntp18295
Rp18296
(dp18297
g552
(lp18298
g0
(g563
g5
Ntp18299
Rp18300
(dp18301
g14
S'auto_14555'
p18302
sg16
I0
sg17
g0
(g18
g5
Ntp18303
Rp18304
(dp18305
g22
g8853
sbsg53
Nsg85
g0
(g809
g5
Ntp18306
Rp18307
(dp18308
g552
(lp18309
g0
(g563
g5
Ntp18310
Rp18311
(dp18312
g14
S'auto_14553'
p18313
sg16
I0
sg17
g0
(g18
g5
Ntp18314
Rp18315
(dp18316
g22
g1039
sbsg53
Nsg85
g0
(g809
g5
Ntp18317
Rp18318
(dp18319
g552
(lp18320
g0
(g563
g5
Ntp18321
Rp18322
(dp18323
g14
S'auto_14547'
p18324
sg16
I0
sg17
g0
(g18
g5
Ntp18325
Rp18326
(dp18327
g22
g13230
sbsg53
Nsg85
g0
(g809
g5
Ntp18328
Rp18329
(dp18330
g552
(lp18331
g0
(g563
g5
Ntp18332
Rp18333
(dp18334
g14
S'auto_14534'
p18335
sg16
I0
sg17
g0
(g18
g5
Ntp18336
Rp18337
(dp18338
g22
g16819
sbsg53
Nsg85
g0
(g809
g5
Ntp18339
Rp18340
(dp18341
g552
(lp18342
g0
(g563
g5
Ntp18343
Rp18344
(dp18345
g14
S'auto_14526'
p18346
sg16
I0
sg17
g0
(g18
g5
Ntp18347
Rp18348
(dp18349
g22
(lp18350
(lp18351
(g25
I306
g26
S'nade_train( * args[1:] )'
p18352
tp18353
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p18354
tp18355
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p18356
tp18357
a(g37
I36
g38
S'self.recompile()'
p18358
tp18359
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p18360
tp18361
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p18362
tp18363
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p18364
tp18365
aasbsg53
Nsg85
g0
(g809
g5
Ntp18366
Rp18367
(dp18368
g552
(lp18369
g0
(g563
g5
Ntp18370
Rp18371
(dp18372
g14
S'auto_14525'
p18373
sg16
I0
sg17
g0
(g18
g5
Ntp18374
Rp18375
(dp18376
g22
g11200
sbsg53
Nsg85
g0
(g809
g5
Ntp18377
Rp18378
(dp18379
g552
(lp18380
g0
(g563
g5
Ntp18381
Rp18382
(dp18383
g14
S'auto_14522'
p18384
sg16
I0
sg17
g0
(g18
g5
Ntp18385
Rp18386
(dp18387
g22
g11230
sbsg53
Nsg85
g0
(g809
g5
Ntp18388
Rp18389
(dp18390
g552
(lp18391
g0
(g563
g5
Ntp18392
Rp18393
(dp18394
g14
S'auto_14519'
p18395
sg16
I0
sg17
g0
(g18
g5
Ntp18396
Rp18397
(dp18398
g22
g17000
sbsg53
Nsg85
g0
(g809
g5
Ntp18399
Rp18400
(dp18401
g552
(lp18402
g0
(g563
g5
Ntp18403
Rp18404
(dp18405
g14
S'auto_14517'
p18406
sg16
I0
sg17
g0
(g18
g5
Ntp18407
Rp18408
(dp18409
g22
g16087
sbsg53
Nsg85
g0
(g809
g5
Ntp18410
Rp18411
(dp18412
g552
(lp18413
g0
(g563
g5
Ntp18414
Rp18415
(dp18416
g14
S'auto_14514'
p18417
sg16
I0
sg17
g0
(g18
g5
Ntp18418
Rp18419
(dp18420
g22
g15847
sbsg53
Nsg85
g0
(g809
g5
Ntp18421
Rp18422
(dp18423
g552
(lp18424
g0
(g563
g5
Ntp18425
Rp18426
(dp18427
g14
S'auto_14512'
p18428
sg16
I0
sg17
g0
(g18
g5
Ntp18429
Rp18430
(dp18431
g22
g10534
sbsg53
Nsg85
g0
(g809
g5
Ntp18432
Rp18433
(dp18434
g552
(lp18435
g0
(g563
g5
Ntp18436
Rp18437
(dp18438
g14
S'auto_14510'
p18439
sg16
I0
sg17
g0
(g18
g5
Ntp18440
Rp18441
(dp18442
g22
g15397
sbsg53
Nsg85
g0
(g809
g5
Ntp18443
Rp18444
(dp18445
g552
(lp18446
g0
(g563
g5
Ntp18447
Rp18448
(dp18449
g14
S'auto_14509'
p18450
sg16
I0
sg17
g0
(g18
g5
Ntp18451
Rp18452
(dp18453
g22
g2941
sbsg53
Nsg85
g0
(g809
g5
Ntp18454
Rp18455
(dp18456
g552
(lp18457
g0
(g563
g5
Ntp18458
Rp18459
(dp18460
g14
S'auto_14507'
p18461
sg16
I0
sg17
g0
(g18
g5
Ntp18462
Rp18463
(dp18464
g22
g5050
sbsg53
g819
sg85
g0
(g809
g5
Ntp18465
Rp18466
(dp18467
g552
(lp18468
g565
asg17
g0
(g18
g5
Ntp18469
Rp18470
sg814
(lp18471
g18459
asg1274
g5076
sbsg73
g5067
sbag0
(g563
g5
Ntp18472
Rp18473
(dp18474
g14
S'auto_14508'
p18475
sg16
I0
sg17
g0
(g18
g5
Ntp18476
Rp18477
(dp18478
g22
g4947
sbsg53
g828
sg85
g0
(g809
g5
Ntp18479
Rp18480
(dp18481
g552
(lp18482
g595
asg17
g0
(g18
g5
Ntp18483
Rp18484
sg814
(lp18485
g18473
asg1274
g4983
sbsg73
g4998
sbasg17
g0
(g18
g5
Ntp18486
Rp18487
sg814
(lp18488
g18448
asg1274
g5036
sbsg73
g2958
sbag636
asg17
g0
(g18
g5
Ntp18489
Rp18490
sg814
(lp18491
g18437
asg1274
g13244
sbsg73
g15410
sbag0
(g563
g5
Ntp18492
Rp18493
(dp18494
g14
S'auto_14511'
p18495
sg16
I0
sg17
g0
(g18
g5
Ntp18496
Rp18497
(dp18498
g22
g14780
sbsg53
Nsg85
g0
(g809
g5
Ntp18499
Rp18500
(dp18501
g552
(lp18502
g18473
ag474
asg17
g0
(g18
g5
Ntp18503
Rp18504
sg814
(lp18505
g18493
asg1274
g13244
sbsg73
g14793
sbasg17
g0
(g18
g5
Ntp18506
Rp18507
sg814
(lp18508
g18426
asg1274
g8881
sbsg73
g10562
sbag0
(g563
g5
Ntp18509
Rp18510
(dp18511
g14
S'auto_14513'
p18512
sg16
I0
sg17
g0
(g18
g5
Ntp18513
Rp18514
(dp18515
g22
g2835
sbsg53
Nsg85
g0
(g809
g5
Ntp18516
Rp18517
(dp18518
g552
(lp18519
g127
asg17
g0
(g18
g5
Ntp18520
Rp18521
sg814
(lp18522
g18510
asg1274
g2871
sbsg73
g2886
sbasg17
g0
(g18
g5
Ntp18523
Rp18524
sg814
(lp18525
g18415
asg1274
g8881
sbsg73
g15875
sbag0
(g563
g5
Ntp18526
Rp18527
(dp18528
g14
S'auto_14516'
p18529
sg16
I0
sg17
g0
(g18
g5
Ntp18530
Rp18531
(dp18532
g22
g15916
sbsg53
Nsg85
g0
(g809
g5
Ntp18533
Rp18534
(dp18535
g552
(lp18536
g18415
ag0
(g563
g5
Ntp18537
Rp18538
(dp18539
g14
S'auto_14515'
p18540
sg16
I0
sg17
g0
(g18
g5
Ntp18541
Rp18542
(dp18543
g22
(lp18544
(lp18545
(g25
I306
g26
S'nade_train( * args[1:] )'
p18546
tp18547
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p18548
tp18549
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p18550
tp18551
a(g37
I36
g38
S'self.recompile()'
p18552
tp18553
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p18554
tp18555
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p18556
tp18557
a(g874
I214
g875
S'h = self.nonlinearity(T.dot(masked_input, self.W1) + T.dot(mask, self.Wflags) + self.b1)  # BxH'
p18558
tp18559
a(g41
I231
g272
S'"RLU": [lambda x: x * (x > 0), lambda x: x * (x > 0)],'
p18560
tp18561
aasbsg53
Nsg85
g0
(g809
g5
Ntp18562
Rp18563
(dp18564
g552
(lp18565
g0
(g843
g5
Ntp18566
Rp18567
(dp18568
g14
S'auto_46'
p18569
sg16
Nsg17
g0
(g18
g5
Ntp18570
Rp18571
(dp18572
g22
g7661
sg878
Nsbsg53
Nsg18259
I01
sg73
g7678
sg883
g7683
sbasg17
g0
(g18
g5
Ntp18573
Rp18574
sg814
(lp18575
g18538
asg1274
g0
(g1387
g5
Ntp18576
Rp18577
(dp18578
g1391
(lp18579
sg1393
(lp18580
sg1395
(lp18581
I0
aI1
asg1397
g1398
sg1399
(tsg1401
(lp18582
g1403
asg1404
I01
sg1405
(g270
g270
tp18583
sg1407
(dp18584
S'support_code_apply'
p18585
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p18586
ssg1411
(dp18587
I0
(lp18588
I0
assg1414
(lp18589
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p18590
asbsbsg73
g0
(g74
g5
Ntp18591
Rp18592
(dp18593
g78
(I01
I01
tp18594
sg80
g3028
sg82
g3031
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp18595
Rp18596
sg814
(lp18597
g18527
asg1274
g11299
sbsg73
g15946
sbasg17
g0
(g18
g5
Ntp18598
Rp18599
sg814
(lp18600
g18404
asg1274
g5036
sbsg73
g16117
sbag0
(g563
g5
Ntp18601
Rp18602
(dp18603
g14
S'auto_14518'
p18604
sg16
I0
sg17
g0
(g18
g5
Ntp18605
Rp18606
(dp18607
g22
g3221
sbsg53
Nsg85
g0
(g809
g5
Ntp18608
Rp18609
(dp18610
g552
(lp18611
g510
ag0
(g3250
g5
Ntp18612
Rp18613
(dp18614
g14
S'auto_14164'
p18615
sg16
Nsg17
g0
(g18
g5
Ntp18616
Rp18617
(dp18618
g22
(lp18619
(lp18620
(g25
I306
g26
S'nade_train( * args[1:] )'
p18621
tp18622
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p18623
tp18624
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p18625
tp18626
a(g37
I36
g38
S'self.recompile()'
p18627
tp18628
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p18629
tp18630
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p18631
tp18632
a(g874
I216
g875
S'h = self.nonlinearity(T.dot(h, self.Ws[l]) + self.bs[l])  # BxH'
p18633
tp18634
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p18635
tp18636
Rp18637
sbasg17
g0
(g18
g5
Ntp18638
Rp18639
sg814
(lp18640
g18602
asg1274
g3395
sbsg73
g3399
sbasg17
g0
(g18
g5
Ntp18641
Rp18642
sg814
(lp18643
g18393
asg1274
g13244
sbsg73
g17013
sbag0
(g563
g5
Ntp18644
Rp18645
(dp18646
g14
S'auto_14521'
p18647
sg16
I0
sg17
g0
(g18
g5
Ntp18648
Rp18649
(dp18650
g22
g3287
sbsg53
Nsg85
g0
(g809
g5
Ntp18651
Rp18652
(dp18653
g552
(lp18654
g0
(g563
g5
Ntp18655
Rp18656
(dp18657
g14
S'auto_14520'
p18658
sg16
I0
sg17
g0
(g18
g5
Ntp18659
Rp18660
(dp18661
g22
g3333
sbsg53
Nsg85
g0
(g809
g5
Ntp18662
Rp18663
(dp18664
g552
(lp18665
g684
ag0
(g3250
g5
Ntp18666
Rp18667
(dp18668
g14
S'auto_14167'
p18669
sg16
Nsg17
g0
(g18
g5
Ntp18670
Rp18671
(dp18672
g22
g3369
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p18673
tp18674
Rp18675
sbasg17
g0
(g18
g5
Ntp18676
Rp18677
sg814
(lp18678
g18656
asg1274
g3359
sbsg73
g3350
sbasg17
g0
(g18
g5
Ntp18679
Rp18680
sg814
(lp18681
g18645
asg1274
g3313
sbsg73
g3304
sbasg17
g0
(g18
g5
Ntp18682
Rp18683
sg814
(lp18684
g18382
asg1274
g8881
sbsg73
g11258
sbag0
(g563
g5
Ntp18685
Rp18686
(dp18687
g14
S'auto_14524'
p18688
sg16
I0
sg17
g0
(g18
g5
Ntp18689
Rp18690
(dp18691
g22
g11269
sbsg53
Nsg85
g0
(g809
g5
Ntp18692
Rp18693
(dp18694
g552
(lp18695
g18382
ag0
(g563
g5
Ntp18696
Rp18697
(dp18698
g14
S'auto_14523'
p18699
sg16
I0
sg17
g0
(g18
g5
Ntp18700
Rp18701
(dp18702
g22
g12879
sbsg53
Nsg85
g0
(g809
g5
Ntp18703
Rp18704
(dp18705
g552
(lp18706
g18567
asg17
g0
(g18
g5
Ntp18707
Rp18708
sg814
(lp18709
g18697
asg1274
g12892
sbsg73
g3025
sbasg17
g0
(g18
g5
Ntp18710
Rp18711
sg814
(lp18712
g18686
asg1274
g11299
sbsg73
g11311
sbasg17
g0
(g18
g5
Ntp18713
Rp18714
sg814
(lp18715
g18371
asg1274
g5036
sbsg73
g11322
sbasg17
g0
(g18
g5
Ntp18716
Rp18717
sg814
(lp18718
g18344
asg1274
g0
(g1387
g5
Ntp18719
Rp18720
(dp18721
g1391
(lp18722
sg1393
(lp18723
I0
aI1
asg1395
(lp18724
sg1397
g1398
sg1399
(I00
I00
tp18725
sg1401
(lp18726
g1403
asg1404
I01
sg1405
(I0
I1
tp18727
sg1407
(dp18728
S'support_code_apply'
p18729
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p18730
ssg1411
(dp18731
I0
(lp18732
I0
assg1414
(lp18733
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p18734
asbsbsg73
g0
(g74
g5
Ntp18735
Rp18736
(dp18737
g78
(I00
I00
tp18738
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp18739
Rp18740
(dp18741
g14
S'auto_14533'
p18742
sg16
I0
sg17
g0
(g18
g5
Ntp18743
Rp18744
(dp18745
g22
g7913
sbsg53
Nsg85
g0
(g809
g5
Ntp18746
Rp18747
(dp18748
g552
(lp18749
g0
(g563
g5
Ntp18750
Rp18751
(dp18752
g14
S'auto_14529'
p18753
sg16
I0
sg17
g0
(g18
g5
Ntp18754
Rp18755
(dp18756
g22
g15044
sbsg53
Nsg85
g0
(g809
g5
Ntp18757
Rp18758
(dp18759
g552
(lp18760
g0
(g843
g5
Ntp18761
Rp18762
(dp18763
g14
S'auto_70'
p18764
sg16
Nsg17
g0
(g18
g5
Ntp18765
Rp18766
(dp18767
g22
(lp18768
g11132
asg878
Nsbsg53
Nsg18259
I01
sg73
g11146
sg883
g11152
sbag0
(g563
g5
Ntp18769
Rp18770
(dp18771
g14
S'auto_14528'
p18772
sg16
I0
sg17
g0
(g18
g5
Ntp18773
Rp18774
(dp18775
g22
g13040
sbsg53
Nsg85
g0
(g809
g5
Ntp18776
Rp18777
(dp18778
g552
(lp18779
g0
(g563
g5
Ntp18780
Rp18781
(dp18782
g14
S'auto_14527'
p18783
sg16
I0
sg17
g0
(g18
g5
Ntp18784
Rp18785
(dp18786
g22
(lp18787
(lp18788
(g25
I306
g26
S'nade_train( * args[1:] )'
p18789
tp18790
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p18791
tp18792
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p18793
tp18794
a(g37
I36
g38
S'self.recompile()'
p18795
tp18796
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p18797
tp18798
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p18799
tp18800
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p18801
tp18802
aasbsg53
Nsg85
g0
(g809
g5
Ntp18803
Rp18804
(dp18805
g552
(lp18806
g18344
asg17
g0
(g18
g5
Ntp18807
Rp18808
sg814
(lp18809
g18781
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp18810
Rp18811
(dp18812
g14
S'auto_14287'
p18813
sg16
Nsg17
g0
(g18
g5
Ntp18814
Rp18815
(dp18816
g22
(lp18817
(lp18818
(g25
I306
g26
S'nade_train( * args[1:] )'
p18819
tp18820
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p18821
tp18822
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p18823
tp18824
a(g37
I36
g38
S'self.recompile()'
p18825
tp18826
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p18827
tp18828
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p18829
tp18830
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p18831
tp18832
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p18833
tp18834
Rp18835
sbasg17
g0
(g18
g5
Ntp18836
Rp18837
sg814
(lp18838
g18770
asg1274
g13068
sbsg73
g13072
sbasg17
g0
(g18
g5
Ntp18839
Rp18840
sg814
(lp18841
g18751
asg1274
g5036
sbsg73
g15057
sbag0
(g563
g5
Ntp18842
Rp18843
(dp18844
g14
S'auto_14532'
p18845
sg16
I0
sg17
g0
(g18
g5
Ntp18846
Rp18847
(dp18848
g22
g14080
sbsg53
Nsg85
g0
(g809
g5
Ntp18849
Rp18850
(dp18851
g552
(lp18852
g18762
ag0
(g563
g5
Ntp18853
Rp18854
(dp18855
g14
S'auto_14531'
p18856
sg16
I0
sg17
g0
(g18
g5
Ntp18857
Rp18858
(dp18859
g22
g13711
sbsg53
Nsg85
g0
(g809
g5
Ntp18860
Rp18861
(dp18862
g552
(lp18863
g0
(g563
g5
Ntp18864
Rp18865
(dp18866
g14
S'auto_14530'
p18867
sg16
I0
sg17
g0
(g18
g5
Ntp18868
Rp18869
(dp18870
g22
(lp18871
(lp18872
(g25
I306
g26
S'nade_train( * args[1:] )'
p18873
tp18874
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p18875
tp18876
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p18877
tp18878
a(g37
I36
g38
S'self.recompile()'
p18879
tp18880
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p18881
tp18882
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p18883
tp18884
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p18885
tp18886
aasbsg53
Nsg85
g0
(g809
g5
Ntp18887
Rp18888
(dp18889
g552
(lp18890
g18344
asg17
g0
(g18
g5
Ntp18891
Rp18892
sg814
(lp18893
g18865
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp18894
Rp18895
(dp18896
g14
S'auto_14273'
p18897
sg16
Nsg17
g0
(g18
g5
Ntp18898
Rp18899
(dp18900
g22
(lp18901
(lp18902
(g25
I306
g26
S'nade_train( * args[1:] )'
p18903
tp18904
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p18905
tp18906
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p18907
tp18908
a(g37
I36
g38
S'self.recompile()'
p18909
tp18910
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p18911
tp18912
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p18913
tp18914
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p18915
tp18916
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p18917
tp18918
Rp18919
sbasg17
g0
(g18
g5
Ntp18920
Rp18921
sg814
(lp18922
g18854
asg1274
g13739
sbsg73
g13743
sbasg17
g0
(g18
g5
Ntp18923
Rp18924
sg814
(lp18925
g18843
asg1274
g5036
sbsg73
g14108
sbasg17
g0
(g18
g5
Ntp18926
Rp18927
sg814
(lp18928
g18740
asg1274
g7966
sbsg73
g7970
sbasg17
g0
(g18
g5
Ntp18929
Rp18930
sg814
(lp18931
g18333
asg1274
g16832
sbsg73
g16835
sbag0
(g563
g5
Ntp18932
Rp18933
(dp18934
g14
S'auto_14546'
p18935
sg16
I0
sg17
g0
(g18
g5
Ntp18936
Rp18937
(dp18938
g22
g1327
sbsg53
Nsg85
g0
(g809
g5
Ntp18939
Rp18940
(dp18941
g552
(lp18942
g0
(g563
g5
Ntp18943
Rp18944
(dp18945
g14
S'auto_14535'
p18946
sg16
I0
sg17
g0
(g18
g5
Ntp18947
Rp18948
(dp18949
g22
g1362
sbsg53
Nsg85
g0
(g809
g5
Ntp18950
Rp18951
(dp18952
g552
(lp18953
g723
asg17
g0
(g18
g5
Ntp18954
Rp18955
sg814
(lp18956
g18944
asg1274
g1389
sbsg73
g1379
sbag0
(g563
g5
Ntp18957
Rp18958
(dp18959
g14
S'auto_14545'
p18960
sg16
I0
sg17
g0
(g18
g5
Ntp18961
Rp18962
(dp18963
g22
g1230
sbsg53
Nsg85
g0
(g809
g5
Ntp18964
Rp18965
(dp18966
g552
(lp18967
g0
(g563
g5
Ntp18968
Rp18969
(dp18970
g14
S'auto_14538'
p18971
sg16
I0
sg17
g0
(g18
g5
Ntp18972
Rp18973
(dp18974
g22
g15164
sbsg53
Nsg85
g0
(g809
g5
Ntp18975
Rp18976
(dp18977
g552
(lp18978
g18762
ag0
(g563
g5
Ntp18979
Rp18980
(dp18981
g14
S'auto_14537'
p18982
sg16
I0
sg17
g0
(g18
g5
Ntp18983
Rp18984
(dp18985
g22
g11940
sbsg53
Nsg85
g0
(g809
g5
Ntp18986
Rp18987
(dp18988
g552
(lp18989
g0
(g563
g5
Ntp18990
Rp18991
(dp18992
g14
S'auto_14536'
p18993
sg16
I0
sg17
g0
(g18
g5
Ntp18994
Rp18995
(dp18996
g22
(lp18997
(lp18998
(g25
I306
g26
S'nade_train( * args[1:] )'
p18999
tp19000
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19001
tp19002
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19003
tp19004
a(g37
I36
g38
S'self.recompile()'
p19005
tp19006
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19007
tp19008
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19009
tp19010
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p19011
tp19012
aasbsg53
Nsg85
g0
(g809
g5
Ntp19013
Rp19014
(dp19015
g552
(lp19016
g18944
asg17
g0
(g18
g5
Ntp19017
Rp19018
sg814
(lp19019
g18991
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp19020
Rp19021
(dp19022
g14
S'auto_14280'
p19023
sg16
Nsg17
g0
(g18
g5
Ntp19024
Rp19025
(dp19026
g22
(lp19027
(lp19028
(g25
I306
g26
S'nade_train( * args[1:] )'
p19029
tp19030
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19031
tp19032
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19033
tp19034
a(g37
I36
g38
S'self.recompile()'
p19035
tp19036
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19037
tp19038
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19039
tp19040
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p19041
tp19042
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p19043
tp19044
Rp19045
sbasg17
g0
(g18
g5
Ntp19046
Rp19047
sg814
(lp19048
g18980
asg1274
g11968
sbsg73
g11972
sbasg17
g0
(g18
g5
Ntp19049
Rp19050
sg814
(lp19051
g18969
asg1274
g5036
sbsg73
g15192
sbag0
(g563
g5
Ntp19052
Rp19053
(dp19054
g14
S'auto_14544'
p19055
sg16
I0
sg17
g0
(g18
g5
Ntp19056
Rp19057
(dp19058
g22
g11484
sbsg53
Nsg85
g0
(g809
g5
Ntp19059
Rp19060
(dp19061
g552
(lp19062
g0
(g563
g5
Ntp19063
Rp19064
(dp19065
g14
S'auto_14541'
p19066
sg16
I0
sg17
g0
(g18
g5
Ntp19067
Rp19068
(dp19069
g22
g11104
sbsg53
Nsg85
g0
(g809
g5
Ntp19070
Rp19071
(dp19072
g552
(lp19073
g18762
ag0
(g563
g5
Ntp19074
Rp19075
(dp19076
g14
S'auto_14540'
p19077
sg16
I0
sg17
g0
(g18
g5
Ntp19078
Rp19079
(dp19080
g22
g10280
sbsg53
Nsg85
g0
(g809
g5
Ntp19081
Rp19082
(dp19083
g552
(lp19084
g0
(g563
g5
Ntp19085
Rp19086
(dp19087
g14
S'auto_14539'
p19088
sg16
I0
sg17
g0
(g18
g5
Ntp19089
Rp19090
(dp19091
g22
(lp19092
(lp19093
(g25
I306
g26
S'nade_train( * args[1:] )'
p19094
tp19095
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19096
tp19097
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19098
tp19099
a(g37
I36
g38
S'self.recompile()'
p19100
tp19101
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19102
tp19103
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19104
tp19105
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p19106
tp19107
aasbsg53
Nsg85
g0
(g809
g5
Ntp19108
Rp19109
(dp19110
g552
(lp19111
g18944
asg17
g0
(g18
g5
Ntp19112
Rp19113
sg814
(lp19114
g19086
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp19115
Rp19116
(dp19117
g14
S'auto_14294'
p19118
sg16
Nsg17
g0
(g18
g5
Ntp19119
Rp19120
(dp19121
g22
(lp19122
(lp19123
(g25
I306
g26
S'nade_train( * args[1:] )'
p19124
tp19125
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19126
tp19127
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19128
tp19129
a(g37
I36
g38
S'self.recompile()'
p19130
tp19131
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19132
tp19133
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19134
tp19135
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p19136
tp19137
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p19138
tp19139
Rp19140
sbasg17
g0
(g18
g5
Ntp19141
Rp19142
sg814
(lp19143
g19075
asg1274
g10335
sbsg73
g10339
sbasg17
g0
(g18
g5
Ntp19144
Rp19145
sg814
(lp19146
g19064
asg1274
g5036
sbsg73
g11162
sbag0
(g563
g5
Ntp19147
Rp19148
(dp19149
g14
S'auto_14543'
p19150
sg16
I0
sg17
g0
(g18
g5
Ntp19151
Rp19152
(dp19153
g22
g11512
sbsg53
Nsg85
g0
(g809
g5
Ntp19154
Rp19155
(dp19156
g552
(lp19157
g0
(g563
g5
Ntp19158
Rp19159
(dp19160
g14
S'auto_14542'
p19161
sg16
I0
sg17
g0
(g18
g5
Ntp19162
Rp19163
(dp19164
g22
(lp19165
(lp19166
(g25
I306
g26
S'nade_train( * args[1:] )'
p19167
tp19168
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19169
tp19170
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19171
tp19172
a(g37
I36
g38
S'self.recompile()'
p19173
tp19174
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19175
tp19176
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19177
tp19178
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p19179
tp19180
aasbsg53
Nsg85
g0
(g809
g5
Ntp19181
Rp19182
(dp19183
g552
(lp19184
g18944
asg17
g0
(g18
g5
Ntp19185
Rp19186
sg814
(lp19187
g19159
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp19188
Rp19189
(dp19190
g14
S'auto_14301'
p19191
sg16
Nsg17
g0
(g18
g5
Ntp19192
Rp19193
(dp19194
g22
(lp19195
(lp19196
(g25
I306
g26
S'nade_train( * args[1:] )'
p19197
tp19198
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19199
tp19200
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19201
tp19202
a(g37
I36
g38
S'self.recompile()'
p19203
tp19204
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19205
tp19206
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19207
tp19208
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p19209
tp19210
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\xfe\xff\xff\xff\xff\xff\xff\xff'
p19211
tp19212
Rp19213
sbasg17
g0
(g18
g5
Ntp19214
Rp19215
sg814
(lp19216
g19148
asg1274
g11567
sbsg73
g11571
sbasg17
g0
(g18
g5
Ntp19217
Rp19218
sg814
(lp19219
g19053
asg1274
g5036
sbsg73
g11581
sbasg17
g0
(g18
g5
Ntp19220
Rp19221
sg814
(lp19222
g18958
asg1274
g1310
sbsg73
g1314
sbasg17
g0
(g18
g5
Ntp19223
Rp19224
sg814
(lp19225
g18933
asg1274
g1354
sbsg73
g1344
sbasg17
g0
(g18
g5
Ntp19226
Rp19227
sg814
(lp19228
g18322
asg1274
g13244
sbsg73
g13246
sbag0
(g563
g5
Ntp19229
Rp19230
(dp19231
g14
S'auto_14552'
p19232
sg16
I0
sg17
g0
(g18
g5
Ntp19233
Rp19234
(dp19235
g22
g9074
sbsg53
Nsg85
g0
(g809
g5
Ntp19236
Rp19237
(dp19238
g552
(lp19239
g18567
ag0
(g563
g5
Ntp19240
Rp19241
(dp19242
g14
S'auto_14549'
p19243
sg16
I0
sg17
g0
(g18
g5
Ntp19244
Rp19245
(dp19246
g22
g16342
sbsg53
Nsg85
g0
(g809
g5
Ntp19247
Rp19248
(dp19249
g552
(lp19250
g0
(g563
g5
Ntp19251
Rp19252
(dp19253
g14
S'auto_14548'
p19254
sg16
I0
sg17
g0
(g18
g5
Ntp19255
Rp19256
(dp19257
g22
(lp19258
(lp19259
(g25
I306
g26
S'nade_train( * args[1:] )'
p19260
tp19261
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19262
tp19263
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19264
tp19265
a(g37
I36
g38
S'self.recompile()'
p19266
tp19267
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19268
tp19269
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19270
tp19271
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p19272
tp19273
aasbsg53
Nsg85
g0
(g809
g5
Ntp19274
Rp19275
(dp19276
g552
(lp19277
g18344
asg17
g0
(g18
g5
Ntp19278
Rp19279
sg814
(lp19280
g19252
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp19281
Rp19282
(dp19283
g14
S'auto_14264'
p19284
sg16
Nsg17
g0
(g18
g5
Ntp19285
Rp19286
(dp19287
g22
(lp19288
(lp19289
(g25
I306
g26
S'nade_train( * args[1:] )'
p19290
tp19291
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19292
tp19293
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19294
tp19295
a(g37
I36
g38
S'self.recompile()'
p19296
tp19297
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19298
tp19299
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19300
tp19301
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p19302
tp19303
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p19304
tp19305
Rp19306
sbag0
(g3250
g5
Ntp19307
Rp19308
(dp19309
g14
S'auto_14265'
p19310
sg16
Nsg17
g0
(g18
g5
Ntp19311
Rp19312
(dp19313
g22
(lp19314
(lp19315
(g25
I306
g26
S'nade_train( * args[1:] )'
p19316
tp19317
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19318
tp19319
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19320
tp19321
a(g37
I36
g38
S'self.recompile()'
p19322
tp19323
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19324
tp19325
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19326
tp19327
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p19328
tp19329
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p19330
tp19331
Rp19332
sbasg17
g0
(g18
g5
Ntp19333
Rp19334
sg814
(lp19335
g19241
asg1274
g16355
sbsg73
g16361
sbag0
(g563
g5
Ntp19336
Rp19337
(dp19338
g14
S'auto_14551'
p19339
sg16
I0
sg17
g0
(g18
g5
Ntp19340
Rp19341
(dp19342
g22
g15503
sbsg53
Nsg85
g0
(g809
g5
Ntp19343
Rp19344
(dp19345
g552
(lp19346
g0
(g563
g5
Ntp19347
Rp19348
(dp19349
g14
S'auto_14550'
p19350
sg16
I0
sg17
g0
(g18
g5
Ntp19351
Rp19352
(dp19353
g22
g15126
sbsg53
Nsg85
g0
(g809
g5
Ntp19354
Rp19355
(dp19356
g552
(lp19357
g18944
asg17
g0
(g18
g5
Ntp19358
Rp19359
sg814
(lp19360
g19348
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp19361
Rp19362
(dp19363
g14
S'auto_14268'
p19364
sg16
Nsg17
g0
(g18
g5
Ntp19365
Rp19366
(dp19367
g22
(lp19368
(lp19369
(g25
I306
g26
S'nade_train( * args[1:] )'
p19370
tp19371
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19372
tp19373
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19374
tp19375
a(g37
I36
g38
S'self.recompile()'
p19376
tp19377
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19378
tp19379
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19380
tp19381
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p19382
tp19383
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p19384
tp19385
Rp19386
sbag0
(g3250
g5
Ntp19387
Rp19388
(dp19389
g14
S'auto_14269'
p19390
sg16
Nsg17
g0
(g18
g5
Ntp19391
Rp19392
(dp19393
g22
(lp19394
(lp19395
(g25
I306
g26
S'nade_train( * args[1:] )'
p19396
tp19397
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19398
tp19399
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19400
tp19401
a(g37
I36
g38
S'self.recompile()'
p19402
tp19403
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19404
tp19405
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19406
tp19407
a(g874
I218
g875
S'z_mu = T.tensordot(h, self.V_mu, [[1], [1]]) + T.shape_padleft(self.b_mu)'
p19408
tp19409
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p19410
tp19411
Rp19412
sbasg17
g0
(g18
g5
Ntp19413
Rp19414
sg814
(lp19415
g19337
asg1274
g15516
sbsg73
g15522
sbasg17
g0
(g18
g5
Ntp19416
Rp19417
sg814
(lp19418
g19230
asg1274
g7772
sbsg73
g9126
sbasg17
g0
(g18
g5
Ntp19419
Rp19420
sg814
(lp19421
g18311
asg1274
g3559
sbsg73
g3562
sbag0
(g563
g5
Ntp19422
Rp19423
(dp19424
g14
S'auto_14554'
p19425
sg16
I0
sg17
g0
(g18
g5
Ntp19426
Rp19427
(dp19428
g22
g3575
sbsg53
Nsg85
g0
(g809
g5
Ntp19429
Rp19430
(dp19431
g552
(lp19432
g205
asg17
g0
(g18
g5
Ntp19433
Rp19434
sg814
(lp19435
g19423
asg1274
g3611
sbsg73
g3626
sbasg17
g0
(g18
g5
Ntp19436
Rp19437
sg814
(lp19438
g18300
asg1274
g8881
sbsg73
g8892
sbag0
(g563
g5
Ntp19439
Rp19440
(dp19441
g14
S'auto_14556'
p19442
sg16
I0
sg17
g0
(g18
g5
Ntp19443
Rp19444
(dp19445
g22
g14617
sbsg53
Nsg85
g0
(g809
g5
Ntp19446
Rp19447
(dp19448
g552
(lp19449
g18459
asg17
g0
(g18
g5
Ntp19450
Rp19451
sg814
(lp19452
g19440
asg1274
g14630
sbsg73
g14645
sbasg17
g0
(g18
g5
Ntp19453
Rp19454
sg814
(lp19455
g18289
asg1274
g4101
sbsg73
g8903
sbag0
(g563
g5
Ntp19456
Rp19457
(dp19458
g14
S'auto_14588'
p19459
sg16
I0
sg17
g0
(g18
g5
Ntp19460
Rp19461
(dp19462
g22
g8914
sbsg53
Nsg85
g0
(g809
g5
Ntp19463
Rp19464
(dp19465
g552
(lp19466
g0
(g563
g5
Ntp19467
Rp19468
(dp19469
g14
S'auto_14587'
p19470
sg16
I0
sg17
g0
(g18
g5
Ntp19471
Rp19472
(dp19473
g22
g8942
sbsg53
Nsg85
g0
(g809
g5
Ntp19474
Rp19475
(dp19476
g552
(lp19477
g0
(g563
g5
Ntp19478
Rp19479
(dp19480
g14
S'auto_14585'
p19481
sg16
I0
sg17
g0
(g18
g5
Ntp19482
Rp19483
(dp19484
g22
g2645
sbsg53
Nsg85
g0
(g809
g5
Ntp19485
Rp19486
(dp19487
g552
(lp19488
g0
(g563
g5
Ntp19489
Rp19490
(dp19491
g14
S'auto_14579'
p19492
sg16
I0
sg17
g0
(g18
g5
Ntp19493
Rp19494
(dp19495
g22
g13451
sbsg53
Nsg85
g0
(g809
g5
Ntp19496
Rp19497
(dp19498
g552
(lp19499
g0
(g563
g5
Ntp19500
Rp19501
(dp19502
g14
S'auto_14566'
p19503
sg16
I0
sg17
g0
(g18
g5
Ntp19504
Rp19505
(dp19506
g22
(lp19507
(lp19508
(g25
I306
g26
S'nade_train( * args[1:] )'
p19509
tp19510
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19511
tp19512
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19513
tp19514
a(g37
I36
g38
S'self.recompile()'
p19515
tp19516
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19517
tp19518
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19519
tp19520
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p19521
tp19522
aasbsg53
Nsg85
g0
(g809
g5
Ntp19523
Rp19524
(dp19525
g552
(lp19526
g0
(g563
g5
Ntp19527
Rp19528
(dp19529
g14
S'auto_14558'
p19530
sg16
I0
sg17
g0
(g18
g5
Ntp19531
Rp19532
(dp19533
g22
(lp19534
(lp19535
(g25
I306
g26
S'nade_train( * args[1:] )'
p19536
tp19537
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19538
tp19539
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19540
tp19541
a(g37
I36
g38
S'self.recompile()'
p19542
tp19543
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19544
tp19545
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19546
tp19547
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p19548
tp19549
aasbsg53
Nsg85
g0
(g809
g5
Ntp19550
Rp19551
(dp19552
g552
(lp19553
g18371
asg17
g0
(g18
g5
Ntp19554
Rp19555
sg814
(lp19556
g19528
asg1274
g0
(g1387
g5
Ntp19557
Rp19558
(dp19559
g1391
(lp19560
sg1393
(lp19561
I0
aI1
asg1395
(lp19562
sg1397
g1398
sg1399
(I00
I00
tp19563
sg1401
(lp19564
g1403
asg1404
I01
sg1405
(I0
I1
tp19565
sg1407
(dp19566
S'support_code_apply'
p19567
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p19568
ssg1411
(dp19569
I0
(lp19570
I0
assg1414
(lp19571
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p19572
asbsbsg73
g0
(g74
g5
Ntp19573
Rp19574
(dp19575
g78
(I00
I00
tp19576
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp19577
Rp19578
(dp19579
g14
S'auto_14565'
p19580
sg16
I0
sg17
g0
(g18
g5
Ntp19581
Rp19582
(dp19583
g22
(lp19584
(lp19585
(g25
I306
g26
S'nade_train( * args[1:] )'
p19586
tp19587
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19588
tp19589
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19590
tp19591
a(g37
I36
g38
S'self.recompile()'
p19592
tp19593
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19594
tp19595
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19596
tp19597
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p19598
tp19599
aasbsg53
Nsg85
g0
(g809
g5
Ntp19600
Rp19601
(dp19602
g552
(lp19603
g0
(g563
g5
Ntp19604
Rp19605
(dp19606
g14
S'auto_14561'
p19607
sg16
I0
sg17
g0
(g18
g5
Ntp19608
Rp19609
(dp19610
g22
(lp19611
(lp19612
(g25
I306
g26
S'nade_train( * args[1:] )'
p19613
tp19614
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19615
tp19616
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19617
tp19618
a(g37
I36
g38
S'self.recompile()'
p19619
tp19620
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19621
tp19622
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19623
tp19624
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p19625
tp19626
aasbsg53
Nsg85
g0
(g809
g5
Ntp19627
Rp19628
(dp19629
g552
(lp19630
g18762
ag0
(g563
g5
Ntp19631
Rp19632
(dp19633
g14
S'auto_14560'
p19634
sg16
I0
sg17
g0
(g18
g5
Ntp19635
Rp19636
(dp19637
g22
(lp19638
(lp19639
(g25
I306
g26
S'nade_train( * args[1:] )'
p19640
tp19641
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19642
tp19643
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19644
tp19645
a(g37
I36
g38
S'self.recompile()'
p19646
tp19647
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19648
tp19649
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19650
tp19651
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p19652
tp19653
aasbsg53
Nsg85
g0
(g809
g5
Ntp19654
Rp19655
(dp19656
g552
(lp19657
g0
(g563
g5
Ntp19658
Rp19659
(dp19660
g14
S'auto_14559'
p19661
sg16
I0
sg17
g0
(g18
g5
Ntp19662
Rp19663
(dp19664
g22
(lp19665
(lp19666
(g25
I306
g26
S'nade_train( * args[1:] )'
p19667
tp19668
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19669
tp19670
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19671
tp19672
a(g37
I36
g38
S'self.recompile()'
p19673
tp19674
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19675
tp19676
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19677
tp19678
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p19679
tp19680
aasbsg53
Nsg85
g0
(g809
g5
Ntp19681
Rp19682
(dp19683
g552
(lp19684
g19528
asg17
g0
(g18
g5
Ntp19685
Rp19686
sg814
(lp19687
g19659
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp19688
Rp19689
(dp19690
g14
S'auto_14365'
p19691
sg16
Nsg17
g0
(g18
g5
Ntp19692
Rp19693
(dp19694
g22
(lp19695
(lp19696
(g25
I306
g26
S'nade_train( * args[1:] )'
p19697
tp19698
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19699
tp19700
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19701
tp19702
a(g37
I36
g38
S'self.recompile()'
p19703
tp19704
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19705
tp19706
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19707
tp19708
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p19709
tp19710
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p19711
tp19712
Rp19713
sbasg17
g0
(g18
g5
Ntp19714
Rp19715
sg814
(lp19716
g19632
asg1274
g0
(g3357
g5
Ntp19717
Rp19718
(dp19719
g3361
(g1465
tp19720
sbsbsg73
g0
(g74
g5
Ntp19721
Rp19722
(dp19723
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp19724
Rp19725
sg814
(lp19726
g19605
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp19727
Rp19728
(dp19729
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp19730
Rp19731
(dp19732
g14
S'auto_14564'
p19733
sg16
I0
sg17
g0
(g18
g5
Ntp19734
Rp19735
(dp19736
g22
(lp19737
(lp19738
(g25
I306
g26
S'nade_train( * args[1:] )'
p19739
tp19740
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19741
tp19742
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19743
tp19744
a(g37
I36
g38
S'self.recompile()'
p19745
tp19746
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19747
tp19748
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19749
tp19750
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p19751
tp19752
aasbsg53
Nsg85
g0
(g809
g5
Ntp19753
Rp19754
(dp19755
g552
(lp19756
g18762
ag0
(g563
g5
Ntp19757
Rp19758
(dp19759
g14
S'auto_14563'
p19760
sg16
I0
sg17
g0
(g18
g5
Ntp19761
Rp19762
(dp19763
g22
(lp19764
(lp19765
(g25
I306
g26
S'nade_train( * args[1:] )'
p19766
tp19767
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19768
tp19769
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19770
tp19771
a(g37
I36
g38
S'self.recompile()'
p19772
tp19773
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19774
tp19775
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19776
tp19777
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p19778
tp19779
aasbsg53
Nsg85
g0
(g809
g5
Ntp19780
Rp19781
(dp19782
g552
(lp19783
g0
(g563
g5
Ntp19784
Rp19785
(dp19786
g14
S'auto_14562'
p19787
sg16
I0
sg17
g0
(g18
g5
Ntp19788
Rp19789
(dp19790
g22
(lp19791
(lp19792
(g25
I306
g26
S'nade_train( * args[1:] )'
p19793
tp19794
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19795
tp19796
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19797
tp19798
a(g37
I36
g38
S'self.recompile()'
p19799
tp19800
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19801
tp19802
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19803
tp19804
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p19805
tp19806
aasbsg53
Nsg85
g0
(g809
g5
Ntp19807
Rp19808
(dp19809
g552
(lp19810
g19528
asg17
g0
(g18
g5
Ntp19811
Rp19812
sg814
(lp19813
g19785
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp19814
Rp19815
(dp19816
g14
S'auto_14351'
p19817
sg16
Nsg17
g0
(g18
g5
Ntp19818
Rp19819
(dp19820
g22
(lp19821
(lp19822
(g25
I306
g26
S'nade_train( * args[1:] )'
p19823
tp19824
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19825
tp19826
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19827
tp19828
a(g37
I36
g38
S'self.recompile()'
p19829
tp19830
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19831
tp19832
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19833
tp19834
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p19835
tp19836
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p19837
tp19838
Rp19839
sbasg17
g0
(g18
g5
Ntp19840
Rp19841
sg814
(lp19842
g19758
asg1274
g0
(g3357
g5
Ntp19843
Rp19844
(dp19845
g3361
(g1465
tp19846
sbsbsg73
g0
(g74
g5
Ntp19847
Rp19848
(dp19849
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp19850
Rp19851
sg814
(lp19852
g19731
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp19853
Rp19854
(dp19855
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp19856
Rp19857
sg814
(lp19858
g19578
asg1274
g0
(g1308
g5
Ntp19859
Rp19860
(dp19861
g80
S'int64'
p19862
sbsbsg73
g0
(g74
g5
Ntp19863
Rp19864
(dp19865
g78
(I00
tp19866
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp19867
Rp19868
sg814
(lp19869
g19501
asg1274
g0
(g1352
g5
Ntp19870
Rp19871
(dp19872
g1356
I2
sbsbsg73
g0
(g74
g5
Ntp19873
Rp19874
(dp19875
g78
(I00
I00
tp19876
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp19877
Rp19878
(dp19879
g14
S'auto_14578'
p19880
sg16
I0
sg17
g0
(g18
g5
Ntp19881
Rp19882
(dp19883
g22
g1105
sbsg53
Nsg85
g0
(g809
g5
Ntp19884
Rp19885
(dp19886
g552
(lp19887
g0
(g563
g5
Ntp19888
Rp19889
(dp19890
g14
S'auto_14567'
p19891
sg16
I0
sg17
g0
(g18
g5
Ntp19892
Rp19893
(dp19894
g22
g1134
sbsg53
Nsg85
g0
(g809
g5
Ntp19895
Rp19896
(dp19897
g552
(lp19898
g164
asg17
g0
(g18
g5
Ntp19899
Rp19900
sg814
(lp19901
g19889
asg1274
g2733
sbsg73
g2749
sbag0
(g563
g5
Ntp19902
Rp19903
(dp19904
g14
S'auto_14577'
p19905
sg16
I0
sg17
g0
(g18
g5
Ntp19906
Rp19907
(dp19908
g22
g2330
sbsg53
Nsg85
g0
(g809
g5
Ntp19909
Rp19910
(dp19911
g552
(lp19912
g0
(g563
g5
Ntp19913
Rp19914
(dp19915
g14
S'auto_14570'
p19916
sg16
I0
sg17
g0
(g18
g5
Ntp19917
Rp19918
(dp19919
g22
g16944
sbsg53
Nsg85
g0
(g809
g5
Ntp19920
Rp19921
(dp19922
g552
(lp19923
g18762
ag0
(g563
g5
Ntp19924
Rp19925
(dp19926
g14
S'auto_14569'
p19927
sg16
I0
sg17
g0
(g18
g5
Ntp19928
Rp19929
(dp19930
g22
g16271
sbsg53
Nsg85
g0
(g809
g5
Ntp19931
Rp19932
(dp19933
g552
(lp19934
g0
(g563
g5
Ntp19935
Rp19936
(dp19937
g14
S'auto_14568'
p19938
sg16
I0
sg17
g0
(g18
g5
Ntp19939
Rp19940
(dp19941
g22
(lp19942
(lp19943
(g25
I306
g26
S'nade_train( * args[1:] )'
p19944
tp19945
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19946
tp19947
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19948
tp19949
a(g37
I36
g38
S'self.recompile()'
p19950
tp19951
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19952
tp19953
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19954
tp19955
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p19956
tp19957
aasbsg53
Nsg85
g0
(g809
g5
Ntp19958
Rp19959
(dp19960
g552
(lp19961
g19889
asg17
g0
(g18
g5
Ntp19962
Rp19963
sg814
(lp19964
g19936
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp19965
Rp19966
(dp19967
g14
S'auto_14358'
p19968
sg16
Nsg17
g0
(g18
g5
Ntp19969
Rp19970
(dp19971
g22
(lp19972
(lp19973
(g25
I306
g26
S'nade_train( * args[1:] )'
p19974
tp19975
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p19976
tp19977
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p19978
tp19979
a(g37
I36
g38
S'self.recompile()'
p19980
tp19981
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p19982
tp19983
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p19984
tp19985
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p19986
tp19987
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p19988
tp19989
Rp19990
sbasg17
g0
(g18
g5
Ntp19991
Rp19992
sg814
(lp19993
g19925
asg1274
g16299
sbsg73
g16303
sbasg17
g0
(g18
g5
Ntp19994
Rp19995
sg814
(lp19996
g19914
asg1274
g5036
sbsg73
g16957
sbag0
(g563
g5
Ntp19997
Rp19998
(dp19999
g14
S'auto_14576'
p20000
sg16
I0
sg17
g0
(g18
g5
Ntp20001
Rp20002
(dp20003
g22
g16462
sbsg53
Nsg85
g0
(g809
g5
Ntp20004
Rp20005
(dp20006
g552
(lp20007
g0
(g563
g5
Ntp20008
Rp20009
(dp20010
g14
S'auto_14573'
p20011
sg16
I0
sg17
g0
(g18
g5
Ntp20012
Rp20013
(dp20014
g22
g15423
sbsg53
Nsg85
g0
(g809
g5
Ntp20015
Rp20016
(dp20017
g552
(lp20018
g18762
ag0
(g563
g5
Ntp20019
Rp20020
(dp20021
g14
S'auto_14572'
p20022
sg16
I0
sg17
g0
(g18
g5
Ntp20023
Rp20024
(dp20025
g22
g15451
sbsg53
Nsg85
g0
(g809
g5
Ntp20026
Rp20027
(dp20028
g552
(lp20029
g0
(g563
g5
Ntp20030
Rp20031
(dp20032
g14
S'auto_14571'
p20033
sg16
I0
sg17
g0
(g18
g5
Ntp20034
Rp20035
(dp20036
g22
(lp20037
(lp20038
(g25
I306
g26
S'nade_train( * args[1:] )'
p20039
tp20040
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20041
tp20042
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20043
tp20044
a(g37
I36
g38
S'self.recompile()'
p20045
tp20046
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20047
tp20048
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20049
tp20050
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p20051
tp20052
aasbsg53
Nsg85
g0
(g809
g5
Ntp20053
Rp20054
(dp20055
g552
(lp20056
g19889
asg17
g0
(g18
g5
Ntp20057
Rp20058
sg814
(lp20059
g20031
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp20060
Rp20061
(dp20062
g14
S'auto_14372'
p20063
sg16
Nsg17
g0
(g18
g5
Ntp20064
Rp20065
(dp20066
g22
(lp20067
(lp20068
(g25
I306
g26
S'nade_train( * args[1:] )'
p20069
tp20070
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20071
tp20072
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20073
tp20074
a(g37
I36
g38
S'self.recompile()'
p20075
tp20076
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20077
tp20078
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20079
tp20080
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p20081
tp20082
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p20083
tp20084
Rp20085
sbasg17
g0
(g18
g5
Ntp20086
Rp20087
sg814
(lp20088
g20020
asg1274
g15479
sbsg73
g15483
sbasg17
g0
(g18
g5
Ntp20089
Rp20090
sg814
(lp20091
g20009
asg1274
g5036
sbsg73
g15493
sbag0
(g563
g5
Ntp20092
Rp20093
(dp20094
g14
S'auto_14575'
p20095
sg16
I0
sg17
g0
(g18
g5
Ntp20096
Rp20097
(dp20098
g22
g15332
sbsg53
Nsg85
g0
(g809
g5
Ntp20099
Rp20100
(dp20101
g552
(lp20102
g0
(g563
g5
Ntp20103
Rp20104
(dp20105
g14
S'auto_14574'
p20106
sg16
I0
sg17
g0
(g18
g5
Ntp20107
Rp20108
(dp20109
g22
(lp20110
(lp20111
(g25
I306
g26
S'nade_train( * args[1:] )'
p20112
tp20113
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20114
tp20115
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20116
tp20117
a(g37
I36
g38
S'self.recompile()'
p20118
tp20119
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20120
tp20121
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20122
tp20123
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p20124
tp20125
aasbsg53
Nsg85
g0
(g809
g5
Ntp20126
Rp20127
(dp20128
g552
(lp20129
g19889
asg17
g0
(g18
g5
Ntp20130
Rp20131
sg814
(lp20132
g20104
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp20133
Rp20134
(dp20135
g14
S'auto_14379'
p20136
sg16
Nsg17
g0
(g18
g5
Ntp20137
Rp20138
(dp20139
g22
(lp20140
(lp20141
(g25
I306
g26
S'nade_train( * args[1:] )'
p20142
tp20143
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20144
tp20145
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20146
tp20147
a(g37
I36
g38
S'self.recompile()'
p20148
tp20149
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20150
tp20151
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20152
tp20153
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p20154
tp20155
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\xfe\xff\xff\xff\xff\xff\xff\xff'
p20156
tp20157
Rp20158
sbasg17
g0
(g18
g5
Ntp20159
Rp20160
sg814
(lp20161
g20093
asg1274
g15360
sbsg73
g15364
sbasg17
g0
(g18
g5
Ntp20162
Rp20163
sg814
(lp20164
g19998
asg1274
g5036
sbsg73
g16490
sbasg17
g0
(g18
g5
Ntp20165
Rp20166
sg814
(lp20167
g19903
asg1274
g2356
sbsg73
g2347
sbasg17
g0
(g18
g5
Ntp20168
Rp20169
sg814
(lp20170
g19878
asg1274
g2759
sbsg73
g2762
sbasg17
g0
(g18
g5
Ntp20171
Rp20172
sg814
(lp20173
g19490
asg1274
g13244
sbsg73
g13464
sbag0
(g563
g5
Ntp20174
Rp20175
(dp20176
g14
S'auto_14584'
p20177
sg16
I0
sg17
g0
(g18
g5
Ntp20178
Rp20179
(dp20180
g22
g12120
sbsg53
Nsg85
g0
(g809
g5
Ntp20181
Rp20182
(dp20183
g552
(lp20184
g18567
ag0
(g563
g5
Ntp20185
Rp20186
(dp20187
g14
S'auto_14581'
p20188
sg16
I0
sg17
g0
(g18
g5
Ntp20189
Rp20190
(dp20191
g22
(lp20192
(lp20193
(g25
I306
g26
S'nade_train( * args[1:] )'
p20194
tp20195
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20196
tp20197
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20198
tp20199
a(g37
I36
g38
S'self.recompile()'
p20200
tp20201
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20202
tp20203
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20204
tp20205
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p20206
tp20207
aasbsg53
Nsg85
g0
(g809
g5
Ntp20208
Rp20209
(dp20210
g552
(lp20211
g0
(g563
g5
Ntp20212
Rp20213
(dp20214
g14
S'auto_14580'
p20215
sg16
I0
sg17
g0
(g18
g5
Ntp20216
Rp20217
(dp20218
g22
(lp20219
(lp20220
(g25
I306
g26
S'nade_train( * args[1:] )'
p20221
tp20222
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20223
tp20224
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20225
tp20226
a(g37
I36
g38
S'self.recompile()'
p20227
tp20228
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20229
tp20230
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20231
tp20232
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p20233
tp20234
aasbsg53
Nsg85
g0
(g809
g5
Ntp20235
Rp20236
(dp20237
g552
(lp20238
g19528
asg17
g0
(g18
g5
Ntp20239
Rp20240
sg814
(lp20241
g20213
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp20242
Rp20243
(dp20244
g14
S'auto_14342'
p20245
sg16
Nsg17
g0
(g18
g5
Ntp20246
Rp20247
(dp20248
g22
(lp20249
(lp20250
(g25
I306
g26
S'nade_train( * args[1:] )'
p20251
tp20252
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20253
tp20254
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20255
tp20256
a(g37
I36
g38
S'self.recompile()'
p20257
tp20258
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20259
tp20260
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20261
tp20262
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p20263
tp20264
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p20265
tp20266
Rp20267
sbag0
(g3250
g5
Ntp20268
Rp20269
(dp20270
g14
S'auto_14343'
p20271
sg16
Nsg17
g0
(g18
g5
Ntp20272
Rp20273
(dp20274
g22
(lp20275
(lp20276
(g25
I306
g26
S'nade_train( * args[1:] )'
p20277
tp20278
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20279
tp20280
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20281
tp20282
a(g37
I36
g38
S'self.recompile()'
p20283
tp20284
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20285
tp20286
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20287
tp20288
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p20289
tp20290
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p20291
tp20292
Rp20293
sbasg17
g0
(g18
g5
Ntp20294
Rp20295
sg814
(lp20296
g20186
asg1274
g0
(g3357
g5
Ntp20297
Rp20298
(dp20299
g3361
(g11876
(g1465
g1465
Ntp20300
Rp20301
tp20302
sbsbsg73
g0
(g74
g5
Ntp20303
Rp20304
(dp20305
g78
(I00
tp20306
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp20307
Rp20308
(dp20309
g14
S'auto_14583'
p20310
sg16
I0
sg17
g0
(g18
g5
Ntp20311
Rp20312
(dp20313
g22
g16967
sbsg53
Nsg85
g0
(g809
g5
Ntp20314
Rp20315
(dp20316
g552
(lp20317
g0
(g563
g5
Ntp20318
Rp20319
(dp20320
g14
S'auto_14582'
p20321
sg16
I0
sg17
g0
(g18
g5
Ntp20322
Rp20323
(dp20324
g22
g12024
sbsg53
Nsg85
g0
(g809
g5
Ntp20325
Rp20326
(dp20327
g552
(lp20328
g19889
asg17
g0
(g18
g5
Ntp20329
Rp20330
sg814
(lp20331
g20319
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp20332
Rp20333
(dp20334
g14
S'auto_14346'
p20335
sg16
Nsg17
g0
(g18
g5
Ntp20336
Rp20337
(dp20338
g22
(lp20339
(lp20340
(g25
I306
g26
S'nade_train( * args[1:] )'
p20341
tp20342
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20343
tp20344
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20345
tp20346
a(g37
I36
g38
S'self.recompile()'
p20347
tp20348
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20349
tp20350
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20351
tp20352
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p20353
tp20354
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p20355
tp20356
Rp20357
sbag0
(g3250
g5
Ntp20358
Rp20359
(dp20360
g14
S'auto_14347'
p20361
sg16
Nsg17
g0
(g18
g5
Ntp20362
Rp20363
(dp20364
g22
(lp20365
(lp20366
(g25
I306
g26
S'nade_train( * args[1:] )'
p20367
tp20368
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20369
tp20370
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20371
tp20372
a(g37
I36
g38
S'self.recompile()'
p20373
tp20374
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20375
tp20376
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20377
tp20378
a(g874
I219
g875
S'z_sigma = T.tensordot(h, self.V_sigma, [[1], [1]]) + T.shape_padleft(self.b_sigma)'
p20379
tp20380
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p20381
tp20382
Rp20383
sbasg17
g0
(g18
g5
Ntp20384
Rp20385
sg814
(lp20386
g20308
asg1274
g16980
sbsg73
g16986
sbasg17
g0
(g18
g5
Ntp20387
Rp20388
sg814
(lp20389
g20175
asg1274
g7772
sbsg73
g12172
sbasg17
g0
(g18
g5
Ntp20390
Rp20391
sg814
(lp20392
g19479
asg1274
g2672
sbsg73
g2662
sbag0
(g563
g5
Ntp20393
Rp20394
(dp20395
g14
S'auto_14586'
p20396
sg16
I0
sg17
g0
(g18
g5
Ntp20397
Rp20398
(dp20399
g22
g2489
sbsg53
Nsg85
g0
(g809
g5
Ntp20400
Rp20401
(dp20402
g552
(lp20403
g12
asg17
g0
(g18
g5
Ntp20404
Rp20405
sg814
(lp20406
g20394
asg1274
g2525
sbsg73
g2540
sbasg17
g0
(g18
g5
Ntp20407
Rp20408
sg814
(lp20409
g19468
asg1274
g8881
sbsg73
g8970
sbasg17
g0
(g18
g5
Ntp20410
Rp20411
sg814
(lp20412
g19457
asg1274
g377
sbsg73
g8981
sbasg17
g0
(g18
g5
Ntp20413
Rp20414
sg814
(lp20415
g18278
asg1274
g8992
sbsg73
g9004
sbasg17
g0
(g18
g5
Ntp20416
Rp20417
sg814
(lp20418
g18267
asg1274
g9015
sbsg73
g9027
sbasg17
g0
(g18
g5
Ntp20419
Rp20420
sg814
(lp20421
g18220
asg1274
g5036
sbsg73
g9893
sbag0
(g563
g5
Ntp20422
Rp20423
(dp20424
g14
S'auto_14592'
p20425
sg16
I0
sg17
g0
(g18
g5
Ntp20426
Rp20427
(dp20428
g22
g6122
sbsg53
Nsg85
g0
(g809
g5
Ntp20429
Rp20430
(dp20431
g552
(lp20432
g19457
asg17
g0
(g18
g5
Ntp20433
Rp20434
sg814
(lp20435
g20423
asg1274
g6150
sbsg73
g6160
sbasg17
g0
(g18
g5
Ntp20436
Rp20437
sg814
(lp20438
g18209
asg1274
g4101
sbsg73
g9904
sbag0
(g563
g5
Ntp20439
Rp20440
(dp20441
g14
S'auto_14594'
p20442
sg16
I0
sg17
g0
(g18
g5
Ntp20443
Rp20444
(dp20445
g22
g9915
sbsg53
Nsg85
g0
(g809
g5
Ntp20446
Rp20447
(dp20448
g552
(lp20449
g0
(g843
g5
Ntp20450
Rp20451
(dp20452
g14
S'auto_331'
p20453
sg16
Nsg17
g0
(g18
g5
Ntp20454
Rp20455
(dp20456
g22
g9942
sg878
Nsbsg53
Nsg18259
I01
sg73
g9959
sg883
g9965
sbasg17
g0
(g18
g5
Ntp20457
Rp20458
sg814
(lp20459
g20440
asg1274
g9976
sbsg73
g9991
sbasg17
g0
(g18
g5
Ntp20460
Rp20461
sg814
(lp20462
g18198
asg1274
g4101
sbsg73
g10002
sbag0
(g563
g5
Ntp20463
Rp20464
(dp20465
g14
S'auto_14630'
p20466
sg16
I0
sg17
g0
(g18
g5
Ntp20467
Rp20468
(dp20469
g22
g10013
sbsg53
Nsg85
g0
(g809
g5
Ntp20470
Rp20471
(dp20472
g552
(lp20473
g0
(g563
g5
Ntp20474
Rp20475
(dp20476
g14
S'auto_14629'
p20477
sg16
I0
sg17
g0
(g18
g5
Ntp20478
Rp20479
(dp20480
g22
g10041
sbsg53
Nsg85
g0
(g809
g5
Ntp20481
Rp20482
(dp20483
g552
(lp20484
g0
(g563
g5
Ntp20485
Rp20486
(dp20487
g14
S'auto_14626'
p20488
sg16
I0
sg17
g0
(g18
g5
Ntp20489
Rp20490
(dp20491
g22
g10069
sbsg53
Nsg85
g0
(g809
g5
Ntp20492
Rp20493
(dp20494
g552
(lp20495
g0
(g563
g5
Ntp20496
Rp20497
(dp20498
g14
S'auto_14625'
p20499
sg16
I0
sg17
g0
(g18
g5
Ntp20500
Rp20501
(dp20502
g22
g10097
sbsg53
Nsg85
g0
(g809
g5
Ntp20503
Rp20504
(dp20505
g552
(lp20506
g0
(g563
g5
Ntp20507
Rp20508
(dp20509
g14
S'auto_14623'
p20510
sg16
I0
sg17
g0
(g18
g5
Ntp20511
Rp20512
(dp20513
g22
g2028
sbsg53
Nsg85
g0
(g809
g5
Ntp20514
Rp20515
(dp20516
g552
(lp20517
g0
(g563
g5
Ntp20518
Rp20519
(dp20520
g14
S'auto_14617'
p20521
sg16
I0
sg17
g0
(g18
g5
Ntp20522
Rp20523
(dp20524
g22
g13683
sbsg53
Nsg85
g0
(g809
g5
Ntp20525
Rp20526
(dp20527
g552
(lp20528
g0
(g563
g5
Ntp20529
Rp20530
(dp20531
g14
S'auto_14604'
p20532
sg16
I0
sg17
g0
(g18
g5
Ntp20533
Rp20534
(dp20535
g22
(lp20536
(lp20537
(g25
I306
g26
S'nade_train( * args[1:] )'
p20538
tp20539
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20540
tp20541
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20542
tp20543
a(g37
I36
g38
S'self.recompile()'
p20544
tp20545
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20546
tp20547
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20548
tp20549
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p20550
tp20551
aasbsg53
Nsg85
g0
(g809
g5
Ntp20552
Rp20553
(dp20554
g552
(lp20555
g0
(g563
g5
Ntp20556
Rp20557
(dp20558
g14
S'auto_14596'
p20559
sg16
I0
sg17
g0
(g18
g5
Ntp20560
Rp20561
(dp20562
g22
g15068
sbsg53
Nsg85
g0
(g809
g5
Ntp20563
Rp20564
(dp20565
g552
(lp20566
g18371
asg17
g0
(g18
g5
Ntp20567
Rp20568
sg814
(lp20569
g20557
asg1274
g15096
sbsg73
g15112
sbag0
(g563
g5
Ntp20570
Rp20571
(dp20572
g14
S'auto_14603'
p20573
sg16
I0
sg17
g0
(g18
g5
Ntp20574
Rp20575
(dp20576
g22
(lp20577
(lp20578
(g25
I306
g26
S'nade_train( * args[1:] )'
p20579
tp20580
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20581
tp20582
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20583
tp20584
a(g37
I36
g38
S'self.recompile()'
p20585
tp20586
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20587
tp20588
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20589
tp20590
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p20591
tp20592
aasbsg53
Nsg85
g0
(g809
g5
Ntp20593
Rp20594
(dp20595
g552
(lp20596
g0
(g563
g5
Ntp20597
Rp20598
(dp20599
g14
S'auto_14599'
p20600
sg16
I0
sg17
g0
(g18
g5
Ntp20601
Rp20602
(dp20603
g22
(lp20604
(lp20605
(g25
I306
g26
S'nade_train( * args[1:] )'
p20606
tp20607
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20608
tp20609
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20610
tp20611
a(g37
I36
g38
S'self.recompile()'
p20612
tp20613
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20614
tp20615
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20616
tp20617
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p20618
tp20619
aasbsg53
Nsg85
g0
(g809
g5
Ntp20620
Rp20621
(dp20622
g552
(lp20623
g18762
ag0
(g563
g5
Ntp20624
Rp20625
(dp20626
g14
S'auto_14598'
p20627
sg16
I0
sg17
g0
(g18
g5
Ntp20628
Rp20629
(dp20630
g22
(lp20631
(lp20632
(g25
I306
g26
S'nade_train( * args[1:] )'
p20633
tp20634
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20635
tp20636
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20637
tp20638
a(g37
I36
g38
S'self.recompile()'
p20639
tp20640
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20641
tp20642
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20643
tp20644
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p20645
tp20646
aasbsg53
Nsg85
g0
(g809
g5
Ntp20647
Rp20648
(dp20649
g552
(lp20650
g0
(g563
g5
Ntp20651
Rp20652
(dp20653
g14
S'auto_14597'
p20654
sg16
I0
sg17
g0
(g18
g5
Ntp20655
Rp20656
(dp20657
g22
(lp20658
(lp20659
(g25
I306
g26
S'nade_train( * args[1:] )'
p20660
tp20661
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20662
tp20663
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20664
tp20665
a(g37
I36
g38
S'self.recompile()'
p20666
tp20667
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20668
tp20669
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20670
tp20671
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p20672
tp20673
aasbsg53
Nsg85
g0
(g809
g5
Ntp20674
Rp20675
(dp20676
g552
(lp20677
g20557
asg17
g0
(g18
g5
Ntp20678
Rp20679
sg814
(lp20680
g20652
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp20681
Rp20682
(dp20683
g14
S'auto_14209'
p20684
sg16
Nsg17
g0
(g18
g5
Ntp20685
Rp20686
(dp20687
g22
(lp20688
(lp20689
(g25
I306
g26
S'nade_train( * args[1:] )'
p20690
tp20691
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20692
tp20693
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20694
tp20695
a(g37
I36
g38
S'self.recompile()'
p20696
tp20697
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20698
tp20699
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20700
tp20701
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p20702
tp20703
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p20704
tp20705
Rp20706
sbasg17
g0
(g18
g5
Ntp20707
Rp20708
sg814
(lp20709
g20625
asg1274
g0
(g3357
g5
Ntp20710
Rp20711
(dp20712
g3361
(g1465
tp20713
sbsbsg73
g0
(g74
g5
Ntp20714
Rp20715
(dp20716
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp20717
Rp20718
sg814
(lp20719
g20598
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp20720
Rp20721
(dp20722
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp20723
Rp20724
(dp20725
g14
S'auto_14602'
p20726
sg16
I0
sg17
g0
(g18
g5
Ntp20727
Rp20728
(dp20729
g22
(lp20730
(lp20731
(g25
I306
g26
S'nade_train( * args[1:] )'
p20732
tp20733
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20734
tp20735
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20736
tp20737
a(g37
I36
g38
S'self.recompile()'
p20738
tp20739
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20740
tp20741
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20742
tp20743
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p20744
tp20745
aasbsg53
Nsg85
g0
(g809
g5
Ntp20746
Rp20747
(dp20748
g552
(lp20749
g18762
ag0
(g563
g5
Ntp20750
Rp20751
(dp20752
g14
S'auto_14601'
p20753
sg16
I0
sg17
g0
(g18
g5
Ntp20754
Rp20755
(dp20756
g22
(lp20757
(lp20758
(g25
I306
g26
S'nade_train( * args[1:] )'
p20759
tp20760
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20761
tp20762
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20763
tp20764
a(g37
I36
g38
S'self.recompile()'
p20765
tp20766
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20767
tp20768
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20769
tp20770
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p20771
tp20772
aasbsg53
Nsg85
g0
(g809
g5
Ntp20773
Rp20774
(dp20775
g552
(lp20776
g0
(g563
g5
Ntp20777
Rp20778
(dp20779
g14
S'auto_14600'
p20780
sg16
I0
sg17
g0
(g18
g5
Ntp20781
Rp20782
(dp20783
g22
(lp20784
(lp20785
(g25
I306
g26
S'nade_train( * args[1:] )'
p20786
tp20787
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20788
tp20789
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20790
tp20791
a(g37
I36
g38
S'self.recompile()'
p20792
tp20793
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20794
tp20795
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20796
tp20797
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p20798
tp20799
aasbsg53
Nsg85
g0
(g809
g5
Ntp20800
Rp20801
(dp20802
g552
(lp20803
g20557
asg17
g0
(g18
g5
Ntp20804
Rp20805
sg814
(lp20806
g20778
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp20807
Rp20808
(dp20809
g14
S'auto_14195'
p20810
sg16
Nsg17
g0
(g18
g5
Ntp20811
Rp20812
(dp20813
g22
(lp20814
(lp20815
(g25
I306
g26
S'nade_train( * args[1:] )'
p20816
tp20817
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20818
tp20819
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20820
tp20821
a(g37
I36
g38
S'self.recompile()'
p20822
tp20823
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20824
tp20825
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20826
tp20827
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p20828
tp20829
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p20830
tp20831
Rp20832
sbasg17
g0
(g18
g5
Ntp20833
Rp20834
sg814
(lp20835
g20751
asg1274
g0
(g3357
g5
Ntp20836
Rp20837
(dp20838
g3361
(g1465
tp20839
sbsbsg73
g0
(g74
g5
Ntp20840
Rp20841
(dp20842
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp20843
Rp20844
sg814
(lp20845
g20724
asg1274
g5036
sbsg73
g0
(g74
g5
Ntp20846
Rp20847
(dp20848
g78
(tsg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp20849
Rp20850
sg814
(lp20851
g20571
asg1274
g0
(g1308
g5
Ntp20852
Rp20853
(dp20854
g80
S'int64'
p20855
sbsbsg73
g0
(g74
g5
Ntp20856
Rp20857
(dp20858
g78
(I00
tp20859
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp20860
Rp20861
sg814
(lp20862
g20530
asg1274
g0
(g1352
g5
Ntp20863
Rp20864
(dp20865
g1356
I2
sbsbsg73
g0
(g74
g5
Ntp20866
Rp20867
(dp20868
g78
(I00
I00
tp20869
sg80
g251
sg82
g66
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp20870
Rp20871
(dp20872
g14
S'auto_14616'
p20873
sg16
I0
sg17
g0
(g18
g5
Ntp20874
Rp20875
(dp20876
g22
g2096
sbsg53
Nsg85
g0
(g809
g5
Ntp20877
Rp20878
(dp20879
g552
(lp20880
g0
(g563
g5
Ntp20881
Rp20882
(dp20883
g14
S'auto_14605'
p20884
sg16
I0
sg17
g0
(g18
g5
Ntp20885
Rp20886
(dp20887
g22
g2129
sbsg53
Nsg85
g0
(g809
g5
Ntp20888
Rp20889
(dp20890
g552
(lp20891
g90
asg17
g0
(g18
g5
Ntp20892
Rp20893
sg814
(lp20894
g20882
asg1274
g2155
sbsg73
g2146
sbag0
(g563
g5
Ntp20895
Rp20896
(dp20897
g14
S'auto_14615'
p20898
sg16
I0
sg17
g0
(g18
g5
Ntp20899
Rp20900
(dp20901
g22
g1606
sbsg53
Nsg85
g0
(g809
g5
Ntp20902
Rp20903
(dp20904
g552
(lp20905
g0
(g563
g5
Ntp20906
Rp20907
(dp20908
g14
S'auto_14608'
p20909
sg16
I0
sg17
g0
(g18
g5
Ntp20910
Rp20911
(dp20912
g22
g14266
sbsg53
Nsg85
g0
(g809
g5
Ntp20913
Rp20914
(dp20915
g552
(lp20916
g18762
ag0
(g563
g5
Ntp20917
Rp20918
(dp20919
g14
S'auto_14607'
p20920
sg16
I0
sg17
g0
(g18
g5
Ntp20921
Rp20922
(dp20923
g22
g13121
sbsg53
Nsg85
g0
(g809
g5
Ntp20924
Rp20925
(dp20926
g552
(lp20927
g0
(g563
g5
Ntp20928
Rp20929
(dp20930
g14
S'auto_14606'
p20931
sg16
I0
sg17
g0
(g18
g5
Ntp20932
Rp20933
(dp20934
g22
(lp20935
(lp20936
(g25
I306
g26
S'nade_train( * args[1:] )'
p20937
tp20938
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20939
tp20940
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20941
tp20942
a(g37
I36
g38
S'self.recompile()'
p20943
tp20944
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20945
tp20946
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20947
tp20948
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p20949
tp20950
aasbsg53
Nsg85
g0
(g809
g5
Ntp20951
Rp20952
(dp20953
g552
(lp20954
g20882
asg17
g0
(g18
g5
Ntp20955
Rp20956
sg814
(lp20957
g20929
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp20958
Rp20959
(dp20960
g14
S'auto_14202'
p20961
sg16
Nsg17
g0
(g18
g5
Ntp20962
Rp20963
(dp20964
g22
(lp20965
(lp20966
(g25
I306
g26
S'nade_train( * args[1:] )'
p20967
tp20968
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p20969
tp20970
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p20971
tp20972
a(g37
I36
g38
S'self.recompile()'
p20973
tp20974
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p20975
tp20976
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p20977
tp20978
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p20979
tp20980
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p20981
tp20982
Rp20983
sbasg17
g0
(g18
g5
Ntp20984
Rp20985
sg814
(lp20986
g20918
asg1274
g13149
sbsg73
g13153
sbasg17
g0
(g18
g5
Ntp20987
Rp20988
sg814
(lp20989
g20907
asg1274
g5036
sbsg73
g14279
sbag0
(g563
g5
Ntp20990
Rp20991
(dp20992
g14
S'auto_14614'
p20993
sg16
I0
sg17
g0
(g18
g5
Ntp20994
Rp20995
(dp20996
g22
g13544
sbsg53
Nsg85
g0
(g809
g5
Ntp20997
Rp20998
(dp20999
g552
(lp21000
g0
(g563
g5
Ntp21001
Rp21002
(dp21003
g14
S'auto_14611'
p21004
sg16
I0
sg17
g0
(g18
g5
Ntp21005
Rp21006
(dp21007
g22
g13192
sbsg53
Nsg85
g0
(g809
g5
Ntp21008
Rp21009
(dp21010
g552
(lp21011
g18762
ag0
(g563
g5
Ntp21012
Rp21013
(dp21014
g14
S'auto_14610'
p21015
sg16
I0
sg17
g0
(g18
g5
Ntp21016
Rp21017
(dp21018
g22
g12735
sbsg53
Nsg85
g0
(g809
g5
Ntp21019
Rp21020
(dp21021
g552
(lp21022
g0
(g563
g5
Ntp21023
Rp21024
(dp21025
g14
S'auto_14609'
p21026
sg16
I0
sg17
g0
(g18
g5
Ntp21027
Rp21028
(dp21029
g22
(lp21030
(lp21031
(g25
I306
g26
S'nade_train( * args[1:] )'
p21032
tp21033
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p21034
tp21035
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p21036
tp21037
a(g37
I36
g38
S'self.recompile()'
p21038
tp21039
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p21040
tp21041
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p21042
tp21043
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p21044
tp21045
aasbsg53
Nsg85
g0
(g809
g5
Ntp21046
Rp21047
(dp21048
g552
(lp21049
g20882
asg17
g0
(g18
g5
Ntp21050
Rp21051
sg814
(lp21052
g21024
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp21053
Rp21054
(dp21055
g14
S'auto_14216'
p21056
sg16
Nsg17
g0
(g18
g5
Ntp21057
Rp21058
(dp21059
g22
g10307
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p21060
tp21061
Rp21062
sbasg17
g0
(g18
g5
Ntp21063
Rp21064
sg814
(lp21065
g21013
asg1274
g12763
sbsg73
g12767
sbasg17
g0
(g18
g5
Ntp21066
Rp21067
sg814
(lp21068
g21002
asg1274
g5036
sbsg73
g13220
sbag0
(g563
g5
Ntp21069
Rp21070
(dp21071
g14
S'auto_14613'
p21072
sg16
I0
sg17
g0
(g18
g5
Ntp21073
Rp21074
(dp21075
g22
g11614
sbsg53
Nsg85
g0
(g809
g5
Ntp21076
Rp21077
(dp21078
g552
(lp21079
g0
(g563
g5
Ntp21080
Rp21081
(dp21082
g14
S'auto_14612'
p21083
sg16
I0
sg17
g0
(g18
g5
Ntp21084
Rp21085
(dp21086
g22
(lp21087
(lp21088
(g25
I306
g26
S'nade_train( * args[1:] )'
p21089
tp21090
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p21091
tp21092
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p21093
tp21094
a(g37
I36
g38
S'self.recompile()'
p21095
tp21096
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p21097
tp21098
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p21099
tp21100
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p21101
tp21102
aasbsg53
Nsg85
g0
(g809
g5
Ntp21103
Rp21104
(dp21105
g552
(lp21106
g20882
asg17
g0
(g18
g5
Ntp21107
Rp21108
sg814
(lp21109
g21081
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp21110
Rp21111
(dp21112
g14
S'auto_14223'
p21113
sg16
Nsg17
g0
(g18
g5
Ntp21114
Rp21115
(dp21116
g22
g11539
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\xfe\xff\xff\xff\xff\xff\xff\xff'
p21117
tp21118
Rp21119
sbasg17
g0
(g18
g5
Ntp21120
Rp21121
sg814
(lp21122
g21070
asg1274
g11642
sbsg73
g11646
sbasg17
g0
(g18
g5
Ntp21123
Rp21124
sg814
(lp21125
g20991
asg1274
g5036
sbsg73
g13572
sbasg17
g0
(g18
g5
Ntp21126
Rp21127
sg814
(lp21128
g20896
asg1274
g1669
sbsg73
g1673
sbasg17
g0
(g18
g5
Ntp21129
Rp21130
sg814
(lp21131
g20871
asg1274
g2122
sbsg73
g2113
sbasg17
g0
(g18
g5
Ntp21132
Rp21133
sg814
(lp21134
g20519
asg1274
g13244
sbsg73
g13696
sbag0
(g563
g5
Ntp21135
Rp21136
(dp21137
g14
S'auto_14622'
p21138
sg16
I0
sg17
g0
(g18
g5
Ntp21139
Rp21140
(dp21141
g22
g7649
sbsg53
Nsg85
g0
(g809
g5
Ntp21142
Rp21143
(dp21144
g552
(lp21145
g18567
ag0
(g563
g5
Ntp21146
Rp21147
(dp21148
g14
S'auto_14619'
p21149
sg16
I0
sg17
g0
(g18
g5
Ntp21150
Rp21151
(dp21152
g22
(lp21153
(lp21154
(g25
I306
g26
S'nade_train( * args[1:] )'
p21155
tp21156
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p21157
tp21158
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p21159
tp21160
a(g37
I36
g38
S'self.recompile()'
p21161
tp21162
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p21163
tp21164
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p21165
tp21166
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p21167
tp21168
aasbsg53
Nsg85
g0
(g809
g5
Ntp21169
Rp21170
(dp21171
g552
(lp21172
g0
(g563
g5
Ntp21173
Rp21174
(dp21175
g14
S'auto_14618'
p21176
sg16
I0
sg17
g0
(g18
g5
Ntp21177
Rp21178
(dp21179
g22
g17083
sbsg53
Nsg85
g0
(g809
g5
Ntp21180
Rp21181
(dp21182
g552
(lp21183
g20557
asg17
g0
(g18
g5
Ntp21184
Rp21185
sg814
(lp21186
g21174
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp21187
Rp21188
(dp21189
g14
S'auto_14186'
p21190
sg16
Nsg17
g0
(g18
g5
Ntp21191
Rp21192
(dp21193
g22
(lp21194
(lp21195
(g25
I306
g26
S'nade_train( * args[1:] )'
p21196
tp21197
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p21198
tp21199
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p21200
tp21201
a(g37
I36
g38
S'self.recompile()'
p21202
tp21203
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p21204
tp21205
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p21206
tp21207
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p21208
tp21209
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p21210
tp21211
Rp21212
sbag0
(g3250
g5
Ntp21213
Rp21214
(dp21215
g14
S'auto_14187'
p21216
sg16
Nsg17
g0
(g18
g5
Ntp21217
Rp21218
(dp21219
g22
(lp21220
(lp21221
(g25
I306
g26
S'nade_train( * args[1:] )'
p21222
tp21223
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p21224
tp21225
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p21226
tp21227
a(g37
I36
g38
S'self.recompile()'
p21228
tp21229
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p21230
tp21231
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p21232
tp21233
a(g874
I217
g875
S'z_alpha = T.tensordot(h, self.V_alpha, [[1], [1]]) + T.shape_padleft(self.b_alpha)'
p21234
tp21235
aasbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p21236
tp21237
Rp21238
sbasg17
g0
(g18
g5
Ntp21239
Rp21240
sg814
(lp21241
g21147
asg1274
g0
(g3357
g5
Ntp21242
Rp21243
(dp21244
g3361
(g11876
(g1465
g1465
Ntp21245
Rp21246
tp21247
sbsbsg73
g0
(g74
g5
Ntp21248
Rp21249
(dp21250
g78
(I00
tp21251
sg80
g1283
sg82
g1286
sg83
I00
sg53
Nsbsbag0
(g563
g5
Ntp21252
Rp21253
(dp21254
g14
S'auto_14621'
p21255
sg16
I0
sg17
g0
(g18
g5
Ntp21256
Rp21257
(dp21258
g22
g11859
sbsg53
Nsg85
g0
(g809
g5
Ntp21259
Rp21260
(dp21261
g552
(lp21262
g0
(g563
g5
Ntp21263
Rp21264
(dp21265
g14
S'auto_14620'
p21266
sg16
I0
sg17
g0
(g18
g5
Ntp21267
Rp21268
(dp21269
g22
g14228
sbsg53
Nsg85
g0
(g809
g5
Ntp21270
Rp21271
(dp21272
g552
(lp21273
g20882
asg17
g0
(g18
g5
Ntp21274
Rp21275
sg814
(lp21276
g21264
asg1274
g12053
sbsg73
g12055
sbag0
(g3250
g5
Ntp21277
Rp21278
(dp21279
g14
S'auto_14190'
p21280
sg16
Nsg17
g0
(g18
g5
Ntp21281
Rp21282
(dp21283
g22
g11656
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p21284
tp21285
Rp21286
sbag0
(g3250
g5
Ntp21287
Rp21288
(dp21289
g14
S'auto_14191'
p21290
sg16
Nsg17
g0
(g18
g5
Ntp21291
Rp21292
(dp21293
g22
g11683
sbsg53
Nsg73
g1465
sg883
g879
(g1286
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p21294
tp21295
Rp21296
sbasg17
g0
(g18
g5
Ntp21297
Rp21298
sg814
(lp21299
g21253
asg1274
g11872
sbsg73
g11881
sbasg17
g0
(g18
g5
Ntp21300
Rp21301
sg814
(lp21302
g21136
asg1274
g7772
sbsg73
g7776
sbasg17
g0
(g18
g5
Ntp21303
Rp21304
sg814
(lp21305
g20508
asg1274
g2055
sbsg73
g2045
sbag0
(g563
g5
Ntp21306
Rp21307
(dp21308
g14
S'auto_14624'
p21309
sg16
I0
sg17
g0
(g18
g5
Ntp21310
Rp21311
(dp21312
g22
g1741
sbsg53
Nsg85
g0
(g809
g5
Ntp21313
Rp21314
(dp21315
g552
(lp21316
g774
asg17
g0
(g18
g5
Ntp21317
Rp21318
sg814
(lp21319
g21307
asg1274
g1777
sbsg73
g1792
sbasg17
g0
(g18
g5
Ntp21320
Rp21321
sg814
(lp21322
g20497
asg1274
g8881
sbsg73
g10125
sbasg17
g0
(g18
g5
Ntp21323
Rp21324
sg814
(lp21325
g20486
asg1274
g377
sbsg73
g10136
sbag0
(g563
g5
Ntp21326
Rp21327
(dp21328
g14
S'auto_14628'
p21329
sg16
I0
sg17
g0
(g18
g5
Ntp21330
Rp21331
(dp21332
g22
g1823
sbsg53
Nsg85
g0
(g809
g5
Ntp21333
Rp21334
(dp21335
g552
(lp21336
g0
(g563
g5
Ntp21337
Rp21338
(dp21339
g14
S'auto_14627'
p21340
sg16
I0
sg17
g0
(g18
g5
Ntp21341
Rp21342
(dp21343
g22
g1869
sbsg53
Nsg85
g0
(g809
g5
Ntp21344
Rp21345
(dp21346
g552
(lp21347
g20486
asg17
g0
(g18
g5
Ntp21348
Rp21349
sg814
(lp21350
g21338
asg1274
g1895
sbsg73
g1886
sbasg17
g0
(g18
g5
Ntp21351
Rp21352
sg814
(lp21353
g21327
asg1274
g1849
sbsg73
g1840
sbasg17
g0
(g18
g5
Ntp21354
Rp21355
sg814
(lp21356
g20475
asg1274
g8992
sbsg73
g10147
sbasg17
g0
(g18
g5
Ntp21357
Rp21358
sg814
(lp21359
g20464
asg1274
g6150
sbsg73
g10158
sbasg17
g0
(g18
g5
Ntp21360
Rp21361
sg814
(lp21362
g18187
asg1274
g8881
sbsg73
g10169
sbasg17
g0
(g18
g5
Ntp21363
Rp21364
sg814
(lp21365
g18176
ag0
(g563
g5
Ntp21366
Rp21367
(dp21368
g14
S'auto_14633'
p21369
sg16
I1
sg17
g0
(g18
g5
Ntp21370
Rp21371
(dp21372
g22
g10366
sbsg53
g10360
sg85
g18183
sg73
g10385
sbasg1274
g10396
sbsg73
g10400
sbag0
(g563
g5
Ntp21373
Rp21374
(dp21375
g14
S'auto_14638'
p21376
sg16
I0
sg17
g0
(g18
g5
Ntp21377
Rp21378
(dp21379
g22
g14657
sbsg53
Nsg85
g0
(g809
g5
Ntp21380
Rp21381
(dp21382
g552
(lp21383
g0
(g563
g5
Ntp21384
Rp21385
(dp21386
g14
S'auto_14637'
p21387
sg16
I0
sg17
g0
(g18
g5
Ntp21388
Rp21389
(dp21390
g22
g11894
sbsg53
Nsg85
g0
(g809
g5
Ntp21391
Rp21392
(dp21393
g552
(lp21394
g0
(g563
g5
Ntp21395
Rp21396
(dp21397
g14
S'auto_14636'
p21398
sg16
I0
sg17
g0
(g18
g5
Ntp21399
Rp21400
(dp21401
g22
g11441
sbsg53
Nsg85
g0
(g809
g5
Ntp21402
Rp21403
(dp21404
g552
(lp21405
g0
(g563
g5
Ntp21406
Rp21407
(dp21408
g14
S'auto_14635'
p21409
sg16
I0
sg17
g0
(g18
g5
Ntp21410
Rp21411
(dp21412
g22
g15248
sbsg53
Nsg85
g0
(g809
g5
Ntp21413
Rp21414
(dp21415
g552
(lp21416
g18187
ag0
(g563
g5
Ntp21417
Rp21418
(dp21419
g14
S'auto_14634'
p21420
sg16
I0
sg17
g0
(g18
g5
Ntp21421
Rp21422
(dp21423
g22
g4465
sbsg53
Nsg85
g0
(g809
g5
Ntp21424
Rp21425
(dp21426
g552
(lp21427
g18176
asg17
g0
(g18
g5
Ntp21428
Rp21429
sg814
(lp21430
g21418
asg1274
g4495
sbsg73
g4486
sbasg17
g0
(g18
g5
Ntp21431
Rp21432
sg814
(lp21433
g21407
asg1274
g4101
sbsg73
g15278
sbasg17
g0
(g18
g5
Ntp21434
Rp21435
sg814
(lp21436
g21396
asg1274
g377
sbsg73
g11471
sbasg17
g0
(g18
g5
Ntp21437
Rp21438
sg814
(lp21439
g21385
asg1274
g11924
sbsg73
g11928
sbasg17
g0
(g18
g5
Ntp21440
Rp21441
sg814
(lp21442
g21374
asg1274
g6150
sbsg73
g14687
sbasg17
g0
(g18
g5
Ntp21443
Rp21444
sg814
(lp21445
g18165
asg1274
g8881
sbsg73
g15777
sbag0
(g563
g5
Ntp21446
Rp21447
(dp21448
g14
S'auto_14641'
p21449
sg16
I0
sg17
g0
(g18
g5
Ntp21450
Rp21451
(dp21452
g22
g10240
sbsg53
Nsg85
g0
(g809
g5
Ntp21453
Rp21454
(dp21455
g552
(lp21456
g0
(g563
g5
Ntp21457
Rp21458
(dp21459
g14
S'auto_14640'
p21460
sg16
I0
sg17
g0
(g18
g5
Ntp21461
Rp21462
(dp21463
g22
g8715
sbsg53
Nsg85
g0
(g809
g5
Ntp21464
Rp21465
(dp21466
g552
(lp21467
g0
(g843
g5
Ntp21468
Rp21469
(dp21470
g14
S'auto_23'
p21471
sg16
Nsg17
g0
(g18
g5
Ntp21472
Rp21473
(dp21474
g22
g7579
sg878
Nsbsg53
Nsg18259
I01
sg73
g7597
sg883
g7602
sbasg17
g0
(g18
g5
Ntp21475
Rp21476
sg814
(lp21477
g21458
asg1274
g8729
sbsg73
g4542
sbag18473
asg17
g0
(g18
g5
Ntp21478
Rp21479
sg814
(lp21480
g21447
asg1274
g4101
sbsg73
g10268
sbasg17
g0
(g18
g5
Ntp21481
Rp21482
sg814
(lp21483
g18154
asg1274
g5036
sbsg73
g16806
sbasg17
g0
(g18
g5
Ntp21484
Rp21485
sg814
(lp21486
g18143
asg1274
g4753
sbsg73
g4757
sbag0
(g563
g5
Ntp21487
Rp21488
(dp21489
g14
S'auto_14644'
p21490
sg16
I0
sg17
g0
(g18
g5
Ntp21491
Rp21492
(dp21493
g22
(lp21494
(lp21495
(g25
I306
g26
S'nade_train( * args[1:] )'
p21496
tp21497
a(g29
I240
g30
S'nade = nade_class.create_from_smaller_NADE(nade, add_n_hiddens=1)'
p21498
tp21499
a(g33
I48
g34
S'model = cls(n_visible, n_hidden, n_layers + add_n_hiddens, n_components, nonlinearity)'
p21500
tp21501
a(g37
I36
g38
S'self.recompile()'
p21502
tp21503
a(g581
I125
g582
S'logdensity = self.sym_mask_logdensity_estimator(x, m)'
p21504
tp21505
a(g870
I237
g871
S'logdensity, z_alpha, z_mu, z_sigma, Alpha, Mu, Sigma, top_h = self.sym_mask_logdensity_estimator_intermediate(x, mask)'
p21506
tp21507
a(g874
I232
g875
S'logdensity = (log_sum_exp(Phi + T.log(Alpha), axis=2) * output_mask).sum(1) * D / (D - d)'
p21508
tp21509
aasbsg53
Nsg85
g0
(g809
g5
Ntp21510
Rp21511
(dp21512
g552
(lp21513
g0
(g843
g5
Ntp21514
Rp21515
(dp21516
g14
S'auto_14138'
p21517
sg16
Nsg17
g0
(g18
g5
Ntp21518
Rp21519
(dp21520
g22
g11790
sg878
Nsbsg53
Nsg73
g11809
sg883
g11814
sbasg17
g0
(g18
g5
Ntp21521
Rp21522
sg814
(lp21523
g21488
asg1274
g0
(g1387
g5
Ntp21524
Rp21525
(dp21526
g1391
(lp21527
sg1393
(lp21528
sg1395
(lp21529
I0
asg1397
g1398
sg1399
(tsg1401
(lp21530
g1403
asg1404
I01
sg1405
(g270
tp21531
sg1407
(dp21532
S'support_code_apply'
p21533
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p21534
ssg1411
(dp21535
I0
(lp21536
I0
assg1414
(lp21537
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p21538
asbsbsg73
g0
(g74
g5
Ntp21539
Rp21540
(dp21541
g78
(I01
tp21542
sg80
g851
sg82
g66
sg83
I00
sg53
Nsbsbasg17
g0
(g18
g5
Ntp21543
Rp21544
sg814
(lp21545
g18132
asg1274
g5036
sbsg73
g11847
sbag0
(g563
g5
Ntp21546
Rp21547
(dp21548
g14
S'auto_14648'
p21549
sg16
I0
sg17
g0
(g18
g5
Ntp21550
Rp21551
(dp21552
g22
g14029
sbsg53
Nsg85
g0
(g809
g5
Ntp21553
Rp21554
(dp21555
g552
(lp21556
g0
(g563
g5
Ntp21557
Rp21558
(dp21559
g14
S'auto_14646'
p21560
sg16
I0
sg17
g0
(g18
g5
Ntp21561
Rp21562
(dp21563
g22
g11778
sbsg53
Nsg85
g0
(g809
g5
Ntp21564
Rp21565
(dp21566
g552
(lp21567
g21515
asg17
g0
(g18
g5
Ntp21568
Rp21569
sg814
(lp21570
g21558
asg1274
g11825
sbsg73
g848
sbag0
(g563
g5
Ntp21571
Rp21572
(dp21573
g14
S'auto_14647'
p21574
sg16
I0
sg17
g0
(g18
g5
Ntp21575
Rp21576
(dp21577
g22
g4910
sbsg53
Nsg85
g0
(g809
g5
Ntp21578
Rp21579
(dp21580
g552
(lp21581
g18473
asg17
g0
(g18
g5
Ntp21582
Rp21583
sg814
(lp21584
g21572
asg1274
g4936
sbsg73
g4927
sbasg17
g0
(g18
g5
Ntp21585
Rp21586
sg814
(lp21587
g21547
asg1274
g4101
sbsg73
g14057
sbasg17
g0
(g18
g5
Ntp21588
Rp21589
sg814
(lp21590
g18121
asg1274
g8992
sbsg73
g14068
sbsg559
I00
sbasS'expanded_inputs'
p21591
g553
sS'linker'
p21592
g0
(ctheano.gof.vm
VM_Linker
p21593
g5
Ntp21594
Rp21595
(dp21596
S'use_cloop'
p21597
I01
sg551
NsS'lazy'
p21598
NsS'allow_partial_eval'
p21599
Nsg798
g801
sS'c_thunks'
p21600
I01
sS'callback_input'
p21601
NsS'callback'
p21602
NsS'allow_gc'
p21603
I01
sS'no_recycling'
p21604
g5108
((lp21605
g891
ag4762
atp21606
Rp21607
sS'updated_vars'
p21608
(dp21609
sbsS'function_builder'
p21610
ctheano.compile.function_module
Function
p21611
sg53
g7467
sS'on_unused_input'
p21612
NsS'mode'
p21613
g0
(ctheano.compile.mode
Mode
p21614
g5
Ntp21615
Rp21616
(S'cvm'
p21617
g0
(ctheano.gof.optdb
Query
p21618
g5
Ntp21619
Rp21620
(dp21621
g53
S'OPT_FAST_RUN'
p21622
sS'require'
p21623
g0
(g5170
g5
Ntp21624
Rp21625
(dp21626
g5174
g0
(g5175
g5
Ntp21627
Rp21628
(lp21629
g21628
ag21628
absg5179
(dp21630
sbsS'subquery'
p21631
(dp21632
sS'position_cutoff'
p21633
Finf
sS'exclude'
p21634
g0
(g5170
g5
Ntp21635
Rp21636
(dp21637
g5174
g0
(g5175
g5
Ntp21638
Rp21639
(lp21640
g21639
ag21639
absg5179
(dp21641
sbsS'include'
p21642
g0
(g5170
g5
Ntp21643
Rp21644
(dp21645
g5174
g0
(g5175
g5
Ntp21646
Rp21647
(lp21648
g0
(g5175
g5
Ntp21649
Rp21650
(lp21651
g21647
ag21647
aS'fast_run'
p21652
abag21650
absg5179
(dp21653
g21652
g21650
ssbsS'extra_optimizations'
p21654
(lp21655
sbtp21656
bsS'refeed'
p21657
(lp21658
I00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
asS'indices'
p21659
(lp21660
(lp21661
g556
aNa(lp21662
g556
aaa(lp21663
g591
aNa(lp21664
g591
aaa(lp21665
g618
aNa(lp21666
g618
aaa(lp21667
g657
aNa(lp21668
g657
aaa(lp21669
g660
aNa(lp21670
g660
aaa(lp21671
g663
aNa(lp21672
g663
aaa(lp21673
g666
aNa(lp21674
g666
aaa(lp21675
g705
aNa(lp21676
g705
aaa(lp21677
g744
aNa(lp21678
g744
aaa(lp21679
g747
aNa(lp21680
g747
aaa(lp21681
g750
aNa(lp21682
g750
aaa(lp21683
g753
aNa(lp21684
g753
aaa(lp21685
g756
aNa(lp21686
g756
aaasS'return_none'
p21687
I00
sS'accept_inplace'
p21688
I00
sb(lp21689
g0
(g49
g5
Ntp21690
Rp21691
(dp21692
S'provided'
p21693
I0
sg53
g270
sg794
I01
sg54
(lp21694
Nasg560
I00
sg71
I00
sg72
I00
sg73
g586
sg84
I01
sbag0
(g49
g5
Ntp21695
Rp21696
(dp21697
g21693
I0
sg53
g593
sg794
I01
sg54
(lp21698
Nasg560
I00
sg71
I00
sg72
I00
sg73
g614
sg84
I01
sbag0
(g49
g5
Ntp21699
Rp21700
(dp21701
g21693
I0
sg53
g444
sg794
I00
sg54
g623
sg560
I01
sg71
I00
sg72
I00
sg73
g631
sg84
Nsbag0
(g49
g5
Ntp21702
Rp21703
(dp21704
g21693
I0
sg53
g430
sg794
I00
sg54
g497
sg560
I01
sg71
I00
sg72
I00
sg73
g505
sg84
Nsbag0
(g49
g5
Ntp21705
Rp21706
(dp21707
g21693
I0
sg53
g125
sg794
I00
sg54
g150
sg560
I01
sg71
I00
sg72
I00
sg73
g158
sg84
Nsbag0
(g49
g5
Ntp21708
Rp21709
(dp21710
g21693
I0
sg53
g435
sg794
I00
sg54
g533
sg560
I01
sg71
I00
sg72
I00
sg73
g541
sg84
Nsbag0
(g49
g5
Ntp21711
Rp21712
(dp21713
g21693
I0
sg53
g449
sg794
I00
sg54
g671
sg560
I01
sg71
I00
sg72
I00
sg73
g679
sg84
Nsbag0
(g49
g5
Ntp21714
Rp21715
(dp21716
g21693
I0
sg53
g462
sg794
I00
sg54
g710
sg560
I01
sg71
I00
sg72
I00
sg73
g718
sg84
Nsbag0
(g49
g5
Ntp21717
Rp21718
(dp21719
g21693
I0
sg53
g203
sg794
I00
sg54
g228
sg560
I01
sg71
I00
sg72
I00
sg73
g236
sg84
Nsbag0
(g49
g5
Ntp21720
Rp21721
(dp21722
g21693
I0
sg53
g162
sg794
I00
sg54
g187
sg560
I01
sg71
I00
sg72
I00
sg73
g195
sg84
Nsbag0
(g49
g5
Ntp21723
Rp21724
(dp21725
g21693
I0
sg53
g9
sg794
I00
sg54
g55
sg560
I01
sg71
I00
sg72
I00
sg73
g76
sg84
Nsbag0
(g49
g5
Ntp21726
Rp21727
(dp21728
g21693
I0
sg53
g88
sg794
I00
sg54
g113
sg560
I01
sg71
I00
sg72
I00
sg73
g121
sg84
Nsbag0
(g49
g5
Ntp21729
Rp21730
(dp21731
g21693
I0
sg53
g418
sg794
I00
sg54
g761
sg560
I01
sg71
I00
sg72
I00
sg73
g769
sg84
Nsba(lp21732
NaNag626
ag500
ag153
ag536
ag674
ag713
ag231
ag190
ag61
ag116
ag764
aI00
tp21733
Rp21734
sS'parameters_to_optimise'
p21735
(lp21736
g430
ag444
ag125
ag435
ag449
ag462
ag203
ag162
ag9
ag88
ag418
asg449
g684
sg454
I12
sS'theano_rng'
p21737
g0
(ctheano.tensor.shared_randomstreams
RandomStreams
p21738
g5
Ntp21739
Rp21740
(dp21741
S'state_updates'
p21742
(lp21743
sS'gen_seedgen'
p21744
cnumpy.random
__RandomState_ctor
p21745
(tRp21746
(S'MT19937'
p21747
g56
(g57
(I0
tp21748
g59
tp21749
Rp21750
(I1
(I624
tp21751
g63
(S'u4'
p21752
I0
I1
tp21753
Rp21754
(I3
S'<'
p21755
NNNI-1
I-1
I0
tp21756
bI00
S'\xa7c\x1c-\xe4\xaf\x18+\xf6h\x1a6\x11\x0fQ!\xb9\n\x82\x1b\x02<\x1a\xc9k5}q\xd9\xcc\xe1\xf5\n|\xacj`\xd3\xbblON\xe0\x1d6,\x90K\xbf\xe0\x0ba\x03Y\'\xf2\x0e\x1d\'\x07\x95\xf4\\tt\xb2\x9b\xc7\x04\x180(\xa6\x9d\xef\xef,\x7fi\xd0\x9fT\xf8\xfc\xa1\xdd\x84\xd3\x00#u\xf5Fk\x08\xc0Q?\x9dO\xa9\xca\x1b\x0b\xc7e\n\x18\x9e\xa6\x02\xc9\r\xc1\x80\x83\x082\x86d\xab\x8e\xf7\xa3\xcc\xb9\xa2^\x01\x03=\xfc\xebA\xbc\x17\xd9\xc4\xf9\r\xc0\xca\xd1\x1b\xe4\xbd\x85\xcaH\x8b\xb5\x1e\x8e{!t\x92F>q\'\x83[\xf3]\x01E\xc2@\xd8\x86D\xd0\x1a\xb5\x88\x06\xf7\x8b.\x8b\xab\x94\x8d;\xfe2\xe8GD\xb2y\xcee\xc8\xcf\x12\xdf%}\xb1-\xd7\xc1mI7\xf9\x9a\xd6\x1dS\\\x9e\xdb\x04\x82\xb6\xe8\x96\xb7\x80\xfa\x10k\xb7\xb7z\x0b\x17\x89w,q\xb0_\xfc\xbbhA\r\x90\xd7\xba(\xdd\x8cWk2\rE\x11\x9e\x15g\x90\xec\x8dOv\xee\x8e\xfak\xb139zBD9f\x84\xd7h\xe8[\xb3\xc5\xfd\x06a\xa3\xe29\xff&r\xc8\xd9\xe5\xde\x8dGbEP@\x06\x84\x9870`\xd0)\xa2\xf7\xa8\xb1e\\O=\x99e\x9e;\x18)\x8b\x0ch\x19O\x83q\xca\x0c\xcaWj\xaf\x1c\xc1\xc1e\x0f\xa2D\x81\xdd9*dm\x97\x1f\xec\xd9\xe5d#\x19\x93\x97\x8d\xa6|\x88"\x95vh\xf1\x10V\xc9o\xbf\xeb\x0f5\xe0\xbb\x7f\xe33\x0bz\xb8\xb0\xfc\x1d\x89\xc0[m\x14\x1a\xcc\xc8\xed:r\xb0a\xff\xe6\x03W\xef\xfdeS\xfc\xa5\t\x07\x00A\x8f\x0e\xfe9\xd3E\xef\x90\xdedzOe#^\xb1\x0e\x17\xe7\xc6\x8d\r\xddA\xa9DJ\xb7\xe5\x9a\xb9\x13\xc8\xa9a\xf4\x87\xa0\xf2\xf6\x85\xf8;Y\x86\xb0C\xc8\xec\xd1\xce+\x90\x1edD\xaa\xa8\xd2\x91\xber\xf6\xc0\x08j\xcd\xe3\xcf\xb9\x17X\xbf\x8cmpp5\xbc\xfc\xda\xa1\x00i\xe3\x0e\xdb\x94BH\x8aI\xed]\x0fB\x9bZ\xc7jB)YB\xf0"\x17I\x97\xc2j\xd8\xe7\xf8KFBIv:\x8f9\xad6\xf1<\x0e-\x9c\x04\xd2\xbb\xde`\xa6F\x84\x8f\x94\xa3hV\x15\x7f\xf8H\x887d\x82\x99vf\x7f\x1b\x1e\xcc\xd9\xd0\x1b\x0b\x1a\x88\xc2\xb8\x8d\xd8\xab\xf3t^\x08q/\x7f\x90\xf2C\xb7\xe2\xa9\xc7@\rB7\x07\xa7\xd6\x0c*Ej W\xd8\x05\xfb\x96)\x92\xb6\t.4*\x87\xf2N\x17l`\xc7yG\xda\xf1\xee\xb8bN\xb5d\xb3\x9b3\xd5\xb0\xfd<\xe9\xd1\xd7\xfe\x9au\x10\x11a\x98\xbd^\xec\x1f5\x86\x1fj)\xc7\xadXn\xfb;Nr\x9aA\xab\xd8\xde\x97%\xe1\x83\x14S\n\xe8\xca\xdc8]y\xd6\xf3[c\x01\x8cR\r\xc0\x19\x1aY|\'$\xc6\x94I\x10\x87T\x19\xf5\xf7r*\x8b\xa5\xe1\xe0\xd8\xe7\xb7\xde\x83\xb7\xe7\xe6K\x03x\xd9\x91<\xa4\x1e\xbf\xf0\x96\xc4b\x05mre^\xb4\xea\xf5\x96\xb3C-\x80=+\xb7\x9f\\O\xbe.\xbe\x1fJc\xbc0\xc3\xa0\xb8z\xc5@NH\xbd\x99\xd3Y\xd2\x01\x93\xaa\xb1\xc7\x1d\xd6\x12\x8313\xf5\xa4y\x80\x7f\xaa\x11G\xce\xff\xb2\x01O2D\xc9+ \xfd|a\xa6\x7f\x1c\\;\xcd\x07\xf0\x90U+\xe9\xcbj`x`Z\x14h"\x7f\x19N\xd9FI\xa8.\x81i\x89\x85-@h\x17zy\xeb\xcd\xf7\xf71\x98\xdf\x1aJs\xf7\xb4\x9d\xd2\xe5\x0b)\x80\xe6\x01y\xbd\x05?G\x89dQJ\xfb;\xd1\xab Y\xed\x19\x86\x18_\x10C"ZM\xd1\xee\xfd%g\xe4\x17\xec\xf8\x81+b\x1f\xce\xab"\x01\xad\x91\x1e\x9e\x1b\x1a\xa9\xb4\x85^\x8fl.\xfd\xde\x1f\xfd\x1e\xe9\xda,\xbf\x07\xf1\xe0\x16\xaa_B\xfeje\xbcX\x12(\xd7\xd4\xf1\x1e9\x92\xddk%\x89\x8d\x1f$\xfd(\xf0\xcd\'\x1b\xa2\x0cU\x96\x8d\xee\xe1V\xaaGT\'\xd2N~\x02I\x7f\x11\xf4\x9c\xef\x11\xee\x07\xcc\x12\x90\x06\xd8\xae\xf0&\xda;\x8a\xe4x\xdd\x93\xb9?-\x9cc\xbb\x88\xc6*V\x0b\xa6\xde\x1cVf\x00\xb9$T7p\x9a\x00\xdf\xca_\x1e|\xf1O7\xbbV\xca\x90\x97\xd3R\xb1\xc6X\xc5a\x8e8\xc0\x00\xe2J-\x96\xd8\xee/\xdf\x13\xa7\xcb"\x81\xa3XK\x0f])\\\xca\x81\x04aV)\xa2k\x1b\xe0\x94\xa0\xd1\xf4\xa3+\xc6\xdd1\xd7\xe7=g \xf8\x0c\xb6\xe8\x0c>\xe26\x9b\x88u\x87\xba\xf5\xa4\x98OA0\x87\x9a%\x08\x07\xa0z\xa6\x98%\x02\x98\x10\x10,\x13\xe5_\x8f\xd1y\xe2Q-`:\x96\xa9\x1a\xca\xf71\x80\xa7]\x10D\xffW\xd6\xf4\x99[\xf5\xa8\xa5\xed1P\x81\xd0\xdefM\xc0V\xdb\xa0Vy\x199\xf6IX\x7f\xddZp\x83+\xab~q\x8c\xd7j.\xe8\xcf\x9aG\xcd\xa8?\xab\x9a?\x19H \t\xae\xad\x96\x86\x8e\xf6\xca\xa9h.\x07\xde\xbc\xf0\xd3c\xc9\x17\xd9\x13\xd4\xc6bNNm\xc4\x96\x1a"\x9e\x9a\xb1\xb9\xcd\x94\xf3|\xf1\xcb\xea\xc8\x81\x863i\xf1\xb3\x81\xb6\x0f\xda\xf7N\xee\xd9\xea\xb9\x9a\xa4\xdc\x05ZW[\xe7K-\x10\x82\x89\xcb\x8aB Xf\x14\xc6)\x16PA\x0b\'\x8c\x1b\x9bK}\x94\xa2\xb5\x12@\x95\xe5\n\x06\x10R<Z\xfdz.L\xb5b\x0b\x9b}\xe2R*\x9cAS\xfb\x07\xfcO\x95F\x1c\x90\xb6"\x8c\xd7\x9b\xefi\xe7*\x9b\xb3\x86~\x13Gx\xe2\xa2\x9a\xebh\xa2>*y\xa3\xf2\xa4\xe3uZK8\x7fNV^\rg\x80\xb5C\xb18xcB\x08v\x04\xa4v%\xef\xda\xb0qB\xbfq\xe4\x02?\x01\xa7^\xdc4G\xda\xc9b|\xc7\xd7\xfc\xd9\xb5\x05\x95\xe60\xa8\xd3\xa8\x1d\x1f\xe2\x91\x9f\xdf\xb6~\xbb\xc8#\xa1c3\x98B\x11\xb99y\xb8\x94?\x87\xcb8\xc3\xebRp\xe0j*\xbd\xed\\c\xa644|\xa1\x85\x16Z\x13\x88 \xf1\xcd\x80\'\x85:\x9e\xd1O\xceh\x82\xd3\x9a\xdb\xa9\xe8\xee4\xf1+\x07+*l\xd8\xfc\xffA\xcc\x9d\r\x1c`W\xd3\xb3\x84\xc2\xd8\xe9\x8a\x90~\x02\xf7\xb4\xf5\xe0\xfd\x9b\xf5\x0b\xa7\x9e\x16\xd4\xcbI\t"\xe0\xfd*\xe9\xa0\tL\x08\xa5@m\x0e\xef\x11\x02\x08\xd0c\xdb\xda\xf8\x03M\xebb\xbb\xb4r\xb8;\x96\xb6\xb5S\x86\x8b\x050\xb3\x95\x81\xa7W\xedTz4\x0bX1z}\x17\xdb=\xdd*m\x07\xbe/\r\xc2\x1f\xfc\xea\xa7\x00\xfek!\x907\x89\xec\x90\x99\xe5I\xc70\xbbe\xb15^-i\xe9\xbdt\x9d\xbf\xad\xf2\xec(j\x9f}\x85K;\xe9\x90\xa61\x86\xde\xa2\xfc\x13\xf9\xf9\x06\x1aqoZC\x14<\xcd\xdd>J\xad\x99&\t\xe6a\xa6z\xad\xaf\xa1#eG\xe9V\xccvm\xfb11W\x00\x0c\xf9\xa0"\xf9GN\xa5\xb1\xdf\xcf\xfd\xccs\xbfc3\x07\x15\xf4g\x07\x83\xb6\xbd\xa3_B6\xfa\xf7\xd2N\xb3*\xce\xab\x82\x92\x06\xf4\x93\xd7\x858\xae\xb90\xd6\xf1\xd7Q\xa4\x90?\x80\x0c\x82%\x8d\r\xfd_P\xc0\xea\xce\x06\xab=\xcb\xc1\xa6\x91\xe8\xf2\xa2\xb6nQ\xa8\xbc\x02K\xf3\x14NI\xc8\xcd\x1fW\x16\x9cB\xff\xcawa\xb5\x97\xe6\x11\xea\xf1\x17\x9e/\xce\xa3\x13\xee\x96E\xe9\xd5i\x95m\x16L&q\x89t&\x85\xd8\x13\xc2\xdf\xb7_\xb4\xa4\x9f\x8c\x94c\x1b3+\x7f$\xfb\x90\x94\x8a\xf7\xc8J4\xe7\xe1&5\xe3\xf5J\xf5}\x10(\x8f\xf3L\xfcq\xd0\xf9\xd3\'w\xa7Z\xee\xbe\xe9\x11\x0f\xf9#M\xee\x88\xd7\x182\x95\xdc\xca\xe05\xa0\xc6C\xea$\x9b\x7f\xe49\x17q"T\xac\x9a\xca+\x8f\xa1\x1f\xd0\x80\x88\xfe\x19\xc0\x90\x02\xb8,\x98F\xd9\xa7\x07\x8fDn\xd6\x81|\xf9\x86\x86\x95\xde6ID\x06\xcf\xc5\xe4z\xfa\xf4\x05\x1e\xe9\x82\xa6\x99;-bvG\xf9*\x9f2\xc0\x13\xbeD\x91\x9c\x17Mx\xd9WX\x99P\xde\xdb\x91D\x9a\xf6\xe1\xee\xde\xcbJ7\xddE\x89\xd6\xa4d\xf4\xf7\x06\xbe\xa5\x98\xddd\xa2\xb2\xd9\x98\x13+\'\xac\x93\x1ff\xff\xc1\xffF,\xd2`\xdfX\xde\x04\x1fQ(\x8ab\xb6\xda\x043ob\xf1\xcfO\xd9s\x8ec:Y\xc0\xa7\xb9\xe2\x98\x9c\xab\\2\xb80I\x1c#\xfc0\xc5\x03BT\x07[ $\xda!\x1e5V\x14(\xeba\x9biU\xdd\x197\x8d\xd1\xf9}A\x9a\x87/\xab\xa6\xd3\xf5O\xaaH\xafig\xe9.v\xffK\x8a\xce\xde\xdc\'Q\'\x02\xedfg"T\xb0\xec\xb9\xe2\xad/\xeb\xef\xb5\xef\x0f:yq\x84Yi\xfeA\xec\xe4\x1b\x164\x07\x07\xe2Tr\xfd\x18,\x0f\x02\x9c\xcb\xd2<\xf9\xef\x8c\xd9\x97\xe4\x83^?\xba\xfeS\x1af\xb5\x9cO?\x84\xb28:0\x14\x83\xe1<E\xeb/\xcan\x83\x04\xd1\xd1\xaa]0\x19]\xdb@>\x9c\x92,\xe4\xc3\x00\x7f\x93\x98\xef\x10\x8e\x83\x86?\xb1l\xf3\xd2\n_]f2\x0f\x03fz\xc1\xbf\x9d\xcf\x90\xba\xe5\x02\x97\xdb\xe9<k\x8f\xe3\xcdU\xc7\x8d\x1b\'\xb1\x99h\x16\xe7\xf1\xb0\x07\xfe\xaaSXE\xa8\x87L\x0ezob.UG\xd4~X\x1a8\x07\xed~\xa3\xb7\x81\xfd\xf7>\x1c\x0f\x08\xe9s\x90\x1e\xbe\xcewr\xfc\x1b\xfb\xe0\x9d\x18t\xd2\x19\xb4\xa7\xd0\x1cA\x80\xfd\x8d\xadw|t\x1bE\xdaf\x82/\xce>\x8bRSC\xb4l\xd1\xa0\x11L\xc7F\x94\x94\xc5h\x0e^\x8a\xfeg\x12G\x87 Q\xa5\x84\xb26\x92]\xe8a\xda,\xd2\xca\xe5\x1d%i\xf1\xe8J\xd4\x8d\x00\x7f]\x96$i\xdc\xd4\t\xbc(\xce\x1d|\xb0F\x83\x07\x12\xc9\x9aK\xcb\x1bF\x85\xd0\xc7Oh\xea\x07\xcc\x8c\xc1\x7fH\xf7\xd3\xd6\xbf\x00\xbf\xe2\xce\x87\xf9\xc2t7*\x1f\xc3\xde|M\xc0\x8c\x8ao\xfc\xc73\x11g{e\xe8\xd0\xb6BE0-\xba\x00\xb7\xeb\x9d5\x82N\x00\x08\xae^\xccd\x03y\xf1\xb4\x86\xeb\x1a\xfbx\xb7\xda\xde\x90\xcf(\xea\xc1\xe3F\xcb\xfe\xc8\xd8@\xbf\x1b\xa4\x1fN\xac\xaa\x036Gd|\x80\xa5~\x9f\x1c\x86F6\xb8\x82x\xc2V\x1e\xa9\xcc\xdc'
p21757
tp21758
bI624
I0
F0.0
tp21759
bsS'default_instance_seed'
p21760
I756835239
sbsS'parameters_to_regularise'
p21761
(lp21762
g430
ag444
ag435
asg462
g723
sg256
g312
sg418
g774
sg440
I2
sg444
g636
sb.